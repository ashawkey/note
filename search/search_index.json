{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>kiui's notebook.</p>"},{"location":"#recent-updates","title":"Recent Updates","text":"<ul> <li>home.md 2025-08-08 13:03:49.885815</li> <li>react-basics.md 2025-07-29 14:58:25.710443</li> <li>git_tricks.md 2025-07-28 10:07:23.036258</li> <li>basics.md 2025-07-19 19:27:38.643873</li> <li>disk.md 2025-07-19 17:32:05.058830</li> <li>ubuntu_install_list.md 2025-07-19 17:28:22.086388</li> <li>cute.md 2025-07-11 20:29:56.078456</li> <li>git_lfs.md 2025-06-01 11:21:05.578758</li> <li>thread_safety.md 2025-05-19 13:40:25.208493</li> <li>basics.md 2025-05-19 12:35:28.658442</li> <li>theory.md 2025-05-18 10:27:09.275470</li> <li>image_processing.md 2025-05-18 10:01:03.626066</li> <li>transformation.md 2025-05-18 10:01:03.626066</li> <li>camera_combined.md 2025-05-18 10:01:03.625068</li> <li>camera_intrinsics_exintrics.md 2025-05-18 10:01:03.625068</li> <li>camera_view_projection.md 2025-05-18 10:01:03.625068</li> <li>nerf_gradient.md 2025-05-18 10:01:03.624071</li> <li>recommenders.md 2025-05-18 10:01:03.624071</li> <li>quaternion.md 2025-05-18 10:01:03.623073</li> <li>chebnet_understanding.md 2025-05-18 10:01:03.623073</li> </ul>"},{"location":"algorithm/advanced/Trie%E5%9B%BE/","title":"Trie Graph","text":"<ul> <li> <p>\u591a\u6a21\u5f0f\u5339\u914d</p> <p>KMP\u7684\u62d3\u5c55\u3002</p> </li> </ul> <ul> <li> <p>Trie\u6811/\u5b57\u5178\u6811</p> <p>\u6307\u9488\u5904\u4e8e\u67d0\u4e2a\u8282\u70b9\uff0c\u4ee3\u8868\u5177\u6709\u8be5\u524d\u7f00\u7684\u6240\u6709\u5b50\u4e32\u90fd\u5339\u914d\u4e86\u3002</p> </li> </ul> <ul> <li> <p>Trie\u56fe/DFA/AC\u81ea\u52a8\u673a</p> <p>\u5728Trie\u6811\u4e4b\u4e0a\u6dfb\u52a0\u524d\u7f00\u6307\u9488\u4f7f\u5176\u6210\u4e3a\u56fe\u3002\u7c7b\u4f3c\u4e8eNext\u6570\u7ec4\u3002</p> <p>\u5efa\u56fe\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(\\sum len(s))\\)</p> </li> </ul> <ul> <li> <p>\u5339\u914d\u65b9\u6cd5</p> <ul> <li>\u5371\u9669\u8282\u70b9\uff1a\u7ec8\u6b62\u8282\u70b9&amp;\u524d\u7f00\u6307\u9488\u6307\u5411\u7ec8\u6b62\u8282\u70b9\u7684\u8282\u70b9</li> </ul> <ul> <li> <p>\u6839\u636e\u6bcd\u4e32\u79fb\u52a8\u6307\u9488\uff0c\u5931\u914d\u65f6\u6cbf\u7740\u524d\u7f00\u6307\u9488\u56de\u6eaf\u3002</p> <p>\u7ecf\u8fc7\u5371\u9669\u8282\u70b9\u65f6\u610f\u5473\u7740\u6709\u4e00\u4e2a\u5b50\u4e32\u5df2\u7ecf\u5339\u914d\u4e86\uff0c\u9700\u8981\u5bf9\u5176\u6807\u8bb0\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(len(S))\\), S\u4e3a\u6bcd\u4e32\u3002</p> </li> </ul> </li> </ul> <ul> <li> <p>\u4f8b\u9898</p> <ul> <li> <p>prototype</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nconst int letters = 26;\n\nstruct node {\n    bool bad;\n    node* pre;  // prefix pointer\n    node* child[letters];\n    node() {\n        memset(child, 0, sizeof(child));\n        pre = NULL;\n        bad = false;\n    }\n};\n\nvoid insert(node* rt, string s) {\n    int len = s.length();\n    for (int i = 0; i &lt; len; i++) {\n        int idx = s[i] - 'a';\n        if (rt-&gt;child[idx] == NULL) rt-&gt;child[idx] = new node();\n        rt = rt-&gt;child[idx];\n    }\n    rt-&gt;bad = true;\n}\n\nvoid buildDFA(node* rt) {\n    node* rrt = new node();\n    rt-&gt;pre = rrt;\n    for (int i = 0; i &lt; letters; i++) rrt-&gt;child[i] = rt;\n    queue&lt;node*&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        node* p = q.front(); q.pop();\n        for (int i = 0; i &lt; letters; i++) {\n            node* pc = p-&gt;child[i];\n            if (pc) {\n                node* ppre = p-&gt;pre;\n                while (ppre-&gt;child[i] == NULL) ppre = ppre-&gt;pre;\n                pc-&gt;pre = ppre-&gt;child[i];\n                if (pc-&gt;pre-&gt;bad) pc-&gt;bad = true;\n                q.push(pc);\n            }\n        }\n    }\n}\n\nbool match(node* rt, string s) {\n    int len = s.length();\n    node* p = rt;\n    for (int i = 0; i &lt; len; i++) {\n        int idx = s[i] - 'a';\n        while (p != rt &amp;&amp; p-&gt;child[idx] == NULL) p = p-&gt;pre;\n        if (p-&gt;child[idx]) {\n            p = p-&gt;child[idx];\n            if (p-&gt;bad) return true;\n        }\n        else continue;\n    }\n    return false;\n}\n\nint N, M;\nstring s;\n\nint main() {\n    cin &gt;&gt; N;\n    node* root = new node();\n    for (int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; s;\n        insert(root, s);\n    }\n    buildDFA(root);\n    cin &gt;&gt; M;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; s;\n        cout &lt;&lt; (match(root, s) ? \"YES\" : \"NO\") &lt;&lt; endl;\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Inevitable Virus</p> <p>\u8fd8\u662f\u9884\u5904\u7406\u518d\u5224\u65ad\u73af\u597d\u5199\u554a\uff0cwaste 2h.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;set&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nconst int letters = 2;\nconst char stt = '0';\n\nstruct node {\n    bool bad;\n    node* pre;  // prefix pointer\n    node* child[letters];\n    vector&lt;node*&gt; c;\n    node() {\n        memset(child, 0, sizeof(child));\n        pre = NULL;\n        bad = false;\n    }\n    bool full() { return child[0] != NULL &amp;&amp; child[1] != NULL; }\n};\n\nvoid insert(node* rt, string s) {\n    int len = s.length();\n    for (int i = 0; i &lt; len; i++) {\n        int idx = s[i] - stt;\n        if (rt-&gt;child[idx] == NULL) rt-&gt;child[idx] = new node();\n        rt = rt-&gt;child[idx];\n    }\n    rt-&gt;bad = true;\n}\n\nvoid buildDFA(node* rt) {\n    node* rrt = new node();\n    rt-&gt;pre = rrt;\n    for (int i = 0; i &lt; letters; i++) rrt-&gt;child[i] = rt;\n    queue&lt;node*&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        node* p = q.front(); q.pop();\n        for (int i = 0; i &lt; letters; i++) {\n            node* pc = p-&gt;child[i];\n            if (pc) {\n                node* ppre = p-&gt;pre;\n                while (ppre-&gt;child[i] == NULL) ppre = ppre-&gt;pre;\n                pc-&gt;pre = ppre-&gt;child[i];\n                if (pc-&gt;pre-&gt;bad) pc-&gt;bad = true;\n                q.push(pc);\n            }\n        }\n    }\n}\n\n// **** the pre pointer!\nvoid preprocess(node* rt) {\n    for (int i = 0; i &lt; letters; i++) {\n        if (rt-&gt;child[i]) {\n            if (rt-&gt;child[i]-&gt;bad) continue;\n            rt-&gt;c.push_back(rt-&gt;child[i]);\n            preprocess(rt-&gt;child[i]);\n        }\n        else {\n            node* tmp = rt;\n            while (tmp-&gt;pre &amp;&amp; !tmp-&gt;pre-&gt;bad &amp;&amp; tmp-&gt;child[i] == NULL) tmp = tmp-&gt;pre;\n            rt-&gt;c.push_back(tmp-&gt;child[i]);\n        }\n    }\n}\n\n// simple cycle detection for a directed graph\nset&lt;node*&gt; vis;\nbool isloop(node* rt) {\n    vis.insert(rt);\n    int len = rt-&gt;c.size();\n    for (int i = 0; i &lt; len; i++) {\n        node* p = rt-&gt;c[i];\n        if (vis.count(p)) return true;\n        else if (isloop(p)) return true;\n    }\n    vis.erase(rt);\n    return false;\n}\n\nint N;\nstring s;\n\nint main() {\n    cin.sync_with_stdio(false);\n    cin &gt;&gt; N;\n    node* root = new node();\n    for (int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; s;\n        insert(root, s);\n    }\n    buildDFA(root);\n    preprocess(root);\n    vis.clear();\n    bool flag = isloop(root);\n    cout &lt;&lt; (flag ? \"TAK\" : \"NIE\") &lt;&lt; endl;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Computer Virus on Planet Pandora</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nconst int letters = 26;\nconst char stt = 'A';\n\nstruct node {\n    bool bad, reallybad, used;\n    node* pre;  // prefix pointer\n    node* child[letters];\n    node() {\n        memset(child, 0, sizeof(child));\n        pre = NULL;\n        bad = false;\n        reallybad = false;\n        used = false;\n    }\n};\n\nvoid insert(node* rt, string s) {\n    int len = s.length();\n    for (int i = 0; i &lt; len; i++) {\n        int idx = s[i] - stt;\n        if (rt-&gt;child[idx] == NULL) rt-&gt;child[idx] = new node();\n        rt = rt-&gt;child[idx];\n    }\n    rt-&gt;bad = true;\n    rt-&gt;reallybad = true;\n}\n\nvoid buildDFA(node* rt) {\n    node* rrt = new node();\n    rt-&gt;pre = rrt;\n    for (int i = 0; i &lt; letters; i++) rrt-&gt;child[i] = rt;\n    queue&lt;node*&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        node* p = q.front(); q.pop();\n        for (int i = 0; i &lt; letters; i++) {\n            node* pc = p-&gt;child[i];\n            if (pc) {\n                node* ppre = p-&gt;pre;\n                while (ppre-&gt;child[i] == NULL) ppre = ppre-&gt;pre;\n                pc-&gt;pre = ppre-&gt;child[i];\n                if (pc-&gt;pre-&gt;bad) pc-&gt;bad = true;\n                q.push(pc);\n            }\n        }\n    }\n}\n\nint count(node* rt, string&amp; s) {\n    int cnt = 0;\n    int len = s.length();\n    node* p = rt;\n    for (int i = 0; i &lt; len; i++) {\n        int idx = s[i] - stt;\n        while (p != rt &amp;&amp; p-&gt;child[idx] == NULL) p = p-&gt;pre;\n        if (p-&gt;child[idx]) {\n            p = p-&gt;child[idx];\n            node* pp = p;\n            if (pp-&gt;bad) {\n                while (pp != rt &amp;&amp; !pp-&gt;used) {\n                    pp-&gt;used = true;\n                    if (pp-&gt;reallybad) cnt++;\n                    pp = pp-&gt;pre;\n                }\n            }\n        }\n    }\n    return cnt;\n}\n\nvoid del(node* rt) {\n    for (int i = 0; i &lt; letters; i++)\n        if (rt-&gt;child[i]) del(rt-&gt;child[i]);\n    delete rt;\n}\n\nint T, N, M;\nstring s, t;\n\nvoid decompress(string&amp; s, string&amp; t) {\n    int len = s.length();\n    t.clear();\n    for (int i = 0; i &lt; len; i++) {\n        if (isalpha(s[i])) t += s[i];\n        else if (s[i] == '[') {\n            int num = 0;\n            for (int j = i + 1; j &lt; len; j++) {\n                if (isdigit(s[j])) {\n                    num *= 10;\n                    num += s[j] - '0';\n                }\n                else if (s[j] == ']') {\n                    i = j;\n                    break;\n                }\n            }\n            char c = s[i - 1];\n            for (int i = 0; i &lt; num; i++) {\n                t += c;\n            }\n        }\n    }\n}\n\n\nint main() {\n    cin.sync_with_stdio(false); // !!!\n    cin &gt;&gt; T;\n    while (T--) {\n        cin &gt;&gt; N;\n        node* root = new node();\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; s;\n            insert(root, s);\n        }\n        buildDFA(root);\n        cin &gt;&gt; s;\n        decompress(s, t);\n        int ans = 0;\n        ans += count(root, t);\n        reverse(t.begin(), t.end());\n        ans += count(root, t);\n        cout &lt;&lt; ans &lt;&lt; endl;\n        del(root);\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>DNA repair</p> <p>\u95ee\u9898\u5341\u5206\u7ecf\u5178\u3002\u52a8\u5f52\u601d\u60f3\uff01</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;set&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nconst int maxc = 4;\nconst int maxl = 1005;\nmap&lt;char, int&gt; dict{ {'A',0},{'T',1},{'G',2},{'C', 3} };\nint dp[maxl][maxl];\nconst int inf = 0x3fffffff;\nstring s;\nint N, res, cnt;\n\n// array proto, very trivial...\nstruct node {\n    bool bad;\n    int cs[maxc];\n    int pre;\n    node() {\n        memset(cs, -1, sizeof(cs));\n        pre = -1;\n        bad = false;\n    }\n} tr[maxl];\n\nvoid insert(int rt, string&amp; s) {\n    int len = s.length();\n    int cur = rt;\n    for (int i = 0; i &lt; len; i++) {\n        if (tr[cur].cs[dict[s[i]]] == -1)\n            tr[cur].cs[dict[s[i]]] = cnt++;\n        cur = tr[cur].cs[dict[s[i]]];\n    }\n    tr[cur].bad = true;\n}\n\nvoid build(int rt) {\n    tr[rt].pre = 0;\n    for (int i = 0; i &lt; maxc; i++) tr[0].cs[i] = rt;\n    queue&lt;int&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        int p = q.front(); q.pop();\n        for (int i = 0; i &lt; maxc; i++) {\n            if (tr[p].cs[i] != -1) {\n                int c = tr[p].cs[i];\n                int ppre = tr[p].pre;\n                while (tr[ppre].cs[i] == -1) ppre = tr[ppre].pre;\n                tr[c].pre = tr[ppre].cs[i];\n                if (tr[tr[c].pre].bad) tr[c].bad = true;  // don't forget\n                q.push(tr[p].cs[i]);\n            }\n        }\n    }\n}\n\nvoid solve(int cnt) {\n    for (int i = 0; i &lt; maxl; i++) {\n        for (int j = 0; j &lt; maxl; j++) {\n            dp[i][j] = inf;\n        }\n    }\n    dp[0][1] = 0; // len i, final node j (id starts from 1)\n    int len = s.length();\n    for (int i = 1; i &lt;= len; i++) {  // use s[i-1], i is length.\n        for (int j = 1; j &lt; cnt; j++) {\n            //cout &lt;&lt; \"solve\" &lt;&lt; i &lt;&lt; \" \" &lt;&lt; j &lt;&lt; endl;\n            if (dp[i - 1][j] == inf) continue;  // not necessary, deletion  makes 75ms -&gt; 390ms.\n            for (int k = 0; k &lt; maxc; k++) {\n                int tmp = j;\n                while (tr[tmp].cs[k] == -1) tmp = tr[tmp].pre;\n                if (tr[tr[tmp].cs[k]].bad) continue; // bad node\n                // DP: min of self or move from parent (+1 is changed char)\n                dp[i][tr[tmp].cs[k]] = min(dp[i][tr[tmp].cs[k]], dp[i - 1][j] + (dict[s[i - 1]] != k));\n                //cout &lt;&lt; \"dp \" &lt;&lt; i &lt;&lt; \",\" &lt;&lt; tr[tmp].cs[k] &lt;&lt; \"  = \" &lt;&lt; dp[i][tr[tmp].cs[k]] &lt;&lt; endl;\n            }\n        }\n    }\n\n}\n\nint main() {\n    int cas = 0;\n    while (cin &gt;&gt; N) {\n        if (N == 0) break;\n        // clear\n        for (int i = 0; i &lt; cnt; i++) tr[i] = node();\n        cnt = 1;\n        int root = cnt++;\n        // init\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; s;\n            insert(root, s);\n        }\n        build(root);\n\n        cin &gt;&gt; s;\n        solve(cnt);\n\n        int len = s.size();\n        res = inf;\n        for (int i = 1; i &lt; cnt; i++) {\n            if (!tr[i].bad) res = min(res, dp[len][i]);\n        }\n        cout &lt;&lt; \"Case \" &lt;&lt; ++cas &lt;&lt; \": \" &lt;&lt; (res == inf ? -1 : res) &lt;&lt; endl;\n    }\n}\n</code></pre> </li> </ul> <ul> <li>Censored\uff01</li> </ul> </li> </ul>"},{"location":"algorithm/advanced/final_exam_prep/","title":"Final exam prep","text":""},{"location":"algorithm/advanced/final_exam_prep/#dj-set","title":"DJ set","text":""},{"location":"algorithm/advanced/final_exam_prep/#food-chain","title":"food chain","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int maxn = 50005;\nconst int inf = 0x3f3f3f3f;\n\nint N, K;\nint p[maxn], w[maxn];\n\nvoid init(int N) {\n    for (int i = 0; i &lt;= N; i++) {\n        p[i] = i;\n        w[i] = 0;\n    }\n}\n\nint par(int x) {\n    if (p[x] == x) return x;\n    int fx = p[x];\n    p[x] = par(fx);\n    w[x] = (w[x] + w[fx]) % 3;\n    return p[x];\n}\n\nvoid merge(int x, int y, int d) {\n    int fx = par(x);\n    int fy = par(y);\n    p[fx] = fy;\n    w[fx] = (d - 1 + w[y] - w[x] + 3) % 3;\n}\n\nint ans, d, x, y;\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; K;\n    init(N);\n    ans = 0;\n    for (int i = 0; i &lt; K; i++) {\n        cin &gt;&gt; d &gt;&gt; x &gt;&gt; y;\n        if (x &gt; N || y &gt; N) {\n            ans++;\n            continue;\n        }\n        if (par(x) != par(y)) merge(x, y, d);\n        else {\n            if (d == 1) {\n                if (w[x] == w[y]) continue;\n                else ans++;\n            }\n            else {\n                if ((w[x] - w[y] + 3) % 3 == 1) continue;\n                else ans++;\n            }\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n};\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#cube-stacking","title":"cube stacking","text":"<pre><code>#define  _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n#include &lt;queue&gt;\n#include &lt;bitset&gt;\nusing namespace std;\n\nconst int maxn = 30005;\n\nint N, M;\nint p[maxn], sum[maxn], under[maxn];\n\nvoid init(int N) {\n    for (int i = 1; i &lt;= N; i++) {\n        p[i] = i;\n        sum[i] = 1;\n        under[i] = 0;\n    }\n}\n\nint par(int x) {\n    if (p[x] == x) return x;\n    int f = p[x];\n    p[x] = par(f);\n    under[x] += under[f];\n    return p[x];\n}\n\nvoid merge(int x, int y) {\n    int fx = par(x);\n    int fy = par(y);\n    p[fy] = fx;\n    under[fy] = sum[fx];\n    sum[fx] += sum[fy];\n}\n\nchar c;\nint x, y;\n\nint main() {\n    init(maxn);\n    cin &gt;&gt; M;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; c;\n        if (c == 'C') {\n            cin &gt;&gt; x;\n            par(x);\n            cout &lt;&lt; under[x] &lt;&lt; endl;\n        }\n        else {\n            cin &gt;&gt; x &gt;&gt; y;\n            merge(y, x);\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#the-suspects","title":"the suspects","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int maxn = 30005;\nconst int inf = 0x3f3f3f3f;\n\nint N, M;\nint p[maxn];\n\nvoid init(int N) {\n    for (int i = 0; i &lt; N; i++) {\n        p[i] = i;\n    }\n}\n\nint par(int x) {\n    if (p[x] == x) return x;\n    int fx = p[x];\n    p[x] = par(fx);\n    return p[x];\n}\n\nvoid merge(int x, int y) {\n    int fx = par(x);\n    int fy = par(y);\n    p[fx] = fy;\n}\n\nint ans, x, y, z;\n\nint main() {\n    while (cin &gt;&gt; N &gt;&gt; M &amp;&amp; N) {\n        init(N);\n        for(int i = 0; i &lt; M; i++) {\n            cin &gt;&gt; x &gt;&gt; y;\n            for (int i = 1; i &lt; x; i++) {\n                cin &gt;&gt; z;\n                if (par(y) != par(z)) merge(y, z);\n            }\n        }\n        ans = 0;\n        int tmp = par(0);\n        for (int i = 0; i &lt; N; i++) {\n            if (par(i) == tmp) ans++;\n        }\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#bit","title":"BIT","text":""},{"location":"algorithm/advanced/final_exam_prep/#apple-tree","title":"apple tree","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int maxn = 100005;\nint N;\n\nint arr[maxn], bit[maxn], in[maxn], out[maxn];\nvector&lt;int&gt; G[maxn];\n\nint lowbit(int x) { return x &amp; (-x); }\n\nvoid add(int i, int x) {\n    arr[i] += x;\n    for (i; i &lt;= N; i+=lowbit(i)) bit[i] += x;\n}\n\nint query(int i) {\n    int ans = 0;\n    for (i; i &gt; 0; i -= lowbit(i)) ans += bit[i];\n    return ans;\n}\n\nint t;\nvoid dfs(int x) {\n    in[x] = t++;\n    for (int i = 0; i &lt; G[x].size(); i++) dfs(G[x][i]);\n    out[x] = t;\n}\n\nint M, x, y;\nchar c;\n\nint main() {\n    cin &gt;&gt; N;\n    memset(arr, 0, sizeof(arr));\n    memset(bit, 0, sizeof(bit));\n    for (int i = 1; i &lt;= N; i++) add(i, 1);\n    for (int i = 1; i &lt; N; i++) {\n        cin &gt;&gt; x &gt;&gt; y;\n        G[x].push_back(y);\n    }\n    t = 0;\n    dfs(1);\n    cin &gt;&gt; M;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; c &gt;&gt; x;\n        if (c == 'Q') cout &lt;&lt; query(out[x]) - query(in[x]) &lt;&lt; endl;\n        else {\n            int p = in[x] + 1;\n            add(p, (arr[p] ? -1 : 1));\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#lisnlgn-bsdp","title":"LIS<code>(NlgN BS+DP)</code>","text":"<pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nconst int maxn = 300005;\nconst int inf = 0x7fffffff;\nint N;\nint arr[maxn], dp[maxn];\n\nint main() {\n    scanf(\"%d\", &amp;N);\n    for (int i = 0; i &lt; N; i++) scanf(\"%d\", arr + i);\n    for (int i = 0; i &lt; N; i++) dp[i] = inf;\n    int ans = 0;\n    for (int i = 0; i &lt; N; i++) {\n        int idx = lower_bound(dp, dp + N, arr[i]) - dp;\n        dp[idx] = arr[i];\n        if (idx == ans) ans++;\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#segment-tree","title":"Segment Tree","text":""},{"location":"algorithm/advanced/final_exam_prep/#balanced-lineup","title":"Balanced Lineup","text":"<p>\u9759\u6001\u6c42\u533a\u95f4\u6700\u503c\u3002</p> <p>\u5361<code>cin</code>\u5c31\u7b97\u4e86\uff0c\u6ca1\u60f3\u5230\u8fd9\u4e2a\u9898<code>cout</code>\u90fd\u5361\u3002</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#define P pair&lt;int,int&gt;\n#define lc rt*2+1\n#define rc rt*2+2\nusing namespace std;\n\nconst int maxn = 50005;\nconst int inf = 0x7fffffff;\nint h[maxn];\nint N, Q;\n\nstruct node {\n    int l, r;\n    int mx, mn;\n    int m() { return (l + r) / 2; }\n} tr[maxn*4];\n\nvoid build(int rt, int l, int r) {\n    tr[rt].l = l;\n    tr[rt].r = r;\n    if (l == r) {\n        tr[rt].mx = tr[rt].mn = h[l];\n        return;\n    }\n    int m = (l + r) / 2;\n    build(lc, l, m);\n    build(rc, m + 1, r);\n    tr[rt].mx = max(tr[lc].mx, tr[rc].mx);\n    tr[rt].mn = min(tr[lc].mn, tr[rc].mn);\n}\n\nint mx, mn;\nvoid query(int rt, int l, int r) {\n    if (l == tr[rt].l &amp;&amp; r == tr[rt].r) {\n        mx = max(mx, tr[rt].mx);\n        mn = min(mn, tr[rt].mn);\n        return;\n    }\n    int m = tr[rt].m();\n    if (r &lt;= m) query(lc, l, r);\n    else if (l &gt; m) query(rc, l, r);\n    else {\n        query(lc, l, m);\n        query(rc, m + 1, r);\n    }\n}\n\nint x, y;\n\nint main() {\n    scanf(\"%d%d\", &amp;N, &amp;Q);\n    for (int i = 0; i &lt; N; i++) scanf(\"%d\", h + i);\n    build(0, 0, N - 1);\n    for (int i = 0; i &lt; Q; i++) {\n        scanf(\"%d%d\", &amp;x, &amp;y);\n        mn = inf, mx = 0;\n        query(0, x - 1, y - 1);\n        printf(\"%d\\n\", mx - mn);\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#integers","title":"integers","text":"<pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\n#define ll long long\n\nconst int maxn = 100005;\nll arr[maxn];\nint N, Q;\n\nstruct node {\n    int l, r;\n    ll sum, inc;\n    int mid() { return (l + r) / 2; }\n} tr[maxn&lt;&lt;2];\n\n#define lc 2*rt+1\n#define rc 2*rt+2\n\nvoid pushup(int rt) {\n    tr[rt].sum = tr[lc].sum + tr[rc].sum;\n}\n\nvoid pushdown(int rt) {\n    if (tr[rt].inc) {\n        tr[rt].sum += (tr[rt].r - tr[rt].l + 1)*tr[rt].inc;\n        tr[lc].inc += tr[rt].inc;\n        tr[rc].inc += tr[rt].inc;\n        tr[rt].inc = 0;\n    }\n}\n\nvoid build(int rt, int l, int r) {\n    tr[rt].l = l;\n    tr[rt].r = r;\n    tr[rt].inc = 0;\n    if (l == r) {\n        tr[rt].sum = arr[l];\n        return;\n    }\n    int m = (l + r) / 2;\n    build(lc, l, m);\n    build(rc, m + 1, r);\n    pushup(rt);\n}\n\n\nvoid add(int rt, int l, int r, int v) {\n    if (tr[rt].l == l &amp;&amp; tr[rt].r == r) {\n        tr[rt].inc += v;\n        return;\n    }\n    tr[rt].sum += (r - l + 1)*v;\n    int m = tr[rt].mid();\n    if (l &gt; m) add(rc, l, r, v);\n    else if (r &lt;= m) add(lc, l, r, v);\n    else {\n        add(lc, l, m, v);\n        add(rc, m + 1, r, v);\n    }\n}\n\n\nll query(int rt, int l, int r) {\n    if (tr[rt].l == l &amp;&amp; tr[rt].r == r) return tr[rt].sum + tr[rt].inc*(r - l + 1);\n    pushdown(rt);\n    int m = tr[rt].mid();\n    if (l &gt; m) return query(rc, l, r);\n    else if (r &lt;= m) return query(lc, l, r);\n    else return query(lc, l, m) + query(rc, m + 1, r);\n}\n\nchar c;\nint a, b, d;\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; Q;\n    for (int i = 0; i &lt; N; i++) cin &gt;&gt; arr[i];\n    build(0, 0, N - 1);\n    for (int i = 0; i &lt; Q; i++) {\n        cin &gt;&gt; c;\n        if (c == 'Q') {\n            cin &gt;&gt; a &gt;&gt; b;\n            cout &lt;&lt; query(0, a-1, b-1) &lt;&lt; endl;\n        }\n        else {\n            cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;\n            add(0, a-1, b-1, d);\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#kth-number","title":"kth-Number","text":"<pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;iomanip&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxn = 100005;\nint N;\nint arr[maxn];\n\n#define lc 2*rt+1\n#define rc 2*rt+2\n\nstruct node {\n    int l, r;\n    vector&lt;int&gt; v;\n    int m() { return (l + r) / 2; }\n} tr[maxn&lt;&lt;2];\n\nvoid pushup(int rt) {\n    vector&lt;int&gt;&amp; a = tr[lc].v;\n    vector&lt;int&gt;&amp; b = tr[rc].v;\n    vector&lt;int&gt;&amp; c = tr[rt].v;\n    c.resize(a.size() + b.size()); // necessary\n    merge(a.begin(), a.end(), b.begin(), b.end(), c.begin());\n}\n\nvoid build(int rt, int l, int r) {\n    tr[rt].l = l;\n    tr[rt].r = r;\n    if (l == r) {\n        tr[rt].v.push_back(arr[l]);\n        return;\n    }\n    int m = (l + r) / 2;\n    build(lc, l, m);\n    build(rc, m + 1, r);\n    pushup(rt);\n}\n\nint query(int rt, int l, int r, int v) {\n    if (tr[rt].l == l &amp;&amp; tr[rt].r == r) {\n        return upper_bound(tr[rt].v.begin(), tr[rt].v.end(), v) - tr[rt].v.begin();\n    }\n    int m = tr[rt].m();\n    if (l &gt; m) return query(rc, l, r, v);\n    else if (r &lt;= m) return query(lc, l, r, v);\n    else return query(lc, l, m, v) + query(rc, m + 1, r, v);\n}\n\nvoid solve(int l, int r, int k) {\n    int left = -1e9 - 1, right = 1e9 + 1;\n    while (left &lt; right) {\n        int mid = left + (right - left) / 2;\n        if (query(0, l, r, mid) &lt; k) left = mid + 1;\n        else right = mid;\n    }\n    cout &lt;&lt; left &lt;&lt; endl;\n}\n\nint Q, a, b, c;\n\nint main() {\n    cin.sync_with_stdio(false);\n    cin &gt;&gt; N &gt;&gt; Q;\n    for (int i = 0; i &lt; N; i++) cin &gt;&gt; arr[i];\n    build(0, 0, N - 1);\n    for (int i = 0; i &lt; Q; i++) {\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        solve(a - 1, b - 1, c);\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#mayors-poster","title":"Mayor's Poster","text":"<pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;iomanip&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxn = 10005;\nint p[maxn][2];\nint N;\n\nstruct node {\n    int l, r;\n    bool occ;\n    int mid() { return (l + r) / 2; }\n} tr[maxn*8];\n\n#define lc 2*rt+1\n#define rc 2*rt+2\n\nvoid pushup(int rt) {\n    tr[rt].occ = tr[lc].occ &amp; tr[rc].occ;\n}\n\nvoid pushdown(int rt) {\n    if (tr[rt].occ) {\n        tr[lc].occ = 1;\n        tr[rc].occ = 1;\n    }\n}\n\nvoid build(int rt, int l, int r) {\n    tr[rt].l = l;\n    tr[rt].r = r;\n    tr[rt].occ = 0;\n    if (l == r) return;\n    int m = tr[rt].mid();\n    build(lc, l, m);\n    build(rc, m + 1, r);\n}\n\nbool add(int rt, int l, int r) {\n    if (tr[rt].l == l &amp;&amp; tr[rt].r == r) {\n        if (tr[rt].occ == 0) {\n            tr[rt].occ = 1;\n            return true;\n        }\n        else return false;\n    }\n    pushdown(rt);\n    int m = tr[rt].mid();\n    bool flag;\n    if (l &gt; m) flag = add(rc, l, r);\n    else if (r &lt;= m) flag = add(lc, l, r);\n    else flag = add(lc, l, m) | add(rc, m + 1, r);\n    pushup(rt);\n    return flag;\n}\n\nint main() {\n    int cas;\n    cin &gt;&gt; cas;\n    while (cas--) {\n        cin &gt;&gt; N;\n        vector&lt;int&gt; xs;\n        map&lt;int, int&gt; m;\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; p[i][0] &gt;&gt; p[i][1];\n            xs.push_back(p[i][0]);\n            xs.push_back(p[i][1]);\n        }\n        sort(xs.begin(), xs.end());\n        int uN = unique(xs.begin(), xs.end()) - xs.begin();\n        for (int i = 0; i &lt; uN; i++) m[xs[i]] = i;\n        build(0, 0, uN - 1);\n        int ans = 0;\n        for (int i = N - 1; i &gt;= 0; i--) {\n            if (add(0, m[p[i][0]], m[p[i][1]])) \n                ans++;\n        }\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#trie","title":"Trie","text":""},{"location":"algorithm/advanced/final_exam_prep/#proto","title":"Proto","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define ll long long\n\nusing namespace std;\n\nconst int maxc = 26;\n\nstruct node {\n    node* cs[maxc];\n    node* fail;\n    bool bad;\n    node() {\n        fail = 0;\n        memset(cs, 0, sizeof(cs));\n        bad = false;\n    }\n};\n\nvoid insert(node* rt, string s) {\n    for (int i = 0; i &lt; s.size(); i++) {\n        int idx = s[i] - 'a';\n        if (!rt-&gt;cs[idx]) rt-&gt;cs[idx] = new node();\n        rt = rt-&gt;cs[idx];\n    }\n    rt-&gt;bad = true;\n}\n\nvoid build(node* rt) {\n    node* rrt = new node();\n    rt-&gt;fail = rrt;\n    for (int i = 0; i &lt; maxc; i++) rrt-&gt;cs[i] = rt;\n    queue&lt;node*&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        node* p = q.front(); q.pop();\n        for (int i = 0; i &lt; maxc; i++) {\n            node* pc = p-&gt;cs[i];\n            if (pc) {\n                node* pre = p-&gt;fail; // father's fail\n                while (!pre-&gt;cs[i]) pre = pre-&gt;fail;\n                pc-&gt;fail = pre-&gt;cs[i];\n                if (pc-&gt;fail-&gt;bad) pc-&gt;bad = true;\n                q.push(pc);\n            }\n        }\n    }\n}\n\nbool match(node* rt, string s) {\n    node* p = rt;\n    for (int i = 0; i &lt; s.size(); i++) {\n        int idx = s[i] - 'a';\n        while (p != rt &amp;&amp; !p-&gt;cs[idx]) p = p-&gt;fail; // back tracing first\n        if (p-&gt;cs[idx]) {\n            p = p-&gt;cs[idx]; // move\n            if (p-&gt;bad) return true;\n        }\n        else continue;  // fail anyway\n    }\n    return false;\n}\n\nint N, M;\nstring s;\n\nint main() {\n    cin &gt;&gt; N;\n    node* root = new node();\n    for (int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; s;\n        insert(root, s);\n    }\n    build(root); // don't forget\n    cin &gt;&gt; M;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; s;\n        if (match(root, s)) cout &lt;&lt; \"YES\" &lt;&lt; endl;\n        else cout &lt;&lt; \"NO\" &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#directed-tarjan","title":"Directed Tarjan","text":""},{"location":"algorithm/advanced/final_exam_prep/#popular-cows","title":"popular cows","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define P pair&lt;int,int&gt;\n\nusing namespace std;\n\n// 4:53\n\nconst int maxn = 10005;\nint N, M;\n\nstruct edge {\n    int f, t;\n    edge() {}\n    edge(int f, int t) :f(f), t(t) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nint dfn[maxn], low[maxn], vis[maxn], color[maxn], outd[maxn];\nint idx, ncol;\nstack&lt;int&gt; stk;\n\nvoid tarjan(int s) {\n    dfn[s] = low[s] = idx++;\n    vis[s] = 1;\n    stk.push(s);\n    for (int i = 0; i &lt; G[s].size(); i++) {\n        int t = G[s][i].t;\n        if (!vis[t]) {\n            tarjan(t);\n            low[s] = min(low[s], low[t]);\n        }\n        else if (vis[t] == 1) {\n            low[s] = min(low[s], dfn[t]);\n        }\n    }\n    if (low[s] == dfn[s]) {\n        int t;\n        do {\n            t = stk.top(); stk.pop();\n            color[t] = ncol;\n            vis[t] = 2;\n        } while (t != s);\n        ncol++;\n    }\n}\n\nint solve() {\n    memset(vis, 0, sizeof(vis));\n    memset(outd, 0, sizeof(outd));\n    memset(color, -1, sizeof(color));\n    // check un-connectivity\n    for (int i = 1; i &lt;= N; i++) { \n        if (!vis[i]) tarjan(i);\n    }\n    for (int i = 1; i &lt;= N; i++) {\n        for (int j = 0; j &lt; G[i].size(); j++) {\n            edge&amp; e = G[i][j];\n            if (color[e.t] != color[e.f]) {\n                outd[color[e.f]] ++;\n            }\n        }\n    }\n    int res = -1;\n    for (int i = 0; i &lt; ncol; i++) {\n        if (outd[i] == 0) {\n            if (res == -1) res = i;\n            else return 0;\n        }\n    }\n    int cnt = 0;\n    for (int i = 1; i &lt;= N; i++) {\n        if (color[i] == res) cnt++;\n    }\n    return cnt;\n}\n\nint x, y;\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; x &gt;&gt; y;\n        G[x].push_back(edge(x, y));\n    }\n    cout &lt;&lt; solve() &lt;&lt; endl;\n}\n\n// 5:08\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#shortest-path","title":"Shortest Path","text":""},{"location":"algorithm/advanced/final_exam_prep/#candies","title":"candies","text":"<pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define P pair&lt;int,int&gt;\n\nusing namespace std;\n\nconst int maxn = 30100;\nconst int inf = 0x3f3f3f3f;\nint N, M;\n\nstruct edge {\n    int f, t, w;\n    edge() {}\n    edge(int f, int t, int w) :f(f), t(t), w(w) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nint dist[maxn];\n\nvoid dijstra(int s) {\n    fill(dist, dist + N + 1, inf);\n    dist[s] = 0;\n    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt;&gt; q;\n    q.push(make_pair(dist[s], s));\n    while (!q.empty()) {\n        P p = q.top(); q.pop();\n        int v = p.second;\n        if (dist[v] != p.first) continue; // vis\n        for (int i = 0; i &lt; G[v].size(); i++) {\n            edge&amp; e = G[v][i];\n            if (dist[e.t] &gt; dist[e.f] + e.w) {\n                dist[e.t] = dist[e.f] + e.w;\n                q.push(make_pair(dist[e.t], e.t));\n            }\n        }\n    }\n}\n\n/*\nint dijstra(int s, int t) {\n    fill(dist, dist + N + 1, inf);\n    dist[s] = 0;\n    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt;&gt; q;\n    q.push(make_pair(dist[s], s));\n    while (!q.empty()) {\n        P p = q.top(); q.pop();\n        int v = p.second;\n        if (dist[v] &lt; p.first) continue;\n        if (v == t) return dist[v]; // return after check !!!\n        for (int i = 0; i &lt; G[v].size(); i++) {\n            edge&amp; e = G[v][i];\n            if (dist[e.t] &gt; dist[e.f] + e.w) {\n                dist[e.t] = dist[e.f] + e.w;\n                q.push(make_pair(dist[e.t], e.t));\n            }\n        }\n    }\n    return -1;\n}\n*/\n\nint x, y, w;\n\nint main() {\n    scanf(\"%d%d\", &amp;N, &amp;M);\n    for (int i = 0; i &lt; M; i++) {\n        scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;w);\n        G[x].push_back(edge(x, y, w));\n    }\n    dijstra(1);\n    printf(\"%d\\n\", dist[N]);\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#currency-exchange","title":"currency exchange","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define P pair&lt;int,int&gt;\n\nusing namespace std;\n\nconst int maxn = 105;\nint N, M;\n\nstruct edge {\n    int f, t;\n    double r, c;\n    edge() {}\n    edge(int f, int t, double r, double c) :f(f), t(t), r(r), c(c) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nint s;\ndouble v;\ndouble dist[maxn];\n\nbool bf() {\n    memset(dist, 0, sizeof(dist));\n    dist[s] = v;\n    for (int k = 1; k &lt; N; k++) {\n        bool flag = true;\n        for (int i = 1; i &lt;= N; i++) {\n            for (int j = 0; j &lt; G[i].size(); j++) {\n                edge&amp; e = G[i][j];\n                if (dist[e.t] &lt; (dist[e.f] - e.c) * e.r) {\n                    dist[e.t] = (dist[e.f] - e.c) * e.r;\n                    flag = false;\n                }\n            }\n        }\n        if (flag) return false;\n    }\n    for (int i = 1; i &lt;= N; i++) {\n        for (int j = 0; j &lt; G[i].size(); j++) {\n            edge&amp; e = G[i][j];\n            if (dist[e.t] &lt; (dist[e.f] - e.c)*e.r) return true;\n        }\n    }\n    return false;\n}\n\nint x, y;\ndouble a, b, c, d;\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; s &gt;&gt; v;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n        G[x].push_back(edge(x, y, a, b));\n        G[y].push_back(edge(y, x, c, d));\n    }\n    cout &lt;&lt; (bf() ? \"YES\" : \"NO\") &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#warmholes","title":"Warmholes","text":"<pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define P pair&lt;int,int&gt;\n\nusing namespace std;\n\nconst int maxn = 505;\nconst int inf = 0x3f3f3f3f;\nint N, M, W;\n\nstruct edge {\n    int f, t, w;\n    edge() {}\n    edge(int f, int t, int w) :f(f), t(t), w(w) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nint dist[maxn], times[maxn];\n\nbool spfa(int s) {\n    fill(dist, dist + N + 1, inf);\n    fill(times, times + N + 1, 0);\n    dist[s] = 0;\n    //queue&lt;int&gt; q;\n    stack&lt;int&gt; q;\n    q.push(s);\n    while (!q.empty()) {\n        //int p = q.front(); q.pop();\n        int p = q.top(); q.pop();\n        for (int i = 0; i &lt; G[p].size(); i++) {\n            edge&amp; e = G[p][i];\n            if (dist[e.t] &gt; dist[e.f] + e.w) {\n                dist[e.t] = dist[e.f] + e.w;\n                q.push(e.t);\n                if (times[e.t]++ &gt;= N) return true;\n            }\n        }\n    }\n    return false;\n}\n\nint T, x, y, w;\n\nint main() {\n    scanf(\"%d\", &amp;T);\n    while (T--) {\n        scanf(\"%d%d%d\", &amp;N, &amp;M, &amp;W);\n        for (int i = 1; i &lt;= N; i++) G[i].clear();\n        for (int i = 0; i &lt; M; i++) {\n            scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;w);\n            G[x].push_back(edge(x, y, w));\n            G[y].push_back(edge(y, x, w));\n        }\n        for (int i = 0; i &lt; W; i++) {\n            scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;w);\n            G[x].push_back(edge(x, y, -w));\n        }\n        cout &lt;&lt; (spfa(1) ? \"YES\" : \"NO\") &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#cow-contest","title":"cow contest","text":"<pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define P pair&lt;int,int&gt;\n\nusing namespace std;\n\nconst int maxn = 105;\nconst int inf = 0x3f3f3f3f;\nint N, M, W;\n\nstruct edge {\n    int f, t;\n    edge() {}\n    edge(int f, int t) :f(f), t(t) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nint dist[maxn][maxn];\n\nvoid floyd() {\n    memset(dist, 0x3f, sizeof(dist));\n    for (int i = 1; i &lt;= N; i++) {\n        dist[i][i] = 0;\n        for (int j = 0; j &lt; G[i].size(); j++) {\n            edge&amp; e = G[i][j];\n            dist[e.f][e.t] = 1;\n        }\n    }\n    for (int k = 1; k &lt;= N; k++) {\n        for (int i = 1; i &lt;= N; i++) {\n            for (int j = 1; j &lt;= N; j++) {\n                if (dist[i][j] &gt; dist[i][k] + dist[k][j]) {\n                    dist[i][j] = dist[i][k] + dist[k][j];\n                }\n            }\n        }\n    }\n}\n\n\nint T, x, y;\n\nint main() {\n    while (~scanf(\"%d%d\", &amp;N, &amp;M)) {\n        for (int i = 1; i &lt;= N; i++) G[i].clear();\n        for (int i = 0; i &lt; M; i++) {\n            scanf(\"%d%d\", &amp;x, &amp;y);\n            G[x].push_back(edge(x, y));\n        }\n        floyd();\n        int ans = 0;\n        for (int i = 1; i &lt;= N; i++) {\n            int cnt = 0;\n            for (int j = 1; j &lt;= N; j++) {\n                if (j == i) continue;\n                if (dist[i][j] != inf) cnt++;\n                if (dist[j][i] != inf) cnt++;\n            }\n            if (cnt == N - 1) ans++;\n        }\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#undirected-tarjan","title":"Undirected Tarjan","text":"<p>\u00b7\u00b7\u00b7</p>"},{"location":"algorithm/advanced/final_exam_prep/#maximum-flow","title":"Maximum Flow","text":""},{"location":"algorithm/advanced/final_exam_prep/#alices-chance","title":"Alice's Chance","text":"<p>build the graph...</p> <pre><code>#include &lt;iostream&gt;    \n#include &lt;cstring&gt;\n#include &lt;queue&gt;   \n#include &lt;vector&gt;  \n#include &lt;algorithm&gt;   \n#include &lt;deque&gt;   \n#define inf 999999999\n\nusing namespace std;\n\nconst int maxn = 400;\n\nint G[maxn][maxn];\nbool vis[maxn];\nint Layer[maxn];   //Layer[i]\u662f\u8282\u70b9i\u7684\u5c42\u53f7  \nint M = 371;\n\nbool CountLayer(int src, int dst) { //\u5206\u5c42\n    int layer = 0;\n    deque&lt;int&gt;q;\n    memset(Layer, 0xff, sizeof(Layer)); //\u90fd\u521d\u59cb\u5316\u6210-1\n    Layer[src] = 0;\n    q.push_back(src);\n    while (!q.empty()) {\n        int v = q.front();\n        q.pop_front();\n        for (int j = 1; j &lt;= M; j++) {\n            if (G[v][j] &gt; 0 &amp;&amp; Layer[j] == -1) {\n                //Layer[j] == -1 \u8bf4\u660ej\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\n                Layer[j] = Layer[v] + 1;\n                if (j == dst) return true;  //\u5206\u5c42\u5230\u6c47\u70b9\u5373\u53ef\n                else q.push_back(j);\n            }\n        }\n    }\n    return false;\n}\nint Dinic(int src, int dst) {\n    int i;\n    int s;\n    int nMaxFlow = 0;\n    deque&lt;int&gt; q; //DFS\u7528\u7684\u6808\n    while (CountLayer(src, dst)) { //\u53ea\u8981\u80fd\u5206\u5c42\n        q.push_back(src);   //\u6e90\u70b9\u5165\u6808  \n        memset(vis, 0, sizeof(vis));\n        vis[src] = 1;\n        while (!q.empty()) {\n            int nd = q.back();\n            if (nd == dst) { // nd\u662f\u6c47\u70b9\n                //\u5728\u6808\u4e2d\u627e\u5bb9\u91cf\u6700\u5c0f\u8fb9\n                int nMinC = inf;\n                int nMinC_vs; //\u5bb9\u91cf\u6700\u5c0f\u8fb9\u7684\u8d77\u70b9\n                for (i = 1; i &lt; q.size(); i++) {\n                    int vs = q[i - 1];\n                    int ve = q[i];\n                    if (G[vs][ve] &gt; 0) {\n                        if (nMinC &gt; G[vs][ve]) {\n                            nMinC = G[vs][ve];\n                            nMinC_vs = vs;\n                        }\n                    }\n                }\n                //\u589e\u5e7f\uff0c\u6539\u56fe\n                nMaxFlow += nMinC;\n                for (i = 1; i &lt; q.size(); i++) {\n                    int vs = q[i - 1];\n                    int ve = q[i];\n                    G[vs][ve] -= nMinC; //\u4fee\u6539\u8fb9\u5bb9\u91cf \n                    G[ve][vs] += nMinC; //\u6dfb\u52a0\u53cd\u5411\u8fb9\n                }\n                //\u9000\u6808\u5230 nMinC_vs\u6210\u4e3a\u6808\u9876\uff0c\u4ee5\u4fbf\u7ee7\u7eeddfs\n                while (!q.empty() &amp;&amp; q.back() != nMinC_vs) {\n                    vis[q.back()] = 0;\n                    q.pop_back();\n                }\n\n            }\n            else { //nd\u4e0d\u662f\u6c47\u70b9\n                for (i = 1; i &lt;= M; i++) {\n                    if (G[nd][i] &gt; 0 &amp;&amp; Layer[i] == Layer[nd] + 1 &amp;&amp;\n                        !vis[i]) {\n                        //\u53ea\u5f80\u4e0b\u4e00\u5c42\u7684\u6ca1\u6709\u8d70\u8fc7\u7684\u8282\u70b9\u8d70\n                        vis[i] = 1;\n                        q.push_back(i);\n                        break;\n                    }\n                }\n                if (i &gt; M)  //\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u70b9\n                    q.pop_back(); //\u56de\u6eaf\n            }\n        }\n    }\n    return nMaxFlow;\n}\n\nconst int maxk = 25;\nint movies[maxk][10];\n\nint T, K;\nint src = 0, dst = 371;\n\nvoid build() {\n    for (int i = 1; i &lt;= 350; i++) G[src][i] = 1;\n    for (int k = 0; k &lt; K; k++) {\n        int tmp = 351 + k;\n        for (int j = 1; j &lt;= movies[k][8] * 7; j++) {\n            if (movies[k][(j - 1) % 7]) {\n                G[j][tmp] = 1;\n            }\n        }\n        G[tmp][dst] = movies[k][7];\n    }\n}\n\nint main() {\n    cin &gt;&gt; T;\n    while (T--) {\n        cin &gt;&gt; K;\n        int tot = 0;\n        for (int i = 0; i &lt; K; i++) {\n            for (int j = 0; j &lt; 9; j++) {\n                cin &gt;&gt; movies[i][j];\n            }\n            tot += movies[i][7];\n        }\n        memset(G, 0, sizeof(G));\n        build();\n        int ans = Dinic(src, dst);\n        if (ans == tot) cout &lt;&lt; \"Yes\" &lt;&lt; endl;\n        else cout &lt;&lt; \"No\" &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#asteroids","title":"Asteroids","text":"<p>bipartite</p> <pre><code>#include &lt;iostream&gt;    \n#include &lt;cstring&gt;\n#include &lt;queue&gt;   \n#include &lt;vector&gt;  \n#include &lt;algorithm&gt;   \n#include &lt;deque&gt;   \n#define inf 999999999\n\nusing namespace std;\n\nconst int maxn = 2000;\n\nint G[maxn][maxn];\nbool vis[maxn];\nint Layer[maxn];   //Layer[i]\u662f\u8282\u70b9i\u7684\u5c42\u53f7  \nint M;\n\nbool CountLayer(int src, int dst) { //\u5206\u5c42\n    int layer = 0;\n    deque&lt;int&gt;q;\n    memset(Layer, 0xff, sizeof(Layer)); //\u90fd\u521d\u59cb\u5316\u6210-1\n    Layer[src] = 0;\n    q.push_back(src);\n    while (!q.empty()) {\n        int v = q.front();\n        q.pop_front();\n        for (int j = 1; j &lt;= M; j++) {\n            if (G[v][j] &gt; 0 &amp;&amp; Layer[j] == -1) {\n                //Layer[j] == -1 \u8bf4\u660ej\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\n                Layer[j] = Layer[v] + 1;\n                if (j == dst) return true;  //\u5206\u5c42\u5230\u6c47\u70b9\u5373\u53ef\n                else q.push_back(j);\n            }\n        }\n    }\n    return false;\n}\nint Dinic(int src, int dst) {\n    int i;\n    int s;\n    int nMaxFlow = 0;\n    deque&lt;int&gt; q; //DFS\u7528\u7684\u6808\n    while (CountLayer(src, dst)) { //\u53ea\u8981\u80fd\u5206\u5c42\n        q.push_back(src);   //\u6e90\u70b9\u5165\u6808  \n        memset(vis, 0, sizeof(vis));\n        vis[src] = 1;\n        while (!q.empty()) {\n            int nd = q.back();\n            if (nd == dst) { // nd\u662f\u6c47\u70b9\n                //\u5728\u6808\u4e2d\u627e\u5bb9\u91cf\u6700\u5c0f\u8fb9\n                int nMinC = inf;\n                int nMinC_vs; //\u5bb9\u91cf\u6700\u5c0f\u8fb9\u7684\u8d77\u70b9\n                for (i = 1; i &lt; q.size(); i++) {\n                    int vs = q[i - 1];\n                    int ve = q[i];\n                    if (G[vs][ve] &gt; 0) {\n                        if (nMinC &gt; G[vs][ve]) {\n                            nMinC = G[vs][ve];\n                            nMinC_vs = vs;\n                        }\n                    }\n                }\n                //\u589e\u5e7f\uff0c\u6539\u56fe\n                nMaxFlow += nMinC;\n                for (i = 1; i &lt; q.size(); i++) {\n                    int vs = q[i - 1];\n                    int ve = q[i];\n                    G[vs][ve] -= nMinC; //\u4fee\u6539\u8fb9\u5bb9\u91cf \n                    G[ve][vs] += nMinC; //\u6dfb\u52a0\u53cd\u5411\u8fb9\n                }\n                //\u9000\u6808\u5230 nMinC_vs\u6210\u4e3a\u6808\u9876\uff0c\u4ee5\u4fbf\u7ee7\u7eeddfs\n                while (!q.empty() &amp;&amp; q.back() != nMinC_vs) {\n                    vis[q.back()] = 0;\n                    q.pop_back();\n                }\n\n            }\n            else { //nd\u4e0d\u662f\u6c47\u70b9\n                for (i = 1; i &lt;= M; i++) {\n                    if (G[nd][i] &gt; 0 &amp;&amp; Layer[i] == Layer[nd] + 1 &amp;&amp;\n                        !vis[i]) {\n                        //\u53ea\u5f80\u4e0b\u4e00\u5c42\u7684\u6ca1\u6709\u8d70\u8fc7\u7684\u8282\u70b9\u8d70\n                        vis[i] = 1;\n                        q.push_back(i);\n                        break;\n                    }\n                }\n                if (i &gt; M)  //\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u70b9\n                    q.pop_back(); //\u56de\u6eaf\n            }\n        }\n    }\n    return nMaxFlow;\n}\n\nint src, dst;\nint N, K, x, y;\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; K;\n    M = 2 * N + 1;\n    memset(G, 0, sizeof(G));\n    src = 0;\n    dst = 2 * N + 1;\n    for (int i = 1; i &lt;= N; i++) G[src][i] = 1;\n    for (int i = N + 1; i &lt;= 2 * N; i++) G[i][dst] = 1;\n    for (int i = 0; i &lt; K; i++) {\n        cin &gt;&gt; x &gt;&gt; y;\n        G[x][y+N] = inf;\n    }\n    cout &lt;&lt; Dinic(src, dst) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#geometry","title":"Geometry","text":""},{"location":"algorithm/advanced/final_exam_prep/#toys","title":"TOYS","text":"<pre><code>#include &lt;iostream&gt;    \n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;   \n#include &lt;vector&gt;  \n#include &lt;algorithm&gt;   \n#include &lt;deque&gt;   \n\nusing namespace std;\n\ndouble PI = acos(-1);\ndouble INF = 1e20;\ndouble EPS = 1e-3;\n\nbool IsZero(double x) {\n    return -EPS &lt; x &amp;&amp; x &lt; EPS;\n}\nbool FLarger(double a, double b) {\n    return a - b &gt; EPS;\n}\nbool FLess(double a, double b) {\n    return b - a &gt; EPS;\n}\n\nstruct CVector {\n    double x, y;\n    CVector() {}\n    CVector(double x, double y) :x(x), y(y) {}\n};\n\ntypedef CVector CPoint;\n\nstruct CLine {\n    CPoint a, b;\n    CLine() {}\n    CLine(CPoint a, CPoint b) :a(a), b(b) {}\n};\n\nCVector operator +(CVector p, CVector q) {\n    return CVector(p.x + q.x, p.y + q.y);\n}\n\nCVector operator -(CVector p, CVector q) {\n    return CVector(p.x - q.x, p.y - q.y);\n}\n\nCVector operator *(double k, CVector p) {\n    return CVector(k * p.x, k * p.y);\n}\n\nCVector operator /(CVector p, double k) {\n    return CVector(p.x / k, p.y / k);\n}\n\ndouble operator *(CVector p, CVector q) {\n    return p.x * q.x + p.y * q.y;\n}\n\ndouble length(CVector p) {\n    return sqrt(p * p);\n}\n\nCVector unit(CVector p) {\n    return 1 / length(p) * p;\n}\n\ndouble project(CVector p, CVector n) {\n    return p * unit(n); //\u70b9\u79ef\n}\n\ndouble operator ^(CVector p, CVector q) {\n    return p.x * q.y - q.x * p.y;\n}\n\ndouble area(CVector p, CVector q) {\n    return (p ^ q) / 2;\n}\n\ndouble dist(CPoint p, CPoint q) {\n    return length(p - q);\n}\n\ndouble dist(CPoint p, CLine l) {\n    return fabs((p - l.a) ^ (l.b - l.a))\n        / length(l.b - l.a);\n}\n\nCPoint rotate(CPoint b, CPoint a,\n    double alpha) {//\u8fd4\u56de\u70b9C\u5750\u6807\n    CVector p = b - a;\n    return CPoint(a.x + (p.x * cos(alpha)\n        - p.y * sin(alpha)),\n        a.y + (p.x * sin(alpha)\n            + p.y * cos(alpha)));\n}\n\nint sideOfLine(CPoint p, CPoint a, CPoint b)\n{ //\u5224\u65adp\u5728\u76f4\u7ebf a-&gt;b\u7684\u54ea\u4e00\u4fa7\n    double result = (b - a) ^ (p - a);\n    if (IsZero(result))\n        return 0; //p \u5728 a-&gt;b\u4e0a\n    else if (result &gt; 0)\n        return 1; //p\u5728a-&gt;b\u5de6\u4fa7\n    else\n        return -1; //p\u5728a-&gt;b\u53f3\u4fa7\n}\n\nint n, m, x1, Y1, x2, y2;\n\nconst int maxn = 5005;\n\nCPoint polys[maxn][4];\nint ans[maxn];\n\nint u, l, ou, ol;\nint x, y;\n\nbool PointInPoly(int poly, CPoint p) {\n    for (int i = 0; i &lt; 4; i++) {\n        CLine l(polys[poly][i], polys[poly][(i + 1) % 4]);\n        //if (sideOfLine(p, l.a, l.b) == 0) return true;\n        CVector a = polys[poly][i] - p;\n        CVector b = polys[poly][(i + 1) % 4] - p;\n        if (FLess(a^b, 0)) return false;\n    }\n    return true;\n}\n\nint main() {\n    int cas = 0;\n    while (cin &gt;&gt; n &amp;&amp; n) {\n        if (cas != 0) cout &lt;&lt; endl;\n        cas++;\n        cin &gt;&gt; m &gt;&gt; x1 &gt;&gt; Y1 &gt;&gt; x2 &gt;&gt; y2;\n        memset(ans, 0, sizeof(ans));\n        ou = x1, ol = x1;\n        for (int i = 0; i &lt; n; i++) {\n            cin &gt;&gt; u &gt;&gt; l;\n            polys[i][0] = CPoint(ou, Y1);\n            polys[i][1] = CPoint(ol, y2);\n            polys[i][2] = CPoint(l, y2);\n            polys[i][3] = CPoint(u, Y1);\n            ou = u;\n            ol = l;\n        }\n        polys[n][0] = CPoint(ou, Y1);\n        polys[n][1] = CPoint(ou, y2);\n        polys[n][2] = CPoint(x2, y2);\n        polys[n][3] = CPoint(x2, Y1);\n        for (int i = 0; i &lt; m; i++) {\n            cin &gt;&gt; x &gt;&gt; y;\n            CPoint p(x, y);\n            int l = 0, r = n + 1;\n            while (l &lt; r) {\n                int m = (l + r) / 2;\n                if (sideOfLine(p, polys[m][2], polys[m][3]) == -1) l = m + 1;\n                else r = m;\n            }\n            ans[l]++;\n        }\n        for (int i = 0; i &lt; n+1; i++) {\n            cout &lt;&lt; i &lt;&lt; \": \" &lt;&lt; ans[i] &lt;&lt; endl;\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#space-ant","title":"Space ant","text":"<p>\u6781\u89d2\u6392\u5e8f\u3002</p> <pre><code>#include &lt;iostream&gt;    \n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;   \n#include &lt;vector&gt;  \n#include &lt;algorithm&gt;   \n#include &lt;deque&gt;   \n\nusing namespace std;\n\ndouble PI = acos(-1);\ndouble INF = 1e20;\ndouble EPS = 1e-3;\n\nint Sign(double x) { // \u5224\u65ad x \u662f\u5927\u4e8e0,\u7b49\u4e8e0\u8fd8\u662f\u5c0f\u4e8e0 \n    return fabs(x) &lt; EPS ? 0 : x &gt; 0 ? 1 : -1;\n}\n\nstruct Point {\n    double x, y;\n    int id;\n    Point(double xx = 0, double yy = 0, int id = 0) :x(xx), y(yy), id(id) { }\n    Point operator-(const Point &amp; p) const {\n        return Point(x - p.x, y - p.y);\n    }\n    bool operator &lt;(const Point &amp; p) const {\n        if (y &lt; p.y)\n            return true;\n        else if (y &gt; p.y)\n            return false;\n        else\n            return x &lt; p.x;\n    }\n};\n\ntypedef Point Vector;\n\ndouble Cross(const Vector &amp; v1, const Vector &amp; v2)\n{//\u53c9\u79ef\n    return v1.x * v2.y - v2.x * v1.y;\n}\n\ndouble Distance(const Point &amp; p1, const Point &amp; p2)\n{\n    return sqrt((p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y));\n}\n\nstruct Comp { //\u7528\u6765\u5b9a\u4e49\u6781\u89d2\u6392\u5e8f\u89c4\u5219\u7684\u51fd\u6570\u5bf9\u8c61\n    Point p0; //\u4ee5p0\u4e3a\u539f\u70b9\u8fdb\u884c\u6781\u89d2\u6392\u5e8f,\u6781\u89d2\u76f8\u540c\u7684\uff0c\u79bbp0\u8fd1\u7b97\u5c0f\n    Comp(const Point &amp; p) :p0(p.x, p.y) { }\n    bool operator ()(const Point &amp; p1, const Point &amp; p2) const {\n        int s = Sign(Cross(p1 - p0, p2 - p0));\n        if (s &gt; 0)\n            return true;\n        else if (s &lt; 0)\n            return false;\n        else {\n            if (Distance(p0, p1) &lt; Distance(p0, p2))\n                return true;\n            else\n                return false;\n        }\n    }\n};\n\nconst int maxn = 55;\nPoint ps[maxn];\n\nint T, N;\nint x, y, z;\n\nvoid solve() {\n    vector&lt;int&gt; ans;\n    sort(ps, ps + N);\n    ans.push_back(ps[0].id);\n    for (int p = 1; p &lt; N; p++) {\n        sort(ps + p, ps + N, Comp(ps[p - 1]));\n        ans.push_back(ps[p].id);\n    }\n    cout &lt;&lt; ans.size();\n    for (int i = 0; i &lt; ans.size(); i++) cout &lt;&lt; \" \" &lt;&lt; ans[i];\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    cin &gt;&gt; T;\n    while (T--) {\n        cin &gt;&gt; N;\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; z &gt;&gt; x &gt;&gt; y;\n            ps[i] = Point(x, y, z);\n        }\n        solve();\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#line-of-sight","title":"Line of Sight","text":"<p>\u533a\u95f4\u5408\u5e76\u5f88\u6709\u8da3\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n#include &lt;iomanip&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst double EPS=1e-8;\nconst int MAXN=200;\n\nint dblcmp(double x){\n    return fabs(x)&lt;EPS?0:(x&gt;0?1:-1);\n}\n\nstruct Point;\ntypedef Point Vector;\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y):x(_x),y(_y){}\n    Vector operator -(Point p){\n        return Vector(x-p.x,y-p.y);\n    }\n    double operator ^(Vector v){ //\u53c9\u79ef\n        return x*v.y-y*v.x;\n    }\n};\n\nstruct Region{ //\u906e\u6321\u533a\u57df\n    double lx,rx;\n    Region(){}\n    Region(double _lx,double _rx):lx(_lx),rx(_rx){}\n};\n\nstruct Line{\n    Point p1,p2;\n    Line(){}\n    Line(Point _p1,Point _p2):p1(_p1),p2(_p2){}\n    bool input(){\n        double x1,x2,y;\n        cin&gt;&gt;x1&gt;&gt;x2&gt;&gt;y;\n        if(x1==0&amp;&amp;x2==0&amp;&amp;y==0) return false;\n        p1=Point(x1,y); p2=Point(x2,y);\n        return true;\n    }\n    double intersectionPointX(Line l){ //\u5b9a\u70b9\u5206\u6bd4\u6cd5\u6c42\u4ea4\u70b9(x\u5750\u6807)\n        double s1=(l.p1-p1)^(p2-p1);\n        double s2=(l.p2-p1)^(p2-p1);\n        return (s2*l.p1.x-s1*l.p2.x)/(s2-s1);\n    }\n    double length(){\n        return p2.x-p1.x;\n    }\n};\n\n\nLine house,property;\nvector&lt;Line&gt; obstacles;\nvector&lt;Region&gt; regions;\n\nbool compare(const Region&amp; r1,const Region&amp; r2){\n    return r1.lx&lt;r2.lx;\n}\n\nvoid solve(){\n    int m=obstacles.size();\n    if(!m){\n        cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;property.length()&lt;&lt;endl;\n        return ;\n    }\n    regions.clear();\n    for(int i=0;i&lt;m;++i){ //\u6c42\u6bcf\u4e2a\u969c\u788d\u7ebf\u7684\u906e\u6321\u533a\u57df\n        Point left=obstacles[i].p1;\n        Point right=obstacles[i].p2;\n        double x1=property.intersectionPointX(Line(left,house.p2)); //\u5de6\u7aef\u70b9\n        double x2=property.intersectionPointX(Line(right,house.p1)); //\u53f3\u7aef\u70b9\n        regions.push_back(Region(max(property.p1.x,x1),min(property.p2.x,x2)));\n    }\n    sort(regions.begin(),regions.end(),compare); //\u6392\u5e8f\uff0c\u65b9\u4fbf\u540e\u9762\u5408\u5e76\u76f8\u8fde\u7684\u906e\u6321\u533a\u57df\n    vector&lt;Region&gt; r;\n    Region region=Region(regions[0].lx,regions[0].rx);\n    for(int i=1;i&lt;m;++i){ //\u5408\u5e76\u76f8\u8fde\u7684\u906e\u6321\u533a\u57df\n        if(region.rx&gt;regions[i].lx-EPS)\n            region.rx=max(region.rx,regions[i].rx);\n        else{\n            if(region.rx&gt;region.lx) //\u4e00\u5f00\u59cb\u6ca1\u6709\u5224\u65ad\u8fd9\u4e2a\uff0cwa\u4e86\u597d\u4e45\u3002\u3002\n                r.push_back(region);\n            region=Region(regions[i].lx,regions[i].rx);\n        }\n    }\n    if(region.rx&gt;region.lx)\n        r.push_back(region);\n    m=r.size();\n    double ans=r[0].lx-property.p1.x;\n    for(int i=0;i&lt;m-1;++i){\n        ans=max(ans,r[i+1].lx-r[i].rx);\n    }\n    ans=max(ans,property.p2.x-r[m-1].rx);\n    if(ans&lt;EPS) cout&lt;&lt;\"No View\"&lt;&lt;endl;\n    else cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;ans&lt;&lt;endl;\n}\n\nint main(){\n    while(house.input()){\n        property.input();\n        int n;\n        cin&gt;&gt;n;\n        Line obstacle;\n        obstacles.clear();\n        for(int i=0;i&lt;n;++i){\n            obstacle.input();\n            if(obstacle.p1.y&gt;house.p1.y-EPS||obstacle.p1.y&lt;property.p1.y+EPS)\n                continue; //\u6392\u9664\u4e0d\u5728\u623f\u5c4b\u548c\u89c2\u5149\u7ebf\u4e4b\u95f4\u7684\n            obstacles.push_back(obstacle);\n        }\n        solve();\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#the-fortified-forest","title":"The Fortified Forest","text":"<p>\u51f8\u5305+\u72b6\u538b\u3002</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxn = 16;\nint N;\n\nstruct tree {\n    int x, y, v, l;\n    tree() {}\n    tree(int x, int y, int v, int l) :x(x), y(y), v(v), l(l) {}\n} f[maxn];\n\n#define EPS 1e-3\n#define inf 0x3f3f3f3f\n\nint Sign(double x) { // \u5224\u65ad x \u662f\u5927\u4e8e0,\u7b49\u4e8e0\u8fd8\u662f\u5c0f\u4e8e0 \n    return fabs(x) &lt; EPS ? 0 : x &gt; 0 ? 1 : -1;\n}\n\nstruct Point {\n    double x, y;\n    Point(double xx = 0, double yy = 0) :x(xx), y(yy) { }\n    Point operator-(const Point &amp; p) const {\n        return Point(x - p.x, y - p.y);\n    }\n    bool operator &lt;(const Point &amp; p) const {\n        if (y &lt; p.y)\n            return true;\n        else if (y &gt; p.y)\n            return false;\n        else\n            return x &lt; p.x;\n    }\n};\n\ntypedef Point Vector;\n\ndouble Cross(const Vector &amp; v1, const Vector &amp; v2)\n{//\u53c9\u79ef\n    return v1.x * v2.y - v2.x * v1.y;\n}\n\ndouble Distance(const Point &amp; p1, const Point &amp; p2)\n{\n    return sqrt((p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y));\n}\n\nstruct Comp { //\u7528\u6765\u5b9a\u4e49\u6781\u89d2\u6392\u5e8f\u89c4\u5219\u7684\u51fd\u6570\u5bf9\u8c61\n    Point p0; //\u4ee5p0\u4e3a\u539f\u70b9\u8fdb\u884c\u6781\u89d2\u6392\u5e8f,\u6781\u89d2\u76f8\u540c\u7684\uff0c\u79bbp0\u8fd1\u7b97\u5c0f\n    Comp(const Point &amp; p) :p0(p.x, p.y) { }\n    bool operator ()(const Point &amp; p1, const Point &amp; p2) const {\n        int s = Sign(Cross(p1 - p0, p2 - p0));\n        if (s &gt; 0)\n            return true;\n        else if (s &lt; 0)\n            return false;\n        else {\n            if (Distance(p0, p1) &lt; Distance(p0, p2))\n                return true;\n            else\n                return false;\n        }\n    }\n};\n\n// return wood needed\ndouble Graham(vector&lt;Point&gt; &amp; points, vector&lt;Point&gt; &amp; stack) {\n    //points\u662f\u70b9\u96c6\u5408\n    if (points.size() == 1) return 0;\n    if (points.size() == 2) return Distance(points[0], points[1]) * 2;\n    stack.clear();\n    //\u5148\u6309\u5750\u6807\u6392\u5e8f\uff0c\u6700\u5de6\u4e0b\u7684\u653e\u5230points[0] \n    sort(points.begin(), points.end());\n    //\u4ee5points[0] \u4e3a\u539f\u70b9\u8fdb\u884c\u6781\u89d2\u6392\u5e8f \n    sort(points.begin() + 1, points.end(), Comp(points[0]));\n    stack.push_back(points[0]);\n    stack.push_back(points[1]);\n    stack.push_back(points[2]);\n    for (int i = 3; i &lt; points.size(); ++i) {\n        while (true) {\n            Point p2 = *(stack.end() - 1);\n            Point p1 = *(stack.end() - 2);\n            if (Sign(Cross(p2 - p1, points[i] - p2) &lt;= 0))\n                //p2-&gt;points[i]\u6ca1\u6709\u5411\u5de6\u8f6c\uff0c\u5c31\u8ba9p2\u51fa\u6808 \n                stack.pop_back();\n            else\n                break;\n        }\n        stack.push_back(points[i]);\n    }\n    double res = 0;\n    for (int i = 0; i &lt; stack.size(); i++) {\n        res += Distance(stack[i], stack[(i + 1) % stack.size()]);\n    }\n    return res;\n}\n\nint x, y, v, l;\nint main() {\n    int cas = 0;\n    while (cin &gt;&gt; N &amp;&amp; N) {\n        if (cas) cout &lt;&lt; endl;\n        cas++;\n\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; x &gt;&gt; y &gt;&gt; v &gt;&gt; l;\n            f[i] = tree(x, y, v, l);\n        }\n\n        int mnv = inf;\n        double exw = 0;\n        vector&lt;int&gt; mncuts;\n\n        int mx_st = (1 &lt;&lt; N) - 1;\n        for (int st = 1; st &lt; mx_st; st++) {\n            vector&lt;Point&gt; poly;\n            vector&lt;int&gt; cuts;\n            int tv = 0, tl = 0;\n            for (int i = 0; i &lt; N; i++) {\n                if (st&amp;(1 &lt;&lt; i)) {\n                    tv += f[i].v;\n                    tl += f[i].l;\n                    cuts.push_back(i);\n                }\n                else {\n                    poly.push_back(Point(f[i].x, f[i].y));\n                }\n            }\n            vector&lt;Point&gt; hull;\n            double s = Graham(poly, hull);\n            if (tl &gt; s &amp;&amp; tv &lt; mnv) {\n                mnv = tv;\n                exw = tl - s;\n                mncuts = cuts;\n            }\n        }\n        cout &lt;&lt; \"Forest \" &lt;&lt; cas &lt;&lt; endl;\n        cout &lt;&lt; \"Cut these trees:\";\n        for (int i = 0; i &lt; mncuts.size(); i++) cout &lt;&lt; \" \" &lt;&lt; mncuts[i] + 1;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Extra wood: \" &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; exw &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/final_exam_prep/#suffix-array","title":"Suffix Array","text":""},{"location":"algorithm/advanced/final_exam_prep/#substrings","title":"Substrings","text":"<p>\u591a\u5b57\u4e32\u6700\u957f\u516c\u5171\u5b50\u4e32\u80cc\u677f\u3002</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nconst int maxn = 10005;\nint N;\nint wa[maxn], wb[maxn], wc[maxn], wd[maxn];\nint sa[maxn];\n\n// n: strlen(s), m: 128(ASCII unique chars)\nvoid buildSA(int* s, int n, int* sa, int m = 255) {\n    int i, j, p, *pm = wa, *k2sa = wb, *t;\n    // k1 radix sort\n    for (i = 0; i &lt; m; i++) wd[i] = 0;\n    for (i = 0; i &lt; n; i++) wd[pm[i] = s[i]]++;\n    for (i = 1; i &lt; m; i++) wd[i] += wd[i - 1];\n    for (i = n - 1; i &gt;= 0; i--) sa[--wd[pm[i]]] = i;\n    // loops j-&gt;2j\n    for (j = p = 1; p &lt; n; j &lt;&lt;= 1, m = p) {\n        // generate k2sa\n        for (p = 0, i = n - j; i &lt; n; i++) k2sa[p++] = i; // null k2\n        for (i = 0; i &lt; n; i++) if (sa[i] &gt;= j) k2sa[p++] = sa[i] - j;\n        // k2 radix sort\n        for (i = 0; i &lt; m; i++) wd[i] = 0;\n        for (i = 0; i &lt; n; i++) wd[wc[i] = pm[k2sa[i]]]++;\n        for (i = 1; i &lt; m; i++) wd[i] += wd[i - 1];\n        for (i = n - 1; i &gt;= 0; i--) sa[--wd[wc[i]]] = k2sa[i];\n        // update pm\n        for (t = pm, pm = k2sa, k2sa = t, pm[sa[0]] = 0, p = i = 1; i &lt; n; i++) {\n            int a = sa[i - 1], b = sa[i];\n            if (k2sa[a] == k2sa[b] &amp;&amp; k2sa[a + j] == k2sa[b + j])\n                pm[sa[i]] = p - 1;\n            else pm[sa[i]] = p++;\n        }\n    }\n}\n\nint Rank[maxn], height[maxn];\nvoid buildHeight(int* str, int n) {\n    int i, j, k;\n    for (i = 0; i &lt; n; i++) Rank[sa[i]] = i;\n    for (i = k = 0; i &lt; n; height[Rank[i++]] = k)\n        for (k ? k-- : 0, j = sa[Rank[i] - 1];\n            str[i + k] == str[j + k];\n            k++);\n}\n\n\nint s[maxn], id[maxn];\nint vis[105];\n\nint T, M;\nstring a;\n\nbool check(int mid) {\n    memset(vis, 0, sizeof(vis));\n    int cnt = 0;\n    for (int i = 1; i &lt;= N; i++) {\n        if (height[i] &gt;= mid) {\n            for (int j = 1; j &lt;= M; j++) {\n                if (id[sa[i]] == j) {\n                    if (!vis[j]) cnt++;\n                    vis[j] = 1;\n                }\n                if (id[sa[i-1]] == j) {\n                    if (!vis[j]) cnt++;\n                    vis[j] = 1;\n                }\n            }\n        }\n        else {\n            if (cnt &gt;= M) return true;\n            cnt = 0;\n            memset(vis, 0, sizeof(vis));\n        }\n    }\n    if (cnt &gt;= M) return true;\n    return false;\n}\n\nint main() {\n    cin &gt;&gt; T;\n    while (T--) {\n        int l = 0, offset = 1;\n        cin &gt;&gt; M;\n        for (int i = 1; i &lt;= M; i++) {\n            cin &gt;&gt; a;\n            for (int j = 0; j &lt; a.size(); j++) id[l] = i, s[l++] = a[j];\n            s[l++] = '#' + offset++;\n            for (int j = a.size() - 1; j &gt;= 0; j--) id[l] = i, s[l++] = a[j];\n            s[l++] = '#' + offset++;\n        }\n        N = l;\n        buildSA(s, N, sa);\n        buildHeight(s, N);\n        int left = 0, right = N;\n        while (left &lt; right) {\n            int mid = (left + right) / 2;\n            if (check(mid)) left = mid + 1;\n            else right = mid;\n        }\n        cout &lt;&lt; left - 1 &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/","title":"Suffix Array","text":""},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#definition","title":"Definition","text":"<p>\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\u7684\u540e\u7f00\u7684\u4f4d\u7f6e\u3002<code>SA[i] = Rank(Suffix(i))</code></p> <pre><code>\"banana\"\nsa[0] = 5   a\nsa[1] = 3   ana\nsa[2] = 1   anana\nsa[3] = 0   banana\nsa[4] = 4   na\nsa[5] = 2   nana\n</code></pre>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#on-log-n-method-to-find-sa","title":"\\(O(n \\log n)\\) Method to find SA","text":"<ul> <li>j-suffix </li> </ul> <pre><code>1-suffix: b, a, n, a, n, a\n2-suffix: ba, an, na, an, na, a\n4-suffix: bana, anan, nana, ana, na, a\n</code></pre> <p>\u200b   \u6392\u540d\uff1a\u53ef\u5e76\u5217\u7684j-\u540e\u7f00\u5b57\u5178\u5e8f\u6392\u5e8f\u6570\u7ec4\uff0c\u8bb0\u4e3a\\(pm^j\\)</p> <p>\u200b   \u540d\u6b21\uff1a\u4e0d\u53ef\u5e76\u5217\uff0c\u4f4d\u7f6e\u9760\u5de6\u7684\u540d\u6b21\u5728\u524d\u3002</p> <p>\u200b   <code>sa[]</code>\u5c31\u662f\u540d\u6b21\u4e3ai\u7684n-\u540e\u7f00\u7684\u4f4d\u7f6e\u3002\uff08n\u4e3a\u539f\u5b57\u7b26\u4e32\u957f\u5ea6\uff09</p> <ul> <li> <p>\u500d\u589e\u6cd5</p> <pre><code>const int maxn =  1000;\nint wa[maxn], wb[maxn], wv[maxn], ws[maxn];\nint sa[maxn];\n// n: len(s), m: 127(ASCII unique chars)\nvoid buildSA(const char* s, int* sa, int n, int m=127){\n    int i, j, p, *pm=wa, *k2sa = wb, *t;\n    // k1 radix sort\n    for(i=0; i&lt;m; i++) ws[i] = 0; \n    for(i=0; i&lt;n; i++) ws[pm[i] = s[i]]++;\n    for(i=1; i&lt;m; i++) ws[i] += ws[i-1];\n    for(i=n-1; i&gt;=0; i--) sa[--ws[pm[i]]] = i;\n    // loops j-&gt;2j\n    for(j=p=1; p&lt;n; j&lt;&lt;=1, m=p){\n        // generate k2sa\n        for(p=0, i=n-j; i&lt;n; i++) k2sa[p++]=i; // null k2\n        for(i=0; i&lt;n; i++) if(sa[i] &gt;= j) k2sa[p++] = sa[i] - j;\n        // k2 radix sort\n        for(i=0; i&lt;m; i++) ws[i] = 0;\n        for(i=0; i&lt;n; i++) ws[wv[i] = pm[k2sa[i]]]++;\n        for(i=1; i&lt;m; i++) ws[i] += ws[i-1];\n        for(i=n-1; i&gt;=0; i--) sa[--ws[wv[i]]] = k2sa[i];\n        // update pm\n        for(t=pm, pm=k2sa, k2sa=t, pm[sa[0]]=0, p=i=1; i&lt;n; i++){\n            int a = sa[i-1], b=sa[i];\n            if(k2sa[a] == k2sa[b] &amp;&amp; k2sa[a+j] == k2sa[b+j])\n                pm[sa[i]] = p-1;\n            else pm[sa[i]] = p++;\n        }\n    } // stop when p==n\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#rmq-sparse-table","title":"RMQ (Sparse Table)","text":"<p>Range Maximum/Minimum Query. <code>RMQ(arr, i, j)</code></p> <p>\u9884\u5904\u7406\\(O(nlogn)\\)\uff0c\u67e5\u8be2\\(O(1)\\)\uff0c\u66f4\u6613\u5199\uff0c\u4f46\u5c40\u9650\u6027\u662f<code>arr</code>\u4e0d\u80fd\u4fee\u6539\u3002</p> <p><code>dp[i][j]</code> : \\(max\\ of \\ arr[i] \\sim arr[i+2^j]\\)</p> <p><code>dp[i][j] = max(dp[i][j-1], dp[i+(1&lt;&lt;(j-1))][j-1])</code></p> <pre><code>// maximum RMQ\nconst int maxn = 1005;\nint N;\nint arr[maxn];\nint st[maxn][32]; // log_2 maxn &lt; 32\n\nvoid build(){\n    for(int i=1; i&lt;=N; i++) st[i][0] = arr[i];\n    int k = log2(N*1.0);\n    for(int j=1; j&lt;=k; j++){\n        for(int i=1; i&lt;=N; i++){\n            if(i+(1&lt;&lt;(j-1))&lt;=N){\n                st[i][j] = max(st[i][j-1], st[i+(1&lt;&lt;(j-1))][j-1]);       \n            }\n        }\n    }\n}\n\nint query(int l, int r){\n    int k = log2(r-l+1.0);\n    return max(st[l][k], st[r+1-(1&lt;&lt;k)][k]);\n}\n</code></pre>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#balanced-lineup","title":"Balanced Lineup","text":"<pre><code>#include &lt;iostream&gt;    \n#include &lt;cstdio&gt;\n#include &lt;iomanip&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n#include &lt;queue&gt;   \n#include &lt;vector&gt;  \n#include &lt;algorithm&gt;   \n#include &lt;deque&gt;   \n#include &lt;map&gt;\n\nusing namespace std;\n\nconst int maxn = 50005;\nint N;\nint arr[maxn];\nint st[maxn][32], st2[maxn][32];\n\nvoid build() {\n    for (int i = 1; i &lt;= N; i++) {\n        st[i][0] = arr[i];\n        st2[i][0] = arr[i];\n    }\n    int k = log2(N*1.0);\n    for (int j = 1; j &lt;= k; j++) {\n        for (int i = 1; i &lt;= N; i++) {\n            if (i + (1 &lt;&lt; (j - 1)) &lt;= N) {\n                st[i][j] = max(st[i][j - 1], st[i + (1 &lt;&lt; (j - 1))][j - 1]);\n                st2[i][j] = min(st2[i][j - 1], st2[i + (1 &lt;&lt; (j - 1))][j - 1]);\n            }\n        }\n    }\n}\n\nint querymx(int l, int r) {\n    int k = log2(r - l + 1.0);\n    return max(st[l][k], st[r + 1 - (1 &lt;&lt; k)][k]);\n}\n\nint querymn(int l, int r) {\n    int k = log2(r - l + 1.0);\n    return min(st2[l][k], st2[r + 1 - (1 &lt;&lt; k)][k]);\n}\n\nint Q, a, b;\n\nint main() {\n    scanf(\"%d%d\", &amp;N, &amp;Q);\n    for (int i = 1; i &lt;= N; i++) cin &gt;&gt; arr[i];\n    build();\n    for (int i = 0; i &lt; Q; i++) {\n        scanf(\"%d%d\", &amp;a, &amp;b);\n        printf(\"%d\\n\", querymx(a, b) - querymn(a, b));\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#_1","title":"\u6700\u957f\u516c\u5171\u524d\u7f00\u6570\u7ec4","text":"<p>\u4efb\u7ed9\u4e24\u4e2a\u540e\u7f00\uff0cO(1)\u6c42\u5176\u6700\u957f\u516c\u5171\u524d\u7f00\uff08LCP\uff09\u7684\u957f\u5ea6\u3002</p> <pre><code>Rank[i]: \u4f4d\u7f6ei\u7684\u540e\u7f00\u7684\u540d\u6b21\nLCP(i, j): **\u540d\u6b21**\u4e3ai\u548cj\u7684\u540e\u7f00\u7684LCP\nLCPL(i, j): LCP(i, j) \u7684\u957f\u5ea6\nheight[i] = LCPL(i-1, i) : \u540d\u6b21\u4e3ai\u548ci-1\u7684\u540e\u7f00\u7684LCPL\n\n// SA --&gt; Rank\nRank[SA[i]] = i\n\n// SA --&gt; height\nH[i] = LCPL(Rank[i]-1, Rank[i])\n     = LCPL(Suffix(i), Suffix(SA[Rank[i]-1]))\n     \u4f4d\u7f6ei\u7684\u540e\u7f00X\u548c\u540d\u6b21\u5728X\u524d\u4e00\u4f4d\u7684\u540e\u7f00Y\u7684LCPL\u3002\n\nheight[i] = H[SA[i]]\nheight[Rank[i]] = H[i]\n\n\n// height --&gt; LCPL\nLCPL(i, j) = min{height[i+1, ..., j]} // RMQ O(1)\n</code></pre> <ul> <li>LCP\u5f15\u74061</li> </ul> \\[ \\displaylines{   LCPL(i, j) = min\\{LCPL(k, k+1)| k=i, ..., j-1\\} } \\] <ul> <li>LCP\u5f15\u74062</li> </ul> \\[ \\displaylines{   \\forall i \\le k \\lt j \\\\   LCPL(k, j) \\ge LCPL(i, j) } \\] <ul> <li>LCP\u5f15\u74063</li> </ul> <p></p> <ul> <li> <p>H\u5b9a\u7406</p> <p><code>i&gt;0 &amp;&amp; Rank[i]&gt;0</code>\u65f6\uff1a</p> </li> </ul> \\[ \\displaylines{   H[i] \\ge H[i-1] -1 } \\] <pre><code>int Rank[maxn], height[maxn];\nvoid buildHeight(char* str, int n, int* sa){\n    int i, j, k;\n    for(i=0; i&lt;n; i++) Rank[sa[i]]=i;\n    for(i=k=0; i&lt;n; height[Rank[i++]]=k)\n        for(k?k--:0, j=sa[Rank[i]-1];\n           str[i+k] == str[j+k];\n           k++);\n}\n\n// length+1, \"abcd\\0\"\nbuildSA(\"abcd\", sa, 5, 130);\nbuildHeight(\"abcd\", 5, sa);\n</code></pre>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#applications","title":"Applications","text":""},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#poj2774-long-long-message","title":"POJ2774 Long Long Message","text":"<p>\u6c42\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u3002</p> <ul> <li>\u9996\u5148\u62fc\u63a5\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u4e0d\u66fe\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u9694\u5f00\u3002</li> <li>\u5219\u6700\u957f\u516c\u5171\u5b50\u4e32\u4e3a\u67d0\u4e24\u4e2a\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u5373<code>LCPL(i, j)</code>\u7684\u6700\u5927\u503c\u3002</li> <li>\u7531\u4e8e\u5f15\u74061\uff0c\u4e3a\u4e86\u627e\u5230\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\u53ea\u9700\u8981\u904d\u5386\u6240\u6709<code>LCPL(i-1 ,i) = height[i]</code>\u627e\u6700\u5927\u7684height\u5373\u53ef\u3002</li> <li>\u6ce8\u610f\u4e24\u4e2a\u540e\u7f00\u8981\u5728\u4e0d\u540c\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u989d\u5916\u5224\u65ad<code>sa[i]&gt;len1, sa[i-1]&lt;len1</code>\u6216\u76f8\u53cd\u3002</li> </ul> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint N;\n\nconst int maxn = 200005;\nint wa[maxn], wb[maxn], wv[maxn], Ws[maxn], height[maxn], Rank[maxn]; //\u8f85\u52a9\u6570\u7ec4 \nint sa[maxn]; //sa[i]\u662f\u540d\u6b21\u4e3ai\u7684\u540e\u7f00\u7684\u4f4d\u7f6e\uff0c\u5373\u540e\u7f00\u6570\u7ec4\n\nvoid buildSA(int * s, int * sa, int n, int m) {\n    int i, j, p, *pm = wa, *k2sa = wb, *t;\n    for (i = 0; i &lt; m; i++) Ws[i] = 0;\n    for (i = 0; i &lt; n; i++) Ws[pm[i] = s[i]]++; //(1)\n    for (i = 1; i &lt; m; i++) Ws[i] += Ws[i - 1];\n    for (i = n - 1; i &gt;= 0; i--) sa[--Ws[pm[i]]] = i;\n    for (j = p = 1; p &lt; n; j &lt;&lt;= 1, m = p) {  //\u70e7\u8111\u5faa\u73af\n        for (p = 0, i = n - j; i &lt; n; i++) k2sa[p++] = i;\n        for (i = 0; i &lt; n; i++) //\u6309\u540d\u6b21\u4ece\u5c0f\u5230\u5927\u904d\u5386n\u4e2aj-\u540e\u7f00\n            if (sa[i] &gt;= j) k2sa[p++] = sa[i] - j;\n        for (i = 0; i &lt; m; i++) Ws[i] = 0;\n        for (i = 0; i &lt; n; i++)\n            Ws[wv[i] = pm[k2sa[i]]]++;\n        for (i = 1; i &lt; m; i++) Ws[i] += Ws[i - 1];\n        for (i = n - 1; i &gt;= 0; i--)\n            sa[--Ws[wv[i]]] = k2sa[i];//\u6c42\u4f4d\u7f6e\u4e3ak2sa[i]\u76842j-\u540e\u7f00\u7684\u540d\u6b21\n        for (t = pm, pm = k2sa, k2sa = t,\n            pm[sa[0]] = 0, p = i = 1; i &lt; n; i++) {//\u6309\u540d\u6b21\u904d\u53862j-\u540e\u7f00\n            int a = sa[i - 1], b = sa[i];\n            if (k2sa[a] == k2sa[b] &amp;&amp; a + j &lt; n &amp;&amp; b + j &lt; n &amp;&amp;\n                k2sa[a + j] == k2sa[b + j])\n                pm[sa[i]] = p - 1; //\u672a\u53d1\u73b0\u65b0\u76842j-\u540e\u7f00\n            else\n                pm[sa[i]] = p++; //\u53d1\u73b0\u65b0\u76842j-\u540e\u7f00\n        } //\u5f53p\u8fbe\u5230n\u65f6\uff0c\u8bf4\u660e\u5df2\u7ecf\u6709\u4e86n\u4e2a\u4e0d\u540c\u76842j-\u540e\u7f00\uff0c\u5e76\u4e14\u90fd\u5728sa\u91cc\u6392\u597d\u4e86\u5e8f\u3002\n    } //\u70e7\u8111\u5faa\u73af\u7ed3\u675f\n    return;\n}\n\nvoid BuildHeight(int * str, int n, int * sa, int * Rank) {\n    int i, j, k;\n    for (int i = 0; i &lt; n; ++i) //i \u662f\u540d\u6b21,n\u662f\u5b57\u7b26\u4e32\u957f\u5ea6 \n        Rank[sa[i]] = i;\n    height[0] = 0;\n    for (i = k = 0; i &lt; n - 1; height[Rank[i++]] = k)//i\u662f\u4f4d\u7f6e\n        for (k ? k-- : 0, j = sa[Rank[i] - 1]; //Rank[0]&gt;0\u624d\u4e0d\u8d8a\u754c \n            str[i + k] == str[j + k]; k++);\n}\n\nchar a[maxn], b[maxn];\nint s[maxn];\n\nint main() {\n    while (~scanf(\"%s%s\", a, b)) {\n        int la = strlen(a), lb = strlen(b), l = 0;\n        for (int i = 0; i &lt; la; i++) s[l++] = a[i] - 'a' + 1;\n        s[l++] = 28;\n        for (int i = 0; i &lt; lb; i++) s[l++] = b[i] - 'a' + 1;\n        s[l] = 0;\n        buildSA(s, sa, l+1, 255);\n        BuildHeight(s, l+1, sa, Rank);\n        int ans = 0;\n        for (int i = 1; i &lt;= l; i++) {\n            if (sa[i - 1]&lt;la &amp;&amp; sa[i]&gt;la || sa[i - 1] &gt; la &amp;&amp; sa[i] &lt; la)\n                ans = max(ans, height[i]);\n        }\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#_2","title":"\u6700\u957f\u516c\u5171\u5b50\u4e32\uff08\u591a\u5e8f\u5217\uff09","text":"<p>ref</p> <p>\u8bbe\u6240\u6709\u5b57\u7b26\u4e32\u5e8f\u5217\u957f\u5ea6\u4e4b\u548c\u4e3a\\(L\\)\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5e73\u5747\u957f\u5ea6\u4e3a\\(l\\)\uff0c\u5219\u7b97\u6cd5</p> <ul> <li>\u5e73\u5747\u590d\u6742\u5ea6\\(O(L \\log L)\\)\uff1b</li> </ul> <ul> <li>\u6700\u574f\u590d\u6742\u5ea6\\(O(l L\\log L)\\)\uff0c\u5728\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u53ea\u542b\u6709\u540c\u4e00\u4e2a\u5b57\u7b26\u65f6\u8fbe\u5230\u3002</li> </ul>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#poj3450-corporate-identity","title":"POJ3450 Corporate Identity","text":"<pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nconst int maxc = 205;\nconst int maxs = 4005;\nconst int maxn = 4005 * 205;\n\n\nint wa[maxn], wb[maxn], wc[maxn], wd[maxn];\nint sa[maxn];\n\n// n: strlen(s), m: 128(ASCII unique chars)\nvoid buildSA(int* s, int n, int* sa, int m = 128) {\n    int i, j, p, *pm = wa, *k2sa = wb, *t;\n    // k1 radix sort\n    for (i = 0; i &lt; m; i++) wd[i] = 0;\n    for (i = 0; i &lt; n; i++) wd[pm[i] = s[i]]++;\n    for (i = 1; i &lt; m; i++) wd[i] += wd[i - 1];\n    for (i = n - 1; i &gt;= 0; i--) sa[--wd[pm[i]]] = i;\n    // loops j-&gt;2j\n    for (j = p = 1; p &lt; n; j &lt;&lt;= 1, m = p) {\n        // generate k2sa\n        for (p = 0, i = n - j; i &lt; n; i++) k2sa[p++] = i; // null k2\n        for (i = 0; i &lt; n; i++) if (sa[i] &gt;= j) k2sa[p++] = sa[i] - j;\n        // k2 radix sort\n        for (i = 0; i &lt; m; i++) wd[i] = 0;\n        for (i = 0; i &lt; n; i++) wd[wc[i] = pm[k2sa[i]]]++;\n        for (i = 1; i &lt; m; i++) wd[i] += wd[i - 1];\n        for (i = n - 1; i &gt;= 0; i--) sa[--wd[wc[i]]] = k2sa[i];\n        // update pm\n        for (t = pm, pm = k2sa, k2sa = t, pm[sa[0]] = 0, p = i = 1; i &lt; n; i++) {\n            int a = sa[i - 1], b = sa[i];\n            if (k2sa[a] == k2sa[b] &amp;&amp; k2sa[a + j] == k2sa[b + j])\n                pm[sa[i]] = p - 1;\n            else pm[sa[i]] = p++;\n        }\n    }\n}\n\nint Rank[maxn], height[maxn];\nvoid buildHeight(int* str, int n) {\n    int i, j, k;\n    for (i = 0; i &lt; n; i++) Rank[sa[i]] = i;\n    for (i = k = 0; i &lt; n; height[Rank[i++]] = k)\n        for (k ? k-- : 0, j = sa[Rank[i] - 1];\n            str[i + k] == str[j + k];\n            k++);\n}\n\nchar ans[maxc];\nint vis[maxs];\n\nchar a[maxc];\nint s[maxn], id[maxn];\n\nint N;\nint l = 0, mark = 30, la;\n\nbool check(int m) {\n    int cnt = 0;\n    memset(vis, 0, sizeof(vis));\n    // \u904d\u5386\u6240\u6709\u540e\u7f00\n    for (int i = 1; i &lt;= l; i++) {\n        // \u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u5c0f\u4e8em\uff0c\u5931\u8d25\n        if (height[i] &lt; m) {\n            cnt = 0;\n            memset(vis, 0, sizeof(vis));\n            continue;\n        }\n        if (!vis[id[sa[i-1]]]) {\n            vis[id[sa[i-1]]] = 1;\n            cnt++;\n        }\n        if (!vis[id[sa[i]]]) {\n            vis[id[sa[i]]] = 1;\n            cnt++;\n        }\n        if (cnt == N) {\n            for (int j = 0; j &lt; m; j++) ans[j] = s[sa[i] + j] + 'a' - 1;\n            ans[m] = '\\0';\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    while (cin &gt;&gt; N &amp;&amp; N) {\n        l = 0;\n        mark = 30;\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; a;\n            la = strlen(a);\n            for (int j = 0; j &lt; la; j++) {\n                id[l] = i; // \u6807\u5fd7\u5f53\u524d\u4e0b\u6807\u662f\u539f\u6765\u7684\u54ea\u4e00\u4e2a\u5b57\u7b26\u4e32\n                s[l++] = a[j] - 'a' + 1;\n            }\n            id[l] = mark + i;\n            s[l++] = mark + i;\n        }\n        s[l] = 0;\n        buildSA(s, l + 1, sa, mark + N);\n        buildHeight(s, l + 1);\n        int l = 1, r = la, flag = 0;\n        while (l &lt; r) {\n            int m = (l + r) / 2;\n            //cout &lt;&lt; \"bs \" &lt;&lt; l &lt;&lt; \"-\" &lt;&lt; m &lt;&lt; \" \" &lt;&lt; r &lt;&lt; endl;\n            if (check(m)) {\n                flag = 1;\n                l = m + 1;\n            }\n            else r = m;\n        }\n        if (flag) cout &lt;&lt; ans &lt;&lt; endl;\n        else cout &lt;&lt; \"IDENTITY LOST\" &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#musical-theme-poj","title":"Musical Theme POJ","text":"<p>\u4e0d\u91cd\u53e0\u7684\u6700\u957f\u91cd\u590d\u5b50\u4e32\u3002</p> <p>\u6709\u4e00\u4e2a\u6d4b\u8bd5\u70b9WA\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565.jpg</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nconst int maxn = 20005;\nint N;\nint wa[maxn], wb[maxn], wc[maxn], wd[maxn];\nint sa[maxn];\n\n// n: strlen(s), m: 128(ASCII unique chars)\nvoid buildSA(int* s, int n, int* sa, int m = 200) {\n    int i, j, p, *pm = wa, *k2sa = wb, *t;\n    // k1 radix sort\n    for (i = 0; i &lt; m; i++) wd[i] = 0;\n    for (i = 0; i &lt; n; i++) wd[pm[i] = s[i]]++;\n    for (i = 1; i &lt; m; i++) wd[i] += wd[i - 1];\n    for (i = n - 1; i &gt;= 0; i--) sa[--wd[pm[i]]] = i;\n    // loops j-&gt;2j\n    for (j = p = 1; p &lt; n; j &lt;&lt;= 1, m = p) {\n        // generate k2sa\n        for (p = 0, i = n - j; i &lt; n; i++) k2sa[p++] = i; // null k2\n        for (i = 0; i &lt; n; i++) if (sa[i] &gt;= j) k2sa[p++] = sa[i] - j;\n        // k2 radix sort\n        for (i = 0; i &lt; m; i++) wd[i] = 0;\n        for (i = 0; i &lt; n; i++) wd[wc[i] = pm[k2sa[i]]]++;\n        for (i = 1; i &lt; m; i++) wd[i] += wd[i - 1];\n        for (i = n - 1; i &gt;= 0; i--) sa[--wd[wc[i]]] = k2sa[i];\n        // update pm\n        for (t = pm, pm = k2sa, k2sa = t, pm[sa[0]] = 0, p = i = 1; i &lt; n; i++) {\n            int a = sa[i - 1], b = sa[i];\n            if (k2sa[a] == k2sa[b] &amp;&amp; k2sa[a + j] == k2sa[b + j])\n                pm[sa[i]] = p - 1;\n            else pm[sa[i]] = p++;\n        }\n    }\n}\n\nint Rank[maxn], height[maxn];\nvoid buildHeight(int* str, int n) {\n    int i, j, k;\n    for (i = 0; i &lt; n; i++) Rank[sa[i]] = i;\n    for (i = k = 0; i &lt; n; height[Rank[i++]] = k)\n        for (k ? k-- : 0, j = sa[Rank[i] - 1];\n            str[i + k] == str[j + k];\n            k++);\n}\n\nint s[maxn];\n\nbool check(int m) {\n    int mn = sa[1];\n    int mx = sa[1];\n    for (int i = 2; i &lt; N; i++) {\n        if (height[i] &gt;= m){\n            mn = min(mn, sa[i]);\n            mx = max(mx, sa[i]);\n        }\n        else {\n            if (mx - mn &gt;= m) return true;\n            else mx = mn = sa[i];\n        }\n    }\n    if (mx - mn &gt;= m) return true;\n    return false;\n}\n\nint main() {\n    while (cin &gt;&gt; N &amp;&amp; N) {\n        for (int i = 0; i &lt; N; i++) scanf(\"%d\", s + i);\n        for (int i = 0; i &lt; N - 1; i++) s[i] = s[i + 1] - s[i] + 100;\n        s[N - 1] = 0;\n        buildSA(s, N, sa);\n        buildHeight(s, N);\n        int l = 4, r = N, ans = -1;\n        while (l &lt; r) {\n            int mid = (l + r) / 2;\n            if (check(mid)) {\n                ans = mid;\n                l = mid + 1;\n            }\n            else r = mid;\n        }\n        ans++;\n        printf(\"%d\\n\", ans &lt; 5 ? 0 : ans);\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/#milk-pattern","title":"Milk Pattern","text":"<p>\u53ef\u91cd\u53e0\u7684\u81f3\u5c11k\u6b21\u7684\u6700\u957f\u91cd\u590d\u5b50\u5e8f\u5217\u3002</p> <p>\u4e8c\u5206\uff08\u8f6c\u6362\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\uff09+\u540e\u7f00\u5206\u7ec4\u6cd5\u3002</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint N;\n\nconst int MAXN = 20005;\nint wa[MAXN], wb[MAXN], wv[MAXN], Ws[MAXN], height[MAXN], Rank[MAXN]; //\u8f85\u52a9\u6570\u7ec4 \nint sa[MAXN]; //sa[i]\u662f\u540d\u6b21\u4e3ai\u7684\u540e\u7f00\u7684\u4f4d\u7f6e\uff0c\u5373\u540e\u7f00\u6570\u7ec4\n\nvoid buildSA(int * s, int * sa, int n, int m) {\n    int i, j, p, *pm = wa, *k2sa = wb, *t;\n    for (i = 0; i &lt; m; i++) Ws[i] = 0;\n    for (i = 0; i &lt; n; i++) Ws[pm[i] = s[i]]++; //(1)\n    for (i = 1; i &lt; m; i++) Ws[i] += Ws[i - 1];\n    for (i = n - 1; i &gt;= 0; i--) sa[--Ws[pm[i]]] = i;\n    for (j = p = 1; p &lt; n; j &lt;&lt;= 1, m = p) {  //\u70e7\u8111\u5faa\u73af\n        for (p = 0, i = n - j; i &lt; n; i++) k2sa[p++] = i;\n        for (i = 0; i &lt; n; i++) //\u6309\u540d\u6b21\u4ece\u5c0f\u5230\u5927\u904d\u5386n\u4e2aj-\u540e\u7f00\n            if (sa[i] &gt;= j) k2sa[p++] = sa[i] - j;\n        for (i = 0; i &lt; m; i++) Ws[i] = 0;\n        for (i = 0; i &lt; n; i++)\n            Ws[wv[i] = pm[k2sa[i]]]++;\n        for (i = 1; i &lt; m; i++) Ws[i] += Ws[i - 1];\n        for (i = n - 1; i &gt;= 0; i--)\n            sa[--Ws[wv[i]]] = k2sa[i];//\u6c42\u4f4d\u7f6e\u4e3ak2sa[i]\u76842j-\u540e\u7f00\u7684\u540d\u6b21\n        for (t = pm, pm = k2sa, k2sa = t,\n            pm[sa[0]] = 0, p = i = 1; i &lt; n; i++) {//\u6309\u540d\u6b21\u904d\u53862j-\u540e\u7f00\n            int a = sa[i - 1], b = sa[i];\n            if (k2sa[a] == k2sa[b] &amp;&amp; a + j &lt; n &amp;&amp; b + j &lt; n &amp;&amp;\n                k2sa[a + j] == k2sa[b + j])\n                pm[sa[i]] = p - 1; //\u672a\u53d1\u73b0\u65b0\u76842j-\u540e\u7f00\n            else\n                pm[sa[i]] = p++; //\u53d1\u73b0\u65b0\u76842j-\u540e\u7f00\n        } //\u5f53p\u8fbe\u5230n\u65f6\uff0c\u8bf4\u660e\u5df2\u7ecf\u6709\u4e86n\u4e2a\u4e0d\u540c\u76842j-\u540e\u7f00\uff0c\u5e76\u4e14\u90fd\u5728sa\u91cc\u6392\u597d\u4e86\u5e8f\u3002\n    } //\u70e7\u8111\u5faa\u73af\u7ed3\u675f\n    return;\n}\n\nvoid BuildHeight(int * str, int n, int * sa, int * Rank) {\n    int i, j, k;\n    for (int i = 0; i &lt; n; ++i) //i \u662f\u540d\u6b21,n\u662f\u5b57\u7b26\u4e32\u957f\u5ea6 \n        Rank[sa[i]] = i;\n    height[0] = 0;\n    for (i = k = 0; i &lt; n - 1; height[Rank[i++]] = k)//i\u662f\u4f4d\u7f6e\n        for (k ? k-- : 0, j = sa[Rank[i] - 1]; //Rank[0]&gt;0\u624d\u4e0d\u8d8a\u754c \n            str[i + k] == str[j + k]; k++);\n}\n\nint s[MAXN];\nint K;\n\nbool check(int m) {\n    int cnt = 1;\n    for (int i = 0; i &lt; N; i++) {\n        if (height[i] &gt;= m) {\n            cnt++;\n            if (cnt == K) return true;\n        }\n        else cnt = 1;\n    }\n    return false;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; K;\n    for (int i = 0; i &lt; N; i++) cin &gt;&gt; s[i];\n    buildSA(s, sa, N, 255);\n    BuildHeight(s, N, sa, Rank);\n    int l = 1, r = N;\n    while (l &lt; r) {\n        int m = (l + r) / 2;\n        if (check(m)) l = m + 1;\n        else r = m;\n    }\n    cout &lt;&lt; l - 1 &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/advanced/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/","title":"Graph Connectivity","text":""},{"location":"algorithm/advanced/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/#_1","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u7ebf\u6027\u987a\u5e8f\uff0c\u4e0d\u552f\u4e00\u3002</p>"},{"location":"algorithm/advanced/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/#dag","title":"DAG\u7684\u6027\u8d28","text":"<ul> <li> <p>\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\uff1a</p> <p>\u4e0d\u4e0e\u5176\u4ed6\u70b9\u8fde\u901a\u3002</p> <p>\u6269\u6563\u4fe1\u606f\u65f6\uff0c\u81f3\u5c11\u8981\u4ece\u6240\u6709\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u5f00\u59cb\u6269\u6563\uff0c\u624d\u80fd\u6269\u6563\u81f3\u5168\u56fe\u3002</p> </li> </ul> <ul> <li> <p>\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\uff1a</p> <p>\u5982\u679c\u53ea\u6709\u4e00\u4e2a\uff0c\u5219\u8be5\u70b9\u53ef\u4ee5\u7531\u5176\u4ed6\u6240\u6709\u70b9\u62b5\u8fbe\u3002</p> </li> </ul> <ul> <li> <p>\u6dfb\u52a0\u591a\u5c11\u8fb9\u624d\u80fd\u4f7fDAG\u53d8\u4e3a\u5f3a\u8fde\u901a\u56fe\uff1f</p> <p><code>max(\u5165\u5ea6\u96f6\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u51fa\u5ea6\u96f6\u7684\u70b9\u7684\u4e2a\u6570)</code></p> </li> </ul>"},{"location":"algorithm/advanced/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/#_2","title":"\u6709\u5411\u56fe","text":"<ul> <li> <p>\u5f3a\u8fde\u901a\uff1a</p> <ul> <li>\\(v_i\\)\u4e0e\\(v_j\\)\u5f3a\u8fde\u901a\uff1a\u5b58\u5728\u6709\u5411\u8fb9\\(v_i \\rightarrow v_j\\)\u4e0e\\(v_j \\rightarrow v_i\\)\u3002</li> <li>\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u3002</li> </ul> </li> </ul> <ul> <li> <p>Tarjan\u7b97\u6cd5\uff1aDFS\u6c42\u6709\u5411\u56fe\u6240\u6709\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p> <p><code>dfn</code>: DFS\u2019s index</p> <p><code>low</code>: the lowest index that can be accessed starting from this point.</p> <p><code>dfn[u] == low[u]</code>: u is the root (the first accessed point in DFS order.) of a strong connected component.</p> <pre><code>Tarjan(int u):\n    low[u] = dfn[u] = ++index;  # init\n    stack.push(u);\n    for each (u, v) in E:\n      if not visited v:\n          Tarjan(v);\n          low[u] = min(low[u], low[v]); # obvious\n      else if v in stack:\n          low[u] = min(low[u], dfn[v]); # v's index is smaller than u\n    if dfn[n] == low[n]:\n      repeat:\n          v = S.pop();\n          print v;\n      until u == v\n</code></pre> </li> </ul> <ul> <li> <p>Kosaraju Algorithm</p> <p>(slower than tarjan)</p> </li> </ul> <ul> <li> <p>Examples</p> <ul> <li> <p>Popular Cows</p> <p>DAG\u4e2d\u5982\u679c\u6709\u552f\u4e00\u51fa\u5ea6\u4e3a\u96f6\u7684\u8282\u70b9\uff0c\u5219\u5b83\u53ef\u4ee5\u88ab\u6240\u6709\u5176\u4ed6\u8282\u70b9\u8bbf\u95ee\u5230\u3002</p> <p>\u628a\u5f3a\u8fde\u901a\u5206\u91cf\u5747\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u5219\u4e00\u4e2a\u6709\u5411\u6709\u73af\u56fe\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2aDAG\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxn = 10005;\nvector&lt;int&gt; G[maxn];\nint dfn[maxn], low[maxn], color[maxn], vis[maxn], degree[maxn];\nint N, M, a, b;\nint ncolor = 0, idx = 0;\nstack&lt;int&gt; stk;\n\nvoid tarjan(int u) {\n    dfn[u] = low[u] = idx++;\n    vis[u] = 1;\n    stk.push(u);\n    int len = G[u].size();\n    for (int i = 0; i &lt; len; i++) {\n        int v = G[u][i];\n        if (!vis[v]) {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (vis[v] == 1) {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if (dfn[u] == low[u]) {\n        int v;\n        do {\n            v = stk.top(); stk.pop();\n            color[v] = ncolor;  // dyeing\n            vis[v] = 2;  // 1 means in stack, 2 means visited and out stack.\n        } while (u != v); \n        ncolor++;\n    }\n}\n\nint solve(){\n    for(int i=1; i&lt;=N; i++){\n        int ci = color[i];\n        for(int j=0; j&lt;G[i].size(); j++)\n            if(color[G[i][j]] != ci) degree[ci]++;\n    }\n    int end = -1;\n    for(int i=0; i&lt;ncolor; i++){\n        if(degree[i]==0){\n            if(end == -1) end = i;\n            else return 0;\n        }\n    }\n    int ans = 0;\n    for(int i=1; i&lt;=N; i++)\n        if(color[i] == end) ans++;\n    return ans;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M;\n    memset(color, -1, sizeof(color));\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; a &gt;&gt; b;\n        G[a].push_back(b);\n    }\n    for (int i = 1; i &lt;= N; i++) {\n        if (!vis[i]) tarjan(i);  // for separated points, we have to check all.\n    }\n    cout &lt;&lt; solve() &lt;&lt; endl;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Network of Schools</p> <p>\u81f3\u5c11\u9009\u53d6\u51e0\u4e2a\u70b9\u624d\u80fd\u904d\u5386DAG\u6240\u6709\u9876\u70b9\uff1f\u5165\u5ea6\u4e3a0\u7684\u70b9\u4e2a\u6570\u3002</p> <p>\u81f3\u5c11\u6dfb\u52a0\u51e0\u6761\u8fb9\u624d\u80fd\u4f7fDAG\u5f3a\u8054\u901a\uff1fmax(\u5165\u5ea60\u70b9\u4e2a\u6570\uff0c\u51fa\u5ea60\u70b9\u4e2a\u6570)</p> </li> </ul> <ul> <li> <p>Going from u to v or v to u?</p> <p>\u534a\u8fde\u901a\u5206\u91cf\uff0c\u4ecd\u7136\u5148\u628aSCC\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230DAG\u3002</p> <p>\u5982\u679c\u4e00\u4e2aDAG\u7684\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u534a\u8fde\u901a\uff0c\u5219DAG\u4e00\u5b9a\u662f\u4e00\u6761\u7ebf\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\n\nconst int maxn = 1005;\n\nvector&lt;int&gt; G[maxn];\nint dfn[maxn], low[maxn], color[maxn], vis[maxn], outd[maxn], ind[maxn];\n\nint N, M, a, b;\nint ncolor = 0, idx = 0;\n\nvoid init(){\n    for (int i = 1; i &lt;= N; i++) G[i].clear();\n    memset(color, -1, sizeof(color));\n    memset(dfn, 0, sizeof(dfn));\n    memset(low, 0, sizeof(low));\n    memset(vis, 0, sizeof(vis));\n    memset(outd, 0, sizeof(outd));\n    memset(ind, 0, sizeof(ind));\n    ncolor = 0;\n    idx = 0;    \n}\n\nstack&lt;int&gt; stk;\nvoid tarjan(int u) {\n    dfn[u] = low[u] = idx++;\n    vis[u] = 1;\n    stk.push(u);\n    int len = G[u].size();\n    for (int i = 0; i &lt; len; i++) {\n        int v = G[u][i];\n        if (!vis[v]) {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (vis[zh] == 1) {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if (dfn[u] == low[u]) {\n        int v;\n        do {\n            v = stk.top(); stk.pop();\n            color[v] = ncolor;\n            vis[v] = 2;\n        } while (u != v);\n        ncolor++;\n    }\n}\n\nbool solve(){\n    for(int i=1; i&lt;=N; i++){\n        for(int j=0; j&lt;G[i].size(); j++){\n            if(color[G[i][j]] != color[i]) {\n                outd[color[i]]++;\n                ind[color[G[i][j]]]++;\n            }\n        }\n    }\n    // must be a linear graph\n    for(int i=0; i&lt;ncolor; i++){\n        if(outd[i]&gt;1 || ind[i]&gt;1) return false;\n    }\n    return true;\n}\n\nint main() {\n    int cas;\n    cin&gt;&gt;cas;\n    while(cas--){\n        cin &gt;&gt; N &gt;&gt; M;\n        init();\n        for (int i = 0; i &lt; M; i++) {\n            cin &gt;&gt; a &gt;&gt; b;\n            G[a].push_back(b);\n        }\n        for (int i = 1; i &lt;= N; i++) {\n            if (!vis[i]) tarjan(i);\n        }\n        cout &lt;&lt; (solve()?\"Yes\":\"No\") &lt;&lt; endl;\n    }\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"algorithm/advanced/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/#_3","title":"\u65e0\u5411\u8fde\u901a\u56fe","text":"<ul> <li> <p>\u5272\u70b9&amp;\u6865</p> <p>\u5220\u9664\u8be5\u70b9/\u8fb9\u540e\u56fe\u4e0d\u518d\u8fde\u901a\u3002</p> </li> </ul> <ul> <li> <p>Tarjan Algorithm</p> <p>\u6ce8\u610f\u5982\u679c\u6709\u91cd\u8fb9\uff0c\u5219\u6865\u7684\u5224\u65ad\u8fd8\u9700\u591a\u52a0\u4e00\u6b65\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxv = 100;\nconst int maxe = 10000;\n\nstruct edge {\n  int f, t;\n  edge() {}\n  edge(int u, int v) :f(u), t(v) {}\n  friend ostream&amp; operator &lt;&lt; (ostream&amp; os, const edge&amp; e) {\n      os &lt;&lt; \"(\" &lt;&lt; e.f &lt;&lt; \" -&gt; \" &lt;&lt; e.t &lt;&lt; \")\";\n      return os;\n  }\n};\n\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[maxv];\n\n// directed\nvoid insert_edge(int a, int b) {\n  edges.push_back(edge(a, b));\n  int s = edges.size() - 1;\n  G[a].push_back(s);\n}\n\nint dfn[maxv], low[maxv], vis[maxv], parent[maxv];\nint idx, N, M, nrs;\n\nvoid init() {\n  idx = 0;\n    nrs = 0; // n root sons\n  memset(vis, 0, sizeof(vis));\n  memset(parent, 0, sizeof(parent));\n  for (int i = 0; i &lt; maxv; i++) G[i].clear();\n}\n\nint iscut[maxv];\nint isbrd[maxe];\n\n// since there is no stack, we can use dfn[] as vis[] in fact.\n\nvoid tarjan(int u) {\n  dfn[u] = low[u] = ++idx;\n  vis[u] = 1;\n  for (int i = 0; i &lt; G[u].size(); i++) {\n      int v = edges[G[u][i]].t;\n      if (!vis[v]) {\n            // undirected graph's DFS tree\n          parent[v] = u;\n             if(u==1) nrs++;\n          tarjan(v);\n          low[u] = min(low[u], low[v]);\n          /* WHY cutvtx\n          dfn[u] &lt;= low[v] means subtree v can't point back \n          to vertices earlier than u.\n          so if we remove u, subtree v is isolated.\n          */\n          if (dfn[u] &lt;= low[v]) iscut[u] = 1;\n          /* WHY bridge\n          if dfn[u] == low[v], that edge has been in a loop,\n            so deleting it can't separate the graph.\n            low[u] != low[v] is also right.\n          */\n          if (dfn[u] &lt; low[v]) {\n                // detect multiple edges.\n                int cnt = 0;\n                for(int j=0; j&lt;G[u].size(); j++) if(edges[G[u][j]].t==v) cnt++;\n                if(cnt==1) isbrd[G[u][i]] = 1;\n            }\n      }\n      // avoid undirected reverse edge: u &lt;--*&gt;* v\n      else if (parent[u] != v) {\n          low[u] = min(low[u], dfn[v]);  // must be dfn[v]\n      }\n  }\n  // special for root !!!\n  if (u == 1 &amp;&amp; nrs &lt; 2) iscut[u] = 0;\n}\n\nint main() {\n  while (cin &gt;&gt; N &gt;&gt; M &amp;&amp; N &amp;&amp; M) {\n      init();\n      int a, b;\n      for (int i = 0; i &lt; M; i++) {\n          cin &gt;&gt; a &gt;&gt; b;\n          insert_edge(a, b);\n          insert_edge(b, a);\n      }\n      tarjan(1);\n      for (int i = 1; i &lt;= N; i++) {\n          if (iscut[i]) cout &lt;&lt; i &lt;&lt; endl;\n      }\n      for (int i = 0; i &lt; M; i++) {\n          if (isbrd[i]) cout &lt;&lt; edges[i] &lt;&lt; endl;\n      }\n  }\n}\n</code></pre> <ul> <li> <p>example</p> <ul> <li> <p>Caocao\u2019s Bridge</p> <p>\u5de8\u5751\u65e0\u6bd4\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxn = 1005;\nconst int inf = 0x7fffffff;\n\nvector&lt;int&gt; G[maxn];\n\nint dfn[maxn], low[maxn], vis[maxn], parent[maxn];\nint w[maxn][maxn];\nint idx, N, M;\n\nvoid init() {\n  idx = 0;\n  memset(vis, 0, sizeof(vis));\n  for(int i = 0; i &lt; maxn; i++) G[i].clear();\n}\n\nvoid tarjan(int u) {\n  dfn[u] = low[u] = ++idx;\n  vis[u] = 1;\n  for (int i = 0; i &lt; G[u].size(); i++) {\n      int v = G[u][i];\n      if (!vis[v]) {\n          parent[v] = u;\n          tarjan(v);\n          low[u] = min(low[u], low[v]);\n      }\n      else {\n          if (parent[u] != v) low[u] = min(low[u], low[v]);\n      }\n  }\n}\n\nvector&lt;pair&lt;int, int&gt;&gt; brd;\nvoid bridge() {\n  brd.clear();\n  for (int i = 1; i &lt;= N; i++) {\n      int v = parent[i];\n      if (dfn[v] &lt; low[i]) {\n          int cnt = 0;\n            // \u91cd\u8fb9\u68c0\u6d4b\n          for (int j = 0; j &lt; G[v].size(); j++) if (G[v][j] == i) cnt++;\n          if (cnt == 1) brd.push_back(make_pair(v, i));\n      }\n  }\n}\n\nint main() {\n  while (cin &gt;&gt; N &gt;&gt; M &amp;&amp; (N || M)) {\n      init();\n      int a, b, c;\n      for (int i = 0; i &lt; M; i++) {\n          cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n          G[a].push_back(b);\n          G[b].push_back(a);\n          w[a][b] = w[b][a] = c;\n      }\n      tarjan(1);\n        //\u4e0d\u8fde\u63a5\u68c0\u6d4b\uff0c\u76f4\u63a5\u8fd4\u56de0\n      bool flag = false;\n      for (int i = 1; i &lt;= N; i++) {\n          if (!vis[i]) {\n              cout &lt;&lt; 0 &lt;&lt; endl;\n              flag = true;\n              break;\n          }\n      }\n      if (flag) continue;\n      bridge();\n        //\u65e0\u6865\n      if (brd.empty()) {\n          cout &lt;&lt; -1 &lt;&lt; endl;\n          continue;\n      }\n      int ans = inf;\n      for (int i = 0; i &lt; brd.size(); i++) {\n          a = brd[i].first;\n          b = brd[i].second;\n          c = w[a][b];\n          ans = min(ans, c);\n      }\n        //\u81f3\u5c11\u4e00\u4e2a\u4eba\u53bb\u70b8\u6865\n      cout &lt;&lt; (ans == 0 ? 1 : ans) &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul> </li> </ul> </li> </ul> <ul> <li> <p>\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff08Biconnected Component\uff09</p> <p>\u4e0d\u5305\u542b\u5272\u70b9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\uff08\u5757\uff09\u3002\u4e00\u4e2a\u539f\u56fe\u7684\u5272\u70b9\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5176\u4ed6\u70b9\u4e0e\u8fb9\u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxv = 100;\nconst int maxe = 10000;\n\nstruct edge {\n  int f, t;\n  edge() {}\n  edge(int u, int v) :f(u), t(v) {}\n  friend ostream&amp; operator &lt;&lt; (ostream&amp; os, const edge&amp; e) {\n      os &lt;&lt; \" (\" &lt;&lt; e.f &lt;&lt; \" -&gt; \" &lt;&lt; e.t &lt;&lt; \") \";\n      return os;\n  }\n};\n\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[maxv];\n\n// directed\nvoid insert_edge(int a, int b) {\n  edges.push_back(edge(a, b));\n  int s = edges.size() - 1;\n  G[a].push_back(s);\n}\n\nint dfn[maxv], low[maxv], vis[maxv], parent[maxv];\nint idx, N, M;\n\nvoid init() {\n  idx = 0;\n  memset(vis, 0, sizeof(vis));\n  memset(parent, 0, sizeof(parent));\n  for (int i = 0; i &lt; maxv; i++) G[i].clear();\n}\n\n// edges stack\nstack&lt;int&gt; stk;\nvoid tarjan(int u) {\n  dfn[u] = low[u] = ++idx;\n  vis[u] = 1;\n  for (int i = 0; i &lt; G[u].size(); i++) {\n      int v = edges[G[u][i]].t;\n      if (!vis[v]) {\n          stk.push(G[u][i]); // push new edge\n          parent[v] = u;\n          tarjan(v);\n          low[u] = min(low[u], low[v]);\n            // if u is cut vertex, there is a vertex-BCC\n          if (dfn[u] &lt;= low[v]) {\n              cout &lt;&lt; \"BCC Block:\" &lt;&lt; endl;\n              edge e;\n              do {\n                  e = edges[stk.top()];\n                  stk.pop();\n                  cout &lt;&lt; e &lt;&lt; endl;\n              } while (!(e.f == u &amp;&amp; e.t == v));\n          }\n      }\n      else if (parent[u] != v) {\n          low[u] = min(low[u], low[v]);\n            // reverse edge to ancestor should be pushed. \n            // But to a child's edge must have been pushed earlier, so ignore it.\n          if (dfn[u] &gt; dfn[v]) stk.push(G[u][i]);\n      }\n  }\n}\n\nint main() {\n  while (cin &gt;&gt; N &gt;&gt; M &amp;&amp; N &amp;&amp; M) {\n      init();\n      int a, b;\n      for (int i = 0; i &lt; M; i++) {\n          cin &gt;&gt; a &gt;&gt; b;\n          insert_edge(a, b);\n          insert_edge(b, a);\n      }\n      tarjan(1);\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>\u8fb9\u53cc\u8fde\u901a\u5206\u91cf</p> <p>\u4e0d\u5305\u542b\u6865\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\uff0c\u53bb\u6389\u6240\u6709\u6865\u5373\u53ef\u3002</p> <p>\u6ce8\u610f\u5230\uff0clow\u6570\u7ec4\u672c\u8eab\u5df2\u7ecf\u662f\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u4e00\u4e2a\u67d3\u8272\u3002\u6240\u4ee5\u7f29\u70b9\u751a\u81f3\u4e0d\u7528\u663e\u793a\u627e\u51fa\u6240\u6709\u6865\u3002</p> </li> </ul> <ul> <li> <p>Examples</p> <ul> <li> <p>Road Construction</p> <p>\u7f29\u70b9\u4e3a\u4e00\u68f5\u6811\uff0c\u6dfb\u52a0\u8fb9\u4f7f\u5f97\u8fd9\u68f5\u6811\u53cc\u8054\u901a\u3002</p> <p>\u5b9a\u7406\uff1a\u6dfb\u52a0\u7684\u8fb9\u6570\u4e3a<code>ceil\uff08\u53f6\u5b50\u8282\u70b9\u6570/2) = trunc((\u53f6\u5b50\u8282\u70b9\u6570+1)/2)</code></p> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxv = 1005;\nconst int maxe = 1005;\n\nstruct edge {\n  int f, t;\n  edge() {}\n  edge(int u, int v) :f(u), t(v) {}\n};\n\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[maxv];\n\n// directed\nvoid insert_edge(int a, int b) {\n  edges.push_back(edge(a, b));\n  int s = edges.size() - 1;\n  G[a].push_back(s);\n}\n\nint dfn[maxv], low[maxv], vis[maxv], parent[maxv], deg[maxv];\nint idx, N, M, ncolor;\n\nvoid init() {\n  idx = 0;\n  ncolor = 0;\n  memset(vis, 0, sizeof(vis));\n  memset(deg, 0, sizeof(deg));\n  memset(parent, 0, sizeof(parent));\n  edges.clear();\n  for (int i = 0; i &lt; maxv; i++) G[i].clear();\n}\n\n// naive undirected tarjan\nvoid tarjan(int u) {\n  dfn[u] = low[u] = ++idx;\n  vis[u] = 1;\n  for (int i = 0; i &lt; G[u].size(); i++) {\n      int v = edges[G[u][i]].t;\n      if (!vis[v]) {\n          parent[v] = u;\n          tarjan(v);\n          low[u] = min(low[u], low[v]);\n      }\n      else if (parent[u] != v) {\n          low[u] = min(low[u], low[v]);\n      }\n  }\n}\n\nint solve() {\n    // sanity check for unconnection. \n  for (int u = 1; u &lt;= N; u++) if (!vis[u]) tarjan(u);\n    // check all edges\n  for (int u = 1; u &lt;= N; u++) {\n      for (int i = 0; i &lt; G[u].size(); i++) {\n          int v = edges[G[u][i]].t;\n            // bridge\uff0c only add low[u], since there are 2 edges between u&amp;v.\n          if (low[u] != low[v]) deg[low[u]]++;\n      }\n  }\n  int cnt = 0;\n    // count leaves\n  for (int c = 1; c &lt;= N; c++)\n      if (deg[c] == 1) cnt++;\n  return (cnt + 1) / 2;\n}\n\nint main() {\n  while (cin &gt;&gt; N &gt;&gt; M &amp;&amp; N &amp;&amp; M) {\n      init();\n      int a, b;\n      for (int i = 0; i &lt; M; i++) {\n          cin &gt;&gt; a &gt;&gt; b;\n          insert_edge(a, b);\n          insert_edge(b, a);\n      }\n      cout &lt;&lt; solve() &lt;&lt; endl;\n  }\n}\n</code></pre> <ul> <li>SPF</li> </ul> <p>\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u4e5f\u4e0d\u7528\u663e\u5f0f\u7684\u67d3\u8272\uff0c\u53ea\u9700\u8981\u6570\u6bcf\u4e2a\u5272\u70b9\u7684\u8fb9\u7684\u51fa\u70b9\u7684low[]\u7684\u79cd\u7c7b\u6570\u5373\u53ef\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nconst int maxv = 1005;\nconst int maxe = 10005;\nconst int maxw = 0x7fffffff;\n\nstruct edge {\n  int f, t, w;\n  edge() {}\n  edge(int u, int v, int w) :f(u), t(v), w(w) {}\n};\n\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[maxv];\n\n// directed\nvoid insert_edge(int a, int b, int c=0) {\n  edges.push_back(edge(a, b, c));\n  int s = edges.size() - 1;\n  G[a].push_back(s);\n}\n\nint vis[maxv], dfn[maxv], low[maxv], iscut[maxv], parent[maxv];\n\nint a, b, idx, N, nrs;\n\nvoid init() {\n  for (int i = 0; i &lt; maxv; i++) G[i].clear();\n  edges.clear();\n  memset(vis, 0, sizeof(vis));\n  memset(iscut, 0, sizeof(iscut));\n  memset(parent, -1, sizeof(parent));\n  idx = 0;\n  N = 0;\n  nrs = 0;\n}\n\nstack&lt;int&gt; stk;\nvoid tarjan(int u) {\n  dfn[u] = low[u] = idx++;\n  vis[u] = 1;\n  for (int i = 0; i &lt; G[u].size(); i++) {\n      int v = edges[G[u][i]].t;\n      if(!vis[v]) {\n          parent[v] = u;\n          if (u == 1) nrs++;\n          tarjan(v);\n          low[u] = min(low[u], low[v]);\n          if (dfn[u] &lt;= low[v]) {\n              iscut[u] = 1;\n          }\n      }\n      else if (parent[u] != v) {\n          low[u] = min(low[u], dfn[v]);\n          //low[u] = min(low[u], low[v]);\n      }\n  }\n  if (u == 1 &amp;&amp; nrs &lt; 2) iscut[u] = 0;\n}\n\nint main() {\n  int cas = 1;\n  while (cin &gt;&gt; a &amp;&amp; a) {\n      init();\n      if (cas != 1) cout &lt;&lt; endl;\n      cout &lt;&lt; \"Network #\" &lt;&lt; cas++ &lt;&lt; endl;\n      cin &gt;&gt; b;\n      insert_edge(a, b);\n      insert_edge(b, a);\n      N = max(max(a, b), N);\n      while (cin &gt;&gt; a &amp;&amp; a) {\n          cin &gt;&gt; b;\n          insert_edge(a, b);\n          insert_edge(b, a);\n          N = max(max(a, b), N);\n      }\n      // assume: graph is connected\n      tarjan(1);\n      bool flag = false;\n      set&lt;int&gt; cnt;\n      for (int i = 1; i &lt;= N; i++) {\n          if (iscut[i]) {\n              flag = true;\n              cnt.clear();\n              for (int j = 0; j &lt; G[i].size(); j++) \n                  cnt.insert(low[edges[G[i][j]].t]);\n              cout &lt;&lt; \"  SPF node \" &lt;&lt; i &lt;&lt; \" leaves \" &lt;&lt; cnt.size() &lt;&lt; \" subnets\" &lt;&lt; endl;\n          }\n      }\n      if (!flag) cout &lt;&lt; \"  No SPF nodes\" &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E5%B9%B6%E6%9F%A5%E9%9B%86/","title":"\u5e76\u67e5\u96c6","text":""},{"location":"algorithm/advanced/%E5%B9%B6%E6%9F%A5%E9%9B%86/#disjoint-set","title":"\u5e76\u67e5\u96c6 Disjoint-Set","text":"<ul> <li> <p>Operations required in O(1)</p> <p><code>Merge(A, B)</code>: merge two sets.</p> <p><code>Query(A, B)</code>: query if A and B are in the same set.</p> </li> </ul> <ul> <li> <p>Naive Algorithms</p> <ul> <li> <p>Number each element.</p> <p><code>Query</code> is O(1), but <code>Merge</code> is O(N)</p> </li> </ul> <ul> <li> <p>Balanced Binary Tree</p> <p><code>merge()</code>will add the depth of a tree.</p> <p><code>getroot()</code> may be O(N), N is the tree's depth.</p> </li> </ul> </li> </ul> <ul> <li> <p>Path Compression (\u8def\u5f84\u538b\u7f29)</p> <p>Improvement of BBT method, by rearranging every node directly to the root when the node is queried (this step may be O(n)). But next time querying it we need only O(1).</p> <pre><code>int parent[N];\n\nvoid init(int n){\n    for(int i=0;i&lt;n;i++){\n        parent[i]=i;\n    }\n}\n\n// add other data\nint getRoot(int a){\n    if(parent[a] != a)\n        parent[a] = getRoot(parent[a]);\n    return parent[a];\n}\n\n// add other data\nvoid merge(a, b){\n    parent[getRoot(b)] = getRoot(a);\n}\n\nbool query(a, b){\n    return getRoot(a) == getRoot(b);\n}\n</code></pre> <p><code>getroot()</code>\u5e73\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5728N\u4e0d\u662f\u5f88\u5927\u7684\u65f6\u5019\u662f\u5e38\u6570\u4e14\u4e0d\u8d85\u8fc74N\u3002</p> </li> </ul> <ul> <li> <p>Tips</p> <ul> <li>\"In the same set (or have the same root) \" means they have a certain relationship, not that they are in the same group.</li> </ul> <ul> <li> <p>Weighted Disjoint Set</p> <p>weights are used to show the relationship between this node and the root node. (not the parent node!!!)</p> <pre><code>int p[N];\nint w[N];\n\nvoid init(int n){\n    for (int i = 0;i &lt; n;i++) p[i] = i, w[i] = 0;\n}\n\nint par(int x){\n    if (x == p[x]) return x;\n    int fx = p[x];\n    p[x] = par(fx);\n    w[x] = (w[x] + w[fx]) % 3; // iteratively compress w[]\n    return p[x];\n}\n\nvoid merge(int x, int y){\n    int fx = par(x), fy = par(y);\n    p[fy] = fx;  // always only change parents\n    w[fy] = (w[x] - w[y] + 3) % 3; \n}\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>Examples</p> <ul> <li>POJ1611 the suspects</li> </ul> <ul> <li> <p>POJ1988 cube stacking</p> <p><code>sum[N],under[N]</code></p> <p>When to change <code>under[N]</code> to keep O(1) time complexity?</p> <p>only change (original) root's <code>under</code>. When querying child node's <code>under</code>, sum it until root and do path compression.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int maxn = 30005;\n\nint N, M;\nint p[maxn], sum[maxn], under[maxn];\n\nvoid init(int N) {\n    for (int i = 1; i &lt;= N; i++) {\n        p[i] = i;\n        sum[i] = 1;\n        under[i] = 0;\n    }\n}\n\nint par(int x) {\n    if (p[x] == x) return x;\n    int f = p[x];\n    p[x] = par(f);\n    under[x] += under[f];\n    return p[x];\n}\n\nvoid merge(int x, int y) {\n    int fx = par(x);\n    int fy = par(y);\n    p[fy] = fx;\n    under[fy] = sum[fx];\n    sum[fx] += sum[fy];\n}\n\nchar c;\nint x, y;\n\nint main() {\n    init(maxn);\n    cin &gt;&gt; M;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; c;\n        if (c == 'C') {\n            cin &gt;&gt; x;\n            par(x);\n            cout &lt;&lt; under[x] &lt;&lt; endl;\n        }\n        else {\n            cin &gt;&gt; x &gt;&gt; y;\n            merge(y, x);\n        }\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>POJ1182 food chains</p> <p>use vector to deduce the formula of <code>merge</code>.</p> <p>Relationship between objects are usually a circuit. </p> <pre><code>fx &lt;- ??? - fy\n^           ^|\n|w[x]   w[y]||-w[y]     ===&gt; ??? = (w[x] - w[y] + d - 1 + 3) %3\n|           |v                              // +3 for safety\nx  &lt;-(d-1)-- y          // d=1 means the same, d=2 means x eats y so w'[y] is 1.\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nconst int maxN = 50005;\n\nint par[maxN];\nint dis[maxN];\n\nvoid init(int n) {\n    for (int i = 0; i &lt;= n; i++)\n        par[i] = i;\n}\n\nint parent(int x) {\n    if (par[x] == x) return par[x];\n    int f = par[x];\n    par[x] = parent(f);\n    dis[x] = (dis[x] + dis[f]) % 3;\n    return par[x];\n}\n\nvoid merge(int d, int x, int y) {\n    int fx = parent(x);\n    int fy = parent(y);\n    par[fy] = fx;\n    dis[fy] = (dis[x] - dis[y] + d + 2) % 3;\n}\n\nbool query(int x, int y) {\n    return parent(x) == parent(y);\n}\n\nint main() {\n    int N, K, D, X, Y;\n    int res = 0;\n    memset(dis, 0, sizeof(dis));\n    cin &gt;&gt; N &gt;&gt; K;\n    init(N);\n    for (int i = 0; i &lt; K; i++) {\n        cin &gt;&gt; D &gt;&gt; X &gt;&gt; Y;\n        if (X &gt; N || Y &gt; N) {\n            res++;\n            continue;\n        }\n        if (!query(X, Y)) {\n            merge(D, X, Y);\n        }\n        else if (D == 1) {\n            if (dis[X] != dis[Y]) {\n                res++;\n            }\n        }\n        else if (D == 2) {\n            if (dis[Y] != (dis[X] + 1) % 3) {\n                res++;\n            }\n        }\n    }\n    cout &lt;&lt; res &lt;&lt; endl;\n}\n</code></pre> </li> </ul> <ul> <li> <p>A bug's Life</p> <p>ditto but mod 2 for same or different.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nconst int maxN = 2005;\n\nint p[maxN];\nint w[maxN];\n\nvoid init(int n) {\n    for (int i = 1; i &lt;= n; i++) {\n        p[i] = i;\n        w[i] = 0;\n    }\n}\n\nint parent(int x) {\n    if (p[x] == x) return p[x];\n    int f = p[x];\n    p[x] = parent(f);\n    w[x] = (w[x] + w[f]) % 2;\n    return p[x];\n}\n\nvoid merge(int x, int y) {\n    int fx = parent(x);\n    int fy = parent(y);\n    p[fy] = fx;\n    w[fy] = (w[x] - w[y] +1) % 2;\n}\n\nbool query(int x, int y) {\n    return parent(x) == parent(y);\n}\n\nint main() {\n    int S, N, I, a, b;\n    bool flag = false;\n    cin &gt;&gt; S;\n    for (int s = 1; s &lt;= S; s++) {\n        cin &gt;&gt; N &gt;&gt; I;\n        init(N);\n        flag = false;\n        if (s != 1) cout &lt;&lt; endl;\n        for (int i = 0; i &lt; I; i++) {\n            cin &gt;&gt; a &gt;&gt; b;\n            if (flag) continue; \n            // in the same tree, maybe suspicious\n            if (query(a, b)) {\n                if (w[a] == w[b]) {\n                    flag = true;\n                }\n            }\n            else merge(a, b);\n        }\n        cout &lt;&lt; \"Scenario #\" &lt;&lt; s &lt;&lt; \":\" &lt;&lt; endl;\n        if(flag) cout &lt;&lt; \"Suspicious bugs found!\" &lt;&lt; endl;\n        else cout &lt;&lt; \"No suspicious bugs found!\" &lt;&lt; endl;\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Mayor's poster</p> <p>\u5947\u5999\u5e76\u67e5\u96c6\u3002\u4e0d\u4f7f\u7528merge\uff0c\u800c\u4ec5\u4ec5\u628a\u5e76\u67e5\u96c6\u5f53\u505a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u9ad8\u6548\u63cf\u8ff0\u533a\u95f4\u7684\u4e00\u4e2a\u6027\u8d28\uff08\u662f\u5426\u88ab\u5360\u636e\uff09\uff0c\u800c\u4e0d\u7528\u904d\u5386\u533a\u95f4\uff08\u529f\u80fd\u76f8\u5f53\u4e8e\u6700\u7b80\u5316\u7684\u7ebf\u6bb5\u6811\uff09\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nconst int maxn = 20005; // 2*maxPosters, start+end\nint N;\n\nint par[maxn];\n\nvoid init(int n) {\n    for (int i = 0; i &lt;= n; i++) par[i] = i;\n}\nint findpar(int n) {\n    if (n == par[n]) return n;\n    par[n] = findpar(par[n]);\n    return par[n];\n}\n\n// discretization\nvector&lt;int&gt; order;\nvector&lt;pair&lt;int, int&gt;&gt; posters;\n\nint getindex(vector&lt;int&gt;&amp; order, int key) {\n    return lower_bound(order.begin(), order.end(), key) - order.begin();\n}\n\nint main() {\n    int cas, x, y;\n    cin &gt;&gt; cas;\n    while (cas--) {\n        cin &gt;&gt; N;\n        order.clear();\n        posters.clear();\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; x &gt;&gt; y;\n            order.push_back(x);\n            order.push_back(y);\n            posters.push_back(pair&lt;int, int&gt;(x, y));\n        }\n        sort(order.begin(), order.end());\n        // unique returns new vector's end iterator.\n        order.erase(unique(order.begin(), order.end()), order.end());\n        // discretize poster's regions\n        for (int i = 0; i &lt; N; i++) {\n            posters[i].first = getindex(order, posters[i].first);\n            posters[i].second = getindex(order, posters[i].second);\n        }\n        init(order.size());\n        int res = 0;\n        for (int i = N - 1; i &gt;= 0; i--) {\n            bool flag = false;\n            for (int j = posters[i].first; j &lt;= posters[i].second; j = findpar(j)) {\n                if (par[j] == j) {\n                    flag = true;\n                    par[j] = j + 1;\n                    j++;\n                }\n            }\n            if (flag) res++;\n        }\n        cout &lt;&lt; res &lt;&lt; endl;\n    }\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"algorithm/advanced/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/","title":"Shortest path","text":"<ul> <li> <p>Dijkstra</p> <p>\u4e0d\u542b\u8d1f\u6743\u8fb9\u7684\u6709\u5411\u6216\u65e0\u5411\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u3002Greedy.</p> <p>\u4e3a\u4f55\u8d1f\u6743\u8fb9\u4e0d\u53ef\uff1aDijkstra\u662f\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u800c\u8d1f\u6743\u8fb9\u4f1a\u5bfc\u81f4\u8d2a\u5fc3\u7b97\u6cd5\u5931\u8d25\uff0c\u56e0\u4e3a\u53ef\u80fd\u8981\u7ed5\u8fdc\u8def\u3002</p> <pre><code>a---3---b\n|       |\n4___c__-2\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a</p> </li> </ul> \\[ \\displaylines{   T(n) = O(E)*dk_Q + O(V)*em_Q } \\] <p>\\(dk_Q\\) means Decrease Key, we need to sort all edges once in the whole algo.</p> <p>\\(em_Q\\) means Extract Min, for each vertex, we calculate the next shortest edge once.</p> min heap brute dk logV (insert in heap) 1 (no sorting) em logV (pop heap) V^2 (one by one) <p>So a min heap Dijkstra's time complexity is \\(O((E+V)logV) \\approx O(ElogV)\\)</p> <p>If considering we keep old edges in the heap, the operation may at worst be \\(O(logE)\\). So \\(O((E+V)logE)\\) is also right.</p> <ul> <li> <p>Bellman-Ford</p> <p>\u542b\u8d1f\u6743\u8fb9\u7684\u6709\u5411\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u3002Dynamic Programming.</p> <p>\u53ef\u4ee5\u5224\u65ad\u8d1f\u73af\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\\(O(EV)\\)</p> </li> </ul> <ul> <li> <p>SPFA</p> <p>\u961f\u5217\u4f18\u5316\u7684BF\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5224\u65ad\u8d1f\u73af\u3002</p> <p>\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\\(O(E)\\)\u3002</p> </li> </ul> <ul> <li> <p>Floyd</p> <p>\\(O(V^3)\\)</p> <p>\u5168\u5c40\uff0c\u52a8\u89c4\uff0c\u652f\u6301\u8d1f\u6743\u3002</p> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nconst int maxv = 30005;\nconst int maxe = 150005;\nconst int maxw = 0x7fffffff;\nint N, M;\n\nstruct edge {\n    int f, t, w;\n    edge() {}\n    edge(int u, int v, int w) :f(u), t(v), w(w) {}\n};\n\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[maxv];\n\n// directed\nvoid insert_edge(int a, int b, int c) {\n    edges.push_back(edge(a, b, c));\n    int s = edges.size() - 1;\n    G[a].push_back(s);\n}\n\nint dist[maxv], vis[maxv];\n\nbool cmp(int a, int b) {\n    return dist[a] &gt; dist[b];\n}\n\nvoid dijkstra(int s) {\n    for (int i = 1; i &lt;= N; i++) {\n        dist[i] = maxw;\n        vis[i] = 0;\n    }\n    dist[s] = 0;\n    priority_queue&lt;int, vector&lt;int&gt;, bool(*)(int, int)&gt; que(cmp);\n    que.push(s);\n    while (!que.empty()) {\n        int u = que.top(); que.pop();\n        if (vis[u]) continue;\n        vis[u] = 1;\n        for (int i = 0; i &lt; G[u].size(); i++) {\n            int e = G[u][i];\n            int v = edges[e].t;\n            if (vis[v]) continue;\n            if (dist[v] &gt; dist[u] + edges[e].w) {\n                dist[v] = dist[u] + edges[e].w;\n                que.push(v);\n            }\n        }\n    }\n}\n\nbool bellmanford(int s) {\n    for (int i = 1; i &lt;= N; i++) dist[i] = maxw;\n    dist[s] = 0;\n    // run (N - 1) times\n    for (int k = 1; k &lt; N; k++) {\n        // loop all edges\n        for (int i = 0; i &lt; edges.size(); i++) {\n            int u = edges[i].f;\n            int v = edges[i].t;\n            if (dist[v] &gt; dist[u] + edges[i].w) \n                dist[v] = dist[u] + edges[i].w;\n        }\n    }\n    // run 1 more time to detect negative loop.\n    for (int i = 0; i &lt; edges.size(); i++) {\n        int u = edges[i].f;\n        int v = edges[i].t;\n        if (dist[v] &gt; dist[u] + edges[i].w)\n            return true; // if the dist can still be updated, there must be a negative loop.\n    }\n    return false;\n}\n\nbool spfa(int s) {\n    for (int i = 1; i &lt;= N; i++) dist[i] = maxw, vis[i] = 0; // vis is used as cnt\n    dist[s] = 0;\n    queue&lt;int&gt; q; // stack is also OK.\n    q.push(s);\n    while (!q.empty()) {\n        int p = q.front(); q.pop();\n        for (int i = 0; i &lt; G[p].size(); i++) {\n            edge&amp; e = edges[G[p][i]];\n            if (dist[e.t] &gt; dist[e.f] + e.w) {\n                dist[e.t] = dist[e.f] + e.w;\n                q.push(e.t);\n                if (vis[e.t]++ &gt;= N) return true; // if a point is enqueued for N times, there must be a negative loop.\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M;\n    int a, b, c;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        insert_edge(a, b, c);\n    }\n    dijkstra(1);\n    //bellmanford(1);\n    //s\n    cout &lt;&lt; dist[N] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/advanced/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/#examples","title":"Examples","text":"<ul> <li> <p>Currency Exchange</p> <p>\u6700\u957f\u8def+\u6b63\u73af\u5224\u65ad\uff0c\u8bbe\u7f6e\u6e90\u70b9\u4e3a\u6301\u6709\u8d27\u5e01V\uff0c\u5176\u4ed6\u70b9\u521d\u59cb\u53160\uff0c\u666e\u901a\u7684\u6309\u7167\u89c4\u5219\u8ba1\u7b97\u8def\u5f84\u5373\u53ef\u3002\u6ce8\u610f\u5224\u65ad\u6b63\u73af\u5e76\u4e0d\u9700\u8981\u4f20\u64ad\u56de\u6e90\u70b9\uff0c\u56e0\u4e3aBF\u53ea\u989d\u5916\u4f20\u64ad\u4e00\u8f6e\uff0c\u6e90\u70b9\u6709\u53ef\u80fd\u6ca1\u6709\u88ab\u66f4\u65b0\u5230\uff0c\u4f46\u662f\u53ea\u8981\u6709\u6b63\u73af\uff0c\u591a\u8f6e\u4e4b\u540e\u4e00\u5b9a\u53ef\u4ee5\u4f20\u56de\u6e90\u70b9\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nconst int maxv = 105;\nconst int maxe = 1005;\n\nstruct edge {\n  int f, t;\n  double w, c;\n  edge() {}\n  edge(int u, int v, double w, double c) :f(u), t(v), w(w),c(c) {}\n};\n\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[maxv];\n\n// directed\nvoid insert_edge(int a, int b, double w, double c) {\n  edges.push_back(edge(a, b, w, c));\n  int s = edges.size() - 1;\n  G[a].push_back(s);\n}\n\nint N, M, S;\ndouble V;\n\nint a, b;\ndouble c, d, e, f;\n\ndouble dist[maxv];\n\nbool bellmanford(int s, double v) {\n  memset(dist, 0, sizeof(dist));\n  dist[s] = v;\n  for (int k = 1; k &lt; N; k++) {\n      bool flag = false;\n      for (int u = 1; u &lt;= N; u++) {\n          for (int i = 0; i &lt; G[u].size(); i++) {\n              int e = G[u][i];\n              int v = edges[e].t;\n              if (dist[v] &lt; (dist[u] - edges[e].c) * edges[e].w) {\n                  dist[v] = (dist[u] - edges[e].c) * edges[e].w;\n                  flag = true;\n              }\n          }\n      }\n      if (!flag) break; // optim\n  }\n  for (int u = 1; u &lt;= N; u++) {\n      for (int i = 0; i &lt; G[u].size(); i++) {\n          int e = G[u][i];\n          int v = edges[e].t;\n          if (dist[v] &lt; (dist[u] - edges[e].c)*edges[e].w) return true;\n      }\n  }\n  return false;\n}\n\nint main() {\n  cin &gt;&gt; N &gt;&gt; M &gt;&gt; S &gt;&gt; V;\n  for (int i = 0; i &lt; M; i++) {\n      cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f;\n      insert_edge(a, b, c, d);\n      insert_edge(b, a, e, f);\n  }\n  cout &lt;&lt; (bellmanford(S, V)?\"YES\":\"NO\") &lt;&lt; endl;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Warmholes </p> <p>spfa version.</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define P pair&lt;int,int&gt;\n\nusing namespace std;\n\nconst int maxn = 505;\nconst int inf = 0x3f3f3f3f;\nint N, M, W;\n\nstruct edge {\n  int f, t, w;\n  edge() {}\n  edge(int f, int t, int w) :f(f), t(t), w(w) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nint dist[maxn], times[maxn];\n\nbool spfa(int s) {\n  fill(dist, dist + N + 1, inf);\n  fill(times, times + N + 1, 0);\n  dist[s] = 0;\n  queue&lt;int&gt; q; // stack is also OK.\n  q.push(s);\n  while (!q.empty()) {\n      int p = q.front(); q.pop();\n      for (int i = 0; i &lt; G[p].size(); i++) {\n          edge&amp; e = G[p][i];\n          if (dist[e.t] &gt; dist[e.f] + e.w) {\n              dist[e.t] = dist[e.f] + e.w;\n              q.push(e.t);\n              if (times[e.t]++ &gt;= N) return true;\n          }\n      }\n  }\n  return false;\n}\n\nint T, x, y, w;\n\nint main() {\n  scanf(\"%d\", &amp;T);\n  while (T--) {\n      scanf(\"%d%d%d\", &amp;N, &amp;M, &amp;W);\n      for (int i = 1; i &lt;= N; i++) G[i].clear();\n      for (int i = 0; i &lt; M; i++) {\n          scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;w);\n          G[x].push_back(edge(x, y, w));\n          G[y].push_back(edge(y, x, w));\n      }\n      for (int i = 0; i &lt; W; i++) {\n          scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;w);\n          G[x].push_back(edge(x, y, -w));\n      }\n      cout &lt;&lt; (spfa(1) ? \"YES\" : \"NO\") &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/","title":"Binary Indexed Tree","text":""},{"location":"algorithm/advanced/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#basic","title":"Basic","text":"<ul> <li> <p>Definition</p> <pre><code>// build C from a, i starts from 1.\nC[i] = a[i - lowbit(i) + 1] + a[i-lowbit(i)+2] + ... + a[i]\n\n// lowbit operator\n// replacing all 1 except the last to 0.\n// e.g. x = 00001101, -x = 11110011, lowbit(x) = 00000001\n// x2 = x + lowbit(x) = 00001110, -x = 11110010, lowbit(x2) = 00000010\n// x3 = x2 + lowbit(x2) = 00010000\nlowbit(x) = x &amp; (-x)  \n</code></pre> </li> </ul> <ul> <li> <p>Usage</p> <p>\\(O(log\\ N)\\): \u5355\u70b9\u66f4\u65b0\uff0c\u533a\u95f4\u6c42\u548c\u3002</p> <p>\u8bc1\u660e\uff1a</p> <p>\\(\\sum_i^j = sum(j) - sum(i-1)\\)</p> <p>\\(sum(k) = C[n_1] + C[n_2] + ... + C[k - lowbit(k)] + C[k]\\)</p> <p>expanding \\(C[\\cdot]\\) can prove the correctness.</p> <p>\\(k-lowbit(k)\\) can eliminate the leftmost 1 of k.</p> <p>so there are at most \\(log\\ N\\) elements.</p> <p>updating \\(a[i]\\) will lead to updating of :</p> <p>\\(C[i], C[i + lowbit(i)], ..., C[n_m]\\)</p> <p>until \\(n_m + lowbit(n_m) &gt; length(a)\\)</p> <p>there are at most \\(log\\ N\\) elements again.</p> <p>\\(O(N)\\): build time complexity</p> </li> </ul> \\[ \\displaylines{   C[k] = sum(k)-sum(k-lowbit(k)) } \\] <ul> <li> <p>Implementation</p> <pre><code>int bit[maxn];\nint N;\n\nint lowbit(int x) { return x &amp; (-x); }\n\nvoid add(int i, int v) {\n  for (i; i &lt;= N; i += lowbit(i)) bit[i] += v;\n}\n\n// sum of arr[1, i]\nint getsum(int i) {\n  int res = 0;\n  for (i; i &gt; 0; i -= lowbit(i)) res += bit[i];\n  return res;\n}\n</code></pre> <p>Variant (reversed BIT) :</p> <pre><code>int bit[maxn];\nint N;\n\nint lowbit(int x) { return x &amp; (-x); }\n\nvoid add(int i, int v) {\n    for (i; i &gt; 0; i -= lowbit(i)) bit[i] += v;\n}\n\n// sum of arr[i, N]\nint getsum(int i) {\n  int res = 0;\n    for (i; i &lt;= N; i += lowbit(i)) res += bit[i];\n  return res;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Examples</p> <ul> <li> <p>POJ 3321 Apple Tree</p> <p>the key point is how to arrange the nodes so that a sub tree falls into a region in disjoint set. By performing a DFS and index nodes with entering and leaving time, we can solve it.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int maxN = 100000 + 5;\nstring q;\nint N, M, a, b;\nvector&lt;int&gt; t[maxN];\nint S[maxN], E[maxN];\n\nint arr[maxN];\nint bit[maxN];\n\nint lowbit(int x) {\n    return x &amp; (-x);\n}\n\nvoid modify(int i, int v) {\n    while (i &lt;= N) {\n        bit[i] += v;\n        i += lowbit(i);\n    }\n}\n\nint getsum(int i) {\n    int res = 0;\n    while (i &gt; 0) {\n        res += bit[i];\n        i -= lowbit(i);\n    }\n    return res;\n}\n\n\nint ti = 1;\nvoid dfs(int n) {\n    S[n] = ti;\n    for (int to : t[n]) {\n        ti++;\n        dfs(to);\n    }\n    E[n] = ti;\n}\n\nint main() {\n    memset(bit, 0, sizeof(bit));\n    cin &gt;&gt; N;\n    for (int i = 1; i &lt;= N; i++) arr[i] = 1;\n    for (int i = 1; i &lt;= N; i++) modify(i, 1);\n    for (int i = 1; i &lt; N; i++) {\n        cin &gt;&gt; a &gt;&gt; b;\n        t[a].push_back(b);\n    }\n    dfs(1);\n    cin &gt;&gt; M;\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; q &gt;&gt; a;\n        if (q == \"Q\") {\n            int res = getsum(E[a]) - getsum(S[a] - 1);\n            cout &lt;&lt; res &lt;&lt; endl;\n        }\n        else {\n            int value = arr[a] == 0 ? 1 : -1;\n            arr[a] += value;\n            modify(S[a], value);\n        }\n    }\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"algorithm/advanced/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#generalized-bit","title":"Generalized BIT","text":"<p>use C[k] to store Maximum, Minimum, ...</p> <p>\uff08\u590d\u6742\u5ea6\u4e0d\u4f18\u79c0\uff0c\u4ee3\u7801\u91cf\u4e5f\u4e0d\u4f4e\uff0c\u8fd8\u662f\u7528\u7ebf\u6bb5\u6811\u516b</p> <pre><code>// maximum BIT\nconst int maxn = 100;\nint N;\nint arr[maxn], bit[maxn];\n\nint lowbit(int x) { return x &amp; (-x); }\n\nvoid init(int n) {\n    for (int i = 1; i &lt;= n; i++) {\n        bit[i] = arr[i];\n        for (int j = 1; j &lt; lowbit(i); j *= 2) \n            bit[i] = max(bit[i], bit[i - j]);\n    }\n}\n\n// O(lg^2n)\nvoid update(int i, int x) {\n    arr[i] = x;\n    for (i; i &lt;= N; i += lowbit(i)) {\n        bit[i] = x;\n        for (int j = 1; j &lt; lowbit(i); j *= 2)\n            bit[i] = max(bit[i], bit[i - j]);\n    }\n}\n\n// O(lg^2n)\nint query(int i, int j) {\n    int ans = 0;\n    while (j &gt;= i) {\n        ans = max(ans, arr[j]);\n        for (j-=1; j - lowbit(j) &gt;= i; j -= lowbit(j))\n            ans = max(ans, bit[j]);\n    }\n    return ans;\n}\n</code></pre> <ul> <li> <p>Examples</p> <ul> <li> <p>\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217</p> <p>DP is \\(O(N^2)\\). We need \\(O(Nlog\\ N)\\):</p> </li> </ul> <pre><code>// binary_search based method, also NlogN.\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nconst int maxn = 300005;\nconst int inf = 0x7fffffff;\nint N;\nint arr[maxn], dp[maxn];\n\nint main() {\n  scanf(\"%d\", &amp;N);\n  for (int i = 0; i &lt; N; i++) scanf(\"%d\", arr + i);\n  for (int i = 0; i &lt; N; i++) dp[i] = inf;\n  int ans = 0;\n  for (int i = 0; i &lt; N; i++) {\n      int idx = lower_bound(dp, dp + N, arr[i]) - dp;\n      dp[idx] = arr[i];\n      if (idx == ans) ans++;\n  }\n  cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#2-dim-tree-like-bit","title":"2-Dim Tree-like  BIT","text":"<p>the tree structure of  a 2D BIT in 10x10:</p> <pre><code>  1   2   1   4   1   2   1   8   1   2\n  2   4   2   8   2   4   2  16   2   4\n  1   2   1   4   1   2   1   8   1   2\n  4   8   4  16   4   8   4  32   4   8\n  1   2   1   4   1   2   1   8   1   2\n  2   4   2   8   2   4   2  16   2   4\n  1   2   1   4   1   2   1   8   1   2\n  8  16   8  32   8  16   8  64   8  16\n  1   2   1   4   1   2   1   8   1   2\n  2   4   2   8   2   4   2  16   2   4\n</code></pre> <ul> <li> <p>Examples: Mobile phones</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int maxN = 1024 + 5;\nint N;\n\nint bit[maxN][maxN];\n\nint lowbit(int x) {\n  return x &amp; (-x);\n}\n\nvoid modify(int x, int y, int v) {\n  for (int i = x; i &lt;= N; i += lowbit(i)) {\n      for (int j = y; j &lt;= N; j += lowbit(j)) {\n          bit[i][j] += v;\n      }\n  }\n}\n\nint getsum(int x, int y) {\n  int res = 0;\n  for (int i = x; i &gt; 0; i -= lowbit(i)) {\n      for (int j = y; j &gt; 0; j -= lowbit(j)) {\n          res += bit[i][j];\n      }\n  }\n  return res;\n}\n\nint getsquare(int x1, int y1, int x2, int y2) {\n  return getsum(x2, y2) - getsum(x2, y1-1) - getsum(x1-1, y2) + getsum(x1-1, y1-1);\n}\n\nvoid print() {\n  for (int x = 1; x &lt;= N; x++) {\n      for (int y = 1; y &lt;= N; y++) {\n          cout &lt;&lt; bit[x][y] &lt;&lt; \" \";\n      }\n      cout &lt;&lt; endl;\n  }\n}\n\nint main() {\n  memset(bit, 0, sizeof(bit));\n  int n, a, b, c, d;\n  bool flag = true;\n  while (cin &gt;&gt; n) {\n      switch (n) {\n      case 0:\n          cin &gt;&gt; N;\n          break;\n      case 1:\n          cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n          modify(a+1, b+1, c);\n          break;\n      case 2:\n          cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n          cout &lt;&lt; getsquare(a+1, b+1, c+1, d+1) &lt;&lt; endl;\n          break;\n      case 3:\n          flag = false;\n          break;\n      }\n      if (!flag) break;\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91/","title":"Segment Tree","text":""},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91/#use","title":"use","text":"<p>\\(log(N)\\) \u533a\u95f4\u66f4\u65b0\uff0c\u533a\u95f4\u67e5\u8be2\u3002</p>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91/#definition","title":"definition","text":"<p>root is an interval [a, b], left child is [a, (a+b)/2], right child is [(a+b)/2+1, b]. Leaves are numbers.</p> <p>depth is  \\(ceil(log_2(b-a+1))+1\\)</p>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91/#implement","title":"Implement","text":"<ul> <li>linked nodes</li> </ul> <pre><code>struct node{\n    int L,R;\n    node *left, *right;\n    int data;\n};\n</code></pre> <ul> <li> <p>one-dim array</p> <p>Not a complete tree, but nearly.</p> </li> </ul> \\[ \\displaylines{   2*2^{ceil(log_2(n))}-1 \\le 4n-1 } \\] <p>so it is safe if we assign <code>[4 * maxn]</code> nodes, then we can use \\(2*i+1, 2*i+2\\) instead of <code>node*</code></p>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91/#operations","title":"Operations","text":"<ul> <li> <p>\u533a\u95f4\u5206\u89e3</p> <p>\u9012\u5f52\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5206\u89e3\uff0c\u627e\u5230\u82e5\u5e72\u4e2a\u7ec8\u6b62\u8282\u70b9\u3002\u6bcf\u5c42\u6700\u591a\u4e24\u4e2a\u7ec8\u6b62\u8282\u70b9\u3002</p> <p>Time Complexity: \\(O(log(N))\\)</p> </li> </ul> <ul> <li>\u533a\u95f4\u67e5\u8be2\u672c\u8d28\u5c31\u662f\u533a\u95f4\u5206\u89e3</li> </ul> <ul> <li>\u533a\u95f4\u66f4\u65b0: \u533a\u95f4\u5206\u89e3+lazy updating</li> </ul>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91/#examples","title":"Examples","text":"<ul> <li> <p>Balanced Lineup POJ 3264</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define ll long long\nusing namespace std;\n\nconst int maxn = 50005;\nconst int inf = 0x7fffffff;\nint N, Q;\nint a, b, d;\nchar c;\n\nint MIN = inf, MAX = 0;\n\nstruct node {\n  int L, R;\n  int ma, mi;\n  int mid() { return (L + R) / 2; }\n};\n\nnode tree[4 * maxn];\nint arr[maxn];\n\nvoid build(int root, int l, int r) {\n  tree[root].L = l;\n  tree[root].R = r;\n  if (l == r) {\n      tree[root].mi = tree[root].ma = arr[l];\n      return;\n  }\n  build(2 * root + 1, l, (l + r) / 2);\n  build(2 * root + 2, (l + r) / 2 + 1, r);\n  tree[root].mi = min(tree[2 * root + 1].mi, tree[2 * root + 2].mi);\n  tree[root].ma = max(tree[2 * root + 1].ma, tree[2 * root + 2].ma);\n}\n\nvoid query(int root, int l, int r) {\n  //cout &lt;&lt; \"query \" &lt;&lt; root &lt;&lt; \" \" &lt;&lt; l &lt;&lt; \"-\" &lt;&lt; r &lt;&lt; endl;\n  if (tree[root].L == l &amp;&amp; tree[root].R == r) {\n      MIN = min(MIN, tree[root].mi);\n      MAX = max(MAX, tree[root].ma);\n      return;\n  }\n  int mid = tree[root].mid();\n  if (r &lt;= mid)\n      query(2 * root + 1, l, r);\n  else if (l &gt; mid)\n      query(2 * root + 2, l, r);\n  else {\n      query(2 * root + 1, l, mid);\n      query(2 * root + 2, mid + 1, r);\n  }\n}\n\nint main() {\n  scanf(\"%d%d\", &amp;N, &amp;Q);\n  for (int i = 0; i &lt; N; i++){\n      scanf(\"%d\", &amp;arr[i]);\n  }\n  build(0, 0, N - 1);\n  for (int i = 0; i &lt; Q; i++) {\n      MIN = inf, MAX = 0;\n      scanf(\"%d%d\", &amp;a, &amp;b);\n      query(0, a - 1, b - 1);\n      cout &lt;&lt; MAX - MIN &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>A simple problem with integers POJ 3468</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define ll long long\n\nusing namespace std;\n\nconst int maxn = 100005;\nint N, Q;\nint a, b;\nll d;\nchar c;\n\nstruct node {\n  int L, R;\n  ll sum, inc;\n  int mid() { return (L + R) / 2; }\n};\n\nnode tree[4 * maxn];\n\nvoid build(int root, int l, int r) {\n  tree[root].L = l;\n  tree[root].R = r;\n  tree[root].sum = 0;\n  tree[root].inc = 0;\n  if (l == r) return;\n  build(2 * root + 1, l, (l + r) / 2);\n  build(2 * root + 2, (l + r) / 2 + 1, r);\n}\n\nvoid modify(int root, int l, int r, ll v) {\n  if (tree[root].L == l &amp;&amp; tree[root].R == r) {\n      tree[root].inc += v;\n      return;\n  }\n  tree[root].sum += (r - l + 1) * v;\n  int mid = tree[root].mid();\n  if (r &lt;= mid)\n      modify(2 * root + 1, l, r, v);\n  else if (l &gt; mid)\n      modify(2 * root + 2, l, r, v);\n  else {\n      modify(2 * root + 1, l, mid, v);\n      modify(2 * root + 2, mid + 1, r, v);\n  }\n}\n\nll query(int root, int l, int r) {\n  if (tree[root].L == l &amp;&amp; tree[root].R == r)\n      return tree[root].sum + tree[root].inc * (r - l + 1);\n  if (tree[root].inc) {\n      tree[root].sum += (tree[root].R - tree[root].L + 1)*tree[root].inc;\n      tree[2 * root + 1].inc += tree[root].inc;\n      tree[2 * root + 2].inc += tree[root].inc;\n      tree[root].inc = 0;\n  }\n  int mid = tree[root].mid();\n  if (r &lt;= mid)\n      return query(2 * root + 1, l, r);\n  else if (l &gt; mid)\n      return query(2 * root + 2, l, r);\n  else\n      return query(2 * root + 1, l, mid) + query(2 * root + 2, mid + 1, r);\n}\n\nint main() {\n  cin &gt;&gt; N &gt;&gt; Q;\n  build(0, 0, N - 1);\n  for (int i = 0; i &lt; N; i++){\n      cin &gt;&gt; d;\n      modify(0, i, i, d);\n  }\n  for (int i = 0; i &lt; Q; i++) {\n      cin &gt;&gt; c;\n      if (c == 'Q') {\n          cin &gt;&gt; a &gt;&gt; b;\n          cout &lt;&lt; query(0, a - 1, b - 1) &lt;&lt; endl;\n      }\n      else {\n          cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;\n          modify(0, a - 1, b - 1, d);\n      }\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Lost Cows</p> <ul> <li>\u5012\u5e8f\u66f4\u65b0\uff0c\u67e5\u627eVIS\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int maxn = 8005;\n\nstruct node {\n  int L, R, len;\n} tree[maxn &lt;&lt; 2];\n\nvoid build(int rt, int l, int r) {\n  tree[rt].L = l;\n  tree[rt].R = r;\n  if (l == r) {\n      tree[rt].len = 1;\n      return;\n  }\n  int m = (l + r) / 2;\n  build(2 * rt + 1, l, m);\n  build(2 * rt + 2, m + 1, r);\n  tree[rt].len = tree[2 * rt + 1].len + tree[2 * rt + 2].len;\n}\n\nint query(int rt, int k) {\n  //cout &lt;&lt; \"Q \" &lt;&lt; rt &lt;&lt; \" \" &lt;&lt; k &lt;&lt;\" len:\"&lt;&lt;tree[rt].len&lt;&lt; endl;\n  tree[rt].len--;\n  if (tree[rt].L == tree[rt].R) return tree[rt].L;\n  if (tree[2 * rt + 1].len &gt; k) return query(2 * rt + 1, k);\n  else return query(2 * rt + 2, k - tree[2 * rt + 1].len);\n}\n\nint N;\nint arr[maxn], ans[maxn];\nint main() {\n  cin &gt;&gt; N;\n  build(0, 0, N - 1);\n  memset(arr, 0, sizeof(arr));\n  for (int i = 1; i &lt; N; i++) cin &gt;&gt; arr[i];\n  for (int i = N - 1; i &gt;= 0; i--) ans[i] = query(0, arr[i]) + 1;\n  for (int i = 0; i &lt; N; i++) cout &lt;&lt; ans[i] &lt;&lt; endl;\n}\n</code></pre> <ul> <li>\u4e8c\u5206\u67e5\u627e\u7684BIT</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int maxn = 8005;\nint arr[maxn], ans[maxn], vis[maxn], bit[maxn];\nint N;\n\nint lowbit(int x) { return x &amp; (-x); }\n\nvoid modify(int i, int v) {\n  vis[i] += v;\n  for (i; i &lt;= N; i += lowbit(i)) bit[i] += v;\n}\n\nint getsum(int i) {\n  int res = 0;\n  for (i; i &gt; 0; i -= lowbit(i)) res += bit[i];\n  return res;\n}\n\nint main() {\n  memset(bit, 0, sizeof(bit));\n  memset(vis, 0, sizeof(vis));\n  arr[0] = 0;\n  cin &gt;&gt; N;\n  for (int i = 2; i &lt;= N; i++) cin &gt;&gt; arr[i];\n  for (int i = N; i &gt;= 1; i--) {\n      int l = 1, r = N, m;\n      while (l &lt; r) {\n          m = (r + l + 1) / 2;\n          int s = getsum(m-1);\n          if (s + arr[i] == m - 1) l = m;\n          else if (s + arr[i] &gt; m -1) l = m + 1;\n          else r = m - 1; \n      }\n      ans[i] = l;\n      modify(l, 1);\n  }\n  for (int i = 1; i &lt;= N; i++) cout &lt;&lt; ans[i] &lt;&lt; endl;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Mayor's Posters</p> <p>\u52a8\u6001\u6784\u9020\u7ebf\u6bb5\u6811\uff0c\u9632\u6b62\u8d85\u51fa\u5185\u5b58\u9650\u5236\u3002</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#define lc(rt) rt-&gt;ll\n#define rc(rt) rt-&gt;rr\nusing namespace std;\n\nconst int maxl = 10000005;\nconst int maxn = 10005;\nint n;\nint a[maxn], b[maxn];\nbool flag = false;\n\nstruct node {\n int L, R, occ;\n node *ll, *rr;\n} t[maxl&lt;&lt;2];\n\nint cnt = 0;\n\nvoid build(node* rt, int l, int r) {\n rt-&gt;L = l;\n rt-&gt;R = r;\n rt-&gt;occ = 0;\n lc(rt) = NULL;\n rc(rt) = NULL;\n}\n\nvoid occupy(node* rt, int l, int r) {\n //cout &lt;&lt; \"occ \" &lt;&lt; rt-&gt;L &lt;&lt; \"-\" &lt;&lt; rt-&gt;R &lt;&lt; \" \" &lt;&lt; l &lt;&lt; \"-\" &lt;&lt; r &lt;&lt; endl;\n if (rt-&gt;L == l &amp;&amp; rt-&gt;R == r) {\n     if (!rt-&gt;occ) {\n         //cout &lt;&lt; \"fill\" &lt;&lt; endl;\n         rt-&gt;occ = 1;\n         flag = true;\n     }\n     return;\n }\n  // build sub tree\n if (lc(rt) == NULL) {\n     cnt++;\n     build(t + cnt, rt-&gt;L, (rt-&gt;L + rt-&gt;R) / 2);\n     lc(rt) = t + cnt;\n }\n if (rc(rt) == NULL) {\n     cnt++;\n     build(t + cnt, (rt-&gt;L + rt-&gt;R) / 2 + 1, rt-&gt;R);\n     rc(rt) = t + cnt;\n }\n  //pushdown\n if (rt-&gt;occ) {\n     lc(rt)-&gt;occ = 1;\n     rc(rt)-&gt;occ = 1;\n }\n int mid = (rt-&gt;L + rt-&gt;R) / 2;\n if (r &lt;= mid) occupy(lc(rt), l, r);\n else if (l &gt; mid) occupy(rc(rt), l, r);\n else {\n     occupy(lc(rt), l, mid);\n     occupy(rc(rt), mid + 1, r);\n }\n if (lc(rt)-&gt;occ &amp;&amp; rc(rt)-&gt;occ) rt-&gt;occ = 1;\n}\n\nint main() {\n int cas;\n scanf(\"%d\", &amp;cas);\n while (cas--) {\n     scanf(\"%d\", &amp;n);\n     int ml = 0;\n     for (int i = 0; i &lt; n; i++) {\n         scanf(\"%d%d\", &amp;a[i], &amp;b[i]);\n         ml = max(ml, b[i]);\n     }\n     cnt = 0;\n     build(t, 0, ml - 1);\n     int res = 0;\n     for (int i = n - 1; i &gt;= 0; i--) {\n         flag = false;\n         occupy(t, a[i] - 1, b[i] - 1);\n         if (flag) res++;\n     }\n     cout &lt;&lt; res &lt;&lt; endl;\n }\n}\n</code></pre> <p>Discreatization</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;iomanip&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\n// 9:36 suspicious bugs\n// 9:47 apple tree (add in[x], not x)\n// 10:02 trie (match forgotten, and build before match!)\n// 10:20 popular cows\n// 10:30 currency exchange (so, BF needs no inf check?)\n// 10:40 ------\n\nconst int maxn = 10005;\nint p[maxn][2];\nint N;\n\nstruct node {\n int l, r;\n bool occ;\n int mid() { return (l + r) / 2; }\n} tr[maxn*8];\n\n#define lc 2*rt+1\n#define rc 2*rt+2\n\nvoid pushup(int rt) {\n tr[rt].occ = tr[lc].occ &amp; tr[rc].occ;\n}\n\nvoid pushdown(int rt) {\n if (tr[rt].occ) {\n     tr[lc].occ = 1;\n     tr[rc].occ = 1;\n }\n}\n\nvoid build(int rt, int l, int r) {\n tr[rt].l = l;\n tr[rt].r = r;\n tr[rt].occ = 0;\n if (l == r) return;\n int m = tr[rt].mid();\n build(lc, l, m);\n build(rc, m + 1, r);\n}\n\nbool add(int rt, int l, int r) {\n if (tr[rt].l == l &amp;&amp; tr[rt].r == r) {\n     if (tr[rt].occ == 0) {\n         tr[rt].occ = 1;\n         return true;\n     }\n     else return false;\n }\n pushdown(rt);\n int m = tr[rt].mid();\n bool flag;\n if (l &gt; m) flag = add(rc, l, r);\n else if (r &lt;= m) flag = add(lc, l, r);\n else flag = add(lc, l, m) | add(rc, m + 1, r);\n pushup(rt);\n return flag;\n}\n\nint main() {\n int cas;\n cin &gt;&gt; cas;\n while (cas--) {\n     cin &gt;&gt; N;\n     vector&lt;int&gt; xs;\n     map&lt;int, int&gt; m;\n     for (int i = 0; i &lt; N; i++) {\n         cin &gt;&gt; p[i][0] &gt;&gt; p[i][1];\n         xs.push_back(p[i][0]);\n         xs.push_back(p[i][1]);\n     }\n     sort(xs.begin(), xs.end());\n     int uN = unique(xs.begin(), xs.end()) - xs.begin();\n     for (int i = 0; i &lt; uN; i++) m[xs[i]] = i;\n     build(0, 0, uN - 1);\n     int ans = 0;\n     for (int i = N - 1; i &gt;= 0; i--) {\n         if (add(0, m[p[i][0]], m[p[i][1]])) \n             ans++;\n     }\n     cout &lt;&lt; ans &lt;&lt; endl;\n }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%912/","title":"Segment Tree 2","text":"<ul> <li> <p>K-th Number</p> <ul> <li>\u4e0d\u7528\u79bb\u6563\u5316\uff0c\u7ed9\u5b9a\u533a\u95f4\u5927\u5c0f\u5c31\u53ef\u4ee5\u5efa\u6811\u3002\u79bb\u6563\u5316\u672c\u8eab\u4e5f\u662fO(n)\u7684\uff01</li> <li>\u624b\u52a8\u5f52\u5e76\u6392\u5e8f\uff08pushup\uff09\u3002</li> <li>[4], upper_bound(4) -&gt; 1, lower_bound(4) -&gt; 0.</li> <li>Binary Search !!!</li> </ul> <pre><code>#define  _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#define lc 2*rt+1\n#define rc 2*rt+2\nusing namespace std;\n\nconst int maxn = 100005;\nint N, M, a, b, c;\n\nint arr[maxn];\n\nstruct node {\n  int l, r;\n  vector&lt;int&gt; v;\n} t[maxn &lt;&lt; 2];\n\nvoid merge(vector&lt;int&gt;&amp;a, vector&lt;int&gt;&amp;b, vector&lt;int&gt;&amp;c) {\n  int la = a.size();\n  int lb = b.size();\n  int i = 0, j = 0;\n  while (i &lt; la &amp;&amp; j &lt; lb) {\n      if (a[i] &lt;= b[j]) c.push_back(a[i++]);\n      else c.push_back(b[j++]);\n  }\n  while (i &lt; la) c.push_back(a[i++]);\n  while (j &lt; lb) c.push_back(b[j++]);\n}\n\nvoid build(int rt, int l, int r) {\n  t[rt].l = l;\n  t[rt].r = r;\n  if (l == r) {\n      t[rt].v.push_back(arr[l]);\n      return;\n  }\n  build(lc, l, (l + r) / 2);\n  build(rc, (l + r) / 2 + 1, r);\n  merge(t[lc].v, t[rc].v, t[rt].v);\n}\n\nint lt(int rt, int l, int r, int v) {\n  if (t[rt].l == l &amp;&amp; t[rt].r == r) {\n      int num = upper_bound(t[rt].v.begin(), t[rt].v.end(), v) - t[rt].v.begin();\n      return num;\n  }\n  int mid = (t[rt].l + t[rt].r) / 2;\n  if (r &lt;= mid) return lt(lc, l, r, v);\n  else if (l &gt; mid) return lt(rc, l, r, v);\n  else return lt(lc, l, mid, v) + lt(rc, mid + 1, r, v);\n}\n\nint query(int l, int r, int K) {\n  //binary search\n  int L = -1e9 - 1, R = 1e9 + 1;  // max+1, min-1\n  while (L + 1 &lt; R) {\n      int M = (L + R) / 2;\n      int n = lt(0, l, r, M);\n      if (n &lt; K) L = M;\n      else R = M;\n  }\n  return R;\n}\n\nint main() {\n  scanf(\"%d%d\", &amp;N, &amp;M);\n  for (int i = 0; i &lt; N; i++) scanf(\"%d\", arr + i);\n  build(0, 0, N - 1);\n  for (int i = 0; i &lt; M; i++) {\n      scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c);\n      int res = query(a - 1, b - 1, c);\n      cout &lt;&lt; res &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Atlantis</p> <ul> <li>\u66b4\u529b\u79bb\u6563\u6807\u8bb0\u6cd5</li> </ul> <pre><code>#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#define maxn 510\nusing namespace std;\n\nint n;\ndouble x2,y2,x1,y1;\nbool flag[maxn][maxn];\ndouble X[maxn],Y[maxn];\nstruct node\n{\n    double x1,y1,x2,y2;\n} p[maxn];\n\nint bsearch(double *a,int l,int r,double target)\n{\n    int low=l,high=r;\n    while(low&lt;=high)\n    {\n        int mid=(low+high)&gt;&gt;1;\n        if(a[mid]==target)\n        {\n            return mid;\n        }\n        if(a[mid]&gt;target)\n            high=mid-1;\n        else\n            low=mid+1;\n    }\n}\n\nint main()\n{\n    int case1=0;\n    while(scanf(\"%d\",&amp;n)!=EOF)\n    {\n        memset(flag,false,sizeof(flag));\n        memset(X,0,sizeof(X));\n        memset(Y,0,sizeof(Y));\n        case1++;\n        if(n==0) break;\n        int t1=0,t2=0;\n        for(int i=0; i&lt;n; i++)\n        {\n            scanf(\"%lf%lf%lf%lf\",&amp;p[i].x1,&amp;p[i].y1,&amp;p[i].x2,&amp;p[i].y2);\n            X[t1++]=p[i].x1;X[t1++]=p[i].x2;\n            Y[t2++]=p[i].y1;Y[t2++]=p[i].y2;\n        }\n        sort(X,X+2*n);\n        sort(Y,Y+2*n);\n        for(int i=0; i&lt;n; i++)\n        {\n            int xpos=bsearch(X,0,t1-1,p[i].x1);\n            int ypos=bsearch(Y,0,t2-1,p[i].y1);\n            int xpos1=bsearch(X,0,t1-1,p[i].x2);\n            int ypos1=bsearch(Y,0,t2-1,p[i].y2);\n            for(int i=xpos; i&lt;xpos1; i++)\n            {\n                for(int j=ypos; j&lt;ypos1; j++)\n                {\n                    flag[i][j]=true;\n                }\n            }\n        }\n        double sum=0;\n        for(int i=0; i&lt;t1; i++)\n        {\n            for(int j=0; j&lt;t2; j++)\n            {\n                if(flag[i][j])\n                    sum+=((X[i+1]-X[i])*(Y[j+1]-Y[j]));\n            }\n        }\n        printf(\"Test case #%d\\n\",case1);\n        printf(\"Total explored area: %.2lf\\n\",sum);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n</code></pre> <ul> <li> <p>\u7ebf\u6bb5\u6811\u626b\u63cf\u7ebf</p> <p>\u5341\u5206\u70e6\u4eba\u7684\u505a\u6cd5\u3002\u3002\u3002</p> </li> </ul> <pre><code>#define  _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;set&gt;\n#include &lt;map&gt;\n#define ll long long\n#define lc 2*rt+1\n#define rc 2*rt+2\nusing namespace std;\n\nconst int maxn = 105;\nint N;\ndouble ans;\ndouble X1, Y1, X2, Y2;\n\nstruct node {\n  int l, r;\n  double len;\n  int cover;\n} T[maxn &lt;&lt; 3];\n\nstruct line {\n  double x, y1, y2;\n  int flag;  // is_left\n  bool operator&lt; (const line&amp; b) const { return x &lt; b.x; }\n} L[maxn &lt;&lt; 1];\n\nint ycnt = 0;\ndouble ys[maxn &lt;&lt; 1];\n\nvoid build(int rt, int l, int r) {\n  T[rt].l = l;\n  T[rt].r = r;\n  if (l + 1 == r) return;\n  build(lc, l, (l + r) / 2);\n  build(rc, (l + r) / 2, r);\n}\n\nint cnt = 0;\nvoid add_line() {\n  L[cnt].x = X1;\n  L[cnt].y1 = Y1;\n  L[cnt].y2 = Y2;\n  L[cnt++].flag = 1;\n  L[cnt].x = X2;\n  L[cnt].y1 = Y1;\n  L[cnt].y2 = Y2;\n  L[cnt++].flag = -1;\n}\n\nvoid getlen(int rt) {\n  if (T[rt].cover) T[rt].len = ys[T[rt].r] - ys[T[rt].l]; \n  else if (T[rt].l + 1 == T[rt].r) T[rt].len = 0;  // required!\n  else T[rt].len = T[lc].len + T[rc].len;\n}\n\nvoid update(int rt, line&amp; ln) {\n  if (ys[T[rt].l] &gt;= ln.y1 &amp;&amp; ys[T[rt].r] &lt;= ln.y2) {  // node's region is covered by line\n      T[rt].cover += ln.flag;  // left right\n      getlen(rt); \n      return;\n  }\n  if (T[rt].l + 1 == T[rt].r) return;\n  int mid = (T[rt].r + T[rt].l) / 2;\n  if (ln.y1 &lt;= ys[mid]) update(lc, ln);\n  if (ln.y2 &gt; ys[mid]) update(rc, ln);\n  getlen(rt);\n}\n\n\nint main() {\n  int cas = 0;\n  while (cin &gt;&gt; N) {\n      if (cas) puts(\"\");\n      if (N == 0) break;\n      cnt = 0, ycnt = 0;\n      for (int i = 0; i &lt; N; i++) {\n          scanf(\"%lf%lf%lf%lf\", &amp;X1, &amp;Y1, &amp;X2, &amp;Y2);\n          add_line();\n          ys[ycnt++] = Y1;\n          ys[ycnt++] = Y2;\n      }\n      sort(L, L + cnt);\n      sort(ys, ys + ycnt);\n      ycnt = unique(ys, ys + ycnt) - ys;\n      build(0, 0, cnt - 1); // tree for x\n      ans = 0;\n      update(0, L[0]);\n      for (int i = 1; i &lt; 2 * N; i++) {\n          double tmp = (L[i].x - L[i - 1].x) * T[0].len;\n          //cout &lt;&lt; \"add \"&lt;&lt;L[i].x - L[i-1].x&lt;&lt;\"*\"&lt;&lt;T[0].len&lt;&lt;\"=\" &lt;&lt; tmp &lt;&lt; endl;;\n          ans += tmp;\n          update(0, L[i]);\n      }\n      printf(\"Test case #%d\\n\", ++cas);\n      printf(\"Total explored area: %.2f\\n\", ans);\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Picture</p> <p>\u8fb9\u6392\u5e8f\uff0c\u76f8\u540cx\u65f6\u5165\u8fb9\u5728\u524d\u3002</p> <p>\u4fdd\u8bc1\u8fb9\u91cd\u5408\u7684\u60c5\u51b5\uff0c\u4e24\u8fb9\u4e0d\u90fd\u7b97\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;vector&gt;\n#define lc 2*rt+1\n#define rc 2*rt+2\nusing namespace std;\n\nconst int maxn = 10005;\nint N;\nint ans;\nint X1, Y1, X2, Y2;\n\nstruct LINE {\n  int x, y1, y2, flag;\n  LINE(int x, int y1, int y2, int f) :x(x), y1(y1), y2(y2), flag(f) {}\n  bool operator&lt; (const LINE&amp; b) const { \n      // this line wasted me 4 hours.\n      if (x == b.x) return flag&gt;b.flag;\n      return x &lt; b.x;\n  }\n};\n\nvector&lt;LINE&gt; xline;\nvector&lt;int&gt; ys;\n\nvoid addline() {\n  xline.push_back(LINE(X1, Y1, Y2, 1));\n  xline.push_back(LINE(X2, Y1, Y2, -1));\n  ys.push_back(Y1);\n  ys.push_back(Y2);\n}\n\nstruct node {\n  int l, r;\n  int cover;\n  int count;\n  int len;\n  bool ll, rr;\n} t[maxn * 10];\n\n\nvoid build(int rt, int l, int r) {\n  t[rt].l = l;\n  t[rt].r = r;\n  t[rt].count = 0;\n  t[rt].cover = 0;\n  t[rt].len = 0;\n  t[rt].ll = false;\n  t[rt].rr = false;\n  if (l + 1 == r) return;\n  build(lc, l, (l + r) / 2);\n  build(rc, (l + r) / 2, r);\n}\n\nvoid getlen(int rt) {\n  if (t[rt].cover &gt; 0) {\n      t[rt].len = ys[t[rt].r] - ys[t[rt].l];\n      t[rt].count = 1;\n      t[rt].ll = t[rt].rr = true;\n  }\n  else if (t[rt].l + 1 == t[rt].r) {  // leaves, and not covered.\n      t[rt].len = 0;\n      t[rt].count = 0;\n      t[rt].ll = t[rt].rr = false;\n  }\n  else {\n      t[rt].len = t[lc].len + t[rc].len;\n      t[rt].count = t[lc].count + t[rc].count + ((t[lc].rr &amp;&amp; t[rc].ll) ? -1 : 0);\n      t[rt].ll = t[lc].ll;\n      t[rt].rr = t[rc].rr;\n  }\n}\n\nvoid update(int rt, LINE&amp; ln) {\n  if (ys[t[rt].l] &gt;= ln.y1 &amp;&amp; ys[t[rt].r] &lt;= ln.y2) {\n      t[rt].cover += ln.flag;\n      getlen(rt);\n      return;\n  }\n  int mid = (t[rt].l + t[rt].r) / 2;\n  if (ln.y2 &gt; ys[mid]) update(rc, ln);\n  if (ln.y1 &lt; ys[mid]) update(lc, ln);\n  getlen(rt);\n}\n\nint main() {\n  while (cin &gt;&gt; N) {\n      if (N == 0) {\n          cout &lt;&lt; 0 &lt;&lt; endl;\n          continue;\n      }\n\n      xline.clear();\n      ys.clear();\n\n      for (int i = 0; i &lt; N; i++) {\n          cin &gt;&gt; X1 &gt;&gt; Y1 &gt;&gt; X2 &gt;&gt; Y2;\n          addline();\n      }\n      sort(xline.begin(), xline.end());\n      sort(ys.begin(), ys.end());\n      ys.erase(unique(ys.begin(), ys.end()), ys.end());\n\n      build(0, 0, ys.size() - 1);\n      int len = xline.size();\n\n      ans = 0;\n      int last = 0;\n      int segs = 0;\n      for (int i = 0; i &lt; len; i++) {\n          update(0, xline[i]);\n          if (i) {\n              ans += (xline[i].x - xline[i - 1].x) * 2 * segs;\n          }\n          ans += abs(t[0].len - last);\n          last = t[0].len;\n          segs = t[0].count;\n      }\n\n      cout &lt;&lt; ans &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%912/#_1","title":"\u4e8c\u7ef4\u7ebf\u6bb5\u6811","text":"<ul> <li> <p>Matrix</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;string.h&gt;\n#define maxn 1010\n#define m ((l+r)&gt;&gt;1)\n#define ls (now&lt;&lt;1)\n#define rs (ls|1)\nusing namespace std;\n\nint N;\nint tree[maxn &lt;&lt; 2][maxn &lt;&lt; 2];\nchar op[10];\nint xl, yl, xr, yr, x, y;\nint ans;\n\nvoid UpDateY(int xnow, int l, int r, int now){\n  cout &lt;&lt; \"UpdateY: \" &lt;&lt;xnow &lt;&lt;\" \"&lt;&lt; l &lt;&lt; \"-\" &lt;&lt; r &lt;&lt; \" \" &lt;&lt; now &lt;&lt; endl;\n  if (yl &lt;= l &amp;&amp; r &lt;= yr)\n  {\n      cout &lt;&lt; \"change \" &lt;&lt; xnow &lt;&lt; \",\" &lt;&lt; now &lt;&lt; endl;\n      tree[xnow][now] ^= 1;\n      return;\n  }\n  if (yl &lt;= m) UpDateY(xnow, l, m, ls);\n  if (yr &gt; m) UpDateY(xnow, m + 1, r, rs);\n}\n\nvoid UpDateX(int l, int r, int now){\n  cout &lt;&lt; \"UpdateX: \" &lt;&lt; l &lt;&lt; \"-\" &lt;&lt; r &lt;&lt; \" \" &lt;&lt; now &lt;&lt; endl;\n  if (xl &lt;= l &amp;&amp; r &lt;= xr)\n  {\n      UpDateY(now, 1, N, 1);\n      return;\n  }\n  if (xl &lt;= m) UpDateX(l, m, ls);\n  if (xr &gt; m) UpDateX(m + 1, r, rs);\n}\n\nvoid QueryY(int xnow, int l, int r, int now)\n{\n  ans ^= tree[xnow][now];\n  if (l == r) return;\n  if (y &lt;= m) QueryY(xnow, l, m, ls);\n  if (y &gt; m) QueryY(xnow, m + 1, r, rs);\n}\n\nvoid QueryX(int l, int r, int now)\n{\n  QueryY(now, 1, N, 1);\n  if (l == r) return;\n  if (x &lt;= m) QueryX(l, m, ls);\n  if (x &gt; m) QueryX(m + 1, r, rs);\n}\n\nint main() {\n  int cas;\n  scanf(\"%d\", &amp;cas);\n  while (cas--)\n  {\n      memset(tree, 0, sizeof(tree));\n      int T;\n      scanf(\"%d %d\", &amp;N, &amp;T);\n      while (T--)\n      {\n          scanf(\"%s\", op);\n          if (op[0] == 'C')\n          {\n              scanf(\"%d %d %d %d\", &amp;xl, &amp;yl, &amp;xr, &amp;yr);\n              UpDateX(1, N, 1);\n          }\n          else\n          {\n              scanf(\"%d %d\", &amp;x, &amp;y);\n              ans = 0;\n              QueryX(1, N, 1);\n              printf(\"%d\\n\", ans);\n          }\n      }\n      if (cas) puts(\"\");\n  }\n  return 0;\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%80%BB%E7%BB%93/","title":"Segment Tree","text":""},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%80%BB%E7%BB%93/#_1","title":"\u9759\u6001\u7ebf\u6bb5\u6811","text":"<p>\u4ec5\u6709\u533a\u95f4\u6700\u503c\u67e5\u8be2\u64cd\u4f5c\u3002\uff08\u9759\u6001\u533a\u95f4\u6c42\u548c\u7528Cumsum\u5373\u53ef\uff09</p> <p>\uff08\u7136\u800cRMQ\u66f4\u597d\u5199\uff09</p> <pre><code>// balanced lineup\n#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#define P pair&lt;int,int&gt;\n#define lc rt*2+1\n#define rc rt*2+2\nusing namespace std;\n\nconst int maxn = 50005;\nconst int inf = 0x7fffffff;\nint h[maxn];\nint N, Q;\n\nstruct node {\n    int l, r;\n    int mx, mn;\n    int m() { return (l + r) / 2; }\n} tr[maxn*4];\n\nvoid build(int rt, int l, int r) {\n    tr[rt].l = l;\n    tr[rt].r = r;\n    if (l == r) {\n        tr[rt].mx = tr[rt].mn = h[l];\n        return;\n    }\n    int m = (l + r) / 2;\n    build(lc, l, m);\n    build(rc, m + 1, r);\n    tr[rt].mx = max(tr[lc].mx, tr[rc].mx);\n    tr[rt].mn = min(tr[lc].mn, tr[rc].mn);\n}\n\nint mx, mn;\nvoid query(int rt, int l, int r) {\n    if (l == tr[rt].l &amp;&amp; r == tr[rt].r) {\n        mx = max(mx, tr[rt].mx);\n        mn = min(mn, tr[rt].mn);\n        return;\n    }\n    int m = tr[rt].m();\n    if (r &lt;= m) query(lc, l, r);\n    else if (l &gt; m) query(rc, l, r);\n    else {\n        query(lc, l, m);\n        query(rc, m + 1, r);\n    }\n}\n\nint x, y;\n\nint main() {\n    scanf(\"%d%d\", &amp;N, &amp;Q);\n    for (int i = 0; i &lt; N; i++) scanf(\"%d\", h + i);\n    build(0, 0, N - 1);\n    for (int i = 0; i &lt; Q; i++) {\n        scanf(\"%d%d\", &amp;x, &amp;y);\n        mn = inf, mx = 0;\n        query(0, x - 1, y - 1);\n        printf(\"%d\\n\", mx - mn);\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%80%BB%E7%BB%93/#_2","title":"\u52a8\u6001\u7ebf\u6bb5\u6811\uff1a\u533a\u95f4\u6700\u503c\u66ff\u6362","text":"<p>\u66ff\u6362\u67d0\u4e2a\u533a\u95f4\u7684\u6700\u503c\u4e3a\u67d0\u4e2a\u6570\u3002\u800c\u975e\u589e\u52a0\u5230\u67d0\u4e2a\u6570\uff08\u89c1\u4e0b\uff09\u3002\u4e5f\u4e0d\u662f\u53d6\u5f53\u524d\u503c\u4e0e\u76ee\u6807\u503c\u7684\u6700\u5927\u503c\uff08\u65e0\u6cd5\u5b9e\u73b0\uff09\u3002</p> <p>lazy\u4ee3\u8868\u662f\u5426\u88ab\u4fee\u6539\uff0c\u662fbool\u578b\u3002</p> <p>\u533a\u95f4\u6700\u503c\u4e5f\u5e94\u8be5\u4f7f\u7528lazy\u66f4\u65b0\uff0c\u624d\u80fd\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002pushdown\u64cd\u4f5c\u5373\u5206\u89e3\u533a\u95f4\uff0c\u628alazy\u6807\u5fd7\uff08\u53f6\u8282\u70b9\u6807\u5fd7\uff09\u4e0b\u79fb\u4e00\u5c42\u3002pushup\u5373\u7528\u5b50\u533a\u95f4\u53cd\u63a8\u7236\u533a\u95f4\u7684\u503c\u3002modify\u548cquery\u5728\u5206\u89e3\u5b50\u533a\u95f4\u65f6\u90fd\u9700\u8981pushdown\u3002modify\u6700\u540e\u8fd8\u9700\u8981\u8c03\u7528pushup\u3002</p> <pre><code>const static int maxn = 10005;\n\nstruct node {\n    int l, r;\n    int mx, lazy;\n    int m() { return (l + r) / 2; }\n} seg[4 * maxn];\n\nvoid build(int rt, int l, int r) {\n    seg[rt].l = l;\n    seg[rt].r = r;\n    seg[rt].mx = 0;\n    seg[rt].lazy = 0;\n    if (l == r) return;\n    build(2 * rt + 1, l, (l + r) / 2);\n    build(2 * rt + 2, (l + r) / 2 + 1, r);\n}\n\nvoid pushup(int rt){\n    seg[rt].mx = max(seg[2 * rt + 1].mx, seg[2 * rt + 2].mx);\n}\n\nvoid pushdown(int rt) {\n    if (seg[rt].lazy) {\n        //cout&lt;&lt;\"push down \"&lt;&lt;rt&lt;&lt;\" \"&lt;&lt; seg[rt].l &lt;&lt; \"-\" &lt;&lt; seg[rt].r &lt;&lt; endl;\n        seg[2 * rt + 1].mx = seg[rt].mx;\n        seg[2 * rt + 2].mx = seg[rt].mx;\n        seg[2 * rt + 2].lazy = seg[2 * rt + 1].lazy = 1;\n        seg[rt].lazy = 0;\n    }\n}\n\nint query(int rt, int l, int r) {\n    //cout &lt;&lt; \"query \" &lt;&lt;rt&lt;&lt;\" \"&lt;&lt; seg[rt].l &lt;&lt; \"-\" &lt;&lt; seg[rt].r &lt;&lt; \" \" &lt;&lt; l &lt;&lt; \"-\" &lt;&lt; r &lt;&lt; endl;\n    if (l == seg[rt].l &amp;&amp; r == seg[rt].r)\n        return seg[rt].mx;\n    // push down\n    pushdown(rt);\n    int m = seg[rt].m();\n    if (r &lt;= m) return query(2 * rt + 1, l, r);\n    else if (l &gt; m) return query(2 * rt + 2, l, r);\n    else return max(query(2 * rt + 1, l, m), query(2 * rt + 2, m + 1, r));\n}\n\nvoid modify(int rt, int l, int r, int v) {\n    if (l == seg[rt].l &amp;&amp; r == seg[rt].r) {\n        seg[rt].mx = v; // set to v, not add v.\n        seg[rt].lazy = 1;\n        return;\n    }\n    // push down\n    pushdown(rt);\n    // interval decomp\n    int m = seg[rt].m();\n    if (r &lt;= m) modify(2 * rt + 1, l, r, v);\n    else if (l &gt; m) modify(2 * rt + 2, l, r, v);\n    else {\n        modify(2 * rt + 1, l, m, v);\n        modify(2 * rt + 2, m + 1, r, v);\n    }\n    // push up\n    pushup(rt);\n}\n</code></pre>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%80%BB%E7%BB%93/#leetcode-699-falling-squares","title":"LeetCode 699 Falling Squares","text":"<pre><code>class Solution {\npublic:\n    const static int maxn = 10005;\n\n    struct node {\n        int l, r;\n        int mx, lazy;\n        int m() { return (l + r) / 2; }\n    } seg[4 * maxn];\n\n    void build(int rt, int l, int r) {\n        seg[rt].l = l;\n        seg[rt].r = r;\n        seg[rt].mx = 0;\n        seg[rt].lazy = 0;\n        if (l == r) return;\n        build(2 * rt + 1, l, (l + r) / 2);\n        build(2 * rt + 2, (l + r) / 2 + 1, r);\n    }\n\n    void pushdown(int rt) {\n        if (seg[rt].lazy) {\n            seg[2 * rt + 1].mx = seg[rt].mx;\n            seg[2 * rt + 2].mx = seg[rt].mx;\n            seg[2 * rt + 2].lazy = seg[2 * rt + 1].lazy = 1;\n            seg[rt].lazy = 0;\n        }\n    }\n\n    int query(int rt, int l, int r) {\n        if (l == seg[rt].l &amp;&amp; r == seg[rt].r)\n            return seg[rt].mx;\n        // push down\n        pushdown(rt);\n        int m = seg[rt].m();\n        if (r &lt;= m) return query(2 * rt + 1, l, r);\n        else if (l &gt; m) return query(2 * rt + 2, l, r);\n        else return max(query(2 * rt + 1, l, m), query(2 * rt + 2, m + 1, r));\n    }\n\n    void modify(int rt, int l, int r, int v) {\n        if (l == seg[rt].l &amp;&amp; r == seg[rt].r) {\n            seg[rt].mx = v;\n            seg[rt].lazy = 1;\n            return;\n        }\n        // push down\n        pushdown(rt);\n        // interval decomp\n        int m = seg[rt].m();\n        if (r &lt;= m) modify(2 * rt + 1, l, r, v);\n        else if (l &gt; m) modify(2 * rt + 2, l, r, v);\n        else {\n            modify(2 * rt + 1, l, m, v);\n            modify(2 * rt + 2, m + 1, r, v);\n        }\n        // push up\n        seg[rt].mx = max(seg[2 * rt + 1].mx, seg[2 * rt + 2].mx);\n    }\n\n    // \u4fc4\u7f57\u65af\u65b9\u5757\u5806\u53e0\u5f0f\u7684\u66f4\u65b0\n    void blockmodify(int rt, int l, int r, int v) {\n        modify(rt, l, r, v + query(rt, l, r));\n    }\n\n\n    vector&lt;int&gt; fallingSquares(vector&lt;pair&lt;int, int&gt;&gt;&amp; positions) {\n        // \u79bb\u6563\u5316\n        vector&lt;int&gt; xs;\n        for(int i=0; i&lt;positions.size(); i++){\n            xs.push_back(positions[i].first);\n            xs.push_back(positions[i].first + positions[i].second - 1);\n        }\n        sort(xs.begin(), xs.end());\n        int uN = unique(xs.begin(), xs.end()) - xs.begin();\n        map&lt;int, int&gt; m;\n        for(int i=0; i&lt;uN; i++) m[xs[i]]=i;\n        // \u7ebf\u6bb5\u6811\n        build(0, 0, uN);\n        vector&lt;int&gt; ans;\n        for(int i=0; i&lt;positions.size(); i++){\n            blockmodify(0,\n                        m[positions[i].first],\n                        m[positions[i].first + positions[i].second - 1],\n                        positions[i].second\n                       );\n            ans.push_back(query(0, 0, uN));\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/advanced/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%80%BB%E7%BB%93/#_3","title":"\u52a8\u6001\u7ebf\u6bb5\u6811\uff1a\u533a\u95f4\u52a0\u51cf","text":"<p>\u652f\u6301\u533a\u95f4\u6c42\u548c\u3001\u6c42\u6700\u503c\u3002</p> <p>lazy\u662fint\u578b\uff0c\u4ee3\u8868\u6ca1\u6709\u52a0\u4e0a\u53bb\u7684\u503c\u3002</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;queue&gt;\n#include &lt;cmath&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\n#define ll long long\n\nconst int maxn = 100005;\nll arr[maxn];\nint N, Q;\n\nstruct node {\n    int l, r;\n    ll sum, inc;\n    int mid() { return (l + r) / 2; }\n} tr[maxn&lt;&lt;2];\n\n#define lc 2*rt+1\n#define rc 2*rt+2\n\nvoid pushup(int rt) {\n    tr[rt].sum = tr[lc].sum + tr[rc].sum;\n}\n\nvoid pushdown(int rt) {\n    if (tr[rt].inc) {\n        tr[rt].sum += (tr[rt].r - tr[rt].l + 1)*tr[rt].inc;\n        tr[lc].inc += tr[rt].inc;\n        tr[rc].inc += tr[rt].inc;\n        tr[rt].inc = 0;\n    }\n}\n\nvoid build(int rt, int l, int r) {\n    tr[rt].l = l;\n    tr[rt].r = r;\n    tr[rt].inc = 0;\n    if (l == r) {\n        tr[rt].sum = arr[l];\n        return;\n    }\n    int m = (l + r) / 2;\n    build(lc, l, m);\n    build(rc, m + 1, r);\n    pushup(rt);\n}\n\n\nvoid add(int rt, int l, int r, int v) {\n    if (tr[rt].l == l &amp;&amp; tr[rt].r == r) {\n        tr[rt].inc += v;\n        return;\n    }\n    tr[rt].sum += (r - l + 1)*v;\n    int m = tr[rt].mid();\n    if (l &gt; m) add(rc, l, r, v);\n    else if (r &lt;= m) add(lc, l, r, v);\n    else {\n        add(lc, l, m, v);\n        add(rc, m + 1, r, v);\n    }\n}\n\n\nll query(int rt, int l, int r) {\n    if (tr[rt].l == l &amp;&amp; tr[rt].r == r) return tr[rt].sum + tr[rt].inc*(r - l + 1);\n    pushdown(rt);\n    int m = tr[rt].mid();\n    if (l &gt; m) return query(rc, l, r);\n    else if (r &lt;= m) return query(lc, l, r);\n    else return query(lc, l, m) + query(rc, m + 1, r);\n}\n\nchar c;\nint a, b, d;\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; Q;\n    for (int i = 0; i &lt; N; i++) cin &gt;&gt; arr[i];\n    build(0, 0, N - 1);\n    for (int i = 0; i &lt; Q; i++) {\n        cin &gt;&gt; c;\n        if (c == 'Q') {\n            cin &gt;&gt; a &gt;&gt; b;\n            cout &lt;&lt; query(0, a-1, b-1) &lt;&lt; endl;\n        }\n        else {\n            cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;\n            add(0, a-1, b-1, d);\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E7%BD%91%E7%BB%9C%E6%B5%81/","title":"Network flow","text":""},{"location":"algorithm/advanced/%E7%BD%91%E7%BB%9C%E6%B5%81/#_1","title":"\u6700\u5927\u6d41\u95ee\u9898","text":"<p>\u6709\u5411\u56fe\uff0c\u5355\u6e90\u70b9\uff0c\u5355\u6c47\u70b9\uff0c\u8fb9\u6743\u4e3a\u5bb9\u91cf\u3002\u6c42\u6e90\u5230\u6c47\u7684\u6700\u5927\u6d41\u91cf\u3002</p> <ul> <li> <p>Residual Network</p> <p>For a path from source to target, subtract it from the current graph and add its reverse path.</p> <p>Reverse edges provide the ability to cancel this path. (push the flow back/rearrange flow)</p> </li> </ul> <ul> <li> <p>Ford-Fulkerson</p> <p>Using DFS to find augmenting path. </p> <p>\\(O(Ef)\\). \\(f\\) is the max flow.</p> </li> </ul> <ul> <li> <p>Edmonds-Karp Algorithm</p> <p>using BFS instead of DFS. </p> <p>\\(O(VE^2)\\)</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int inf = 0x3f3f3f3f;\nconst int maxv = 100;\nint V;\n\nint G[maxv][maxv]; // adjancency matrix\nint vis[maxv], pre[maxv];\n\nint augment(int s, int t){\n    queue&lt;int&gt; q;\n  memset(vis, 0, sizeof(vis));\n    memset(pre, -1, sizeof(pre));\n    vis[s] = 1;\n    q.push(s);\n    bool found = false;\n    // bfs to find path from s to t\n    while(!q.empty()){\n        int u = q.front(); q.pop();\n        for(int i=0; i&lt;V; i++){\n            if(G[u][i]&gt;0 &amp;&amp; !vis[i]){\n                pre[i] = u;\n                vis[i]=1;\n                if(i==t){\n                    found = true;\n                    break;\n                }\n                else q.pish(i);\n            }\n        }\n    }\n    if(!found) return 0;\n    int mnflow = inf;\n    int u = t;\n    // find the narrowest edge in the found path\n    while(pre[u] != -1){\n        mnflow = min(mnflow, G[pre[u]][u]);\n        u = pre[u];\n    }\n    // modify capacity &amp; add reverse edge\n    u = t;\n    while(pre[u] != -1){\n        G[pre[u]][u] -= mnflow;\n        G[u][pre[u]] += mnflow;\n        u = pre[u];\n    }\n    return mnflow;\n}\n\nint edmondskarp(int s, int t){\n    int mxflow = 0;\n    int aug;\n    while(aug = argument()){\n        mxflow += aug;\n    }\n    return mxflow;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Dinic Algorithm</p> <p>further decreasing times to call BFS.</p> <p>\\(O(V^2E)\\)</p> <pre><code>// Drianage ditches POJ\n#include &lt;iostream&gt;\n#include &lt;deque&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int inf = 0x3f3f3f3f;\nconst int maxv = 205;\nint V, E, s, t;\n\nint G[maxv][maxv]; // adjancency matrix\nint vis[maxv], dep[maxv];\n\nbool bfs(){\n    int depth = 0;\n    deque&lt;int&gt; q;\n    memset(dep, -1, sizeof(dep));\n    dep[s]=0;\n    q.push_back(s);\n    while(!q.empty()){\n        int u = q.front(); q.pop_front();\n        for(int i=1; i&lt;=V; i++){\n            if(G[u][i]&gt;0 &amp;&amp; dep[i]==-1){\n                dep[i] = dep[u]+1;\n                if(i == t) return true;\n                else q.push_back(i);\n            }\n        }\n    }\n    return false;\n}\n\nlong long dinic(){\n    long long mxflow = 0;\n    deque&lt;int&gt; q;\n    while(bfs()){\n        q.push_back(s);\n        memset(vis, 0, sizeof(vis));\n        vis[s] = 1;\n        while(!q.empty()){\n            int u = q.back();\n            // u is target\n            if(u == t){\n                int mnflow = inf;\n                int v; // mnflow_start_vertex\n                for(int i=1; i&lt;q.size(); i++){\n                    int vs = q[i-1];\n                    int ve = q[i];\n                    if(G[vs][ve]&gt;0 &amp;&amp; mnflow&gt;G[vs][ve]){\n                        mnflow = G[vs][ve];\n                        v = vs;\n                    }\n                }\n                for(int i=1; i&lt;q.size(); i++){\n                    int vs = q[i-1];\n                    int ve = q[i];\n                    G[vs][ve] -= mnflow;\n                    G[ve][vs] += mnflow;\n                }\n                mxflow += mnflow;\n                // pop back \n                while(!q.empty() &amp;&amp; q.back() != v){\n                    vis[q.back()] = 0;\n                    q.pop_back();\n                }\n            }\n            // u is not target\n            else{\n                // only add one point in the next layer to stack.\n                bool found = false;\n                for(int i=1; i&lt;=V; i++){\n                    if(G[u][i]&gt;0 &amp;&amp; dep[i] == dep[u]+1 &amp;&amp; !vis[i]){\n                        vis[i] = 1;\n                        q.push_back(i);\n                        found = true;\n                        break;\n                    }\n                }\n                // can't find such point.\n                if(!found) q.pop_back();\n            }\n        }\n    }\n    return mxflow;\n}\n\nint main(){\n    while(cin&gt;&gt;E&gt;&gt;V){\n        memset(G, 0, sizeof(G));\n        int a, b, c;\n        for(int i=0; i&lt;E; i++){\n            cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;\n            G[a][b] += c;\n        }\n        s = 1; t = V;\n        cout&lt;&lt;dinic()&lt;&lt;endl;\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Merge Vertex </p> <p></p> </li> </ul> <p></p> <p>For example ACM Compuer factory, there are two correct graphs:</p> <p></p>"},{"location":"algorithm/advanced/%E7%BD%91%E7%BB%9C%E6%B5%81/#examples","title":"Examples","text":"<ul> <li> <p>ACM Computer factory</p> <p>\u96be\u5728\u5efa\u56fe\uff1a</p> <ul> <li>\u628a\u6bcf\u4e00\u4e2a\u673a\u5668\u5206\u6210\u4e24\u4e2a\u70b9\uff0c\u8f93\u5165\u4e0e\u4ea7\u51fa\uff0c\u7528\u4ea7\u91cf\u8fde\u63a5\u4e24\u4e2a\u70b9\u3002</li> <li>\u603b\u6e90\u70b9\uff0c\u603b\u6c47\u70b9\u3002\u5206\u522b\u4e0e\u5404\u4e2a\u6e90\u70b9\uff0c\u6c47\u70b9\u8fde\u63a5\u65e0\u7a77\u8fb9\u3002</li> <li>\u5982\u4f55\u56de\u6eafmaxflow\u7684\u6bcf\u6761\u8fb9\uff1a\u4fdd\u5b58\u65e7\u6570\u7ec4\uff0c\u76f8\u51cf\u5373\u53ef\u3002</li> </ul> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n#include &lt;cstring&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int inf = 0x3f3f3f3f;\nconst int maxv = 55*2;\nconst int maxp = 15;\nint V, s, t;\n\nint nodes[maxv][maxp];\n\nint G[maxv][maxv]; // adjancency matrix\nint GG[maxv][maxv]; // copy of G\nint vis[maxv], dep[maxv];\n\nbool bfs() {\n    int depth = 0;\n    deque&lt;int&gt; q;\n    memset(dep, -1, sizeof(dep));\n    dep[s] = 0;\n    q.push_back(s);\n    while (!q.empty()) {\n        int u = q.front(); q.pop_front();\n        for (int i = 0; i &lt;= 2*V+1; i++) {\n            if (G[u][i] &gt; 0 &amp;&amp; dep[i] == -1) {\n                dep[i] = dep[u] + 1;\n                if (i == t) return true;\n                else q.push_back(i);\n            }\n        }\n    }\n    return false;\n}\n\nint dinic() {\n    int mxflow = 0;\n    deque&lt;int&gt; q;\n    while (bfs()) {\n        q.push_back(s);\n        memset(vis, 0, sizeof(vis));\n        vis[s] = 1;\n        while (!q.empty()) {\n            int u = q.back();\n            // u is target\n            if (u == t) {\n                int mnflow = inf;\n                int v; // mnflow_start_vertex\n                for (int i = 1; i &lt; q.size(); i++) {\n                    int vs = q[i - 1];\n                    int ve = q[i];\n                    if (G[vs][ve] &gt; 0 &amp;&amp; mnflow &gt; G[vs][ve]) {\n                        mnflow = G[vs][ve];\n                        v = vs;\n                    }\n                }\n                for (int i = 1; i &lt; q.size(); i++) {\n                    int vs = q[i - 1];\n                    int ve = q[i];\n                    G[vs][ve] -= mnflow;\n                    G[ve][vs] += mnflow;\n                }\n                mxflow += mnflow;\n                // pop back \n                while (!q.empty() &amp;&amp; q.back() != v) {\n                    vis[q.back()] = 0;\n                    q.pop_back();\n                }\n            }\n            // u is not target\n            else {\n                // only add one point in the next layer to stack.\n                bool found = false;\n                for (int i = 0; i &lt;= 2*V+1; i++) {\n                    if (G[u][i] &gt; 0 &amp;&amp; dep[i] == dep[u] + 1 &amp;&amp; !vis[i]) {\n                        vis[i] = 1;\n                        q.push_back(i);\n                        found = true;\n                        break;\n                    }\n                }\n                // can't find such point.\n                if (!found) q.pop_back();\n            }\n        }\n    }\n    return mxflow;\n}\n\nint P;\n\nint main() {\n    cin &gt;&gt; P &gt;&gt; V;\n    memset(G, 0, sizeof(G));\n    memset(nodes, 0, sizeof(nodes));\n    // Input\n    for (int i = 0; i &lt; V; i++) {\n        cin &gt;&gt; G[i][i + V];\n        for (int j = 0; j &lt; P; j++) cin &gt;&gt; nodes[i][j];\n        for (int j = 0; j &lt; P; j++) cin &gt;&gt; nodes[i + V][j];\n    }\n    // link output to input\n    for (int i = V; i &lt; 2 * V; i++) {\n        for (int j = 0; j &lt; V; j++) {\n            bool fit = true;\n            for (int k = 0; k &lt; P; k++) {\n                if (nodes[j][k] == 2) continue;\n                else if (nodes[j][k] != nodes[i][k]) {\n                    fit = false;\n                    break;\n                }\n            }\n            if (fit) G[i][j] = inf;\n        }\n    }\n    // ultra-source, ultra-target\n    s = 2 * V;\n    t = 2 * V + 1;\n    // link to s\n    for (int i = 0; i &lt; V; i++) {\n        bool fit = true;\n        for (int k = 0; k &lt; P; k++) {\n            if (nodes[i][k] == 1) {\n                fit = false;\n                break;\n            }\n        }\n        if (fit) G[s][i] = inf;\n    }\n    // link to t\n    for (int i = V; i &lt; 2 * V; i++) {\n        bool fit = true;\n        for (int k = 0; k &lt; P; k++) {\n            if (nodes[i][k] != 1) {\n                fit = false;\n                break;\n            }\n        }\n        if (fit) G[i][t] = inf;\n    }\n    // copy\n    memcpy(GG, G, sizeof(G));\n    // dinic\n    int mxflow = dinic();\n    // retrieve maxflow\n    vector&lt;int&gt; vs, ve, vv;\n    for (int i = V; i &lt; 2 * V; i++) {\n        for (int j = 0; j &lt; V; j++) {\n            int diff = GG[i][j] - G[i][j];\n            if (diff &gt; 0) {\n                vs.push_back(i - V + 1);\n                ve.push_back(j + 1);\n                vv.push_back(diff);\n            }\n        }\n    }\n    // Output\n    cout &lt;&lt; mxflow &lt;&lt;\" \"&lt;&lt; vv.size() &lt;&lt; endl;\n    for (int i = 0; i &lt; vv.size(); i++) \n        cout &lt;&lt; vs[i] &lt;&lt; \" \" &lt;&lt; ve[i] &lt;&lt; \" \" &lt;&lt; vv[i] &lt;&lt; endl;\n}\n</code></pre> <ul> <li>Optimal Milking</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int inf = 0x3f3f3f3f;\nconst int maxv = 250;\nint V, E, s, t;\n\nint G[maxv][maxv]; // adjancency matrix\nint vis[maxv], dep[maxv];\n\nbool bfs() {\n    int depth = 0;\n    deque&lt;int&gt; q;\n    memset(dep, -1, sizeof(dep));\n    dep[s] = 0;\n    q.push_back(s);\n    while (!q.empty()) {\n        int u = q.front(); q.pop_front();\n        for (int i = 0; i &lt; V; i++) {\n            if (G[u][i] &gt; 0 &amp;&amp; dep[i] == -1) {\n                dep[i] = dep[u] + 1;\n                if (i == t) return true;\n                else q.push_back(i);\n            }\n        }\n    }\n    return false;\n}\n\nint dinic() {\n    int mxflow = 0;\n    deque&lt;int&gt; q;\n    while (bfs()) {\n        q.push_back(s);\n        memset(vis, 0, sizeof(vis));\n        vis[s] = 1;\n        while (!q.empty()) {\n            int u = q.back();\n            // u is target\n            if (u == t) {\n                int mnflow = inf;\n                int v; // mnflow_start_vertex\n                for (int i = 1; i &lt; q.size(); i++) {\n                    int vs = q[i - 1];\n                    int ve = q[i];\n                    if (G[vs][ve] &gt; 0 &amp;&amp; mnflow &gt; G[vs][ve]) {\n                        mnflow = G[vs][ve];\n                        v = vs;\n                    }\n                }\n                for (int i = 1; i &lt; q.size(); i++) {\n                    int vs = q[i - 1];\n                    int ve = q[i];\n                    G[vs][ve] -= mnflow;\n                    G[ve][vs] += mnflow;\n                }\n                mxflow += mnflow;\n                // pop back \n                while (!q.empty() &amp;&amp; q.back() != v) {\n                    vis[q.back()] = 0;\n                    q.pop_back();\n                }\n            }\n            // u is not target\n            else {\n                // only add one point in the next layer to stack.\n                bool found = false;\n                for (int i = 0; i &lt; V; i++) {\n                    if (G[u][i] &gt; 0 &amp;&amp; dep[i] == dep[u] + 1 &amp;&amp; !vis[i]) {\n                        vis[i] = 1;\n                        q.push_back(i);\n                        found = true;\n                        break;\n                    }\n                }\n                // can't find such point.\n                if (!found) q.pop_back();\n            }\n        }\n    }\n    return mxflow;\n}\n\nint K, C, M;\nint graph[maxv][maxv];\nint dist[maxv][maxv];\n\nvoid floyd() {\n    memcpy(dist, graph, sizeof(dist));\n    int V = K + C;\n    for (int i = 0; i &lt; V; i++) \n        for (int j = 0; j &lt; V; j++) \n            if (dist[i][j] == 0) dist[i][j] = inf;\n    for (int u = 0; u &lt; V; u++) {\n        for (int i = 0; i &lt; V; i++) {\n            for (int j = 0; j &lt; V; j++) {\n                if (dist[i][j] &gt; dist[i][u] + dist[u][j]) {\n                    dist[i][j] = dist[i][u] + dist[u][j];\n                }\n            }\n        }\n    }\n}\n\nint check(int mxdist) {\n    memset(G, 0, sizeof(G));\n    V = K + C + 2;\n    s = V - 2;\n    t = V - 1;\n    for (int i = 0; i &lt; K; i++) G[i][V - 1] = M;\n    for (int i = K; i &lt; K + C; i++) {\n        G[V - 2][i] = 1;\n        for (int j = 0; j &lt; K; j++) \n            if (dist[i][j] &lt;= mxdist) G[i][j] = 1;\n    }\n    return dinic();\n}\n\nint main() {\n    cin &gt;&gt; K &gt;&gt; C &gt;&gt; M;\n    for (int i = 0; i &lt; K + C; i++)\n        for (int j = 0; j &lt; K + C; j++)\n            cin &gt;&gt; graph[i][j];\n    floyd();\n    int l = 0, r = 200 * 250 * 2;\n    while (l &lt;= r) {\n        int m = (l + r) / 2;\n        int flow = check(m);\n        // cout &lt;&lt; \"check \" &lt;&lt; m &lt;&lt; \" mxflow \" &lt;&lt; flow &lt;&lt; endl;\n        if (flow == C) r = m - 1;\n        else l = m + 1;\n    }\n    cout &lt;&lt; l &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/advanced/%E7%BD%91%E7%BB%9C%E6%B5%812/","title":"Network flow 2","text":""},{"location":"algorithm/advanced/%E7%BD%91%E7%BB%9C%E6%B5%812/#_1","title":"\u6709\u6d41\u91cf\u4e0b\u754c\u7684\u6700\u5927\u6d41","text":"<p>\u628a\u6bcf\u4e00\u6761\u6709\u4e0b\u754c\u7684\u8fb9\u5206\u4e3a\u5fc5\u8981\u8fb9+\u4e0d\u5fc5\u8981\u8fb9\u3002</p> <ul> <li>Budget</li> </ul>"},{"location":"algorithm/advanced/%E7%BD%91%E7%BB%9C%E6%B5%812/#_2","title":"\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41","text":"<p>\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u5355\u4f4d\u6d41\u91cf\u6240\u9700\u7684\u8d39\u7528\uff0c\u6c42\u6240\u6709\u6700\u5927\u6d41\u4e2d\u8d39\u7528\u6700\u5c0f\u7684\u3002</p> <ul> <li>Farm Tour</li> </ul>"},{"location":"algorithm/advanced/%E7%BD%91%E7%BB%9C%E6%B5%812/#_3","title":"\u4e8c\u90e8\u56fe\u6700\u5927\u5339\u914d","text":"<p>\u5de6\u534a\u90e8\u5206\u65e0\u9650\u8fb9(1\u8fb9\u4e5f\u53ef\u4ee5)\u8fde\u63a5\u5bf9\u5e94\u7684\u53f3\u534a\u90e8\u5206\uff0c\u8d85\u6e90\u70b9\u75281\u8fb9\u8fde\u5411\u6240\u6709\u5de6\u534a\u90e8\u5206\uff0c\u8d85\u6c47\u70b9\u75281\u51fa\u8fb9\u8fde\u63a5\u6240\u6709\u53f3\u534a\u90e8\u5206\u3002\u8c03\u7528\u6700\u5927\u6d41\u5373\u53ef\u5f97\u5230\u6700\u5927\u5339\u914d\u6570\u3002</p> <p>\u53e6\u4e00\u4e2a\u89e3\u51b3\u4e8c\u90e8\u56fe\u6700\u5927\u5339\u914d\u95ee\u9898\u7684\u7b97\u6cd5\u662f\u5308\u7259\u5229\u7b97\u6cd5\u3002</p> <ul> <li> <p>The perfect stall</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int inf = 0x3f3f3f3f;\nconst int maxv = 500;\nint V, E, s, t;\n\nint G[maxv][maxv]; // adjancency matrix\nint vis[maxv], dep[maxv];\n\nbool bfs() {\n  int depth = 0;\n  deque&lt;int&gt; q;\n  memset(dep, -1, sizeof(dep));\n  dep[s] = 0;\n  q.push_back(s);\n  while (!q.empty()) {\n      int u = q.front(); q.pop_front();\n      for (int i = 0; i &lt; V; i++) {\n          if (G[u][i] &gt; 0 &amp;&amp; dep[i] == -1) {\n              dep[i] = dep[u] + 1;\n              if (i == t) return true;\n              else q.push_back(i);\n          }\n      }\n  }\n  return false;\n}\n\nint dinic() {\n  int mxflow = 0;\n  deque&lt;int&gt; q;\n  while (bfs()) {\n      q.push_back(s);\n      memset(vis, 0, sizeof(vis));\n      vis[s] = 1;\n      while (!q.empty()) {\n          int u = q.back();\n          // u is target\n          if (u == t) {\n              int mnflow = inf;\n              int v; // mnflow_start_vertex\n              for (int i = 1; i &lt; q.size(); i++) {\n                  int vs = q[i - 1];\n                  int ve = q[i];\n                  if (G[vs][ve] &gt; 0 &amp;&amp; mnflow &gt; G[vs][ve]) {\n                      mnflow = G[vs][ve];\n                      v = vs;\n                  }\n              }\n              for (int i = 1; i &lt; q.size(); i++) {\n                  int vs = q[i - 1];\n                  int ve = q[i];\n                  G[vs][ve] -= mnflow;\n                  G[ve][vs] += mnflow;\n              }\n              mxflow += mnflow;\n              // pop back \n              while (!q.empty() &amp;&amp; q.back() != v) {\n                  vis[q.back()] = 0;\n                  q.pop_back();\n              }\n          }\n          // u is not target\n          else {\n              // only add one point in the next layer to stack.\n              bool found = false;\n              for (int i = 0; i &lt; V; i++) {\n                  if (G[u][i] &gt; 0 &amp;&amp; dep[i] == dep[u] + 1 &amp;&amp; !vis[i]) {\n                      vis[i] = 1;\n                      q.push_back(i);\n                      found = true;\n                      break;\n                  }\n              }\n              // can't find such point.\n              if (!found) q.pop_back();\n          }\n      }\n  }\n  return mxflow;\n}\n\nint N, M, a, b;\n\nint main() {\n  while (cin &gt;&gt; N &gt;&gt; M) {\n      V = N + M + 2;\n      s = V - 2;\n      t = V - 1;\n      memset(G, 0, sizeof(G));\n      for (int i = 0; i &lt; N; i++) {\n          cin &gt;&gt; a;\n          for (int j = 0; j &lt; a; j++) {\n              cin &gt;&gt; b;\n              G[i][N + b - 1] = inf;\n          }\n      }\n      for (int i = 0; i &lt; N; i++) G[s][i] = 1;\n      for (int i = N; i &lt; N + M; i++) G[i][t] = 1;\n      cout &lt;&lt; dinic() &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/advanced/%E7%BD%91%E7%BB%9C%E6%B5%812/#_4","title":"\u6700\u5c0f\u5272","text":"<p>\u6700\u5927\u6d41==\u6700\u5c0f\u5272\u3002</p> <p></p>"},{"location":"algorithm/advanced/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/","title":"\u8ba1\u7b97\u51e0\u4f55","text":"<pre><code>bool PointInPolygon(Point p, const Polygon &amp; poly) {\n    int n = poly.size();\n    if (n &lt; 3) return false;\n    sort(poly.begin(), poly.end());\n    Point b = poly[0], c = poly[1], a = poly[n - 1];\n    bool clcws = ((b - a) ^ (c - b)) &lt; 0;\n    bool flag1 = true, flag2 = true;\n    for (int i = 0; i &lt; n; i++) {\n        Line l(poly[i], poly[(i + 1) % n]);\n        if (PointInSeg(p, l)) return true;\n        int side = SideOfLine(p, l);\n        if (clcws &amp;&amp; side &gt; 0) flag1 = false;\n        if (!clcws &amp;&amp; side &lt; 0) flag2 = false;\n        if (!flag1 &amp;&amp; !flag2) return false;\n    }\n    return true;\n}\n\n\nPoint LineCrossLine(Line l, Line m) {\n    Point a = l.b - l.a, b = m.b - m.a, s = m.a - l.a;\n    return l.a + a * ((b^s) / (b^a));\n}\n\npair&lt;int, Point&gt; LineCrossSeg(Line l, Line seg) {\n    int a = SideOfLine(seg.a, l);\n    int b = SideOfLine(seg.b, l);\n    if (a*b &lt;= 0) return make_pair(1, LineCrossLine(l, seg));\n    else return make_pair(0, Point(0, 0));\n}\n\n// polar angle order comparator\nstruct comp {\n    Point p0;\n    comp(const Point&amp; p) :p0(p) {}\n    bool operator ()(const Point&amp; p1, const Point&amp; p2) const {\n        int s = epssgn((p1 - p0) ^ (p2 - p0));\n        if (s == 0) return dist(p0, p1) &lt; dist(p0, p2);\n        else return s &gt; 0;\n    }\n};\n\n// polar angle order\nint graham(vector&lt;Point&gt;&amp; ps, vector&lt;Point&gt;&amp; stk) {\n    if (ps.size() &lt; 3) return 0;\n    stk.clear();\n    sort(ps.begin(), ps.end());\n    sort(ps.begin() + 1, ps.end(), comp(ps[0]));\n    stk.push_back(ps[0]);\n    stk.push_back(ps[1]);\n    stk.push_back(ps[2]);\n    for (int i = 3; i &lt; ps.size(); i++) {\n        while (true) {\n            Point p2 = *(stk.end() - 1);\n            Point p1 = *(stk.end() - 2);\n            if (epssgn((p2 - p1) ^ (ps[i] - p2)) &lt;= 0) stk.pop_back();\n            else break;\n        }\n        stk.push_back(ps[i]);\n    }\n    return stk.size();\n}\n</code></pre>"},{"location":"algorithm/advanced/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#grandpas-estate","title":"Grandpa's Estate","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;iomanip&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nconst double inf = 1e9;\nconst double eps = 1e-6;\n\nstruct Point {\n    double x, y;\n    Point(double a = 0, double b = 0) { x = a; y = b; }\n    bool operator == (const Point&amp; b) const {\n        return x == b.x &amp;&amp; y == b.y;\n    }\n    bool operator &lt; (const Point&amp; b) const {\n        if (x == b.x) return y &lt; b.y;\n        return x &lt; b.x;\n    }\n    friend ostream&amp; operator &lt;&lt; (ostream&amp; os, const Point&amp; p) {\n        os &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \")\";\n        return os;\n    }\n};\n\ntypedef Point Vector;\n\nVector operator + (Point a, Point b) { return Vector(a.x + b.x, a.y + b.y); }\nVector operator - (Point a, Point b) { return Vector(a.x - b.x, a.y - b.y); }\nVector operator * (Point a, double k) { return Vector(a.x*k, a.y*k); }\nVector operator * (double k, Point a) { return Vector(a.x*k, a.y*k); }\nVector operator / (Point a, double k) { return Vector(a.x / k, a.y / k); }\ndouble operator * (Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\ndouble operator ^ (Vector a, Vector b) { return a.x*b.y - b.x*a.y; }\ndouble len(Vector a) { return sqrt(a.x*a.x + a.y*a.y); }\nVector unit(Vector p) { return p * (1 / len(p)); }\ndouble project(Vector a, Vector b) { return a * unit(b);}\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(Point a, Point b) :a(a), b(b) {}\n    double getx(double y) { return (y - a.y) / (b.y - a.y)*(b.x - a.x) + a.x; }\n    double gety(double x) { return (x - a.x) / (b.x - a.x)*(b.y - a.y) + a.y; }\n    friend ostream&amp; operator &lt;&lt;(ostream&amp; os, const Line &amp; l){\n        os &lt;&lt; l.a &lt;&lt; \"-&gt;\" &lt;&lt; l.b;\n        return os;\n    }\n};\n\nint epssgn(double x) {\n    if (fabs(x) &lt; eps) return 0;\n    else return x &lt; 0 ? -1 : 1;\n}\n\ndouble dist(Point x, Point y) { return len(x - y); }\ndouble dist(Point p, Line l) { return fabs((p - l.a) ^ (l.b - l.a)) / len(l.b - l.a);}\ndouble area(Vector a, Vector b) { return a ^ b / 2;}\n\nint SideOfLine(Point p, Point a, Point b) {\n    double res = (b - a) ^ (p - a);\n    if (epssgn(res) == 0) return 0;\n    else if (res &gt; 0) return 1;\n    else return -1;\n}\n\nint SideOfLine(Point p, Line l) {\n    return SideOfLine(p, l.a, l.b);\n}\n\nbool PointInSeg(Point p, Line l) {\n    double tmp = (l.a - p) ^ (l.a - l.b);\n    if (!epssgn(tmp) == 0) return false;\n    if (epssgn(min(l.a.x, l.b.x) - p.x) &lt;= 0 &amp;&amp;\n        epssgn(p.x - max(l.a.x, l.b.x)) &lt;= 0 &amp;&amp;\n        epssgn(min(l.a.y, l.b.y) - p.y) &lt;= 0 &amp;&amp;\n        epssgn(p.y - max(l.a.y, l.b.y)) &lt;= 0)\n        return true;\n    return false;\n}\n\npair&lt;int, Point&gt; SegCrossSeg(Line s1, Line s2) {\n    Point p1 = s1.a;\n    Point p2 = s1.b;\n    Point p3 = s2.a;\n    Point p4 = s2.b;\n    double a1 = area(p3 - p1, p4 - p1);\n    double a2 = area(p4 - p2, p3 - p2);\n    Point crossPoint = p1 + (p2 - p1)*(a1 / (a1 + a2));\n    if (epssgn(((p2 - p1) ^ (p3 - p1))*((p2 - p1) ^ (p4 - p1))) &lt; 0 &amp;&amp;\n        epssgn(((p4 - p3) ^ (p1 - p3))*((p4 - p3) ^ (p2 - p3))) &lt; 0)\n        return make_pair(0, crossPoint); // standard cross\n    if (epssgn((p2 - p1) ^ (p3 - p4)) != 0) {\n        // \u7aef\u70b9\u91cd\u5408\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (p1 == p3 || p1 == p4) return make_pair(1, p1);\n        if (p2 == p3 || p2 == p4) return make_pair(1, p2);\n        // s1\u7aef\u70b9\u5728s2\u5185\u90e8\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (PointInSeg(p1, s2)) return make_pair(2, p1);\n        if (PointInSeg(p2, s2)) return make_pair(2, p2);\n        // s2\u7aef\u70b9\u5728s1\u5185\u90e8\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (PointInSeg(p3, s1)) return make_pair(3, p3);\n        if (PointInSeg(p4, s1)) return make_pair(3, p4);\n        // s2\u6240\u5728\u76f4\u7ebf\u4e0e\u7ebf\u6bb5s1\u76f8\u4ea4\n        if (PointInSeg(crossPoint, s1)) return make_pair(8, crossPoint);\n        // s1\u6240\u5728\u76f4\u7ebf\u4e0e\u7ebf\u6bb5s2\u76f8\u4ea4\n        if (PointInSeg(crossPoint, s2)) return make_pair(9, crossPoint);\n        // \u4e24\u76f4\u7ebf\u76f8\u4ea4\n        return make_pair(4, crossPoint);\n    }\n    // \u5e73\u884c\n    if (!epssgn(dist(p1, s2))) return make_pair(5, Point(0, 0)); \n    // \u5171\u7ebf\uff0c\u6709\u516c\u5171\u4ea4\u70b9\n    if (PointInSeg(p1, s2)) return make_pair(6, p1);\n    if (PointInSeg(p2, s2)) return make_pair(6, p2);\n    if (PointInSeg(p3, s1)) return make_pair(6, p3);\n    if (PointInSeg(p4, s1)) return make_pair(6, p4);\n    // \u5171\u7ebf\uff0c\u65e0\u516c\u5171\u4ea4\u70b9\n    return make_pair(7, Point(0, 0));\n}\n\n// horizontal order graham\nint graham(vector&lt;Point&gt;&amp; ps, vector&lt;Point&gt;&amp; stk) {\n    int n = ps.size();\n    if (n &lt; 3) return 0;\n    stk.clear();\n    sort(ps.begin(), ps.end());\n    stk.push_back(ps[0]);\n    stk.push_back(ps[1]);\n    for (int i = 2; i &lt; n; i++) {\n        while (stk.size() &gt; 1) {\n            Point p2 = *(stk.end() - 1);\n            Point p1 = *(stk.end() - 2);\n            if (epssgn((p2 - p1) ^ (ps[i] - p2)) &lt; 0) stk.pop_back();\n            else break;\n        }\n        stk.push_back(ps[i]);\n    }\n    int size = stk.size();\n    stk.push_back(ps[n - 2]);\n    for (int i = n - 3; i &gt;= 0; i--) {\n        while (stk.size() &gt; size) {\n            Point p2 = *(stk.end() - 1);\n            Point p1 = *(stk.end() - 2);\n            if (epssgn((p2 - p1) ^ (ps[i] - p2)) &lt; 0) stk.pop_back();\n            else break;\n        }\n        stk.push_back(ps[i]);\n    }\n    stk.pop_back();\n    return stk.size();\n}\n\nconst int maxn = 1005;\nvector&lt;Point&gt; ps, hull;\nint T, N, x, y;\n\nint main() {\n    cin &gt;&gt; T;\n    while (T--) {\n        cin &gt;&gt; N;\n        ps.clear();\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; x &gt;&gt; y;\n            ps.push_back(Point(x, y));\n        }\n        if (N &lt; 6) {\n            cout &lt;&lt; \"NO\" &lt;&lt; endl;\n            continue;\n        }\n        int s = graham(ps, hull);\n        bool flag = true;\n        for (int i = 0; i &lt; s - 1; i++) {\n            Line l(hull[i], hull[i + 1]);\n            int cnt = 0;\n            for (int j = 0; j &lt; N; j++) if (SideOfLine(ps[j], l) == 0) cnt++;\n            if (cnt &lt; 3) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) cout &lt;&lt; \"YES\" &lt;&lt; endl;\n        else cout &lt;&lt; \"NO\" &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#most-distant-point-from-the-sea","title":"Most Distant Point from the Sea","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;iomanip&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nconst double inf = 1e9;\nconst double eps = 1e-6;\n\nstruct Point {\n    double x, y;\n    Point(double a = 0, double b = 0) { x = a; y = b; }\n    bool operator == (const Point&amp; b) const {\n        return x == b.x &amp;&amp; y == b.y;\n    }\n    bool operator &lt; (const Point&amp; b) const {\n        if (x == b.x) return y &lt; b.y;\n        return x &lt; b.x;\n    }\n    friend ostream&amp; operator &lt;&lt; (ostream&amp; os, const Point&amp; p) {\n        os &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \")\";\n        return os;\n    }\n};\n\ntypedef Point Vector;\n\nVector operator + (Point a, Point b) { return Vector(a.x + b.x, a.y + b.y); }\nVector operator - (Point a, Point b) { return Vector(a.x - b.x, a.y - b.y); }\nVector operator * (Point a, double k) { return Vector(a.x*k, a.y*k); }\nVector operator * (double k, Point a) { return Vector(a.x*k, a.y*k); }\nVector operator / (Point a, double k) { return Vector(a.x / k, a.y / k); }\ndouble len(Vector a) { return sqrt(a.x*a.x + a.y*a.y); }\nVector unit(Vector p) { return p * (1 / len(p)); }\ndouble project(Vector a, Vector b) { return a * unit(b);}\ndouble operator * (Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\ndouble operator ^ (Vector a, Vector b) { return a.x*b.y - b.x*a.y; }\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(Point a, Point b) :a(a), b(b) {}\n    double getx(double y) { return (y - a.y) / (b.y - a.y)*(b.x - a.x) + a.x; }\n    double gety(double x) { return (x - a.x) / (b.x - a.x)*(b.y - a.y) + a.y; }\n    friend ostream&amp; operator &lt;&lt;(ostream&amp; os, const Line &amp; l){\n        os &lt;&lt; l.a &lt;&lt; \"-&gt;\" &lt;&lt; l.b;\n        return os;\n    }\n};\n\nint epssgn(double x) {\n    if (fabs(x) &lt; eps) return 0;\n    else return x &lt; 0 ? -1 : 1;\n}\n\ndouble dist(Point x, Point y) { return len(x - y); }\ndouble dist(Point p, Line l) { return fabs((p - l.a) ^ (l.b - l.a)) / len(l.b - l.a);}\ndouble area(Vector a, Vector b) { return a ^ b / 2;}\n\nint SideOfLine(Point p, Point a, Point b) {\n    double res = (b - a) ^ (p - a);\n    if (epssgn(res) == 0) return 0;\n    else if (res &gt; 0) return 1;\n    else return -1;\n}\n\nint SideOfLine(Point p, Line l) {\n    return SideOfLine(p, l.a, l.b);\n}\n\nbool PointInSeg(Point p, Line l) {\n    double tmp = (l.a - p) ^ (l.a - l.b);\n    if (!epssgn(tmp) == 0) return false;\n    if (epssgn(min(l.a.x, l.b.x) - p.x) &lt;= 0 &amp;&amp;\n        epssgn(p.x - max(l.a.x, l.b.x)) &lt;= 0 &amp;&amp;\n        epssgn(min(l.a.y, l.b.y) - p.y) &lt;= 0 &amp;&amp;\n        epssgn(p.y - max(l.a.y, l.b.y)) &lt;= 0)\n        return true;\n    return false;\n}\n\npair&lt;int, Point&gt; SegCrossSeg(Line s1, Line s2) {\n    Point p1 = s1.a;\n    Point p2 = s1.b;\n    Point p3 = s2.a;\n    Point p4 = s2.b;\n    double a1 = area(p3 - p1, p4 - p1);\n    double a2 = area(p4 - p2, p3 - p2);\n    Point crossPoint = p1 + (p2 - p1)*(a1 / (a1 + a2));\n    if (epssgn(((p2 - p1) ^ (p3 - p1))*((p2 - p1) ^ (p4 - p1))) &lt; 0 &amp;&amp;\n        epssgn(((p4 - p3) ^ (p1 - p3))*((p4 - p3) ^ (p2 - p3))) &lt; 0)\n        return make_pair(0, crossPoint); // standard cross\n    if (epssgn((p2 - p1) ^ (p3 - p4)) != 0) {\n        // \u7aef\u70b9\u91cd\u5408\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (p1 == p3 || p1 == p4) return make_pair(1, p1);\n        if (p2 == p3 || p2 == p4) return make_pair(1, p2);\n        // s1\u7aef\u70b9\u5728s2\u5185\u90e8\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (PointInSeg(p1, s2)) return make_pair(2, p1);\n        if (PointInSeg(p2, s2)) return make_pair(2, p2);\n        // s2\u7aef\u70b9\u5728s1\u5185\u90e8\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (PointInSeg(p3, s1)) return make_pair(3, p3);\n        if (PointInSeg(p4, s1)) return make_pair(3, p4);\n        // s2\u6240\u5728\u76f4\u7ebf\u4e0e\u7ebf\u6bb5s1\u76f8\u4ea4\n        if (PointInSeg(crossPoint, s1)) return make_pair(8, crossPoint);\n        // s1\u6240\u5728\u76f4\u7ebf\u4e0e\u7ebf\u6bb5s2\u76f8\u4ea4\n        if (PointInSeg(crossPoint, s2)) return make_pair(9, crossPoint);\n        // \u4e24\u76f4\u7ebf\u76f8\u4ea4\n        return make_pair(4, crossPoint);\n    }\n    // \u5e73\u884c\n    if (!epssgn(dist(p1, s2))) return make_pair(5, Point(0, 0)); \n    // \u5171\u7ebf\uff0c\u6709\u516c\u5171\u4ea4\u70b9\n    if (PointInSeg(p1, s2)) return make_pair(6, p1);\n    if (PointInSeg(p2, s2)) return make_pair(6, p2);\n    if (PointInSeg(p3, s1)) return make_pair(6, p3);\n    if (PointInSeg(p4, s1)) return make_pair(6, p4);\n    // \u5171\u7ebf\uff0c\u65e0\u516c\u5171\u4ea4\u70b9\n    return make_pair(7, Point(0, 0));\n}\n\n// HalfPlane, cut src with Line a-&gt;b's left half plane.\ntypedef vector&lt;Point&gt; Polygon;\nint cutPolygon(const Polygon&amp; src, Point a, Point b, Polygon&amp; res) {\n    int n = src.size();\n    res.clear();\n    for (int i = 0; i &lt; n; i++) {\n        Point c = src[i];\n        Point d = src[(i + 1) % n]; // note %\n        if (epssgn((b - a) ^ (c - a)) &gt;= 0) res.push_back(c);\n        pair&lt;int, Point&gt; r = SegCrossSeg(Line(c, d), Line(a, b));\n        if (r.first == 0 || r.first == 8 || r.first == 3) res.push_back(r.second);\n    }\n    return res.size();\n}\n\nint N, x, y;\nPolygon island, res;\n\nbool check(double mid) {\n    vector&lt;Line&gt; shrink;\n    for (int i = 0; i &lt; N; i++) {\n        Line l(island[i], island[(i + 1) % N]);\n        Vector vl = island[(i + 1) % N] - island[i];\n        Vector v = unit(Vector(-vl.y, vl.x)) * mid; // vertical, length=mid\n        Line ll(l.a + v, l.b + v); // push in\n        shrink.push_back(ll);\n    }\n    int s;\n    Polygon tmp = island;\n    for (int i = 0; i &lt; shrink.size(); i++) {\n        s = cutPolygon(tmp, shrink[i].a, shrink[i].b, res);\n        if (s == 0) break;\n        tmp = res;\n    }\n    //cout &lt;&lt;\"check \" &lt;&lt;mid&lt;&lt;\" :\"&lt;&lt; res.size() &lt;&lt; endl;\n    return res.size() &gt; 0;\n}\n\nint main() {\n    while (cin &gt;&gt; N &amp;&amp; N) {\n        island.clear();\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; x &gt;&gt; y;\n            island.push_back(Point(x, y));\n        }\n        // eps binary search\n        double left = 0, right = inf;\n        while (epssgn(left-right)&lt;0) {\n            double mid = (left + right) / 2;\n            if (check(mid)) left = mid + eps;\n            else right = mid;\n        }\n        cout &lt;&lt; fixed &lt;&lt; setprecision(6) &lt;&lt; left - eps &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/advanced/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#pipe","title":"Pipe","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;iomanip&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nconst double inf = 1e9;\nconst double eps = 1e-6;\n\nstruct Point {\n    double x, y;\n    Point(double a = 0, double b = 0) { x = a; y = b; }\n    bool operator == (const Point&amp; b) const {\n        return x == b.x &amp;&amp; y == b.y;\n    }\n    bool operator &lt; (const Point&amp; b) const {\n        if (x == b.x) return y &lt; b.y;\n        return x &lt; b.x;\n    }\n    friend ostream&amp; operator &lt;&lt; (ostream&amp; os, const Point&amp; p) {\n        os &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \")\";\n        return os;\n    }\n};\n\ntypedef Point Vector;\n\nVector operator + (Point a, Point b) { return Vector(a.x + b.x, a.y + b.y); }\nVector operator - (Point a, Point b) { return Vector(a.x - b.x, a.y - b.y); }\nVector operator * (Point a, double k) { return Vector(a.x*k, a.y*k); }\nVector operator * (double k, Point a) { return Vector(a.x*k, a.y*k); }\nVector operator / (Point a, double k) { return Vector(a.x / k, a.y / k); }\ndouble operator * (Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\ndouble operator ^ (Vector a, Vector b) { return a.x*b.y - b.x*a.y; }\ndouble len(Vector a) { return sqrt(a.x*a.x + a.y*a.y); }\nVector unit(Vector p) { return p * (1 / len(p)); }\ndouble project(Vector a, Vector b) { return a * unit(b);}\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(Point a, Point b) :a(a), b(b) {}\n    double getx(double y) { return (y - a.y) / (b.y - a.y)*(b.x - a.x) + a.x; }\n    double gety(double x) { return (x - a.x) / (b.x - a.x)*(b.y - a.y) + a.y; }\n    friend ostream&amp; operator &lt;&lt;(ostream&amp; os, const Line &amp; l){\n        os &lt;&lt; l.a &lt;&lt; \"-&gt;\" &lt;&lt; l.b;\n        return os;\n    }\n};\n\nint epssgn(double x) {\n    if (fabs(x) &lt; eps) return 0;\n    else return x &lt; 0 ? -1 : 1;\n}\n\ndouble dist(Point x, Point y) { return len(x - y); }\ndouble dist(Point p, Line l) { return fabs((p - l.a) ^ (l.b - l.a)) / len(l.b - l.a);}\ndouble area(Vector a, Vector b) { return a ^ b / 2;}\n\nint SideOfLine(Point p, Point a, Point b) {\n    double res = (b - a) ^ (p - a);\n    if (epssgn(res) == 0) return 0;\n    else if (res &gt; 0) return 1;\n    else return -1;\n}\n\nint SideOfLine(Point p, Line l) {\n    return SideOfLine(p, l.a, l.b);\n}\n\nbool PointInSeg(Point p, Line l) {\n    double tmp = (l.a - p) ^ (l.a - l.b);\n    if (!epssgn(tmp) == 0) return false;\n    if (epssgn(min(l.a.x, l.b.x) - p.x) &lt;= 0 &amp;&amp;\n        epssgn(p.x - max(l.a.x, l.b.x)) &lt;= 0 &amp;&amp;\n        epssgn(min(l.a.y, l.b.y) - p.y) &lt;= 0 &amp;&amp;\n        epssgn(p.y - max(l.a.y, l.b.y)) &lt;= 0)\n        return true;\n    return false;\n}\n\npair&lt;int, Point&gt; SegCrossSeg(Line s1, Line s2) {\n    Point p1 = s1.a;\n    Point p2 = s1.b;\n    Point p3 = s2.a;\n    Point p4 = s2.b;\n    double a1 = area(p3 - p1, p4 - p1);\n    double a2 = area(p4 - p2, p3 - p2);\n    Point crossPoint = p1 + (p2 - p1)*(a1 / (a1 + a2));\n    if (epssgn(((p2 - p1) ^ (p3 - p1))*((p2 - p1) ^ (p4 - p1))) &lt; 0 &amp;&amp;\n        epssgn(((p4 - p3) ^ (p1 - p3))*((p4 - p3) ^ (p2 - p3))) &lt; 0)\n        return make_pair(0, crossPoint); // standard cross\n    if (epssgn((p2 - p1) ^ (p3 - p4)) != 0) {\n        // \u7aef\u70b9\u91cd\u5408\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (p1 == p3 || p1 == p4) return make_pair(1, p1);\n        if (p2 == p3 || p2 == p4) return make_pair(1, p2);\n        // s1\u7aef\u70b9\u5728s2\u5185\u90e8\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (PointInSeg(p1, s2)) return make_pair(2, p1);\n        if (PointInSeg(p2, s2)) return make_pair(2, p2);\n        // s2\u7aef\u70b9\u5728s1\u5185\u90e8\uff0c\u4e0d\u5e73\u884c\uff0c\u4e0d\u5171\u7ebf\n        if (PointInSeg(p3, s1)) return make_pair(3, p3);\n        if (PointInSeg(p4, s1)) return make_pair(3, p4);\n        // s2\u6240\u5728\u76f4\u7ebf\u4e0e\u7ebf\u6bb5s1\u76f8\u4ea4\n        if (PointInSeg(crossPoint, s1)) return make_pair(8, crossPoint);\n        // s1\u6240\u5728\u76f4\u7ebf\u4e0e\u7ebf\u6bb5s2\u76f8\u4ea4\n        if (PointInSeg(crossPoint, s2)) return make_pair(9, crossPoint);\n        // \u4e24\u76f4\u7ebf\u76f8\u4ea4\n        return make_pair(4, crossPoint);\n    }\n    // \u5e73\u884c\n    if (!epssgn(dist(p1, s2))) return make_pair(5, Point(0, 0)); \n    // \u5171\u7ebf\uff0c\u6709\u516c\u5171\u4ea4\u70b9\n    if (PointInSeg(p1, s2)) return make_pair(6, p1);\n    if (PointInSeg(p2, s2)) return make_pair(6, p2);\n    if (PointInSeg(p3, s1)) return make_pair(6, p3);\n    if (PointInSeg(p4, s1)) return make_pair(6, p4);\n    // \u5171\u7ebf\uff0c\u65e0\u516c\u5171\u4ea4\u70b9\n    return make_pair(7, Point(0, 0));\n}\n\nconst int maxn = 25;\nPoint up[maxn], down[maxn];\nint N;\ndouble x, y;\n\nint main() {\n    while (cin &gt;&gt; N &amp;&amp; N) {\n        for (int i = 1; i &lt;= N; i++) {\n            cin &gt;&gt; x &gt;&gt; y;\n            up[i] = Point(x, y);\n            down[i] = Point(x, y - 1);\n        }\n        double mxx = -inf;\n        bool all = false;\n        int i, j, k;\n        for (i = 1; i &lt;= N; i++) {\n            for (j = 1; j &lt;= N; j++) {\n                if (i == j) continue;\n                Line l(up[i], down[j]);\n                for (k = 1; k &lt;= N; k++) {\n                    Line seg(up[k], down[k]);\n                    if (!LineCrossSeg(l, seg).first) break;\n                }\n                if (k &gt; N) {\n                    all = true;\n                    break;\n                }\n                else if (k &gt; max(i, j)) {\n                    Line seg1(up[k], up[k - 1]);\n                    pair&lt;int, Point&gt; res = SegCrossSeg(l, seg1);\n                    if (res.first &lt;= 3 || res.first == 6 || res.first == 9) \n                        mxx = max(mxx, res.second.x);\n                    Line seg2(down[k], down[k - 1]);\n                    res = SegCrossSeg(l, seg2);\n                    if (res.first &lt;= 3 || res.first == 6 || res.first == 9) \n                        mxx = max(mxx, res.second.x);\n                }\n            }\n            if (all) break;\n        }\n        if (all) cout &lt;&lt; \"Through all the pipe.\" &lt;&lt; endl;\n        else cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; mxx &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/algoanalysis/Approximation/","title":"Approximation Algorithm","text":"<p>\u8fd1\u4f3c\u7b97\u6cd5\u9488\u5bf9\u7ec4\u5408\u4f18\u5316\u95ee\u9898\uff01</p>"},{"location":"algorithm/algoanalysis/Approximation/#_1","title":"\u6700\u5c0f\u9876\u70b9\u8986\u76d6\u95ee\u9898","text":"<p>\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u4efb\u53d6\u4e00\u6761\u8fb9\uff0c\u5c06\u4e24\u4e2a\u9876\u70b9\u52a0\u5165V'\uff0c\u5e76\u5220\u53bb\u5176\u5173\u8054\u7684\u8fb9\uff0c\u76f4\u5230\u6240\u6709\u8fb9\u90fd\u88ab\u5220\u9664\u3002</p> <p>\u53ef\u4ee5\u8bc1\u660e\u8fd9\u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u5e38\u6570\u6bd4\u4e3a2\u7684\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u7d27\u5b9e\u4f8b\u4e3a\u7531k\u6761\u4e92\u4e0d\u5173\u8054\u7684\u8fb9\u6784\u6210\u7684\u56fe\u3002</p> <p>\u9876\u70b9\u8986\u76d6\u7684\u5224\u5b9a\u95ee\u9898\u662fNPC\u7684\uff01</p>"},{"location":"algorithm/algoanalysis/Approximation/#_2","title":"\u6700\u5927\u56e2\u95ee\u9898 &amp; \u6700\u5927\u72ec\u7acb\u96c6\u95ee\u9898","text":"<p>\u8fd9\u4e24\u4e2a\u95ee\u9898\u76ee\u524d\u8ba4\u4e3a\u4e0d\u5b58\u5728\u5e38\u6570\u8fd1\u4f3c\u6bd4\u7684\u8fd1\u4f3c\u7b97\u6cd5\u3002</p>"},{"location":"algorithm/algoanalysis/NP/","title":"NP","text":"<p>To prove a problem is NPC, we need to:</p> <ul> <li>show it belongs to NP, by showing a non-deterministic polynomial-time algorithm.</li> <li>show it is NP-hard, by reducing from a known NP-hard problem (e.g., SAT, 3-SAT, ...).</li> </ul>"},{"location":"algorithm/algoanalysis/NP/#known-npc-problems","title":"Known NPC problems","text":"<ul> <li> <p>Partition: Partition a set of numbers into two subsets with the same sum.</p> <p>Can be reduced from Subset-sum, and is a limited case of 0-1 knapsack.</p> </li> </ul>"},{"location":"algorithm/algoanalysis/NP/#undirected-hamiltonian-cycle","title":"Undirected Hamiltonian Cycle","text":"<p>https://www.ics.uci.edu/~goodrich/teach/cs162/hw/HW8Sols.pdf</p> <p>Theorem 9.13 in the book.</p> <ul> <li>First, guess an ordering of the vertices, it is easy to verify in polynomial time if it is a HC.</li> </ul> <ul> <li> <p>Second, we reduce from Directed Hamiltonian Cycle (which is known to be NP-hard by reducing from 3-SAT).</p> <p>The essence is to represent directed edge through undirected edge.</p> <p>Construction: for a Directed Graph \\(G = &lt;V, E&gt;\\), the correspond Undirected Graph is \\(G' = &lt;V', E'&gt;\\), where $$ V' = {v^{in}, v^{mid}, v^{out} | v \\in V} \\ E' = {(u^{out}, v^{in})| \\in E} \\cup{(v^{in}, v^{mid}), (v^{mid}, v^{out}) | v \\in V} $$ Now we prove that G has directed HC if and only if G' has undirected HC. <p>\\(\\Rightarrow\\): easy, just connect the two corresponding edges. </p> <p>\\(\\Leftarrow\\): note that the only way to include \\(v^{mid}\\) is to include \\((v^{in}, v^{mid}), (v^{mid}, v^{out})\\), so we can find the corresponding directed cycle in G.</p> <ul> <li> <p>Side note: Can we leave out \\(v^{mid}\\) and use \\(V' = \\{v^{in}, v^{out} | v \\in V\\}\\) ?</p> <p>No, a counter example is given by:</p> <p></p> </li> </ul>"},{"location":"algorithm/algoanalysis/NP/#strongly-independent-set","title":"Strongly Independent Set","text":"<p>https://www.cse.iitd.ac.in/~amitk/SemI-2015/tut11.pdf</p> <p>https://cs.stackexchange.com/questions/124988/independent-set-poly-reducible-to-strongly-independent-set</p> <p>The following is a version of the Independent Set problem. You are given a graph G = (V, E) and an integer k. For this problem, we will call a set I \u2286 V strongly independent if for any two nodes v, u \u2208 I, the edge (v, u) does not belong to E, and there is also no path of 2 edges from u to v, i.e., there is no node w such that both (u, w) \u2208 E and (w, v) \u2208 E. The Strongly Independent Set problem is to decide whether G has a strongly independent set of size k. Prove that the Strongly Independent Set problem is NP-complete.</p> <p>Solution: </p> <ul> <li>Checking membership in NP is again straightforward. </li> </ul> <ul> <li> <p>We reduce from independent set. Let G, k be an input to the independent set problem. We map it to an input to the Strongly Independent Set problem. </p> <p>For every edge e in G, we subdivide it by adding a new vertex ve, i.e., if e = (u, v) is an edge, then we replace it by two edges : (u, ve), (ve, v). </p> <p>Further, we form a clique over all the new vertices ve. Call this new graph G0 . </p> <p>Now check that if S is an independent set in G, then the same set of vertices is a strongly independent set in G0 . </p> <p>Conversely, let S be a strongly independent set in G0 . First observe that k &gt; 1 (otherwise, the reduction is trivially correct). Now S cannot contain any of the new vertices ve (because any other vertex in G0 is reachable from ve by a path of length 2). Therefore, S contains vertices which correspond to those in G. Now check that these vertices form an independent set in S.</p> </li> </ul>"},{"location":"algorithm/algoanalysis/NP/#minimum-sum-of-squares","title":"Minimum Sum of Squares","text":"<p>http://cmcstuff.esyr.org/vmkbotva-r15/5%20%D0%BA%D1%83%D1%80%D1%81/9%20%D0%A1%D0%B5%D0%BC%D0%B5%D1%81%D1%82%D1%80/%D0%A2%D0%B8%D0%B3%D1%80%D1%8B/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F%20%D1%81%D0%BB%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BD%D0%B0%20%D0%B0%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%BE%D0%BC.pdf, 17</p> <p></p>"},{"location":"algorithm/basic/DA01_Intro/","title":"Introduction","text":""},{"location":"algorithm/basic/DA01_Intro/#data-structure","title":"Data Structure","text":"<ul> <li> <p>Logical Structure</p> <p>\\((K,R)\\) : \\(K\\) is the set of Nodes(basic datatype or complex structure), \\(R\\) is the set of binary Relationships.</p> <p>Classification by \\(R\\):</p> <ul> <li>set structure</li> </ul> <ul> <li> <p>linear structure</p> <p>\u524d\u9a71\u5173\u7cfb\u3002\u5173\u7cfb\u6709\u5411\uff0c\u6ee1\u8db3\u5168\u5e8f\u6027\uff08\u4e24\u4e24\u8282\u70b9\u53ef\u4ee5\u6bd4\u8f83\u5148\u540e\uff09\u3001\u5355\u7d22\u6027\uff08\u6bcf\u4e2a\u8282\u70b9\u5b58\u5728\u552f\u4e00\u4e00\u4e2a\u524d\u9a71\u548c\u540e\u7ee7\u7ed3\u70b9\uff09</p> </li> </ul> <ul> <li> <p>tree structure</p> <p>\u5c42\u6b21\u7ed3\u6784\u3002\u76f4\u63a5\u524d\u9a71\u552f\u4e00\uff0c\u4f46\u53ef\u4ee5\u6709\u591a\u4e2a\u76f4\u63a5\u540e\u7ee7\u3002</p> <p>\u6839\u8282\u70b9\u65e0\u524d\u9a71\u3002</p> </li> </ul> <ul> <li> <p>graph structure</p> <p>\u7f51\u7edc\u7ed3\u6784\u3002\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7ea6\u675f\u3002</p> </li> </ul> </li> </ul> <ul> <li> <p>Storage/Physical Structure</p> <p>\u5185\u5b58\uff1a\u7a7a\u95f4\u76f8\u90bb\uff0c\u968f\u673a\u8bbf\u95ee\u3002</p> <p>\u5b58\u50a8\u7ed3\u6784\u5b9e\u73b0\u903b\u8f91\u5230\u7269\u7406\u7684\u6620\u5c04\uff08\u8282\u70b9\u6620\u5c04\u3001\u903b\u8f91\u5173\u7cfb\u6620\u5c04\uff09</p> <ul> <li> <p>\u987a\u5e8f</p> <p>\u6570\u7ec4\u3002\u7d27\u51d1\u5b58\u50a8\u7ed3\u6784\uff08\u4e0d\u5b58\u50a8\u4efb\u4f55\u9644\u52a0\u4fe1\u606f\uff09</p> </li> </ul> <ul> <li> <p>\u94fe\u63a5</p> <p>\u94fe\u8868\u3002\u6613\u4e8e\u589e\u5220\uff0c\u96be\u4e8e\u5b9a\u4f4d\u3002</p> </li> </ul> <ul> <li> <p>\u7d22\u5f15</p> <p>\u987a\u5e8f\u5b58\u50a8\u7684\u63a8\u5e7f\u3002\u6784\u9020\u7d22\u5f15\u51fd\u6570\\(Y:Z\\rightarrow D\\). \u4f7f\u5f97\u6574\u6570\u57df\u6620\u5c04\u5230\u5b58\u50a8\u5730\u5740\u3002</p> </li> </ul> <ul> <li> <p>\u6563\u5217</p> <p>\u7d22\u5f15\u65b9\u6cd5\u7684\u63a8\u5e7f\u3002\u6784\u9020\u6563\u5217\u51fd\u6570\\(h:S\\rightarrow Z\\).  \\(S\\) \u4e3a\u5173\u952e\u7801\u3002</p> </li> </ul> </li> </ul> <ul> <li> <p>ADT(Abstract Data Type)</p> <p>ADT = {\u6570\u636e\u5bf9\u8c61D\uff0c\u6570\u636e\u5173\u7cfbS\uff0c\u6570\u636e\u64cd\u4f5cP}</p> <p>eg. c++\u7c7b\u6a21\u677f\u3002</p> </li> </ul>"},{"location":"algorithm/basic/DA01_Intro/#algorithm","title":"Algorithm","text":"<p>Data Structure + Algorithm = Program</p> <ul> <li> <p>Classification</p> <ul> <li>Enumeration</li> <li>Searching(BFS, DFS), Back Tracking</li> <li>Greedy</li> <li>Recursive, Divide and Conquer</li> <li>Dynamic Programming</li> </ul> </li> </ul> <ul> <li> <p>Analysis</p> <p>Relationship between Algorithm Complexity and Input Scale.</p> <p>Absolute time is also required but not the most important.</p> <ul> <li>\\(O()\\) expression</li> </ul> </li> </ul> \\[ \\displaylines{     \\exist C,N_0 \\gt 0 \\ \\ s.t. \\ \\forall n \\ge N_0:\\\\     f(n) \\le C \\cdot g(n) \\\\     \\Rightarrow f(n) \\in O(g(n)) } \\] <pre><code>We should choose the **tightest** $g(n)$ .\n\neg. $f(x) = n^2 + 2n$ is $O(n^2)$, but we can also say it's $O(n^3)$ or larger.\n</code></pre> <p>* \\(\\Omega()\\) expression</p> \\[ \\displaylines{     \\exist C,N_0 \\gt 0 \\ \\ s.t. \\ \\forall n \\ge N_0:\\\\     f(n) \\ge C \\cdot g(n) \\\\     \\Rightarrow f(n) \\in \\Omega(g(n)) } \\] <pre><code>Choose the tightest.\n</code></pre> <p>* \\(\\Theta()\\) expression</p> \\[ \\displaylines{     f(n) \\in O(g(n)) \\ and \\ f(n) \\in \\Omega(g(n)) \\\\     \\Rightarrow f(n) \\in \\Theta(g(n)) } \\] <p>Best, Worst and Average Complexity analysis: For most Algorithms, the difference is only in the constants and coefficients.</p> <p>Trade-off between Time and Space.</p>"},{"location":"algorithm/basic/DA02_LinearTable/","title":"Linear Table","text":"OP Vector Linked List <code>getValue(p)</code> 1 n <code>getPos(v)</code> n n <code>insert(p, v)</code> n 1 <code>append(v)</code> 1 1 <code>delete(p)</code> n 1"},{"location":"algorithm/basic/DA02_LinearTable/#vector-sequential-list","title":"Vector (Sequential list)","text":"<p>Static storage space.</p>"},{"location":"algorithm/basic/DA02_LinearTable/#linked-list","title":"Linked List","text":"<p>Dynamic storage space.</p>"},{"location":"algorithm/basic/DA02_LinearTable/#single","title":"Single","text":"<ul> <li>Why Head Node ?<ul> <li>\u7edf\u4e00\u94fe\u8868\u4e2d\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u548c\u5176\u4ed6\u4f4d\u7f6e\u4e0a\u7684\u64cd\u4f5c\u3002</li> <li>\u7edf\u4e00\u7a7a\u8868\u548c\u975e\u7a7a\u8868\u7684\u64cd\u4f5c\u3002</li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA02_LinearTable/#double","title":"Double","text":"<p>More space for less time.</p>"},{"location":"algorithm/basic/DA02_LinearTable/#loop-singledouble","title":"Loop (single/double)","text":"<p>Link the head and tail.</p>"},{"location":"algorithm/basic/DA02_LinearTable/#exercise","title":"Exercise","text":"<ul> <li> <p>Floyd Cycle detection (&amp; Variations)</p> <pre><code>bool isLoop(node* head){\n    node* first,second = head;\n    while(first-&gt;next != NULL){\n        first = first-&gt;next;\n        if (first-&gt;next == NULL) return false;\n        first = first-&gt;next;\n        second = second-&gt;next;\n        if (first == second) return true;\n    }\n}\n\nint loopsize(node* head){\n    node* first,second = head;\n    int size = 0;\n    int cnt = 0;\n    while(first-&gt;next != NULL){\n        cnt++;\n        first = first-&gt;next;\n        if (first-&gt;next == NULL) return -1; // no loop\n        first = first-&gt;next;\n        second = second-&gt;next;\n        if (first == second){\n            if(size==0) size=cnt;\n            else return cnt-size;\n        }\n    }\n}\n\nnode* loopenter(node* head){\n    node* first,second = head;\n    while(first-&gt;next != NULL){\n        first = first-&gt;next;\n        if (first-&gt;next == NULL) return NULL;\n        first = first-&gt;next;\n        second = second-&gt;next;\n        if (first == second) break;  // meet point\n    }\n    second = head;\n    while(second!=first){  \n        second = second-&gt;next;\n        first = first-&gt;next;\n    } \n    return first;  // enter point\n}\n</code></pre> <ul> <li>\u73af\u957f\u8bc1\u660e\uff1a</li> </ul> <p>Outer path = \\(n\\) (contact point excluded), Inner path = \\(m\\). </p> <p>Meet at time \\(t\\) for the first time, \\(t'\\) for the second time:</p> <p>\u7b2c\u4e8c\u6b21\u76f8\u9047\u4e00\u5b9a\u662ff\u6bd4s\u591a\u8d70\u4e86\u4e00\u5708.</p> <p>\uff08m\u5947\u6570\u65f6\u5747\u8d70m\u6b65\uff0cf\u7b2c\u4e00\u5708\u4e0d\u7ecf\u8fc7\u76f8\u9047\u70b9\uff0cm\u5076\u6570\u65f6f\u8d70\u4e24\u5708\uff0c\u6bcf\u5708m/2\uff09</p> </li> </ul> \\[ \\displaylines{   2t - t = km \\\\   2t'-t' = (k+1)m \\\\   \\therefore t'-t = m } \\] <p>* \u5165\u53e3\u70b9\u8bc1\u660e\uff1a</p> <p>\u8bbes\u5165\u73af\u540e\u53c8\u8d70\u4e86x\u6b65\uff0c\u5219\uff1a</p> \\[ \\displaylines{   t = n + x \\\\   t = km \\\\   \\therefore km = n +x \\\\   (k-1)m + (m-x) = n \\\\ } \\] <p>\u5373\uff0c\u5916\u90e8\u8def\u5f84\u957f\u5ea6\u4e3a\u5f53\u524d\u4f4d\u7f6e\u8d70\u5230\u5165\u53e3\u70b9\u7684\u8ddd\u79bb\u52a0\u4e0ak\u4e2a\u73af\u3002</p> <ul> <li> <p>Variants:</p> <p>\u5224\u65ad\u4e24\u4e2a\u65e0\u73af\u5355\u5411\u94fe\u8868\u662f\u5426\u76f8\u4ea4\uff0c\u5982\u679c\u76f8\u4ea4\uff0c\u6c42\u51fa\u4ea4\u70b9\u3002</p> <ul> <li>\u4eba\u4e3a\u6784\u73af\uff08A\u2019s tail-&gt;B\u2019s head\uff09\uff0c\u4e4b\u540e\u7528Floyd\u5224\u65ad\u5165\u73af\u70b9\u3002</li> <li>\uff08\u66f4\u7b80\u5355\u76f4\u767d\uff09\u5148\u5206\u522b\u904d\u5386\u4e24\u4e2a\u94fe\u8868\uff0c\u5982\u679c\u7ec8\u70b9\u76f8\u540c\uff0c\u5219\u4ed6\u4eec\u76f8\u4ea4\u3002\u8bb0\u5f55\u4ed6\u4eec\u7684\u957f\u5ea6\uff0c\u518d\u6b21\u904d\u5386\uff0c\u5148\u8ba9\u957f\u94fe\u8868\u6307\u9488\u79fb\u52a8\u957f\u5ea6\u7684\u5dee\u503c\u6b21\uff0c\u518d\u540c\u6b65\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u76f8\u7b49\u5904\u5373\u4ea4\u70b9\u3002</li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA02_LinearTable/#others","title":"Others","text":"<ul> <li> <p>dancing links algorithm (Knuth)</p> <p>http://www.cnblogs.com/grenet/p/3145800.html</p> </li> </ul>"},{"location":"algorithm/basic/DA03_StackAndQueue/","title":"Stack and Queue","text":""},{"location":"algorithm/basic/DA03_StackAndQueue/#stack-lifo","title":"Stack (LIFO)","text":"<ul> <li> <p>Catalan Number</p> <p>\\(\\frac{1}{n+1}C_{2n}^n\\)</p> <ul> <li>\u63a8\u5bfc\uff1a</li> </ul> <p>\u5047\u8bbe\u8fdb\u6808\u548c\u51fa\u6808\u5206\u522b\u75281\u548c0\u4ee3\u8868\uff0c\u5219n\u4e2a\u706b\u8f66\u7684\u51fa\u5165\u7ad9\u7ec4\u5408\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a2n\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u6709n\u4e2a0\u548cn\u4e2a1\uff08\u5305\u542b\u4e0d\u5408\u6cd5\u7684\u5e8f\u5217\uff09\u3002\u8fd9\u6837\u7684\u5e8f\u5217\u4e00\u5171\u6709\\(C_{2n}^n\\)\u79cd\u3002</p> <p>\u8003\u8651\u5176\u4e2d\u4e0d\u5408\u6cd5\u7684\u5e8f\u5217\uff0c\u4e00\u5b9a\u6ee1\u8db3\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u5230\u67d0\u4e00\u4f4d\uff08\u5047\u8bbe\u4e3a\u7b2c2m+1\u4f4d\uff09\u65f6\u51fa\u73b0\u4e86m\u4e2a1\u548cm+1\u4e2a0\uff08\u51fa\u6808\u6b21\u6570\u591a\u4e8e\u5165\u6808\u6b21\u6570\uff09\u3002\u6b64\u65f6\u8fd9\u4e2a\u5e8f\u5217\u57282m+2\u4f4d\u4ee5\u540e\u8fd8\u6709n-m\u4e2a1\uff0cn-m-1\u4e2a0\u3002\u628a\u6b64\u540e\u76841\u4e0e0\u4e92\u6362\uff0c\u5219\u4efb\u610f\u4e0d\u5408\u6cd5\u7684\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u5bf9\u5e94\u5230\u53e6\u4e00\u4e2a2n\u5e8f\u5217\uff0c\u4e14\u5bf9\u5e94\u7684\u5e8f\u5217\u6ee1\u8db3\u6709n+1\u4e2a0\uff0cn-1\u4e2a1\u3002\u5373\u8fd9\u6837\u7684\u5e8f\u5217\u4e00\u5171\u6709\\(C_{2n}^{n-1}\\)\u4e2a\u3002</p> <p>\u6240\u4ee5\u5408\u6cd5\u7684\u5e8f\u5217\u4e00\u5171\u6709\\(C_{2n}^n - C_{2n}^{n-1} = \\frac{C_{2n}^n}{n+1}\\)\u4e2a\u3002</p> <ul> <li>\u6027\u8d28\uff1a</li> </ul> </li> </ul> \\[ \\displaylines{ C_0 = 1 \\ \\  and \\ \\ C_{n+1} = \\sum_{i=0}^nC_iC_{n-i}  \\\\   or\\ \\  C_{n+1} = \\frac{2(2n+1)}{n+2} C_n } \\] <ul> <li> <p>Storage</p> <ul> <li>Sequential (more often used)</li> <li>Linked List</li> </ul> </li> </ul> <ul> <li> <p>Recursion</p> <ul> <li>Concept: a function calls itself explicitly or implicitly.</li> </ul> <ul> <li> <p>Implement</p> <ul> <li>Recursive Formula</li> <li>End Condition</li> </ul> </li> </ul> <ul> <li> <p>\u51fd\u6570\u8fd0\u884c\u7684\u5b58\u50a8\u5206\u914d</p> <ul> <li>\u9759\u6001\uff1a\u975e\u9012\u5f52\uff0c\u8c03\u7528\u4e0e\u8fd4\u56de\u5904\u7406\u6bd4\u8f83\u7b80\u5355\u3002</li> </ul> <ul> <li> <p>\u52a8\u6001\uff1a\u9012\u5f52\uff0c\u5728\u5185\u5b58\u4e2d\u5f00\u8f9f\u8db3\u591f\u5927\u7684\u52a8\u6001\u533a\uff08\u8fd0\u884c\u6808\uff09\u3002</p> <p>\u52a8\u6001\u5b58\u50a8\u533a\u5305\u62ec\u5806\uff08\u975eLIFO\u6570\u636e\uff0c\u5982\u6307\u9488\u5206\u914d\uff09\u4e0e\u6808\uff08LIFO\u6570\u636e\uff0c\u5982\u51fd\u6570\u8c03\u7528\uff09\u3002</p> </li> </ul> </li> </ul> <ul> <li> <p>\u9012\u5f52\u7a0b\u5e8f\u7684\u975e\u9012\u5f52\u5316</p> <p>\u4e00\u822c\u4f7f\u7528<code>for loop</code>\u4ee3\u66ff\u3002</p> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA03_StackAndQueue/#expression-evaluation","title":"Expression Evaluation","text":"<ul> <li> <p>Type</p> <p>infix, prefix, postfix</p> </li> </ul> <ul> <li>Recursive CFG definition </li> </ul> <ul> <li> <p>Postfix expression evaluation</p> <p>No parenthesis in postfix expression.</p> <p>Easy for computer to evaluate. (a single stack is enough.)</p> </li> </ul> <ul> <li> <p>Evaluate Infix </p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\nint N;\nstring e;\n\nint prior(char c) {\n  if (c == '+' || c=='-') return 1;\n  else if (c == '*' || c=='/') return 2;\n  else if (c == '(') return 0;\n}\n\nvoid popcalc(stack&lt;char&gt;&amp; ops, stack&lt;int&gt;&amp; nums) {\n  char op = ops.top(); ops.pop();\n  int b = nums.top(); nums.pop();\n  int a = nums.top(); nums.pop();\n  int res = 0;\n  if (op == '+') res = a + b;\n  else if (op == '-') res = a - b;\n  else if (op == '*') res = a * b;\n  else if (op == '/') res = a / b;\n  nums.push(res);\n}\n\nint eval(string e) {\n  stack&lt;char&gt; ops;\n  stack&lt;int&gt; nums;\n  for (int i = 0; i &lt; e.size(); i++) {\n      if (isdigit(e[i])) {\n          int num = 0;\n          int j = i;\n          for (j; j &lt; e.size(); j++) {\n              if (isdigit(e[j])) num = num * 10 + e[j] - '0';\n              else break;\n          }\n          i = j - 1;\n          nums.push(num);\n      }\n      else if (e[i] == '(') ops.push(e[i]);\n      else if (e[i] == ')') {\n          while (ops.top() != '(') popcalc(ops, nums);\n          ops.pop();\n      }\n      else {\n          while (!ops.empty() &amp;&amp; prior(ops.top()) &gt;= prior(e[i])) popcalc(ops, nums);\n          ops.push(e[i]);\n      }\n  }\n  while (!ops.empty()) popcalc(ops, nums);\n  return nums.top();\n}\n\nint main() {\n  cin &gt;&gt; N;\n  for (int i = 0; i &lt; N; i++) {\n      cin &gt;&gt; e;\n      cout &lt;&lt; eval(e) &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/basic/DA03_StackAndQueue/#queue-fifo","title":"Queue (FIFO)","text":"<ul> <li> <p>Implement</p> <ul> <li> <p>sequential list</p> <p>front: real pointer.</p> <p>rear: imaginary pointer.</p> </li> </ul> <ul> <li> <p>linked list</p> <p>both pointer point to real number.</p> </li> </ul> </li> </ul> <ul> <li> <p>Sequential List \uff1aOverflow</p> <p>\u591a\u7533\u8bf7\u4e00\u4e2a\u7a7a\u95f4\uff0c\u5e76\u4f7frear\u6307\u9488\u6307\u5411\u865a\u7684\u961f\u5c3e\uff1a\u7528\u6765\u533a\u5206\u961f\u7a7a\u4e0e\u961f\u6ee1\u3002</p> <ul> <li>\u5047\u6ea2\u51fa\uff1a<code>rear == mSize-1</code>\u4f46\u961f\u9996\u8fd8\u6709\u5f88\u591a\u7a7a\u4f59\u4f4d\u7f6e\u3002\u9700\u8981\u4f7f\u7528\u5faa\u73af\u961f\u5217\u89e3\u51b3\u3002</li> </ul> <ul> <li> <p>\u5faa\u73af\u961f\u5217\uff1a</p> <pre><code>struct myqueue{\n    int mSize, front, rear;\n    T *que;\n    myqueue(int size)  {\n        mSize = size + 1;\n        que = new T[mSize];\n        front = rear = 0;\n    }\n    bool push(const T item){\n        if((rear+1)%mSize==front){\n            return false;  // full\n        }\n        que[rear] = item;\n        rear = (rear+1)%mSize;\n        return true;\n    }\n    bool pop(){\n        if(front==rear){\n            return false; // empty\n        }\n        front = (front + 1)%mSize;\n        return true;\n    }\n};\n</code></pre> </li> </ul> </li> </ul> <ul> <li>Linked List\uff1a<ul> <li>\u4e0d\u5b58\u5728\u6ea2\u51fa\uff08\u961f\u6ee1\uff09\u95ee\u9898\u3002</li> <li><code>rear == front</code>\u4ee3\u8868\u961f\u7a7a\u3002</li> </ul> </li> <li>Application<ul> <li>BFS</li> <li>buffer</li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA03_StackAndQueue/#simulation","title":"Simulation","text":"<ul> <li>2 stacks --&gt; queue</li> </ul> <ul> <li>2 queue --&gt; stack</li> </ul> <ul> <li> <p>Better Solution</p> <pre><code>//questack\nSPUSH(x):\n  PUSH(Q1, x)\n\nSPOP(x):\n  if empty(Q1):\n      while not empty(Q2):\n          POP(Q2, y)\n          PUSH(Q1, y) \n  while not empty(Q1):\n      POP(Q1, y)\n      if empty(Q1):\n          x = y\n      else:\n          PUSH(Q2, y)\n\nSempty():\n  return empty(Q1)&amp;&amp;empty(Q2)\n\n\n// stkqueue\n// O(.) is the same, but empty() called less. And more concise.\nQPUSH(x):\n  PUSH(S1, x)\n\nQPOP(x):\n  if not empty(S2):\n      POP(S2, x)\n  else:\n      while not empty(S1):\n          POP(S1, y)\n          PUSH(S2, y)\n      POP(S2, x)\n\nQempty():\n  return empty(S1) &amp;&amp; empty(S2)\n</code></pre> </li> </ul>"},{"location":"algorithm/basic/DA04_String/","title":"String","text":""},{"location":"algorithm/basic/DA04_String/#char","title":"char","text":"<ul> <li> <p>\u504f\u5e8f\u7f16\u7801\u89c4\u5219\uff1a</p> <p>\u6839\u636e\u5b57\u7b26\u7684\u81ea\u7136\u5b9a\u4e49\uff0c\u67d0\u4e9b\u5b57\u7b26\u95f4\u4e24\u4e24\u53ef\u4ee5\u6bd4\u8f83\u6b21\u5e8f\u3002\uff08\u4e00\u822c\u4e3a\u5b57\u5178\u5e8f\uff09</p> </li> </ul>"},{"location":"algorithm/basic/DA04_String/#string_1","title":"string","text":"<ul> <li> <p>\u5b58\u50a8</p> <ul> <li>\u9759\u6001\uff1a\u987a\u5e8f\uff0cc\u6807\u51c6\u5b57\u7b26\u4e32\u3002</li> <li>\u52a8\u6001\uff1aString\u7c7b\u3002</li> </ul> </li> </ul> <ul> <li> <p>\u65b9\u6cd5</p> <ul> <li> <p>\u6807\u51c6\u5b57\u7b26\u4e32</p> <pre><code>char* s[L] // capacity is L-1. ('\\0' is reserved for the last place.)\nint strlen(char* s)\nchar* strstr(char* str1, char* str2) // find str2 in str1, if not found, return NULL\nchar* strcpy(char* to, char* from)  // return `to`\nchar* strcat(char* to, char* from)\nint strcmp(char* a, char* b)  // 0 for ==\nchar* strchr(char* s, char c)  // find c in s (left to right), return &amp;s[i] or '\\0'\nchar* strrchr(char* s, char c)  // right to left\n</code></pre> </li> </ul> <ul> <li> <p>class string</p> <pre><code>string s; // empty string\ns2 = s.substr(start, count); // shrink count automatically\ns3 = s + s2;\nint l = s.length();\nstring s = string(1, 'a'); // single char to string. to_string() is wrong.\nstring s = to_string(123); // s=\"123\"\ns[0] = 'r' // mutable\nint a = stoi(s); // stof, stoll, stod, ...\ns.find(s2) // int index to s2, or -1 if not found\n</code></pre> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA04_String/#pattern-matching","title":"Pattern Matching","text":"<ul> <li> <p>Classification</p> <ul> <li> <p>Exact Matching</p> <p>Single Matching, Ambiguous (Wild-Card), Regular Expression.</p> </li> </ul> <ul> <li> <p>Approximate Matching</p> <p>Edit Distance: Insertion, Deletion, Replacement.</p> <p>(Genomic Alignment)</p> </li> </ul> </li> </ul> <ul> <li> <p>Algorithms</p> <p>Assuming Target length is \\(n\\), Pattern length is \\(m\\).</p> <ul> <li> <p>Brute Force</p> <p>Time: \\(O(nm)\\)</p> <pre><code>int BF(string t, string p){\n    int i,j;\n    for(i=0; i&lt;t.length()-p.length(); i++){\n        for(j=0, j&lt;p.length()&amp;&amp;t[i+j]==p[j]; j++) ;\n        if(j==p.length()) return i;\n    }\n    return -1;\n}\n</code></pre> </li> </ul> <ul> <li> <p>KMP</p> <p>**Time: \\(O(m+n)\\). **</p> <p>No back-tracing match.</p> <p>Why <code>k = next[k]</code>:</p> <p></p> <pre><code>/*******************************\n* What is next[i] ?\n*    length of Longest Commen Prefix &amp; Postfix of [0,i-1]\n*    \u53ef\u4ee5\u91cd\u53e0\uff0c\u4f46\u4e0d\u80fd\u5b8c\u5168\u91cd\u53e0\u3002\n*    eg.\u975e\u4f18\u5316\u7684aaaaa \uff1a-1 0 1 2 3\n* How to get next[i] RECURSIVEly ?\n*    p[i] == p[k] --&gt; next[i+1] = next[i] + 1;\n*    else --&gt; let k = next[k], check again.\n*******************************/\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint* getNext(string p) {\n    int l = p.length();\n    int* next = new int[l];\n    next[0] = -1;\n    int i = 0, k = -1;\n    while (i &lt; l - 1) {\n        while (k &gt;= 0 &amp;&amp; p[k] != p[i]) k = next[k];\n        i++, k++;\n        if (p[k] == p[i]) next[i] = next[k]; // Enhancement.\n        else next[i] = k;\n    }\n    return next;\n}\n\nint KMP(string t, string p){\n    int tlen = t.length();\n    int plen = p.length();\n    if (tlen &lt; plen) return -1;\n    int* next = getNext(p);\n    int i = 0, j = 0;\n    while (i &lt; tlen &amp;&amp; j &lt; plen){\n        if (j == -1 || t[i] == p[j]) i++, j++;\n        else j = next[j];  //\u91cd\u65b0\u5bf9\u9f50\u540e\uff0c\u4ecd\u8981\u6bd4\u8f83\u4e00\u6b21i\u4f4d\u7f6e\n    }\n    if (j == plen) return i-j;\n    else return -1;\n}\n</code></pre> <p>KMP\u7684\u603b\u6bd4\u5bf9\u6b21\u6570\uff1a\u6bcd\u4e32\u957f\u5ea6+\u5931\u914d\u6b21\u6570</p> <p>Examples of KMP:</p> index 0 1 2 3 4 5 string a b a c a b next -1 0 0 1 0 1/0 <p>\u5982\u4f55\u76ee\u6d4b\u6539\u8fdb\u7248Next\u6570\u7ec4\uff1a</p> <p>\u5148\u76ee\u6d4b\u539f\u59cbNext\u6570\u7ec4\uff0c\u4e4b\u540e\u9010\u4f4d\u6bd4\u8f83<code>p[i]==p[next[i]] ? next2[i]=next2[next[i]] : next2[i]=next[i]</code>.</p> <p>\u6ce8\u610f\u662fnext2[next[i]]\u3002</p> <p>eg.</p> index 0 1 2 3 4 5 string a a b a a c next -1 0 1 0 1 2 next2 -1 -1 1 -1 -1 (not 0!) 2 <p>eg.</p> index 0 1 2 3 4 5 6 7 8 9 string a b c d a a b c a b next -1 0 0 0 0 1 1 2 3 1 next2 -1 0 0 0 -1 1 0 0 3 0 </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA04_String/#boyer-moore","title":"Boyer-Moore \u7b97\u6cd5","text":"<p>\u5b9e\u9645\u4e0aCtrl+F\uff0cGNU grep\u4f7f\u7528\u7684\u7b97\u6cd5\uff0c\u9884\u5904\u7406O(m)\uff0c\u5e73\u5747\u67e5\u627eO(n/m)\uff0c\u6700\u574fO(n)\uff0cNB\uff01</p> <p>\u574f\u5b57\u7b26\u539f\u5219+\u597d\u540e\u7f00\u539f\u5219\u3002\u6bcf\u6b21\u5931\u914d\u65f6\uff0c\u6839\u636e\u8fd9\u4e24\u4e2a\u89c4\u5219\u4e2d\u540e\u79fb\u4f4d\u6570\u5927\u7684\u79fb\u52a8\u3002</p> <p>\u7406\u89e3\u6bd4\u8f83\u5bb9\u6613\uff0c\u4f46\u611f\u89c9\u5728\u5b9e\u73b0\u4e0a\u6709\u4e00\u4e9btrick\uff0c\u6240\u4ee5\u4e0d\u592a\u9002\u5408\u6559\u5b66\u3002\u3002\uff1f</p> <p>http://blog.jobbole.com/52830/</p> <p>http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html</p>"},{"location":"algorithm/basic/DA05_BinaryTree/","title":"Binary Tree","text":"<ul> <li> <p>Every Node has 5 forms: </p> <p>NULL, only root, root + left child, root + right child, root + both children.</p> <p>N nodes can make how many different BTs?</p> <p>Catalan Number\uff1a\\(\\frac{1}{n+1}C_{2n}^n\\)</p> <p>How many edges does a BT with N nodes have? </p> <p>\\(N-1\\)</p> <p>Yet another deduction of Catalan Number:</p> </li> </ul> \\[ \\displaylines{   f(0) = 1 \\\\    f(1) = 1 \\\\   f(2) = f(1)f(0) + f(0)f(1) = 2 \\\\   f(3) = f(2)f(0) + f(1)f(1) + f(0)f(2) = 5 \\\\   ... \\\\   f(n) = f(n-1)f(0) + f(n-2)f(1) + ... + f(1)f(n-2) + f(n-1)f(0) \\\\   the\\ solution\\ is \\ f(n) = \\frac{C_{2n}^n}{n+1} } \\] <pre><code>template &lt;class T&gt;\nstruct node{\n    node* left, right;\n    T data;    \n    node(){}\n    node(const T&amp; d) {data = d;}\n};\n\ntemplate &lt;class T&gt;\nstruct BinaryTree{\n      node* root;\n    BinaryTree() {root=NULL;}\n    void addLeft(node* r, const T&amp; d);\n    void addRight(node* r, const T&amp; d);\n};\n</code></pre> <ul> <li> <p>Some Special forms</p> <ul> <li> <p>\u6ee1\u4e8c\u53c9\u6811\uff08Full BT\uff09</p> <p>Every node's degree is either 0 or 2.</p> <p>(\u5b9a\u4e49\u5e76\u4e0d\u7edf\u4e00\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5982\u6b64\u5b9a\u4e49\u3002)</p> </li> </ul> <ul> <li> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\uff08Complete BT\uff09</p> <ul> <li> <p>Definition:</p> <p>Only the nodes in the last two layers can have degrees less than 2.</p> <p>The last layer's nodes are aligned continuously from left to right.</p> </li> </ul> <ul> <li> <p>Features</p> <p>Leaves only exist in the last two layers.</p> <p>\u5185\u90e8\u8def\u5f84\u957f\u5ea6\u548c\u5728\u5177\u6709\u76f8\u540c\u8282\u70b9\u6570\u7684\u4e8c\u53c9\u6811\u4e2d\u6700\u77ed\u3002\uff08\u6839\u8282\u70b9\u5230\u5404\u8282\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u603b\u548c\uff09</p> <p>\u53ef\u4ee5\u8fde\u7eed\u7684\u5b58\u50a8\u5728\u987a\u5e8f\u8868\u4e2d\u3002</p> </li> </ul> </li> </ul> <ul> <li>\u6269\u5145\u4e8c\u53c9\u6811<p>* \u5b9a\u4e49\uff1a\u628a\u7a7a\u6307\u9488\u5168\u90e8\u66ff\u6362\u4e3a\u7a7a\u6811\u53f6\uff08\u5916\u90e8\u8282\u70b9\uff09\u3002</p> <p>* \u6027\u8d28\uff1a</p> <pre><code>\u6269\u5145\u4e8c\u53c9\u6811\u662f\u6ee1\u4e8c\u53c9\u6811\u3002\n\n\u5916\u90e8\u8282\u70b9\u4e2a\u6570\u4e3a\u5185\u90e8\u8282\u70b9\u6570\u52a0\u4e00\u3002\uff08$N_0 = N_2 + 1$\uff09\n\n**\u5916\u90e8\u8def\u5f84\u957f\u5ea6E\uff0c\u5185\u90e8\u8def\u5f84\u957f\u5ea6I\uff0c\u5185\u90e8\u8282\u70b9\u4e2a\u6570n\uff0c\u5219$E= I + 2n$**\n\n\u5f52\u7eb3\u6cd5\u8bc1\u660e\uff1a\n</code></pre> </li> </ul> </li> </ul> \\[ \\displaylines{         E_n = I_n + 2n \\\\         assume\\ add \\ a\\ node\\ of\\ length= k \\\\         I_{n+1} = I_n + k \\\\         E_{n+1} = E_n -k+2(k+1) = E_n+k+2 \\\\         E_{n+1} = I_{n+1}+2(n+1) } \\] <ul> <li> <p>\u4e8c\u53c9\u6811\u7684\u6027\u8d28</p> <ul> <li>\uff08\u6ee1\u4e8c\u53c9\u6811\u5b9a\u7406\uff09\uff1a\u975e\u7a7a\u6ee1\u4e8c\u53c9\u6811\\(N_0 = N_2 + 1\\)</li> </ul> <ul> <li> <p>\uff08\u6ee1\u4e8c\u53c9\u6811\u5b9a\u7406\u63a8\u8bba\uff09\uff1a\u975e\u7a7a\u4e8c\u53c9\u6811\u7a7a\u6307\u9488\u6570\\(P = N + 1\\)\uff0cN\u4e3a\u603b\u7ed3\u70b9\u6570\u3002</p> <p>\\(N(N&gt;0)\\)\u4e2a\u8282\u70b9\u7684\\(K\\)\u53c9\u6811\u7684\u7a7a\u6307\u9488\u6570\uff1a</p> </li> </ul> </li> </ul> \\[ \\displaylines{     P=NK - (N-1) = N(K-1)+1 } \\] <p>* \u5b9e\u9645\u4e0a\uff0c\u4efb\u610f\u4e8c\u53c9\u6811\\(N_0 = N_2 + 1\\)</p> \\[ \\displaylines{     N = N_0 + N_1 + N_2  = E +1\\\\     E = N_1 + 2N_2 \\\\     \\Rightarrow N_0 = N_2 + 1 } \\] <p>* \u7b2c\\(i\\)\u5c42\uff08\u6839\u8282\u70b9\u89c4\u5b9a\u4e3a\u7b2c0\u5c42\uff09\u6700\u591a\u6709\\(2^i\\)\u4e2a\u8282\u70b9\u3002</p> <p>* \u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u5373\u5c42\u6570\uff0c\u6df1\u5ea6\u5373\u6700\u957f\u8def\u5f84\u957f\u5ea6\u3002</p> <pre><code>\uff08\u4ec5\u6839\u8282\u70b9\u7684\u6811\u9ad8\u5ea6\u4e3a1\uff0c\u6df1\u5ea6\u4e3a0\u3002\uff09\n\n\u9ad8\u5ea6\u4e3a$K$\u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709$2^K - 1$\u4e2a\u8282\u70b9\u3002($\\sum_{i=0}^{K-1}2^i$)\n</code></pre> <p>* N\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u9ad8\u5ea6\u4e3a\\(ceil(log_2(N+1))\\)</p> <pre><code>$2^{k-1}-1  \\lt N \\le 2^k-1$\n\n\u7b2c$n$\u5c42\u7684\u9996\u5143\u7d20\u4e3a$2^n-1$ (\u4ece\u96f6\u5f00\u59cb\u7f16\u53f7)\n</code></pre> <p>* N\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u4ece\u4e0a\u5230\u4e0b\u4ece\u5de6\u5230\u53f3\u4ece\u96f6\u5f00\u59cb\u7f16\u53f7\uff08\u6570\u7ec4\u5b58\u50a8\uff09\uff1a</p> <pre><code>* \u6839\u8282\u70b9$i=0$\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9$i=n-1$\n* $i$\u7684\u7236\u8282\u70b9$floor((i-1)/2)$\n* $i$\u7684\u5de6\u5b50\u8282\u70b9\u4e3a$2i+1$\uff0c\u53f3\u5b50\u8282\u70b9$2i+2$ \uff08\u5927\u4e8e$n-1$\u5219\u4e0d\u5b58\u5728\uff09\n* $i$\u4e3a\u5076\u6570\u65f6\u5de6\u5144\u5f1f\u4e3a$i-1$\uff0c$i$\u4e3a\u5947\u6570\u65f6\u53f3\u5144\u5f1f\u4e3a$i+1$ \uff08\u4e0d\u5728\u8303\u56f4\u5185\u5219\u4e0d\u5b58\u5728\uff09\n</code></pre> <ul> <li> <p>\u4e8c\u53c9\u6811\u7684\u5468\u6e38\uff08Traversal\uff09</p> <ul> <li> <p>DFS (Recursion)</p> <ul> <li>Prefix: Root --&gt; Left --&gt; Right</li> <li>Infix: Left --&gt; Root --&gt; Right</li> <li>Postfix: Left --&gt; Right --&gt; Root</li> </ul> <p>\u91cd\u6784\u7b97\u6cd5\u6027\u8d28\uff1a\u5148\u5e8f\u6216\u540e\u5e8f+\u4e2d\u5e8f\u53ef\u4ee5\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5148\u5e8f\u548c\u540e\u5e8f\u65e0\u6cd5\u786e\u5b9a\u3002</p> </li> </ul> <ul> <li> <p>\u975e\u9012\u5f52DFS</p> <p>\u624b\u52a8\u7528\u5faa\u73af\u89e3\u51b3\u9012\u5f52\u3002</p> <pre><code>// prefix\nvoid prefix(node* root){\n    stack&lt;node&lt;T&gt;*&gt; stk;\n    node* p = root;\n    stk.push(NULL); // end condition for while.\n    while(p){\n        visit(p);\n        if(p-&gt;right!=NULL) stk.push(p-&gt;right);\n        if(p-&gt;left!=NULL) p = p-&gt;left;\n        else p = stk.top(), stk.pop();\n    }\n}\n\n// infix\nvoid infix(node* root){\n    stack&lt;node&lt;T&gt;*&gt; stk;\n    node* p = root;\n    while(!stk.empty() || p){\n        if(p){\n            stk.push(p);\n            p = p-&gt;left;\n        }\n        else{\n            p = stk.top(), stk.pop();\n            visit(p);\n            p = p-&gt;right;\n        }\n    }\n}\n\n// postfix\n// slightly complicated, for we need to additional tags.\nenum Tags{left, right};\ntemplate &lt;class T&gt;\nstruct stackElement{\n    node&lt;T&gt;* p;\n    Tags tag;\n};\nvoid postfix(node* root){\n    stack&lt;stackElement&lt;T&gt;*&gt; stk;\n    stackElement&lt;T&gt; ele;\n    node* p = root;\n    while(!stk.empty() || p){\n        if(p!=NULL){\n            ele.p = p;\n            ele.tag = left;\n            stk.push(ele);\n            p = p-&gt;left;\n        }\n        else{\n            ele = stk.top(), stk.pop();\n            if(ele.tag == left){\n                ele.tag = right;\n                stk.push(ele);\n                p = p-&gt;right;\n            }\n            else{\n                visit(p);\n                p = NULL; // continue popping\n            }\n        }\n    }\n}\n</code></pre> </li> </ul> <ul> <li>BFS</li> </ul> <pre><code>//My implementation of a toy tree.\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;stack&gt;\n#include &lt;queue&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nstruct node {\n  node *l, *r;\n  char data;\n};\n\nstring res;\n\nvoid visit(node* n) { res += n-&gt;data; }\n\nvoid prefix(node* root) {\n  if (root != NULL) {\n      visit(root);\n      prefix(root-&gt;l);\n      prefix(root-&gt;r);\n  }\n}\n\nvoid prefix2(node* root) {\n  stack&lt;node*&gt; stk;\n  node* n = root;\n  while (n) {\n      visit(n);\n      if(n-&gt;r != NULL) stk.push(n-&gt;r);\n      if(n-&gt;l != NULL) stk.push(n-&gt;l);\n      if (stk.empty()) return;\n      n = stk.top(); stk.pop();\n  }\n}\n\nvoid infix(node* root) {\n  if (root != NULL) {\n      infix(root-&gt;l);\n      visit(root);\n      infix(root-&gt;r);\n  }\n}\n\n\nvoid infix2(node* root) {\n  stack&lt;node*&gt; stk;\n  set&lt;node*&gt; vis;\n  node* n = root;\n  while (n) {\n      if (n-&gt;l != NULL &amp;&amp; !vis.count(n-&gt;l)) {\n          if (n-&gt;r != NULL) stk.push(n-&gt;r);\n          stk.push(n);\n          n = n-&gt;l;\n      }\n      else {\n          if (n-&gt;r != NULL &amp;&amp; !vis.count(n-&gt;l)) stk.push(n-&gt;r); // null left sub tree\n          visit(n);\n          vis.insert(n);\n          if (stk.empty()) return;\n          n = stk.top(); stk.pop();\n      }\n  }\n}\n\nvoid postfix(node* root) {\n  if (root != NULL) {\n      postfix(root-&gt;l);\n      postfix(root-&gt;r);\n      visit(root);\n  }\n}\n\nvoid postfix2(node* root) {\n  stack&lt;node*&gt; stk;\n  set&lt;node*&gt; vis;\n  node* n = root;\n  while (n) {\n        // left first\n      if (n-&gt;l != NULL &amp;&amp; !vis.count(n-&gt;l)) {\n          stk.push(n);\n          if (n-&gt;r != NULL) stk.push(n-&gt;r);\n          n = n-&gt;l;\n      }\n        // right second\n      else if (n-&gt;r != NULL &amp;&amp; !vis.count(n-&gt;r)) {\n          stk.push(n);\n          n = n-&gt;r;\n      }\n        // finally root\n      else {\n          visit(n);\n          vis.insert(n);\n          if (stk.empty()) return;\n          n = stk.top(); stk.pop();\n      }\n  }\n}\n\n// NB! Universal DFS algorithm.\nenum tag{Left, Right};\nstruct element {\n  node* n;\n  tag t;\n};\nvoid dfs(node* root, int order) {\n  stack&lt;element&gt; stk;\n  element ele;\n  node* n = root;\n  while (!stk.empty() || n) {\n      while (n != NULL) {\n          if (order == 0) visit(n);  //prefix\n          ele.n = n;\n          ele.t = Left;\n          stk.push(ele);\n          n = n-&gt;l;\n      }\n      ele = stk.top(); stk.pop();\n      n = ele.n;\n      if (ele.t == Left) {\n          if (order == 1) visit(n);  //infix\n          ele.t = Right;\n          stk.push(ele);\n          n = n-&gt;r;\n      }\n      else {\n          if (order == 2) visit(n);  //postfix\n          n = NULL;\n      }\n  }\n}\n\nvoid bfs(node* root) {\n  queue&lt;node*&gt; que;\n  que.push(root);\n  while (!que.empty()) {\n      node* cur = que.front(); que.pop();\n      visit(cur);\n      if (cur-&gt;l != NULL) que.push(cur-&gt;l);\n      if (cur-&gt;r != NULL) que.push(cur-&gt;r);\n  }\n}\n\nvoid preRebuild(node*&amp; root, string infix, string prefix) {\n  int len = infix.length();\n  if (len == 0) return;  // null left sub tree\n  char r = prefix[0];\n  int pos = infix.find(r);\n  if (root == NULL) root = new node();\n  root-&gt;data = r;\n  if (len == 1) return; // leaves\n  preRebuild(root-&gt;l, infix.substr(0, pos), prefix.substr(1, pos));\n  preRebuild(root-&gt;r, infix.substr(pos + 1, len - pos - 1), prefix.substr(pos + 1, len - pos - 1));\n}\n\nvoid postRebuild(node*&amp; root, string infix, string postfix) {\n  int len = infix.length();\n  if (len == 0) return;  // null left sub tree\n  char r = postfix.back();\n  int pos = infix.find(r);\n  if (root == NULL) root = new node();\n  root-&gt;data = r;\n  if (len == 1) return; // leaves\n  postRebuild(root-&gt;l, infix.substr(0, pos), postfix.substr(0, pos));\n  postRebuild(root-&gt;r, infix.substr(pos + 1, len - pos - 1), postfix.substr(pos, len - pos - 1));\n}\n\nvoid del(node* root) {\n  if (root != NULL) {\n      del(root-&gt;l);\n      del(root-&gt;r);\n      delete root;\n  }\n}\n\nint main() {\n  node* rt = NULL;\n  preRebuild(rt, \"DGFHBAICME\", \"ABDFGHCIEM\");\n  res = \"\";\n  postfix(rt);\n  cout &lt;&lt; res &lt;&lt; endl;\n  res = \"\";\n  postfix2(rt);\n  cout &lt;&lt; res &lt;&lt; endl;\n  res = \"\";\n  bfs(rt);\n  cout &lt;&lt; res &lt;&lt; endl;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Storage</p> <ul> <li>Dynamic Bifurcated Linked List</li> <li>Static Sequential List ( (nearly) Complete Binary Tree)</li> </ul> </li> </ul> <ul> <li> <p>Binary Search Tree (BST)  \u4e8c\u53c9\u6392\u5e8f/\u641c\u7d22\u6811</p> <p>\u6bcf\u4e2a\u8282\u70b9K\u7684\u5de6\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u5c0f\u4e8eK\uff0c\u53f3\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u5927\u4e8eK\u3002</p> <p>\u6027\u8d28\uff1a\u8282\u70b9\u7684\u503c\u552f\u4e00\uff1b\u4e2d\u5e8f\u904d\u5386\u6709\u5e8f\u3002</p> <p>\u6700\u4f73\u63d2\u5165/\u5220\u9664/\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\\(O(logn)\\)</p> <pre><code>struct node {\n  node* L, R;\n    int data;\n};\n\n// node* root = build(NULL, data[0])\nnode* build(node* root, int d){\n    root = new node();\n    root-&gt;data = d;\n    return root;\n}\n\nvoid insert(node* root, int d){\n    if(root-&gt;data == d) return;\n    else if (root-&gt;data &lt; d){\n        if(root-&gt;R == NULL){\n            root-&gt;R = build(root-&gt;R, d);\n            return;\n        }\n        else insert(root-&gt;R, d);\n    }\n    else{\n        if(root-&gt;L == NULL){\n            root-&gt;L = build(root-&gt;L, d);\n            return;\n        }\n        else insert(root-&gt;L, d);\n    }\n}\n\nnode* parent(node* root, node* p){\n    if(root == p) return NULL;\n    else if(root-&gt;L == p || root-&gt;R == p) return root;\n    else if(root-&gt;L != NULL) return parent(root-&gt;L, p);\n    else if(root-&gt;R != NULL) return parent(root-&gt;R, p);\n    else return NULL;\n}\n\n// non-recursive\nvoid del(node* root, node* p){\n    node* fp = parent(root, p);\n    // left sub tree is empty: naive\n    if(p-&gt;L == NULL){\n        if(fp-&gt;L == p) fp-&gt;L = p-&gt;R;\n        else fp-&gt;R = p-&gt;R;\n    }\n    // find left subtree's largest value, replace p with it and delete p.\n    // or find right subtree's smallest value, replace p and delete.\n    else{\n        node* lmax = p-&gt;L;\n        node* lpar = p;\n        while(lmax-&gt;R != NULL) {\n            lpar = lmax;\n            lmax = lmax-&gt;R;\n        }\n        lpar-&gt;R = NULL;\n        lmax-&gt;L = p-&gt;L;\n        lmax-&gt;R = p-&gt;R;\n        if(fp-&gt;L == p) fp-&gt;L = lmax;\n        else fp-&gt;R = lmax;\n    }\n    delete p;\n}\n</code></pre> <p>\u5b9a\u7406\uff1a\u968f\u673a\u6784\u9020\\(n\\)\u4e2a\u4e0d\u540c\u8282\u70b9\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5e73\u5747\u6df1\u5ea6\u4e3a\\(O(log\\ n)\\)\uff0c\u671f\u671b\u5185\u90e8\u8def\u5f84\u603b\u548c\u4e3a\\(O(nlog\\ n)\\)</p> </li> </ul> \\[ \\displaylines{   D(N)\\ is \\ inner \\ path \\ summation.\\\\   D(N) = D(i) + D(N-1-i) + N-1 \\\\   D(N) = 2*\\frac 1 N\\sum_{i=0}^{N-1}D(i) + N-1 \\\\   ND(N)-(N-1)D(N-1) = 2D(N-1) + 2(N-1) \\\\   \\frac {D(N)} {N+1} = \\frac {D(N-1)}{N} + \\frac{2(N-1)}{N(N+1)} \\\\   f(n) = f(n-1)+O(1/n) \\\\   f(n) \\in \\sum_{i=1}^nO(1/n) = O(log\\ n) } \\] <p>\\(f(n)\\)\u76f8\u5f53\u4e8e\u5e73\u5747\u9ad8\u5ea6\uff0c\u4ece\u800c\u671f\u671b\u5185\u90e8\u8def\u5f84\u603b\u957f\\(D(N)=O(NlogN)\\)</p> <p>Harmonic Series\uff1a</p> \\[ \\displaylines{   \\sum_{i=1}^{N}\\frac 1 i \\in O(logN) \\\\   this \\ follows \\ continuous \\ condition: \\\\   \\int \\frac 1 xdx = lnx } \\] <p>Another version of proof:</p> <p></p> <ul> <li> <p>Heap \u5806</p> <p>\u6700\u5927\u503c\u5806\uff1a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u503cK\u5927\u4e8e\u5176\u5de6\u53f3\u8282\u70b9\u7684\u503c\u3002\uff08\u5c40\u90e8\u6709\u5e8f\uff0c\u4e0d\u540c\u4e8eBST\u7684\u5168\u5c40\u6709\u5e8f\u3002\uff09</p> <p>\u6700\u5c0f\u503c\u5806\uff1a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u503cK\u5c0f\u4e8e\u5176\u5de6\u53f3\u8282\u70b9\u7684\u503c\u3002</p> <p>\u5bf9\u540c\u4e00\u7ec4\u6570\u636e\uff0c\u53ef\u4ee5\u6784\u5efa\u8bb8\u591a\u4e0d\u540c\u7684\u5806\u3002</p> <p>\u4e00\u822c\u5b58\u50a8\u4e3a\u9759\u6001\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6570\u7ec4\u3002</p> <pre><code>const int maxN = 1000;\nint N;\nint arr[maxN];\n\n// sink i until it is smaller than its children\nvoid siftdown(int i){\n    int tmp = arr[i];\n    int j = 2*i+1;\n    while(j&lt;N){\n        if( j&lt;N-1 &amp;&amp; arr[j]&gt;arr[j+1]) j++;\n        if(tmp&gt;arr[j]){\n            arr[i] = arr[j];\n            i = j;\n            j = 2*j+1;\n        }\n        else break;\n    }\n    arr[i] = tmp;\n}\n\n\n// lift i until its parent is smaller than it (or to top).\nvoid siftup(int i){\n    int tmp = arr[i];\n    while(i&gt;0 &amp;&amp; arr[(i-1)/2]&gt;tmp){\n        arr[i] = arr[(i-1)/2];\n        i = (i-1)/2;\n    }\n    arr[i] = tmp;\n}\n\n\n// change arr into a min heap, O(n)\nvoid build(int root){\n    // N/2-1 is the last father.\n    for(int i = N/2 - 1; i&gt;=0; i--){\n        siftdown(i);\n    }\n}\n\n// O(logn)\nbool insert(int d){\n    if(N == maxN) return false;\n    arr[N] = d;  // add new data to the bottom\n    siftup(N);\n    N++;\n    return true;\n}\n\n// O(logn)\nint pop(){\n    if(N==0) return -1;\n    swap(arr[0], arr[--N]); // swap to bottum (out of heap)\n    if(N&gt;1) siftdown(0);\n    return arr[N]; \n}\n\n// remove position i ans assign deleted val to node, O(logn)\nbool remove(int i, int&amp; node){\n    if(i&lt;0 || i&gt;=N) return false;\n    int tmp = arr[i];\n    arr[i] = arr[--N];\n    siftup(i);\n    siftdown(i);\n    node = tmp;\n    return true;\n}\n</code></pre> <p>\u8bc1\u660esift\u5efa\u5806\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\\(O(n)\\)\uff1a</p> <p>\u7528\u5230\u4e86\u9519\u4f4d\u76f8\u51cf\u6cd5\u6c42\u6570\u5217\u548c\u3002</p> </li> </ul> \\[ \\displaylines{   \\sum_{i=0}^{logn}2^i(logn - i) = \\sum_{j=0}^{logn}n\\frac j {2^j} \\lt 2n } \\] <p>\u6709\u8da3\u7684\u9898\u76ee\uff1a</p> <p></p> <ul> <li> <p>Priority Queue</p> <p>\u5806\u662f\u4f18\u5148\u961f\u5217\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002</p> </li> </ul> <ul> <li> <p>Huffman Tree (\u6700\u4f18\u4e8c\u53c9\u6811)</p> <ul> <li> <p>\u5b9a\u4e49\uff1a\u5177\u6709\u6700\u5c0f\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u7684\u4e8c\u53c9\u6811\u3002\u4e00\u5b9a\u662f\u6ee1\u4e8c\u53c9\u6811\u3002</p> <p>Huffman\u7684\u5916\u90e8\u8def\u5f84\u957f\u5ea6\u4e00\u822c\u6307\u7684\u662f\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff0c\u4e0d\u8981\u5fd8\u4e86\u53f6\u5b50\u8282\u70b9\u7684\u6743\u91cd\u3002</p> <p>\u5e94\u7528\uff1a\u9891\u7387\u4e0d\u7b49\u7684\u5b57\u7b26\uff0c\u53ef\u4ee5\u7528\u51fa\u73b0\u9891\u7387\u6765\u7f16\u7801\uff0cHuffman\u63d0\u4f9b\u6700\u4f18\u7684\u4e0d\u7b49\u957f\u7f16\u7801\u65b9\u5f0f\u3002</p> </li> </ul> <ul> <li>\u524d\u7f00\u7f16\u7801\u65b9\u5f0f\uff1a\u6bcf\u68f5\u5b50\u6811\u5de6\u679d\u68070\uff0c\u53f3\u679d\u68071\uff0c\u4ece\u6839\u5230\u53f6\u8fde\u63a5\u5373\u8be5\u53f6\u5b50\u7684\u7f16\u7801\u3002\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\u90fd\u4e0d\u662f\u53e6\u4e00\u4e2a\u5b57\u7b26\u7f16\u7801\u7684\u524d\u7f00\uff08\u53cd\u7f16\u7801\u552f\u4e00\uff09\u3002</li> </ul> <ul> <li> <p>K\u53c9Huffman\u6811\uff1a</p> <p>\u76f4\u63a5\u4f7f\u75282\u53c9\u65b9\u6cd5\u53ef\u80fd\u5bfc\u81f4\u7b2c\u4e00\u5c42\u4e0d\u6ee1\uff0c\u6545\u5e94\u8be5\u6dfb\u52a0\u865a\u53f6\u5b50\u7ed3\u70b9\uff08\u6743\u91cd\u4e3a\u96f6\uff09\u3002</p> </li> </ul> <pre><code>#define  _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nconst int K = 2;\n\nstruct node {\n  node* children[K];\n  int w;\n  node(int w) :w(w) {\n      for (int i = 0; i &lt; K; i++) children[i] = NULL;\n  }\n  node(int w, node** _children) :w(w) {\n      for (int i = 0; i &lt; K; i++) children[i] = _children[i];\n  }\n  bool operator&lt;(const node&amp; b) const{\n      return w &lt; b.w;\n  }\n};\n\nvector&lt;node*&gt; tree;\nnode* build(vector&lt;int&gt;&amp; weights) {\n  tree.clear();\n  int N = weights.size();\n    // add virtual nodes !!!\n  for (int i = 0; i &lt; K - 1 - (N - 1) % (K - 1); i++) weights.push_back(0);\n  priority_queue&lt;node*&gt; q;\n  for (int w : weights) {\n\n      tree.push_back(new node(w));\n      q.push(tree.back());\n  }\n  while (true) {\n      node* vs[K];\n      int sum = 0;\n      for (int i = 0; i &lt; K; i++) {\n          vs[i] = q.top();\n          sum += vs[i]-&gt;w;\n          q.pop();\n      }\n      tree.push_back(new node(sum, vs));\n      if (q.empty()) return tree.back();\n      q.push(tree.back());\n  }\n}\n\nint res = 0;\n// weighted route length\nvoid WRL(node* root, int depth) {\n  bool nil = true;\n  for (int i = 0; i &lt; K; i++) {\n      if (root-&gt;children[i] != NULL) {\n          WRL(root-&gt;children[i], depth + 1);\n          nil = false;\n      }\n  }\n  if (nil) res += depth * root-&gt;w;\n}\n\n// copied code for K=2 only\nint _print_t(node *tree, int is_l, int offset, int depth, char s[20][255])\n{\n  char b[20];\n  int width = 5;\n\n  if (!tree) return 0;\n\n  sprintf(b, \"(%03d)\", tree-&gt;w);\n\n  int l = _print_t(tree-&gt;children[0], 1, offset, depth + 1, s);\n  int r = _print_t(tree-&gt;children[1], 0, offset + l + width, depth + 1, s);\n\n  for (int i = 0; i &lt; width; i++)\n      s[depth][offset + l + i] = b[i];\n\n  if (depth &amp;&amp; is_l) {\n\n      for (int i = 0; i &lt; width + r; i++)\n          s[depth - 1][offset + l + width / 2 + i] = '-';\n\n      s[depth - 1][offset + l + width / 2] = '.';\n\n  }\n  else if (depth &amp;&amp; !is_l) {\n\n      for (int i = 0; i &lt; l + width; i++)\n          s[depth - 1][offset - width / 2 + i] = '-';\n\n      s[depth - 1][offset + l + width / 2] = '.';\n  }\n  return l + width + r;\n}\n\nvoid print_t(node *tree)\n{\n  char s[20][255];\n  for (int i = 0; i &lt; 20; i++)\n      sprintf(s[i], \"%80s\", \" \");\n\n  _print_t(tree, 0, 0, 0, s);\n\n  for (int i = 0; i &lt; 20; i++)\n      printf(\"%s\\n\", s[i]);\n}\n\nint main() {\n  vector&lt;int&gt; weights{ 1,4,9,6,8,10,12 };\n  node* root = build(weights);\n  print_t(root);\n  res = 0;\n  WRL(root, 0);\n  cout &lt;&lt; res &lt;&lt; endl;\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/basic/DA06_Tree/","title":"Tree","text":""},{"location":"algorithm/basic/DA06_Tree/#definition","title":"Definition","text":"<ul> <li> <p>\u6709\u5e8f\u6811\uff1a</p> <p>\u5b50\u8282\u70b9\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u7f16\u53f7\u3002</p> <p>\u5ea6\u4e3a2\u7684\u6709\u5e8f\u6811\u5e76\u4e0d\u662f\u4e8c\u53c9\u6811\uff01</p> <p>\uff08\u7b2c\u4e00\u5b50\u8282\u70b9\u5220\u9664\u540e\u7b2c\u4e8c\u5b50\u8282\u70b9\u4f1a\u9876\u66ff\u4e3a\u7b2c\u4e00\u5b50\u8282\u70b9\uff0c\u4e8c\u53c9\u6811\u5219\u5fc5\u987b\u4e25\u683c\u533a\u5206\u5de6\u53f3\u5b50\u8282\u70b9\uff09</p> </li> </ul> <ul> <li> <p>\u68ee\u6797\uff1a</p> <p>\u96f6\u68f5\u6216\u591a\u68f5\u4e0d\u76f8\u4ea4\u7684\u6811\u7684\u96c6\u5408\uff08\u901a\u5e38\u6709\u5e8f\uff09\u3002</p> <p>\u6dfb\u52a0\u4e00\u4e2a\u6839\u8282\u70b9\u5219\u6210\u4e3a\u4e00\u68f5\u6811\u3002</p> <p>\u6811\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u7ec4\u6210\u4e00\u4e2a\u68ee\u6797\u3002</p> </li> </ul> <ul> <li> <p>\u68ee\u6797\uff08\u6216\u6811\uff09\u4e0e\u4e8c\u53c9\u6811\u4e00\u4e00\u5bf9\u5e94\u3002</p> <p>\u6811\u5bf9\u5e94\u7684\u4e8c\u53c9\u6811\u6839\u8282\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\u3002</p> </li> </ul>"},{"location":"algorithm/basic/DA06_Tree/#traversal","title":"Traversal","text":"<ul> <li>\u5148\u6839\uff1a\u5148\u6839\u5468\u6e38\u6811\u5bf9\u5e94\u4e8e\u524d\u5e8f\u5468\u6e38\u5bf9\u5e94\u4e8c\u53c9\u6811</li> <li>\u540e\u6839\uff1a\u5148\u6839\u5468\u6e38\u6811\u5bf9\u5e94\u4e8e\u4e2d\u5e8f\u5468\u6e38\u5bf9\u5e94\u4e8c\u53c9\u6811</li> </ul> <ul> <li>BFS</li> </ul>"},{"location":"algorithm/basic/DA06_Tree/#storage","title":"Storage","text":"<ul> <li> <p>\u94fe\u5f0f\u5b58\u50a8</p> <ul> <li>\u5b50\u8282\u70b9\u8868\u793a\u6cd5\uff1a\u96be\u4ee5\u627e\u5144\u5f1f\u3002</li> </ul> <ul> <li> <p>\u52a8\u6001\u6307\u9488\u6570\u7ec4\uff1a\u5b58\u50a8\u7a7a\u95f4\u662f\u52a8\u6001\u7684\u3002</p> <p>\u6700\u5bb9\u6613\u5199\u3002\u3002\u3002</p> </li> </ul> <ul> <li> <p>\u5de6\u5b69\u5b50\u53f3\u5144\u5f1f\u8868\u793a\u6cd5\uff08\u4e8c\u53c9\u94fe\u8868\uff09</p> <p>\u672c\u8d28\u4e0a\u5b58\u50a8\u4e86\u5bf9\u5e94\u7684\u4e8c\u53c9\u6811\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\nstruct node {\n    node *lc, *rs; // left child, right sibling\n    int d;\n};\n\nvoid build(node*&amp; rt, int d) {\n    rt = new node();\n    rt-&gt;d = d;\n}\n\nvoid insert(node* n, int d) {\n    if (n-&gt;lc == NULL) {\n        n-&gt;lc = new node();\n        n-&gt;lc-&gt;d = d;\n        return;\n    }\n    else {\n        node* tmp = n-&gt;lc;\n        while (tmp-&gt;rs != NULL) tmp = tmp-&gt;rs;\n        tmp-&gt;rs = new node();\n        tmp-&gt;rs-&gt;d = d;\n        return;\n    }\n}\n\nbool isleaf(node* t) {\n    return t-&gt;lc == NULL;\n}\n\nnode* parent(node* rt, node* t) {\n    queue&lt;node*&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        node* p = q.front(); q.pop();\n        node* c = p-&gt;lc;\n        while (c != NULL) {\n            if (c == t) return p;\n            q.push(c);\n            c = c-&gt;rs;\n        }\n    }\n    return NULL;\n}\n\nnode* leftsib(node* rt, node* t) {\n    node* p = parent(rt, t)-&gt;lc;\n    while (p-&gt;rs != NULL){\n        if (p-&gt;rs == t) return p;\n        p = p-&gt;rs;\n    }\n    return NULL;\n}\n\n// delete in binary tree mode\nvoid _delsub(node* n) {  \n    if (n != NULL) {\n        _delsub(n-&gt;lc);\n        _delsub(n-&gt;rs);\n        delete n;\n    }\n}\n\n// delete in tree mode\nvoid delsub(node* rt, node* n) {\n    node* ls = leftsib(rt, n);\n    if (ls == NULL) {  // first child of parent, need to modify parent links\n        node* p = parent(rt, n);\n        if (p != NULL) {\n            p-&gt;lc = n-&gt;rs;\n            n-&gt;rs = NULL;\n        }\n    }\n    else{  // just cut this subtree out\n        ls-&gt;rs = n-&gt;rs;\n        n-&gt;rs = NULL;\n    }\n    _delsub(n); // delete binary tree\n}\n\nvoid visit(node* n) {\n    cout &lt;&lt; \"visit \" &lt;&lt; n-&gt;d &lt;&lt; endl;\n}\n\nvoid prefix(node* rt) {\n    while (rt != NULL) {\n        visit(rt);\n        prefix(rt-&gt;lc);\n        rt = rt-&gt;rs;\n    }\n}\n\nvoid prefix2(node* rt) {\n    if (rt != NULL) {\n        visit(rt);\n        prefix(rt-&gt;lc);\n        prefix(rt-&gt;rs);\n    }\n}\n\nvoid postfix(node* rt) {\n    while (rt != NULL) {\n        postfix(rt-&gt;lc);\n        visit(rt);\n        rt = rt-&gt;rs;\n    }\n}\n\nvoid postfix2(node* rt) {\n    if (rt != NULL) {\n        postfix2(rt-&gt;lc);\n        visit(rt);\n        postfix2(rt-&gt;rs);\n    }\n}\n\nvoid bfs(node* rt) {\n    queue&lt;node*&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        node* p = q.front(); q.pop();\n        visit(p);\n        p = p-&gt;lc;\n        while (p != NULL) {\n            q.push(p);\n            p = p-&gt;rs;\n        }\n    }\n}\n\nnode* getchild(node* rt, int n) {\n    if (n == 0) return rt-&gt;lc;\n    node* tmp = rt-&gt;lc;\n    while (tmp != NULL &amp;&amp; n--) {\n        tmp = tmp-&gt;rs;\n    }\n    return tmp;\n}\n\nint main() {\n    node* root = NULL;\n    build(root, 0);\n    insert(root, 1);\n    insert(root, 2);\n    insert(root, 3);\n    node* tmp = root-&gt;lc;\n    insert(tmp, 4);\n    tmp = getchild(root, 2);\n    insert(tmp, 5);\n    insert(tmp, 6);\n    cout &lt;&lt; \"===prefix===\" &lt;&lt; endl;\n    prefix(root);\n    cout &lt;&lt; \"===prefix2===\" &lt;&lt; endl;\n    prefix2(root);\n    cout &lt;&lt; \"===postfix===\" &lt;&lt; endl;\n    postfix(root);\n    cout &lt;&lt; \"===postfix2===\" &lt;&lt; endl;\n    postfix2(root);\n    cout &lt;&lt; \"===bfs===\" &lt;&lt; endl;\n    bfs(root);\n    cout &lt;&lt; \"===delete===\" &lt;&lt; endl;\n    delsub(root, getchild(root, 1));\n    cout &lt;&lt; \"===bfs===\" &lt;&lt; endl;\n    bfs(root);\n}\n</code></pre> </li> </ul> <ul> <li> <p>\u7236\u6307\u9488\u8868\u793a\u6cd5\uff08\u5e76\u67e5\u96c6\uff09</p> <p>\u53ea\u5b58\u50a8\u7236\u6307\u9488\uff0c\u5e94\u7528\u4e8e\u53ea\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u8282\u70b9\u4e0e\u7236\u8282\u70b9\u7684\u5173\u7cfb\u7684\u60c5\u51b5\u3002\u7236\u6307\u9488\u8868\u793a\u6cd5\u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u4e00\u68f5\u65e0\u5e8f\u6811\u3002</p> <p>\u6807\u51c6\u91cd\u91cf\u6743\u8861\u5408\u5e76\uff1a\u4f7f\u5f97\u5408\u5e76\u64cd\u4f5c\u5c3d\u91cf\u5e73\u8861\uff0c\u4fdd\u6301\\(O(logn)\\)\u590d\u6742\u5ea6\u3002</p> <p>\u200b   \u6700\u7b80\u5355\u7684\u5b9e\u73b0\u662f\u6bcf\u6b21\u628a\u77ee\u6811\u5408\u5e76\u5230\u9ad8\u6811\u3002</p> <p>\u8def\u5f84\u538b\u7f29\uff1a\u6bcf\u6b21\u5408\u5e76\u90fd\u8c03\u6574\u7236\u8282\u70b9\u5230\u6839\u8282\u70b9\uff0c\u4f7f\u5f97\u4e0b\u4e00\u6b21\u68c0\u7d22\u4ec5\u9700\u4e00\u6b65\u3002</p> <p>\u200b   \u6ce8\u610f\u6240\u6709\u67e5\u8be2\u7236\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u7ecf\u8fc7\u70b9\u90fd\u8981\u88ab\u538b\u7f29\u3002</p> </li> </ul> </li> </ul> <ul> <li> <p>\u987a\u5e8f\u5b58\u50a8</p> <p>\u4e3b\u8981\u5173\u6ce8\u5982\u4f55\u4ece\u7ebf\u6027\u5e8f\u5217\u8fd8\u539f\u6811\u7684\u94fe\u5f0f\u7ed3\u6784\u3002</p> <p>\uff08\u4e0d\u8003\u8651\u5982\u4f55\u4fee\u6539\u7ebf\u6027\u7ed3\u6784\u3001\u5982\u4f55\u5c06\u94fe\u5f0f\u5b58\u50a8\u8f6c\u6362\u4e3a\u987a\u5e8f\u5b58\u50a8\uff09</p> <ul> <li> <p>\u5e26\u53f3\u94fe\u7684\u5148\u6839\u8868\u793a\u6cd5</p> <p><code>rlink, info, ltag</code> naive.</p> </li> </ul> <ul> <li> <p>\u53cc\u6807\u8bb0\u7684\u5148\u6839\u8868\u793a\u6cd5</p> <p><code>rtag, info, ltag</code>\u6808\u7279\u6027\u3002</p> <p>\u4e00\u822c0\u4ee3\u8868\u6709\uff0c1\u4ee3\u8868\u6ca1\u6709\u3002</p> <pre><code>int N;\nint info[maxn];\nbool ltag[maxn];\nbool rtag[maxn];\n\nvoid tag2load() {\n    /*\n    \u672c\u8d28\u5148\u6839\u641c\u7d22\uff0crtag==0\u7684\u8282\u70b9\u4e0eltag==1\u7684\u8282\u70b9\u4e00\u4e00\u5bf9\u5e94\uff08\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u8282\u70b9ltag==1\uff09\u3002\n    r==0 &amp;&amp; l==1 -&gt; rs is the next node.\n    */\n    stack&lt;node*&gt; stk;\n    node* p = new node();\n    stk.push(p);\n    for (int i = 0; i &lt; N - 1; i++) {\n        p-&gt;d = info[i];\n        if (rtag[i] == 0) stk.push(p);\n        else p-&gt;rs = NULL;\n        node* np = new node();\n        if (ltag[i] == 0) p-&gt;lc = np;\n        else {\n            p-&gt;lc = NULL;\n            p = stk.top(); stk.pop();\n            p-&gt;rs = np;\n        }\n        p = np;\n    }\n    p-&gt;d = info[N - 1];\n    p-&gt;lc = p-&gt;rs = NULL;\n}\n</code></pre> </li> </ul> <ul> <li> <p>\u5e26\u5ea6\u6570\u7684\u540e\u6839\u8868\u793a\u6cd5</p> <p><code>info, degree</code></p> <p>\u5176\u4ed6\u6b21\u5e8f\u4e0e\u5ea6\u6570\u7ed3\u5408\u65e0\u6cd5\u91cd\u5efa\u6811\uff01</p> <p>\u9002\u5408\u4e8e\u52a8\u6001\u6307\u9488\u6570\u7ec4\u7684\u5b58\u50a8\u65b9\u6cd5\uff0c\u76f4\u89c2\u5feb\u6377\u3002</p> </li> </ul> <ul> <li> <p>\u53cc\u6807\u8bb0\u7684\u5c42\u6b21\u8868\u793a\u6cd5</p> <p><code>ltag, info, rtag</code>\u961f\u5217\u7279\u6027\u3002</p> <pre><code>void bfsload() {\n    queue&lt;node*&gt; stk;\n    node* p = new node();\n    stk.push(p);\n    for (int i = 0; i &lt; N - 1; i++) {\n        p-&gt;d = info[i];\n        if (ltag[i] == 0) stk.push(p);\n        else p-&gt;lc = NULL;\n        node* np = new node();\n        if (rtag[i] == 0) p-&gt;rs = np;\n        else {\n            p-&gt;rs = NULL;\n            p = stk.front(); stk.pop();\n            p-&gt;rs = np;\n        }\n        p = np;\n    }\n    p-&gt;d = info[N - 1];\n    p-&gt;lc = p-&gt;rs = NULL;\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA06_Tree/#k-ary-tree","title":"K-ary Tree","text":"<p>\u5b50\u8282\u70b9\u6709\u5e8f\uff0c\u7c7b\u4f3c\u4e8c\u53c9\u6811\u3002</p>"},{"location":"algorithm/basic/DA07_Graph/","title":"Graph","text":""},{"location":"algorithm/basic/DA07_Graph/#definition","title":"Definition","text":"\\[ \\displaylines{ G = (V, E) } \\] <p>We only considers simple graphs that have No self-Connection, No parallel edge.</p> <ul> <li>Complete graph: contains all possible edges, \\(E = \\frac {V(V-1)}{2}\\)</li> </ul> <ul> <li>neighbors: vertices connected by an edge.</li> <li>degree: in and out. leaf's degree is 0.</li> <li>subgraph: \\(V' \\in V, E' \\in E\\), and all vertices connected by \\(E'\\) are in \\(V'\\).</li> <li>path: \\(V_p \\rightarrow ... \\rightarrow V_q\\)</li> </ul> <ul> <li>simple path: \u9664\u4e86\u8d77\u70b9\u7ec8\u70b9\uff0c\u5176\u4ed6\u9876\u70b9\u65e0\u91cd\u590d\u3002</li> <li>Simple cycle\uff1a\u8d77\u70b9\u7ec8\u70b9\u76f8\u540c\u7684\u7b80\u5355\u8def\u5f84\u3002</li> </ul> <ul> <li>DAG\uff1aDirected Acyclic Graph. \u6709\u5411\u65e0\u73af\u56fe\u3002</li> <li>\u6709\u6839\u56fe\uff1a\u6709\u5411\u56fe\u4e2d\uff0c\u4ece\u9876\u70b9V\u53ef\u4ee5\u62b5\u8fbe\u5176\u4ed6\u6240\u6709\u9876\u70b9\uff0c\u5219\u79f0\u4e4b\u4e3a\u6839\u3002</li> <li>\u8fde\u901a\u56fe\uff1a\u65e0\u5411\u56fe\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u8fde\u901a\uff0c\u5219\u79f0\u4e3a\u8fde\u901a\u56fe\u3002</li> <li>\u5f3a\u8fde\u901a\u56fe\uff1a\u6709\u5411\u56fe\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u5f3a\u8054\u901a\uff0c\u5219\u6210\u4e3a\u5f3a\u8fde\u901a\u56fe\u3002</li> <li>\u8fde\u901a\u5206\u91cf\uff1a\u65e0\u5411\u56fe\u7684\u6700\u5927\u8fde\u901a\u5b50\u56fe\u3002</li> <li>\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6709\u5411\u56fe\u7684\u6700\u5927\u8fde\u901a\u5b50\u56fe\u3002</li> <li>\u7f51\u7edc\uff1a\u5e26\u6743\u8fde\u901a\u56fe\u3002</li> <li>\u81ea\u7531\u6811\uff1a\u65e0\u56de\u8def\u7684\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u4e14\\(E=V-1\\).</li> </ul>"},{"location":"algorithm/basic/DA07_Graph/#storage","title":"Storage","text":"<ul> <li> <p>\u90bb\u63a5\u77e9\u9635 Adjacency Matrix</p> <p>\u7a7a\u95f4\u4ee3\u4ef7\\(O(|V|^2)\\). \uff08\u53ef\u4ee5\u7a00\u758f\u77e9\u9635\u4f18\u5316\uff09</p> <ul> <li>\u65e0\u5411\u56fe\uff1a\u5bf9\u79f0\u3002</li> <li>\u6709\u5411\u56fe\uff1a\u4e0d\u4e00\u5b9a\u5bf9\u79f0\u3002</li> </ul> </li> </ul> <ul> <li> <p>\u90bb\u63a5\u8868</p> <p>\u6700\u5e38\u4f7f\u7528\u7684\u7ed3\u6784\uff0c\u7a7a\u95f4\u4ee3\u4ef7\u5c0f\uff0c\u4f46\u5931\u53bb\u4e86\u90bb\u63a5\u77e9\u9635\u7684\u6027\u8d28\u3002</p> <ul> <li>\u65e0\u5411\u56fe\u7a7a\u95f4\u4ee3\u4ef7\\(O(|V|+2|E|)\\).</li> </ul> <ul> <li>\u6709\u5411\u56fe\u7a7a\u95f4\u4ee3\u4ef7\\(O(|V|+|E|)\\)\uff0c\u53ea\u8bb0\u5f55\u5165\u8fb9\u8868\u6216\u51fa\u8fb9\u8868\u3002</li> </ul> </li> </ul> <ul> <li> <p>\u5341\u5b57\u94fe\u8868</p> <ul> <li>\u9876\u70b9\u8868\uff0c\u8fb9\u94fe\u8868</li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA07_Graph/#traversal","title":"Traversal","text":"<ul> <li> <p>\u95ee\u9898\uff1a\u975e\u8fde\u901a\uff0c\u56de\u8def\u3002</p> <p>\u4f7f\u7528VIS\u6807\u8bb0\u6765\u907f\u514d\u56de\u8def\u3002</p> </li> </ul> <ul> <li> <p>DFS</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u5b58\u50a8\u7ed3\u6784\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u540c\u6570\u91cf\u7ea7\u3002</p> </li> </ul> <ul> <li> <p>BFS</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u5b58\u50a8\u7ed3\u6784\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u540c\u6570\u91cf\u7ea7\u3002</p> </li> </ul> <ul> <li> <p>\u62d3\u6251\u6392\u5e8f</p> <p>A Linear order that can finish the task as well as satisfying all pre request. </p> <p>Usually Not Unique.</p> <p>Can only be performed on a DAG. \uff08\u6709\u62d3\u6251\u6392\u5e8f\u7b49\u4ef7\u4e8e\u662fDAG\uff09</p> </li> </ul>"},{"location":"algorithm/basic/DA07_Graph/#shortest-path","title":"Shortest Path","text":"<ul> <li> <p>Dijkstra</p> <p>Single source, Directed or Undirected, Non-negative edge weight, Greedy.</p> <p>\\(O((V+E)logE)\\) or \\(O(V^2 + E)\\)</p> </li> </ul> <ul> <li> <p>Floyd</p> <p>All pairs, Dynamic programming.</p> <p>\\(O(V^3)\\)</p> </li> </ul>"},{"location":"algorithm/basic/DA07_Graph/#minimum-cost-spanning-tree-mst","title":"Minimum cost Spanning Tree (MST)","text":"<p>MST may be not unique, but the min cost is the same.</p> <ul> <li> <p>Prim</p> <p>\\(O((V+E)logV)\\).</p> <p>The structure is very similar to Dijkstra, but here we find the shortest edge to current tree, instead of the shortest point to source point.</p> <p>Need to assign the Root.</p> </li> </ul> <ul> <li> <p>Kruskal</p> <p>\\(O(ElogE)\\)</p> <p>Use disjoint set to merge points from shortest edge.</p> </li> </ul>"},{"location":"algorithm/basic/DA07_Graph/#toy-graph","title":"Toy Graph","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;set&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nconst int maxv = 100;\nconst int maxw = 0x3f3f3f3f; // if use floyd, 2*maxw must not overflow.\nint V;\n\nstruct node {\n    int ind, outd;\n    int data;\n    node() {\n        ind = 0;\n        outd = 0;\n        data = 0;\n    }\n} nodes[maxv];\n\nstruct edge {\n    int f, t, w;\n    edge() {}\n    edge(int f, int t, int w) :f(f), t(t), w(w) {}\n    bool operator &lt; (const edge&amp; b) const { return w &gt; b.w; }\n};\n\nvector&lt;edge&gt; G[maxv];\nint vis[maxv];\n\nvoid insert_edge(int a, int b, int w) {\n    G[a].push_back(edge(a, b, w));\n    //G[b].push_back(edge(b, a, w));\n    nodes[a].outd++;\n    nodes[b].ind++;\n}\n\nvoid visit(int n) {\n    cout &lt;&lt; \"visit:\" &lt;&lt; n &lt;&lt; endl;\n}\n\n// clear vis first\nvoid dfs(int rt) {\n    if (vis[rt]) return;\n    vis[rt] = 1;\n    int len = G[rt].size();\n    for (int i = 0; i &lt; len; i++) {\n        dfs(G[rt][i].t);\n    }\n    visit(rt);\n}\n\nvoid bfs(int rt) {\n    memset(vis, 0, sizeof(vis));\n    queue&lt;int&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        int p = q.front(); q.pop();\n        if (vis[p]) return;\n        vis[p] = 1;\n        visit(p);\n        int len = G[p].size();\n        for (int i = 0; i &lt; len; i++) {\n            q.push(G[p][i].t);\n        }\n    }\n}\n\n// output one of the toposorts.\n// \u6709\u5411\u56fe\u5224\u65ad\u6709\u65e0\u73af\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\nvoid toposort_bfs() {\n    memset(vis, 0, sizeof(vis));\n    queue&lt;int&gt; q;\n    for (int i = 0; i &lt; V; i++)\n        if (nodes[i].ind == 0)\n            q.push(i);\n    while (!q.empty()) {\n        int v = q.front(); q.pop();\n        visit(v);\n        vis[v] = 1;\n        int len = G[v].size();\n        for (int i = 0; i &lt; len; i++) {\n            nodes[G[v][i].t].ind--;\n            if (nodes[G[v][i].t].ind == 0) q.push(G[v][i].t);\n        }\n        // vertices in and after loops are not visited.\n        for (int i = 0; i &lt; maxv; i++) {\n            if (!vis[i]) {\n                cout &lt;&lt; \"Loop Detected\" &lt;&lt; endl;\n                break;\n            }\n        }\n    }\n}\n\n// can't detect loop! \nvector&lt;int&gt; res; // reverse-ordered\nvoid _toposort_dfs(int n) {\n    vis[n] = 1;\n    for (int i = 0; i &lt; G[n].size(); i++) {\n        int m = G[n][i].t;\n        if (!vis[m])\n            _toposort_dfs(m);\n    }\n    res.push_back(n);\n}\n\nvoid toposort_dfs() {\n    memset(vis, 0, sizeof(vis));\n    for (int i = 0; i &lt; V; i++)\n        if (!vis[i])\n            _toposort_dfs(i);\n    for (int i = res.size() - 1; i &gt;= 0; i--)\n        visit(res[i]);\n}\n\n\nint dist[maxv], parent[maxv];\n\nbool cmp(int a, int b) {\n    return dist[a] &gt; dist[b];  // min heap should use greater&lt;&gt;\n}\n\n// O((V+E)logE)\uff0c\u5355\u6e90\u6700\u77ed\u8def\uff0c\u6c42\u8d77\u70b9s\u5230\u4efb\u610f\u5176\u4ed6\u70b9t\u7684\u6700\u77ed\u8ddd\u79bbdist[t]\n/*\n\u5b9e\u73b0\u65b9\u5f0f\uff1a\u6700\u5c0f\u5806+\u4e0d\u5220\u9664\u65e7\u503c\u3002\n\u5176\u4ed6\u65b9\u5f0f\uff1a\n    \u626b\u63cfdist\u6765\u5bfb\u627e\u4e0b\u4e00\u4e2a\u6700\u5c0f\u5143\u7d20\u3002 O(V^2 + E)\n    \u6700\u5c0f\u5806+\u5220\u9664\u65e7\u5143\u7d20\uff1a\u4e0d\u65b9\u4fbf\u7528std\u4f18\u5148\u961f\u5217\u5b9e\u73b0\u3002O(VlogV)\uff1f\n\u4e0d\u8fde\u63a5\u7684\u70b9\u8ddd\u79bb\u4e3amaxw\u3002\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u56fe\u7684\u8fde\u63a5\u3002\n*/\nvoid dijkstra(int s) {\n    for (int i = 0; i &lt; V; i++) {\n        vis[i] = 0;\n        parent[i] = -1;\n        dist[i] = maxw;\n    }\n    dist[s] = 0;\n    priority_queue&lt;int, vector&lt;int&gt;, bool(*)(int,int)&gt; que(cmp);  // note the use of function cmp\n    que.push(s);\n    while (!que.empty()) {\n        int u = que.top(); que.pop();\n        if (vis[u]) continue; // prevent old element rescanning, necessary.\n        vis[u] = 1;\n        for (int i = 0; i &lt; G[u].size(); i++) {\n            int v = G[u][i].t;\n            if (vis[v]) continue;  // this can be deleted. Simple pruning.\n            if (dist[v] &gt; dist[u] + G[u][i].w) {\n                dist[v] = dist[u] + G[u][i].w;\n                parent[v] = u;\n                que.push(v);\n            }\n        }\n    }\n}\n\n// Simplified Version !!!\nint d[maxn];\n#define P pair&lt;int,int&gt;\n\nvoid dijkstra(int s) {\n    memset(d, 0x3f, sizeof(d));\n    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt;&gt; q; // use pair&lt;int,int&gt; \n    q.push(P(0, s));\n    d[s] = 0;\n    while (!q.empty()) {\n        P p = q.top(); q.pop();\n        int u = p.second;\n        if (d[u] &lt; p.first) continue; // outdated records\n        for (int i = 0; i &lt; G[u].size(); i++) {\n            edge&amp; e = G[u][i];\n            int v = e.t;\n            if (d[v] &gt; d[u] + e.w) {\n                d[v] = d[u] + e.w;\n                q.push(P(d[v], v));\n            }\n        }\n    }\n}\n\n// a STL version\nvector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; G(n+1);\nfor (auto&amp; p: times) {\n    G[p[0]].push_back({p[1], p[2]}); // p = {f, t, w}\n}\nvector&lt;int&gt; d(n+1, 0x7fffffff);\npriority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; q; // top i smallest\nq.push({0, k});\nd[k] = 0;\nwhile (!q.empty()) {\n    auto p = q.top(); q.pop();\n    int u = p.second;\n    //cout &lt;&lt; \"dij \" &lt;&lt; u &lt;&lt; \" \" &lt;&lt; d[u] &lt;&lt; endl;\n    if (d[u] &lt; p.first) continue;\n    for (auto&amp; [v, w]: G[u]) {\n        if (d[v] &gt; d[u] + w) {\n            d[v] = d[u] + w;\n            q.push({d[v], v});\n        }\n    }\n}\n\n// floyd\nint dist2[maxv][maxv], parent2[maxv][maxv];\nvoid floyd() {\n    memset(dist2, maxw, sizeof(dist2));\n    memset(parent2, -1, sizeof(parent2));\n    // init the graph's edge\n    for (int u = 0; u &lt; V; u++) {\n        dist2[u][u] = 0;\n        for (int i = 0; i &lt; G[u].size(); i++) {\n            int v = G[u][i].t;\n            dist2[u][v] = G[u][i].w;\n            parent2[u][v] = u;\n        }\n    }\n    // O(n^3), the order is i-&gt;u-&gt;j\n    for (int u = 0; u &lt; V; u++) {\n        for (int i = 0; i &lt; V; i++) {\n            for (int j = 0; j &lt; V; j++) {\n                if (dist2[i][j] != maxw &amp;&amp; dist2[i][j] &gt; dist2[i][u] + dist2[u][j]) {\n                    dist2[i][j] = dist2[i][u] + dist2[u][j];\n                    parent2[i][j] = parent2[u][j];\n                }\n            }\n        }\n    }\n}\n\nvector&lt;edge&gt; MST;\n// only for connected graph, so check vis later for whether it's connected.\n// O((V+E)logE), dense graph.\nvoid prim(int s) {\n    MST.clear();\n    memset(vis, 0, sizeof(vis));\n    vis[s] = 1;\n    priority_queue&lt;edge&gt; que;  \n    for(int i=0; i&lt;G[s].size(); i++) que.push(G[s][i]);\n    while (!que.empty()) {\n        edge e = que.top(); que.pop();\n        if (vis[e.t]) continue; // prevent out of date element\n        vis[e.t] = 1;\n        MST.push_back(e);\n        for(int i=0; i&lt;G[e.t].size(); i++){\n            edge ee = G[e.t][i];\n            if(!vis[ee.t]) que.push(ee);\n        }\n    }\n}\n\n// disjoint set for kruskal\nint par[maxn];\nvoid init(int n) {\n    for (int i = 0; i &lt;= n; i++) par[i] = i;\n}\nint getpar(int x) {\n    if (par[x] == x) return x;\n    return par[x] = getpar(par[x]);\n}\nvoid merge(int x, int y) {\n    par[getpar(x)] = getpar(y);\n}\nbool query(int a, int b){\n    return getpar(a) == getpar(b);\n}\n\n\n// kruskal MST, O(ElogE), sparse graph.\nvoid kruskal(){\n    MST.clear();\n    priority_queue&lt;edge&gt; que;\n    // push all edges\n    for(int i=0; i&lt;V; i++)\n        for(int j=0; j&lt;G[i].size(); j++)\n            que.push(G[i][j]);\n    int n = V;\n    init(n);\n    // merge from shortest edge until only one class left.\n    while(n&gt;1){\n        edge e = que.top(); que.pop();\n        if(!query(e.f, e.t)){\n            merge(e.f, e.t);\n            MST.push_back(e);\n            n--;\n        }\n    }\n}\n\n\nint main() {\n    V = 4;\n    insert_edge(0, 2, 1);\n    insert_edge(0, 1, 3);\n    insert_edge(0, 3, 1);\n    insert_edge(1, 3, 6);\n    insert_edge(2, 3, 2);\n    kruskal();\n    for(int i=0; i&lt;V-1; i++){\n        cout&lt;&lt;MST[i].f&lt;&lt;\" \"&lt;&lt;MST[i].t&lt;&lt;\" \"&lt;&lt;MST[i].w&lt;&lt;endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/basic/DA07_Graph/#examples","title":"Examples","text":"<ul> <li> <p>\u30a6\u30b5\u30ae\u3068\u685c</p> <p>\u5f17\u6d1b\u4f0a\u5fb7+\u8def\u5f84\u627e\u56de\u3002</p> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\nconst int maxv = 30;\nint V, E;\n\nstruct edge {\n    int f, t, w;\n    edge() {}\n    edge(int f, int t, int w) :f(f), t(t), w(w) {}\n    bool operator &lt; (const edge&amp; b)const {\n        return w &gt; b.w;\n    }\n};\n\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[maxv];\n\nvoid insert_edge(int f, int t, int w) {\n    edges.push_back(edge(f,t,w));\n    int s = edges.size() - 1;\n    G[f].push_back(s);\n}\n\nint dist[maxv][maxv];\nint parent[maxv][maxv];\n\nvoid floyd() {\n    memset(dist, 0x3f, sizeof(dist));\n    memset(parent, -1, sizeof(parent));\n    for (int i = 1; i &lt;= V; i++) {\n        dist[i][i] = 0; // self-connection\n        for (int j = 0; j &lt; G[i].size(); j++) {\n            int e = G[i][j];\n            int v = edges[e].t;\n            dist[i][v] = edges[e].w;\n            parent[i][v] = e;\n        }\n    }\n    for (int u = 1; u &lt;= V; u++) {\n        for (int i = 1; i &lt;= V; i++) {\n            for (int j = 1; j &lt;= V; j++) {\n                if (dist[i][j] &gt; dist[i][u] + dist[u][j]) {\n                    dist[i][j] = dist[i][u] + dist[u][j];\n                    parent[i][j] = parent[u][j];\n                }\n            }\n        }\n    }\n}\n\nmap&lt;string, int&gt; m;\nmap&lt;int, string&gt; mm;\n\nint main() {\n    cin &gt;&gt; V;\n    string s, ss;\n    int w;\n    for (int i = 1; i &lt;= V; i++) {\n        cin &gt;&gt; s;\n        m[s] = i;\n        mm[i] = s;\n    }\n    cin &gt;&gt; E;\n    for (int i = 0; i &lt; E; i++) {\n        cin &gt;&gt; s &gt;&gt; ss &gt;&gt; w;\n        insert_edge(m[s], m[ss], w);\n        insert_edge(m[ss], m[s], w);\n    }\n    floyd();\n    int R;\n    vector&lt;int&gt; path;\n    cin &gt;&gt; R;\n    for (int i = 0; i &lt; R; i++) {\n        cin &gt;&gt; s &gt;&gt; ss;\n        cout &lt;&lt; s;\n        int u = m[s], v = m[ss];\n        path.clear();\n        while (u != v) {\n            //cout &lt;&lt; mm[u] &lt;&lt; \" to \" &lt;&lt; mm[v] &lt;&lt; endl;\n            int e = parent[u][v];\n            path.push_back(e);\n            v = edges[e].f;\n        }\n        for (int i = path.size() - 1; i &gt;= 0; i--) {\n            edge e = edges[path[i]];\n            cout &lt;&lt; \"-&gt;(\" &lt;&lt; e.w &lt;&lt; \")-&gt;\" &lt;&lt; mm[e.t];\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre> <ul> <li> <p>\u5730\u9707\u4e4b\u540e</p> <p>\u6709\u5411\u56fe\u6700\u5c0f\u6811\u5f62\u56fe\uff0c\u6731\u5218\u7b97\u6cd5\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\nconst int maxv = 105;\nconst int inf = 0x3f3f3f3f;\nint V, E;\n\nstruct node {\n  double x, y;\n} nodes[maxv];\n\ndouble dist(const node&amp; a, const node&amp; b) {\n  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));\n}\n\nstruct edge {\n  int f, t;\n  double w;\n  edge() {}\n  edge(int f, int t, double w) :f(f), t(t), w(w) {}\n  bool operator &lt; (const edge&amp; b)const {\n      return w &gt; b.w;\n  }\n};\n\nvector&lt;edge&gt; edges;\nvector&lt;int&gt; G[maxv];\n\nvoid init() {\n  for (int i = 0; i &lt; V; i++) G[i].clear();\n  edges.clear();\n}\n\nvoid insert_edge(int f, int t, double w) {\n  edges.push_back(edge(f,t,w));\n  int s = edges.size() - 1;\n  G[f].push_back(s);\n}\n\nint x, y;\ndouble in[maxv];\nint vis[maxv], pre[maxv], id[maxv];\n\n// v starts from 0\ndouble zhuliu(int s) {\n  double res = 0;\n  int v = V; // localize\n  while (true) {\n      // in[] is the longest in edge's weight\n      for (int i = 0; i &lt; v; i++) in[i] = inf;\n      // calc in[]\n      for (int i = 0; i &lt; edges.size(); i++) {\n          edge&amp; e = edges[i];\n          if (e.f != e.t &amp;&amp; e.w &lt; in[e.t]) {\n              pre[e.t] = e.f;\n              in[e.t] = e.w;\n          }\n      }\n      // check non-connectivity\n      for (int i = 0; i &lt; v; i++)\n          if (s != i &amp;&amp; in[i] == inf)\n              return -1;\n      // id[] is scc id\n      memset(id, -1, sizeof(id));\n      memset(vis, -1, sizeof(vis));\n      // set root\n      in[s] = 0;\n      // count scc\n      int scc = 0;\n      // \n      for (int i = 0; i &lt; v; i++) {\n          res += in[i];\n          int v = i;\n          // find scc \n          while (vis[v] != i &amp;&amp; id[v] == -1 &amp;&amp; v != s) {\n              vis[v] = i;\n              v = pre[v];\n          }\n          // assign scc id\n          if (v != s &amp;&amp; id[v] == -1) {\n              for (int u = pre[v]; u != v; u = pre[u]) id[u] = scc;\n              id[v] = scc++;\n          }\n      }\n      // no scc, MST built\n      if (scc == 0) break;\n      // non-connected single points are also scc\n      for (int i = 0; i &lt; v; i++) \n          if (id[i] == -1)\n              id[i] = scc++;\n      // shrink scc\n      for (int i = 0; i &lt; edges.size(); i++) {\n          edge&amp; e = edges[i];\n          int v = e.t;\n          e.f = id[e.f];\n          e.t = id[e.t];\n          if (e.f != e.t) e.w -= in[v];\n      }\n      v = scc;\n      s = id[s];\n  }\n  return res;\n}\n\nint main() {\n  while (cin &gt;&gt; V &gt;&gt; E) {\n      init();\n      for (int i = 0; i &lt; V; i++) {\n          cin &gt;&gt; x &gt;&gt; y;\n          nodes[i].x = x;\n          nodes[i].y = y;\n      }\n      for (int i = 0; i &lt; E; i++) {\n          cin &gt;&gt; x &gt;&gt; y;\n          x--; y--;\n          insert_edge(x, y, dist(nodes[x], nodes[y]));\n      }\n      double ans = zhuliu(0);\n      if (ans == -1) printf(\"NO\\n\");\n      else printf(\"%.2f\\n\", ans);\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/basic/DA08_InnerSorting/","title":"Inner Sorting","text":""},{"location":"algorithm/basic/DA08_InnerSorting/#concepts","title":"Concepts","text":"<ul> <li>Record, Key, Sort key, Sequence.</li> </ul> <ul> <li> <p>Stable/Unstable sorting.</p> <p>relative order of the Records with the same key are maintained in stable sorting.</p> </li> </ul> <ul> <li>Space Cost: Additional space used.</li> </ul> <ul> <li>Time Cost: Best ~ Average ~ Worst</li> </ul>"},{"location":"algorithm/basic/DA08_InnerSorting/#simple-sorting-algorithms","title":"Simple Sorting Algorithms","text":""},{"location":"algorithm/basic/DA08_InnerSorting/#insert-sort","title":"Insert sort","text":"<pre><code>// naive\nvoid insertsort(int arr[], int n){\n    for(int i=1; i&lt;n; i++){\n        for(int j=i; j&gt;0; j--){\n            if(arr[j]&lt;arr[j-1])\n                swap(arr[j], arr[j-1]);\n            else break;\n        }\n    }\n}\n\n// instead of swapping each time, just move back and insert once (need an extra tmp).\nvoid insertsort2(int arr[], int n){\n    for(int i=1; i&lt;n; i++){\n        int tmp = arr[i];\n        int j = i - 1;\n        while(j&gt;=0 &amp;&amp; tmp&lt;arr[j]) {\n            arr[j+1] = arr[j];\n            j--;\n        }\n        arr[j+1] = tmp;\n    }\n}\n\n// use binary search to accelerate insert\n// compare: O(nlogn), move: O(n^2)\nvoid insertsort3(int arr[], int n){\n    for(int i=1; i&lt;N; i++){\n        int tmp = arr[i];\n        int left = 0, right = i-1;\n        while(left&lt;=right){\n            int mid = (left+right)/2;\n            if(tmp &lt; arr[mid]) right = mid - 1;\n            else left = mid + 1; \n        }\n        // left is the first element larger than tmp\n        for(int j=i-1; j&gt;=left; j--)\n            arr[j+1] = arr[j];\n        arr[left] = tmp;\n    }\n}\n</code></pre> <p>Stable.</p> <p>Time: \\(O(n) \\sim O(n^2) \\sim O(n^2)\\)</p> <p>Space: \\(O(1)\\)</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#bubble-sort","title":"Bubble sort","text":"<pre><code>// bubble smallest to front\nvoid bubble(int arr[], int n){\n    // each routine make sure arr[i-1] is the smallest.\n    for(int i=1; i&lt;n; i++)\n        for(int j=n-1; j&gt;=i; j--)\n            if(arr[j] &lt; arr[j-1])\n                swap(arr[j], arr[j-1]);\n}\n\n// if no record is swapped in one routine, we can break earlier.\nvoid bubble2(int arr[], int n){\n    bool flag;\n    for(int i=1; i&lt;n; i++){\n        flag = true;\n        for(int j=n-1; j&gt;=i; j--)\n            if(arr[j] &lt; arr[j-1]){\n                swap(arr[j], arr[j-1]);\n                flag = false;\n            }\n        if(flag) return;\n    }\n}\n</code></pre> <p>Stable.</p> <p>TIme1: \\(O(n^2) \\sim O(n^2) \\sim O(n^2)\\)</p> <p>Time2: \\(O(n) \\sim O(n^2) \\sim O(n^2)\\)</p> <p>Space: \\(O(1)\\)</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#selection-sort","title":"Selection sort","text":"<pre><code>void selectsort(int arr[], int n){\n    for(int i=0; i&lt;n-1; i++){\n        int idx = i; // smallest element's index in [i:]\n        for(int j=i+1; j&lt;n; j++)\n            if(arr[j]&lt;arr[idx])\n                idx = j;\n        swap(arr[i], arr[idx]);\n    }\n}\n</code></pre> <p>Unstable. (Swap may change the order of records with the same key.)</p> <p>\u200b   \u4ea4\u6362\u8fc7\u7a0b\u4f1a\u7834\u574f\u539f\u6765\u7684\u987a\u5e8f\u3002<code>(25,25',16,25'') -&gt; (16,25',25,25'')</code></p> <p>Space: \\(O(1)\\)</p> <p>Time: \\(O(n^2) \\sim O(n^2) \\sim O(n^2)\\) (stably)</p> <p>Improvement is the Heap sort. Instead of using O(n) to find the smallest element, we can put the records in a heap and only use O(logn).</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#shell-sort","title":"Shell sort (\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f)","text":"<p>Based on Insert sort's good property when the sequence is short and almostly ordered.</p> <pre><code>void shellsort(int arr[], int n){\n    for(int delta=n/2; delta&gt;0; delta/=2)\n        for(int j=0; j&lt;delta; j++)\n            insertsort_delta(&amp;arr[j], n-j, delta);\n}\n\nvoid insertsort_delta(int arr[], int n, int delta){\n    for(int i=delta; i&lt;n; i+=delta){\n        for(int j=i; j&gt;=delta; j-=delta){\n            if(arr[j] &lt; arr[j-delta])\n                swap(arr[j], arr[j-delta]);\n            else break;\n        }\n    }\n}\n</code></pre> <p>Unstable.</p> <p>Different Delta sequence (here we use <code>{n/2, n/4, ..., 1}</code>) has different complexity.</p> <p>Hibbard sequence \\(\\{2^k-1, .., 3, 1\\}\\) 's Time complexity is \\(O(n^{\\frac 3 2 })\\)</p> <p>Space: \\(O(1)\\)</p> <p></p> <p>\u200b   \u4ea4\u6362\u6b21\u6570\u8ba1\u7b97\uff1a(1+1+1)+(1+1)+(4) = 9</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#divide-and-conquer","title":"Divide-and-conquer","text":""},{"location":"algorithm/basic/DA08_InnerSorting/#quick-sort-by-hoare","title":"quick sort (by Hoare)","text":"<p>Select an axis recursively and move smaller records left &amp; larger records right.</p> <pre><code>void quicksort(int arr[], int left, int right){\n    if(left &lt; right){\n        int pivot = partition(arr, left, right);\n        quicksort(arr, left, pivot-1);\n        quicksort(arr, pivot+1, right);\n    }\n}\n\nint partition(int arr[], int left, int right){\n    int i=left, j=right;\n    int tmp = arr[left]; // pivot is selected as the left.\n    while(i!=j){\n        while((arr[j]&gt;tmp)&amp;&amp;(i&lt;j)) j--; // right to left\n        if(i&lt;j) arr[i++] = arr[j];  // swap\n        while((arr[i]&lt;=tmp)&amp;&amp;(i&lt;j)) i++; // left to right\n        if(i&lt;j) arr[j--]=arr[i];  // swap\n    }\n    arr[i] = tmp;\n    return i;\n}\n\n// simplified, sort a[l:r+1]\nvoid quicksort(int a[], int l, int r) {\n    if (l &lt; r) {\n        int i = l, j = r, x = a[l];\n        while (i &lt; j) {\n            while (i &lt; j &amp;&amp; a[j] &gt;= x) j--;\n            if (i &lt; j) a[i++] = a[j];\n            while (i &lt; j &amp;&amp; a[i] &lt;= x) i++;\n            if (i &lt; j) a[j--] = a[i];\n        }\n        arr[i] = x;\n        quicksort(a, l, i - 1);\n        quicksort(a, i + 1, r);\n    }\n}\n</code></pre> <p>Unstable.</p> <p>Space: \\(O(1)\\)</p> <p>Time: \\(O(nlogn) \\sim O(nlogn) \\sim O(n^2)\\)</p> <p>When pivot is selected such that it always in nearly middle, the height of corresponding BST is smallest (logn). </p> <p>When the sequence is already ordered, it reaches the worst Time complexity of n^2.</p> <p>Analysis of average time complexity: (Similar to that of Random BST)</p> \\[ \\displaylines{ T(n) = T(i) + T(n-i-1) + cn\\\\ T(n) = \\frac 2 n \\sum_{i=0}^{n-1} T(i) + cn \\\\ nT(n) - (n-1)T(n-1) = 2T(n-1) + cn \\\\ \\frac {T(n)} {n+1} = \\frac {T(n-1)} {n} + \\frac c n \\\\ \\frac {T(n)} {n+1} \\sim O(logn) \\\\ T(n) \\sim O(nlogn) } \\] <ul> <li> <p>Variant: Find the first k smallest elements, or Find the k-th smallest element.</p> <p>They are the same question, and quicksort variant can give the best Average Time Complexity: \\(O( n )\\)</p> <p>(\u5e76\u4e0d\u8981\u6c42\u627e\u5230\u7684\u524dk\u4e2a\u6700\u5c0f\u5143\u7d20\u6709\u5e8f\uff0c\u53ea\u4fdd\u8bc1\u627e\u5230\u4e86\u7b2ck\u5c0f\u7684\u5143\u7d20\uff0c\u4ee5\u53ca\u6bd4\u5b83\u5c0f\u7684k-1\u4e2a\u5143\u7d20\u3002\u4ece\u800c\u53ef\u4ee5\u907f\u514dk\u51fa\u73b0\u5728\u590d\u6742\u5ea6\u516c\u5f0f\u4e2d\uff0c\u4e25\u683c\u7684\u8fbe\u5230O(n))</p> <p><code>std::nth_element(begin, kth, end)</code> implements this.</p> <pre><code>void quicksort_k(int arr[], int l, int r, int k){\n    if(l&lt;r){\n        int i=l, j=r, x=arr[l];\n      while(i&lt;j){\n          while(i&lt;j &amp;&amp; arr[j]&gt;=x) j--;\n            if(i&lt;j) arr[i++] = arr[j];\n            while(i&lt;j &amp;&amp; arr[i]&lt;=x) i++;\n            if(i&lt;j) arr[j--] = arr[i];\n        }\n        arr[i]=x;\n        int tmp = i-l+1; // num of the smaller part of elements \n        if(k == tmp) return;\n        else if(k &lt; tmp) quicksort_k(arr, l, i-1, k);\n        else quicksort_k(arr, i+1, r, k-tmp);\n    }\n}\n</code></pre> <p>Other methods to solve this question:</p> <p>\uff08\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u662f\u627e\u5230\u6709\u5e8f\u7684\u524dk\u4e2a\u6700\u5c0f\u5143\u7d20\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u90fd\u542b\u6709k\uff09</p> <ul> <li>Na\u00efve quicksort: \\(O(n log n)\\)</li> </ul> <ul> <li>Na\u00efve Heap: \\(O(n+klogn)\\)</li> </ul> <ul> <li> <p>Small Heap: \\(O(nlogk)\\)</p> <p>Only keep a heap of capacity of <code>k</code>, and compare the others.</p> <p><code>std::partial_sort(arr, arr+k, arr+N)</code> implements this.</p> <pre><code>priority_queue&lt;int&gt; heap_k(int arr[], int n, int k){\n    priority_queue&lt;int&gt; q; // maxheap\n    for(int i=0; i&lt;k; i++) q.push(arr[k]); // init\n    for(int i=k; i&lt;n; i++){\n        if(arr[i] &lt; q.top()){ // smaller than max\n            q.pop();\n            q.push(arr[i]);\n        }\n    }\n    return q;\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA08_InnerSorting/#merge-sort","title":"merge sort","text":"<p>quick sort focus on how to divide, merge sort focus on how to merge.</p> <pre><code>void mergesort(int arr[], int tmp[], int left, int right){\n    if(left &lt; right){\n        int mid = (left+right)/2;\n        mergesort(arr, tmp, left, mid);\n        mergesort(arr, tmp, mid+1, right);\n        merge(arr, tmp, left, right, mid);\n    }\n}\n\nvoid merge(int arr[], int tmp[], int left, int right, int mid){\n    for(int i=left; i&lt;=right; i++) tmp[i] = arr[i];\n    int i=left, j=mid+1;\n    int idx = left;\n    while(i&lt;=mid &amp;&amp; j&lt;=right){\n        if(tmp[i]&lt;=tmp[j]) arr[idx++] = tmp[i++];\n        else arr[idx++] = tmp[j++];\n    }        \n    while(i&lt;=mid) arr[idx++] = tmp[i++];\n    while(j&lt;=right) arr[idx++] = tmp[j++];\n}\n\n// simplified, sort [l, r]\nint a[maxn], b[maxn];\nvoid mergesort(int* a, int* b, int l, int r){\n    if (l == r) return;\n    int m = (l + r) / 2;\n    mergesort(a, b, l, m);\n    mergesort(a, b, m + 1, r);\n    int i = l, j = m + 1; k = l;\n    while (i &lt;= m &amp;&amp; j &lt;= r){\n        if (a[i] &lt;= a[j]) b[k++] = a[i++];\n        else b[k++] = a[j++];\n    }\n    while (i &lt;= m) b[k++] = a[i++];\n    while (j &lt;= r) b[k++] = a[j++];\n    for (int i = l; i &lt;= r; i++) a[i] = b[i];\n}\n</code></pre> <p>Stable.</p> <p>Time: \\(O(nlogn)\\) (very stable)</p> <p>Space: \\(O(n)\\) (the largest)</p> <ul> <li>Variants of merge sort</li> </ul> <pre><code># bottom-up merge sort (no recursion)\nMergeSort(array, count)\n    power_of_two = FloorPowerOfTwo(count)\n    scale = count/power_of_two // 1.0 &lt;= scale &lt; 2.0\n\n    for (length = 16; length &lt; power_of_two; length = length * 2)\n        for (merge = 0; merge &lt; power_of_two; merge = merge + length * 2)\n            start = merge * scale\n            mid = (merge + length) * scale\n            end = (merge + length * 2) * scale\n\n            Merge(array, MakeRange(start, mid), MakeRange(mid, end))\n</code></pre>"},{"location":"algorithm/basic/DA08_InnerSorting/#heap-sort","title":"Heap sort","text":"<p>Advanced version of Selection sort.</p> <pre><code>void heapsort(int arr[], int n){\n    priority_queue&lt;int&gt; que(arr, arr+n); \n    for(int i=0; i&lt;n; i++) arr[i] = que.top(), que.pop(); // greater to less\n}\n</code></pre> <p>Unstable.</p> <p>Time: \\(O(nlogn)\\) (stably)</p> <p>Space: \\(O(1 )\\)</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#bin-sort","title":"Bin sort","text":"<p>\u9700\u8981\u5bf9\u6392\u5e8f\u5e8f\u5217\u8fdb\u884c\u4e00\u5b9a\u7684\u5047\u8bbe\u9650\u5236\u3002</p> <p>\u4e0d\u901a\u8fc7\u6bd4\u8f83&amp;\u4ea4\u6362\uff0c\u800c\u901a\u8fc7\u6536\u96c6&amp;\u5206\u914d\u6392\u5e8f\u3002</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#bucket-sort-counting-sort","title":"Bucket sort (Counting sort)","text":"<pre><code>// assume arr[]'s range in [0, m)\nvoid bucketsort(int arr[], int n, int m){\n    int* tmp = new int[n]; // copy of arr\n    int* cnt = new int[m]; // m buckets\n    int i;\n    for(i=0; i&lt;n; i++) tmp[i] = arr[i];\n    for(i=0; i&lt;m; i++) cnt[i] = 0;\n    // fill each bucket\n    for(i=0; i&lt;n; i++) cnt[arr[i]]++;\n    // calculate position (cumulative sum)\n    for(i=1; i&lt;m; i++) cnt[i] += cnt[i-1];\n    // collect in reverse order to keep stability.\n    for(i=n-1; i&gt;=0; i--) arr[--cnt[tmp[i]]] = tmp[i];\n}\n</code></pre> <p>Stable. (if collecting reversely)</p> <p>Time: \\(O(m+n)\\)</p> <p>Space: \\(O(m+n)\\)</p> <p>Suitable when \\(m\\) is very small compared to \\(n\\).</p> <p>Bucket sort is in fact a generalization of counting sort, and what we wrote is in fact Counting sort.</p> <p>By definition:</p> <p>The particular distinction for bucket sort is that it uses a hash function to partition the keys of the input array, so that multiple keys may hash to the same bucket. </p> <p>\u6876\u6392\u5e8f\u4f7f\u7528\u66f4\u52a0\u590d\u6742\u7684\u6876\u3002\u6bcf\u4e2a\u6876\u5212\u5206\u4e00\u4e2a\u8303\u56f4\uff0c\u6bcf\u4e2a\u6876\u5185\u90e8\u53ef\u80fd\u9700\u8981\u8c03\u7528\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\u3002\u6700\u540e\uff0c\u6536\u96c6\u6240\u6709\u6876\u3002\u8ba1\u6570\u6392\u5e8f\u7684\u6876\u5341\u5206\u7b80\u5355\u3002\u57fa\u6570\u6392\u5e8f\u4f7f\u7528\u591a\u6b21\u8ba1\u6570\u6392\u5e8f\u3002</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#radix-sort","title":"Radix sort","text":"<p>Improved version of Bucket Sort when m is very large. </p> <p>Divide-and-Conquer.</p> <ul> <li> <p>MSD: most significant digit first</p> <p>Human use this more. (456&gt;123)</p> </li> </ul> <ul> <li> <p>LSD: least significant digit first </p> <p>Computer uses this more often.  (456&gt;123)</p> </li> </ul> <p>Implementation:</p> <ul> <li>Array-based</li> </ul> <pre><code>// assume there are *d* digits in key, each digit in [0, r).\n// for integers, r=10, d=max([len(str(i)) for i in arr])\nvoid radixsort(int arr[], int n, int d, int r){\n    int* tmp = new int[n];\n    int* cnt = new int[r];\n    int i,j,k;\n    int radix = 1;\n    // LSD, call Bucket sort d times.\n    for(i=1; i&lt;=d; i++){\n        for(j=0; j&lt;r; j++) cnt[j] = 0;\n        for(j=0; j&lt;n; j++){\n            k = (arr[j]/radix)%r;\n            cnt[k]++;\n        }\n        for(j=1; j&lt;r; j++) cnt[j] += cnt[j-1];\n        for(j=n-1; j&gt;=0; j--){\n            k = (arr[j]/radix)%r;\n            tmp[--cnt[k]] = arr[j];\n        }\n        // copy back to arr\n        for(j=0; j&lt;n; j++) arr[j] = tmp[j];\n        radix *= r;\n    }\n}\n</code></pre> <p>Stable.</p> <p>TIme: \\(O(d \\cdot (r+n)) \\sim O(d \\cdot n)\\)</p> <p>\u200b   but since \\(d \\ge log_rn\\) , \\(O(d\\cdot n) \\sim O(nlogn)\\).</p> <p>Space: \\(O(r+n)\\)</p> <ul> <li> <p>LinkedList-based</p> <p>Avoid copying back and forth between tmp and arr.</p> </li> </ul> <pre><code>struct node{\n    int key;\n    int next;\n}\nstruct que{\n    int head;\n    int tail;\n}\n\nvoid radixsort(int arr[], int n, int d, int r){\n    int i;\n    int first = 0;\n    que *q = new que[r];\n    for(i = 0; i&lt;n-1; i++) arr[i].next = i+1;\n    arr[n-1].next = -1;\n    for(i=0; i&lt;d; i++){\n        distribute(arr, first, i, r, q);\n        collect(arr, first, i, r, q)\n    }\n    delete [] q;\n}\n\nvoid distrubute(int arr[], int first, int i, int r, que* q){\n    for(j=0; j&lt;r; j++) q[j].head = -1;\n    while(first != -1){\n        int k = arr[first].key;\n        for(int a=0; a&lt;i; a++) k /= r;\n        k %= r;\n        if(q[k].head == -1) q[k].head = first;\n        else arr[q[k].tail].next = first;\n        q[k].tail = first;\n        first = arr[first].next;\n    }\n}\n\nvoid collect(int arr[], int&amp; first, int i, int r, que* q){\n    int last, k=0;\n    while(q[k].head == -1) k++;\n    first = q[k].head;\n    last = q[k].tail;\n    while(k&lt;r-1) {\n        k++;\n        while(k&lt;r-1 &amp;&amp; q[k].head==-1) k++;\n        if(q[k].head != -1){\n            arr[last].next = q[k].head;\n            last = q[k].tail;\n        }\n    }\n    arr[last].next = -1;\n}\n</code></pre> <ul> <li>String Radix sort</li> </ul> <pre><code>vector&lt;string&gt; ans;\nvoid radixsort(vector&lt;string&gt;&amp; s,int k=0)\n{\n    if(s.empty()) return;\n    vector&lt;string&gt; bucket[26];\n    for(int i=0;i&lt;s.size();++i)\n    {\n        if(s[i].length()==k)\n        {\n            ans.push_back(s[i]);\n            continue;\n        }\n        int index=s[i][k]-'a';\n        bucket[index].push_back(s[i]);\n    }\n    for(int i=0;i&lt;26;++i) radixsort(bucket[i],k+1);\n}\n</code></pre> <p>Time Complexity: \\(O(\\sum_i s_i)\\)</p> <p>Alphabetial String sort has the property that sorting from the first letter, no matter how long the string is, the latter buket sorting will not change the rank of the former bucket sorting.</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#index-sort","title":"Index sort","text":"<p>\u907f\u514d\u79fb\u52a8\u8bb0\u5f55\u672c\u8eab\uff0c\u800c\u5bf9\u7d22\u5f15/\u5730\u5740\u6392\u5e8f\u3002</p> <p>Where am i going? <code>res[idx1[i]] = arr[i]</code></p> <p>Where am i from? <code>arr[idx2[i]] = res[i]</code></p> <p>Choose either. We use idx2 in the following code:</p> <pre><code>template&lt;class record&gt;\nvoid indexsort(record arr[], int idx[], int n){\n    for(int i=0; i&lt;n; i++) idx[i] = i;\n    // simple insert sort kernel to sort only idx.\n    for(int i=1; i&lt;n; i++){\n        for(int j=i; j&gt;0; j--){\n            if(arr[idx[j]] &lt; arr[idx[j-1]])\n                swap(idx[j], idx[j-1]);\n            else break;\n        }   \n    }\n    adjust(arr, idx, n); // modify records\n}\n\n//time: O(n), space: **O(1)**\ntemplate&lt;class record&gt;\nvoid adjust(record arr[], int idx[], int n){\n    record tmp;\n    for(int i=0; i&lt;n; i++){\n        tmp = arr[i];\n        int j=i;\n        while(idx[j] != i){\n            arr[j] = arr[idx[j]];\n            // swap(idx[j], j);\n            int k = idx[j];\n            idx[j] = j;\n            j = k;\n        }\n        arr[j] = tmp;\n        idx[j] = j;\n    }\n}\n</code></pre> <p>\u5173\u952e\u5728\u4e8eadjust\u4ec5\u4f7f\u7528O(1)\u989d\u5916\u7a7a\u95f4\u3002</p>"},{"location":"algorithm/basic/DA08_InnerSorting/#summary","title":"Summary","text":"<p>\u6392\u5e8f\u7b97\u6cd5\u7684\u4e0b\u754c\u5206\u6790\uff1a\u5224\u5b9a\u6811\u3002</p> <p>\u6709n\u4e2a\u8bb0\u5f55\uff0c\u751f\u6210\u7684\u5224\u5b9a\u6811\u6709n!\u4e2a\u53f6\u8282\u70b9\uff0c\u6811\u6df1\u4e3a\\(O(lg(n!)) \\sim O(nlogn)\\)\u3002</p> <p>\u6700\u574f\u60c5\u51b5\u4e0b\u6bd4\u8f83\u6b21\u6570\u4e3a\u6839\u5230\u53f6\u7684\u6700\u957f\u8ddd\u79bb\uff0c\u5373\u6811\u6df1\u3002</p> <p>\u6700\u597d\u60c5\u51b5\u4e0b\u6bd4\u8f83\u6b21\u6570\u4e3a\u6839\u5230\u53f6\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5373n-1\u3002</p>"},{"location":"algorithm/basic/DA09_OuterSorting/","title":"Outer Sorting","text":""},{"location":"algorithm/basic/DA09_OuterSorting/#_1","title":"\u6d41\u7a0b","text":"<p>\u7f6e\u6362\u9009\u62e9\uff1a\u5c06\u5916\u5b58\u6570\u636e\u5212\u5206\u4e3a\u5c3d\u53ef\u80fd\u957f\u7684\u987a\u4e32\uff08\u5df2\u6392\u5e8f\u7684\u5916\u5b58\u5b50\u4e32\uff09</p> <p>\u5f52\u5e76\uff1a\u5f52\u5e76\u6240\u6709\u987a\u4e32\u3002</p>"},{"location":"algorithm/basic/DA09_OuterSorting/#_2","title":"\u65f6\u95f4\u6784\u6210","text":"<ul> <li>\u4ea7\u751f\u521d\u59cb\u987a\u4e32\u7684\u5185\u6392\u5e8f\u65f6\u95f4</li> <li>\u521d\u59cb\u5316\u987a\u4e32\u4e0e\u5f52\u5e76\u7684IO\u65f6\u95f4</li> <li>\u5f52\u5e76\u65f6\u95f4</li> </ul>"},{"location":"algorithm/basic/DA09_OuterSorting/#_3","title":"\u7f6e\u6362\u9009\u62e9\u6392\u5e8f","text":"<p>\u628a\u5916\u5b58\u6570\u636e\u8f6c\u6362\u4e3a\u591a\u4e2a\u957f\u5ea6\u4e0d\u7b49\u7684\u987a\u4e32\u3002\u6bcf\u6b21\u7b97\u6cd5\u7ed3\u675f\u65f6\uff0c\u5bf9RAM\u4e2d\u5269\u4f59\u7684\u65e0\u6cd5\u5904\u7406\u5143\u7d20\u91cd\u65b0\u5efa\u7acb\u6700\u5c0f\u5806\uff0c\u7ee7\u7eed\u751f\u6210\u987a\u4e32\u3002\u6700\u77ed\u987a\u4e32\u957f\u5ea6\u4e3a\u5806\u7684\u5927\u5c0fM\uff0c\u5e73\u5747\u957f\u5ea62M\u3002</p> <p>\u5e73\u5747\u957f\u5ea6\u8ba1\u7b97\uff1a\u5806\u7684\u5927\u5c0f\u4e3aM\uff0c\u6bcf\u6b21\u52a0\u5165\u65b0\u5143\u7d20\uff0c\u67091/2\u51e0\u7387\u52a0\u5165\u7684\u5143\u7d20\u5927\u4e8e\u5f39\u51fa\u7684\u5143\u7d20\uff0c\u6b64\u65f6M--\uff0c\u53e6\u59161/2\u51e0\u7387\u5c0f\u4e8e\u5f39\u51fa\u7684\u5143\u7d20\uff0c\u6b64\u65f6M\u4e0d\u53d8\uff0c\u6240\u4ee5\u5e73\u5747\u60c5\u51b5\u4e0b\u6bcfM--\u4e00\u6b21\uff0c\u987a\u4e32\u957f\u5ea6+2\uff0c\u6700\u540e\u5e73\u5747\u7684\u987a\u4e32\u5373\u4e3a2M\u957f\u3002\uff08\u626b\u96ea\u673a\u6a21\u578b\uff09</p> <pre><code>template&lt;class elem&gt;;\nvoid ReplacementSelection(elem *a, int n){\n    elem mn, tmp;\n    readFromInput(a, n); // read n elem to a\n    buildMinHeap(heap, a); // build heap from a\n    for(int last=n-1; last&gt;=0;){\n        elem mn = heap[0];\n        sendToOutputBuffer(mn);\n        readFromInput(tmp, 1);\n        if(tmp &gt;= mn) heap[0] = tmp;\n        else{\n            heap[0] = heap[last];\n            heap[last] = tmp;\n            last--;\n        }\n        if(last) siftdown(0);\n    }\n}\n</code></pre> <ul> <li>\u8bfb\u5165M\u4e2a\u5143\u7d20\uff0c\u5efa\u7acb\u6700\u5c0f\u5806\u3002</li> <li>\u8f93\u51fa\u5806\u9876\u5143\u7d20A\u3002</li> <li>\u8bfb\u5165\u65b0\u5143\u7d20B\uff1a<ul> <li>B\u5927\u4e8eA\uff0c\u5219\u63d2\u5165\u5806\u9876\u5e76sift down</li> <li>B\u5c0f\u4e8eA\uff0c\u5219\u4e0e\u5806\u5e95\u4ea4\u6362\uff0c\u5806Size--</li> </ul> </li> <li>\u91cd\u590d\u4e0a\u4e24\u6b65\u81f3\u5806Size==0\uff0c\u91cd\u65b0\u5efa\u5806\uff0c\u5f00\u59cb\u4e0b\u4e00\u4e2a\u987a\u4e32\u8f93\u51fa\u3002</li> </ul>"},{"location":"algorithm/basic/DA09_OuterSorting/#_4","title":"\u5f52\u5e76","text":"<p>\u51cf\u5c11\u5f52\u5e76\u6b21\u6570\u7684\u89d2\u5ea6\uff1a</p> <ul> <li>\u51cf\u5c11\u521d\u59cb\u987a\u4e32\u4e2a\u6570m\u3002</li> <li>\u589e\u52a0\u540c\u65f6\u5f52\u5e76\u7684\u987a\u4e32\u6570\u91cfk\u3002</li> </ul> <p>\u5982\u4f55\u63d0\u9ad8k\u8def\u5f52\u5e76\u6bcf\u6b21\u627e\u6700\u5c0f\u503c\u7684\u6548\u7387\uff1f\uff08naive: \\(O(k-1)\\)\uff09</p>"},{"location":"algorithm/basic/DA09_OuterSorting/#_5","title":"\u80dc\u8005\u6811","text":"<p>\u5b8c\u5168\u4e8c\u53c9\u6811\u5b58\u50a8\uff0c\u53f6\u8282\u70b9\u4e3a\u5f85\u5f52\u5e76\u7684\u987a\u4e32\uff0c\u6bcf\u4e2a\u975e\u53f6\u8282\u70b9\u5b58\u50a8\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u4e2d\u80dc\u5229\u7684\u90a3\u4e2a\u3002</p> <p></p> <p>\u5185\u90e8\u8282\u70b9\u6811\u6df1\u5ea6s\uff0c\u6700\u5e95\u5c42\u5916\u90e8\u8282\u70b9\u4e2a\u6570<code>LowExt</code>\uff08\u7bee\u6846\uff09\uff0c<code>LowExt</code>\u4ee5\u5916\u7684\u8282\u70b9\u6570<code>offset</code>\uff08\u7ea2\u6846\uff0c\u6ee1\u5b8c\u5168\u4e8c\u53c9\u6811\uff09\u3002\u5219L[i]\u4e0e\u5bf9\u5e94\u7684\u7236\u8282\u70b9B[p]\u7684\u5173\u7cfb\u4e3a\uff1a</p> \\[ \\displaylines{ s = ceil(log_2n)-1\\\\ LowExt = 2(n-2^s)\\\\ offset = 2^{s+1}-1 \\\\ p = \\left\\{     \\begin{array}{lr}     (i+offset)/2, &amp; i \\le LowExt \\\\      (i-LowExt+n-1)/2, &amp; i&gt;LowExt     \\end{array} \\right. } \\] <ul> <li> <p>\u91cd\u6784\uff1a</p> <p>\u6bcf\u6b21\u79fb\u9664\u6700\u5c0f\u503c\u540e\uff0c\u6839\u8282\u70b9\u7684\u987a\u4e32\u9996\u503c\u6539\u53d8\uff0c\u6b64\u65f6\u9700\u8981\u91cd\u6784\u80dc\u8005\u6811\u3002</p> <p>\u53ea\u9700\u8981<code>siftdown</code>\u6839\u8282\u70b9\u5373\u53ef\uff0c\u6bcf\u6b21\u4e0e\u5144\u5f1f\u6bd4\u8f83\uff0c\u66f4\u6539\u7236\u8282\u70b9\u3002</p> </li> </ul>"},{"location":"algorithm/basic/DA09_OuterSorting/#_6","title":"\u8d25\u8005\u6811","text":"<p>\u80dc\u8005\u6811\u7684\u53d8\u4f53\uff0c\u7b80\u5316\u91cd\u6784\u3002</p> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\u5b58\u50a8\uff0c\u53f6\u8282\u70b9\u4e3a\u5f85\u5f52\u5e76\u7684\u987a\u4e32\uff0c\u6bcf\u4e2a\u975e\u53f6\u8282\u70b9\u5b58\u50a8\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u4e2d\u5931\u8d25\u7684\u90a3\u4e2a\u3002</p> <p>\u65b0\u589e\u6839\u8282\u70b9\u7684\u7236\u8282\u70b9<code>B[0]</code>\u8bb0\u5f55\u6700\u7ec8\u80dc\u8005\u3002</p> <pre><code>struct T{}; // seq\n\nint winner(T* A, int a, int b);\nint loser(T*A, int a, int b);\n\nstruct LoserTree{\n    int n, LowExt, offset;\n    int *B;\n    T* L;\n    // p is B[p], lc/rc is L[lc/rc]\n    void play(int p, int lc, int rc){\n        B[p] = loser(L, lc, rc);\n        int tmp1, tmp2;\n        tmp1 = winner(L, lc, rc);\n        while(p&gt;1 &amp;&amp; p%2){\n            tmp2 = winner(L, tmp1, B[p/2]);\n            B[p/2] = loser(L, tmp1, B[p/2]);\n            tmp1 = tmp2;\n            p/=2;\n        }\n        B[p/2] = tmp1;\n    }\n    void init(T* A, int size){\n        n = size;\n        L = A;\n        int i,s;\n        for(s=1; 2*s&lt;=n-1; s+=s); // s\n        LowExt = 2*(n-s);\n        offset = 2*s - 1;\n        //\u521d\u59cb\u5316\u5185\u90e8\u8282\u70b9\u6811\u6700\u5e95\u5c42\u7684\u5185\u90e8\u8282\u70b9\n        for(i=2; i&lt;=LowExt; i+=2)\n            play((offset+i)/2, i-1, i);\n        //\u5947\u6570\u8fd8\u9700\u8981\u751f\u6210\u4e00\u4e2a\u6df7\u5408\u5185\u90e8\u8282\u70b9\n        if(n%2){\n            play(n/2, B[(n-1)/2], LowExt+1);\n            i = LowExt+3;\n        }\n        else i=LowExt+2;\n        for(;i&lt;=n;i+=2){\n            play((i-LowExt+n-1)/2, i-1, i);\n        }\n    }\n    int winner(){\n        return B[0];\n    }\n    void replay(int i){\n        int p;\n        if(i&lt;=LowExt) p = (i+offset)/2;\n        else p = (i-LowExt+n-1)/2;\n        B[0] = winner(L, i, B[p]);\n        B[p] = loser(L, i, B[p]);\n        for(; (p/2)&gt;=1; p/=2){\n            int tmp;\n            tmp = winner(L, B[p/2], B[0]);\n            B[p/2] = loser(L, B[p/2], B[0]);\n            B[0] = tmp;\n        }\n    }\n};\n</code></pre>"},{"location":"algorithm/basic/DA09_OuterSorting/#_7","title":"\u590d\u6742\u5ea6\u5206\u6790\uff1a","text":"<p>\u521d\u59cb\u5316\\(O(k)\\)\uff0c\u6bcf\u6b21\u64cd\u4f5c\\(O(logk)\\).</p> <p>\u751f\u6210n\u957f\u7684\u987a\u4e32\u603b\u65f6\u95f4\\(O(k+nlogk)\\)</p> <p>\uff08naive\u9700\u8981\\(O(nk)\\)\uff09</p>"},{"location":"algorithm/basic/DA10_Search/","title":"Search","text":""},{"location":"algorithm/basic/DA10_Search/#_1","title":"\u641c\u7d22","text":"<ul> <li>\u627e\u5230\u5173\u952e\u7801\u7b26\u5408\u7279\u5b9a\u7ea6\u675f\u6761\u4ef6\u7684\u8bb0\u5f55\u96c6\u5408\u3002</li> </ul> <ul> <li> <p>\u6548\u7387\u5341\u5206\u91cd\u8981\u3002</p> <p>\u5e73\u5747\u68c0\u7d22\u957f\u5ea6\uff1a\\(AVL = \\sum_{i=1}^np_ic_i\\)</p> </li> </ul> <ul> <li> <p>How to improve searching efficiency:</p> <p>sorting, indexing, hashing.</p> </li> </ul>"},{"location":"algorithm/basic/DA10_Search/#_2","title":"\u7ebf\u6027\u68c0\u7d22","text":""},{"location":"algorithm/basic/DA10_Search/#_3","title":"\u987a\u5e8f\u68c0\u7d22","text":"<p>\u8bbe\u7f6e\u4e0b\u68070\u5904\u4e3a\u54e8\u5c97\uff0c\u4ece\u5c3e\u90e8\u68c0\u7d22\u5230\u6b64\u5904\u4ecd\u672a\u53d1\u73b0\u76ee\u6807\u5143\u7d20\uff0c\u610f\u5473\u7740\u68c0\u7d22\u5931\u8d25\u3002</p> \\[ \\displaylines{ \\frac {n+1} 2 &lt; ASL &lt; n+1 } \\] <ul> <li>\u68c0\u7d22\u6210\u529f: \u5047\u8bbe \\(p_i\\) is \\(\\frac 1 n\\):</li> </ul> \\[ \\displaylines{   \\sum_{i=1}^n\\frac 1 n(n-i+1) = \\frac {n+1} 2 } \\] <ul> <li>\u68c0\u7d22\u5931\u8d25: \\(n+1\\)</li> </ul>"},{"location":"algorithm/basic/DA10_Search/#_4","title":"\u4e8c\u5206\u68c0\u7d22","text":"\\[ \\displaylines{ ASL = \\frac 1 n (\\sum_{i=1}^{lg\\ n}i\\cdot 2^{i-1}) \\\\ \\sim O(lg\\ n) } \\] <ul> <li>Need Sorting first</li> </ul> <ul> <li>Success or fail: \\(\\sim O(lg\\ n)\\)</li> </ul> <ul> <li>\u68c0\u7d22\u6210\u529f\u6700\u591a\\(ceil(lg(n+1))\\)\u6b21\uff0c\u6700\u5c111\u6b21\u3002</li> </ul> <ul> <li> <p>\u68c0\u7d22\u5931\u8d25\u65f6\uff0c\u6700\u5c11\u6bd4\u8f83\\(floor(lg(n+1))\\)\u6b21 \uff0c\u6700\u591a\u6bd4\u8f83\\(ceil(lg(n+1))\\)\u6b21\u3002</p> <p>eg. 22\u4e2a\u5143\u7d20\uff0c\u5931\u8d25\u65f6\u6700\u5c11\u4e5f\u89814\u6b21\u6bd4\u8f83\uff0c\u6700\u591a5\u6b21\u3002</p> </li> </ul>"},{"location":"algorithm/basic/DA10_Search/#_5","title":"\u5206\u5757\u68c0\u7d22","text":"<p>\u5206\u5757\u6709\u5e8f\uff0c\u5148\u68c0\u7d22\u5728\u54ea\u4e00\u5757\u4e2d\uff08\u4e8c\u5206\u68c0\u7d22\uff09\uff0c\u540e\u5728\u5757\u5185\u68c0\u7d22\uff08\u987a\u5e8f\u68c0\u7d22\uff09\u3002</p> <p></p> \\[ \\displaylines{ ASL_{succ} = ASL_b + ASL_s \\\\ \\approx lg\\ b + s/2 \\\\ \\approx lg(\\frac n s + 1) + s/2 } \\]"},{"location":"algorithm/basic/DA10_Search/#_6","title":"\u6563\u5217\u68c0\u7d22","text":"<ul> <li> <p>\u601d\u60f3</p> <p>Inspired by \\(O(1)\\) complexity of Array indexing.</p> <p><code>Hash function(Key) = Sequential list index.</code></p> </li> </ul> <ul> <li>\u6982\u5ff5<ul> <li>\u8d1f\u8f7d\u56e0\u5b50 \\(\\alpha\\)\uff1a\u5df2\u6709\u8282\u70b9\u6570/\u6563\u5217\u8868\u7a7a\u95f4\u5927\u5c0f</li> <li>\u51b2\u7a81\uff1a\u4e0d\u540c\u5173\u952e\u7801\u6620\u5c04\u5230\u540c\u4e00\u6563\u5217\u5730\u5740\u3002</li> <li>\u540c\u4e49\u8bcd\uff1a\u51b2\u7a81\u7684\u5173\u952e\u7801\u4e92\u79f0\u540c\u4e49\u8bcd\u3002</li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA10_Search/#_7","title":"\u6563\u5217\u51fd\u6570\u6784\u9020","text":"<p>\u5148\u628a\u5173\u952e\u7801\u8f6c\u6362\u4e3a\u6574\u6570\u3002</p> <ul> <li> <p>\u9664\u4f59\u6cd5</p> <p>\\(h(x) = x\\ mod\\ M\\)</p> <p>M\u4e00\u822c\u9009\u62e9\u975e2\u7684\u7d20\u6570\u3002</p> <p>Drawbacks: Continuous keys will be mapped to Continuous addresses. This may lead to bad performance.</p> <p>\u6700\u4f73\u9664\u4f59\u9009\u62e9\uff1a\u5df2\u77e5\u5173\u952e\u7801\u5e8f\u5217\u957fM\uff0c\u8d1f\u8f7d\u56e0\u5b50a\uff0c\u5219\u6700\u4f73\u4f59\u6570d\u4e3a\u5c0f\u4e8e\u8868\u957fN=M/a\u7684\u6700\u5927\u7d20\u6570\u3002</p> <p>eg.   \u7ed9\u5b9a\u5173\u952e\u7801\u5e8f\u521726, 25, 20, 33, 21, 24, 45, 204, 42, 38, 29, 31\uff0c\u7528\u6563\u5217\u6cd5\u8fdb\u884c\u5b58\u50a8(\u672c\u9898\u91c7\u7528\u95ed\u6563\u5217\u65b9\u6cd5\u89e3\u51b3\u51b2\u7a81)\uff0c\u89c4\u5b9a\u8d1f\u8f7d\u56e0\u5b50\u03b1=0.6\u3002\u5219\u6700\u5408\u7406\u7684\u9664\u4f59\u6cd5\u7684\u6563\u5217\u51fd\u6570\uff1a\\(H(k) = k \\% 19\\)</p> </li> </ul> <ul> <li> <p>\u9664\u4f59\u53d6\u6574\u6cd5</p> <p>\\(h(x) = floor(n*((A*x)\\%1)\\)</p> <p>\\(0 &lt; A &lt; 1\\)</p> </li> </ul> <ul> <li> <p>\u5e73\u65b9\u53d6\u4e2d\u6cd5</p> <p>\u5e73\u65b9\u6269\u5927\u5dee\u522b\uff0c\u4e4b\u540e\u53d6\u5176\u4e2d\uff08\u4e8c\u8fdb\u5236\uff09\u7684\u51e0\u4f4d\u6570\u7684\u7ec4\u5408\u4f5c\u4e3a\u6563\u5217\u5730\u5740\u3002</p> <p>\u7edf\u8ba1\u4e0a\u6700\u63a5\u8fd1\u4e8e\u968f\u673a\u5316\u3002</p> </li> </ul> <ul> <li> <p>\u6570\u5b57\u5206\u6790\u6cd5</p> <p>\u9009\u53d6\u5173\u952e\u8bcd\u4e2d\u5206\u5e03\u5747\u5300\u7684\u51e0\u4f4d\u4f5c\u4e3a\u6563\u5217\u5730\u5740\u3002</p> <p>\u67d0\u4e00\u4f4d\u4e0a\u5404\u4e2a\u7b26\u53f7\u51fa\u73b0\u7684\u5747\u5300\u5ea6\u53ef\u4ee5\u7528\u65b9\u5dee\u8861\u91cf\uff0c\u9009\u53d6\u65b9\u5dee\u8f83\u5c0f\u7684\u51e0\u4f4d\u3002</p> <p>Drawbacks\uff1a\u9700\u8981\u4e8b\u5148\u77e5\u9053Key\u7684\u5206\u5e03\u3002</p> </li> </ul> <ul> <li>\u57fa\u6570\u8f6c\u6362\u6cd5</li> </ul> \\[ \\displaylines{   x_{(a)} \\rightarrow x_{(b)} = y_{(a)} } \\] <p>\u5176\u4e2da\uff0cb\u4e3a\u4e24\u4e2a\u4e92\u7d20\u7684\u57fa\u6570\uff0c\u4e00\u822c\u9009\u62e9b\u5927\u4e8ea\u3002</p> <p>\u9009\u53d6 y \u7684\u51e0\u4f4d\u4f5c\u4e3aaddress\u3002</p> <ul> <li> <p>\u6298\u53e0\u6cd5</p> <p>\u628akey\u5206\u4e3a\u4f4d\u6570\u76f8\u540c\u7684\u51e0\u5757\uff0c\u4e4b\u540e\u53e0\u52a0\u5206\u5757\u540e\u7684\u6570\u5b57\u3002\u4e00\u822c\u4e0d\u8fdb\u4f4d\u3002</p> <p>\u79fb\u4f4d\u53e0\u52a0: 12 34 56 -&gt; 12 + 34 + 56 = 92</p> <p>\u5206\u754c\u53e0\u52a0: 12 34 56 -&gt; 12 + 43 + 56 = 01</p> </li> </ul>"},{"location":"algorithm/basic/DA10_Search/#_8","title":"\u51b2\u7a81\u89e3\u51b3","text":"<p>\u51b2\u7a81\u4e0d\u53ef\u907f\u514d\u3002</p>"},{"location":"algorithm/basic/DA10_Search/#_9","title":"\u5f00\u6563\u5217\uff08\u62c9\u94fe\u6cd5\uff09","text":"<p>\u540c\u4e49\u8bcd\u5b58\u50a8\u5728\u540c\u4e00\u5730\u5740\u7684\u94fe\u8868\u4e2d\u3002</p> <p>\u8d1f\u8f7d\u56e0\u5b50\u53ef\u4ee5\u5927\u4e8e1\uff0c\u4f46\u4e00\u822c\u9009\u62e9\u5c0f\u4e8e\u7b49\u4e8e1\u3002</p> <ul> <li> <p>\u62c9\u94fe\u6cd5\uff08\u5185\u5b58\uff09</p> <p></p> <p>\u5b9e\u73b0\u7b80\u5355\uff0c\u6700\u4e3a\u5e38\u7528\u3002</p> </li> </ul> <ul> <li> <p>\u6876\u5f0f\u6563\u5217\uff08\u5916\u5b58\uff09</p> <p>\u51cf\u5c11\u68c0\u7d22\u540c\u4e49\u8bcd\u65f6\uff0c\u540c\u4e49\u8bcd\u5728\u4e0d\u540c\u9875\u5757\u65f6\u7684\u5916\u5b58\u8bbf\u95ee\u65f6\u95f4\u3002</p> <p>\u628a\u5916\u5b58\u4e2d\u7684\u8bb0\u5f55\u5206\u6876\u5b58\u653e\uff0c\u6bcf\u4e2a\u6876\u5305\u542b\u6307\u9488\u8fde\u63a5\u7684\u540c\u4e49\u8bcd\u9875\u5757\uff08\u5916\u5b58\uff09\uff0c\u6bcf\u4e2a\u9875\u5757\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u8bb0\u5f55\u3002</p> <p>\u6876\u76ee\u5f55\u672c\u8eab\u4e5f\u53ef\u4ee5\u653e\u5728\u5916\u5b58\u3002</p> </li> </ul>"},{"location":"algorithm/basic/DA10_Search/#_10","title":"\u95ed\u6563\u5217\uff08\u5f00\u5730\u5740\u6cd5\uff09","text":"<p>\u628a\u51b2\u7a81\u7684\u5173\u952e\u7801\u6839\u636e\u63a2\u67e5\u51fd\u6570\u540e\u79fb\u5230\u53e6\u4e00\u4e2a\u7a7a\u5730\u5740\u5185\u3002</p> <p>\u66f4\u52a0\u590d\u6742\uff0c\u975e\u540c\u4e49\u8bcd\u4e5f\u53ef\u80fd\u4e89\u593a\u540c\u4e00\u5730\u5740\uff08\u7ea0\u7f20\uff09\u3002</p> <p>\u57fa\u5730\u5740\uff1a\\(d_0 = h(K)\\)</p> <p>\u63a2\u67e5\u5e8f\u5217\uff1a\\(d_1, d_2, ...\\)</p> <p>\u63a2\u67e5\u51fd\u6570p\uff1a\\(d_i=d_0+p(K, i)\\)</p> <ul> <li> <p>\u7ebf\u6027\u63a2\u67e5</p> <p>\\(p(K, i) = i\\)</p> <p>\u63a2\u67e5\u5e8f\u5217\uff1a$ d_0+1, d_0+2, .., M, 0, 1, ..., d_0-1$</p> <ul> <li>\u4f18\u70b9\uff1a\u6240\u6709\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5019\u9009\u3002</li> </ul> <ul> <li>\u7f3a\u70b9\uff1a\u805a\u96c6\u73b0\u8c61\u4e25\u91cd\uff08\u6563\u5217\u5730\u5740\u4e0d\u540c\u7684\u8bb0\u5f55\u4e89\u593a\u540c\u4e00\u540e\u7ee7\u63a2\u67e5\u5730\u5740\uff09\u3002\u63a2\u67e5\u5e8f\u5217\u8fc7\u957f\uff0c\u5219\u63a5\u8fd1\u987a\u5e8f\u68c0\u7d22\u3002</li> </ul> <p>Example\uff1a</p> <p><code>(26,36,41,38,44,15,68,12,06,51,25)</code></p> <p><code>M = 15, h(x) = x % 13, p(x, i) = i</code></p> <p>\u751f\u6210\u7684\u6563\u5217\u8868\u4e3a\uff1a</p> <p></p> <p>\u4e0b\u4e00\u6761\u8bb0\u5f55\u88ab\u653e\u523011\u4e2d\u7684\u6982\u7387\uff1a2/13 \uff0810\uff0c 11\uff09</p> <p>\u200b \u6ce8\u610f\u63d2\u5165\u53ea\u4f1a\u6620\u5c04\u5230\u524d13\u4e2a\u69fd\uff0c\u5206\u6bcd\u4e0d\u662fM\u3002</p> <p>\u4e0b\u4e00\u6761\u8bb0\u5f55\u88ab\u653e\u52307\u4e2d\u7684\u6982\u7387\uff1a9/13 \uff080~7\uff0c12\uff09</p> </li> </ul> \\[ \\displaylines{   ASL_{succ} = \\frac 1 {11} (1+5+1+2+2+1+1+1+1+2+3) = 20/11 \\\\   ASL_{fail} = \\frac 1 {13} (8+7+6+5+4+3+2+1+1+1+2+1+11) = 4 } \\] <p>\u200b \u6539\u8fdb\uff1a<code>p(K, i)=i*c</code>\uff08\u4ecd\u7136\u4f1a\u7ea0\u7f20\uff09</p> <p>\u200b   </p> <p>* \u4e8c\u6b21\u63a2\u67e5</p> \\[ \\displaylines{     p(K, 2i-1) = i^2 \\\\     p(K, 2i) = -i^2  } \\] <pre><code>\u57fa\u672c\u6d88\u9664\u805a\u96c6\u3002\n</code></pre> <p>* \u4f2a\u968f\u673a\u6570\u5e8f\u5217\u63a2\u67e5</p> \\[ \\displaylines{     p(K, i) = perm[i-1] } \\] <pre><code>perm\u4e3a[1, M-1]\u7684\u4f2a\u968f\u673a\u5e8f\u5217\u3002\n\n**\u57fa\u672c\u6d88\u9664\u805a\u96c6\u3002**\n</code></pre> <p>* \u53cc\u6563\u5217\u63a2\u67e5</p> <pre><code>\u57fa\u672c\u805a\u96c6\uff08\u5df2\u89e3\u51b3\uff09\uff1a\u57fa\u5730\u5740\u4e0d\u540c\u7684\u5173\u952e\u7801\uff0c\u63a2\u67e5\u5e8f\u5217\u67d0\u4e9b\u6bb5\u91cd\u53e0\u5728\u4e00\u8d77\u3002\n\n**\u4e8c\u7ea7\u805a\u96c6**\uff1a\u4e24\u4e2a\u5173\u952e\u7801\u6563\u5217\u5230\u540c\u4e00\u4e2a\u57fa\u5730\u5740\uff0c\u5f97\u5230\u7684\u63a2\u67e5\u5e8f\u5217\u76f8\u540c\u6240\u4ea7\u751f\u7684\u805a\u96c6\u3002\n\n\uff08\u4e8c\u6b21\u805a\u96c6\u7684\u539f\u56e0\uff1a\u4e4b\u524d\u7684\u4e09\u79cd\u65b9\u6cd5\u5f97\u5230\u7684\u63a2\u67e5\u5e8f\u5217\u53ea\u662f\u57fa\u5730\u5740\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u5173\u952e\u7801\u7684\u51fd\u6570\uff09\n\n**\u53cc\u6563\u5217\u63a2\u67e5**\uff1a\u4f7f\u7528\u4e24\u4e2a\u6563\u5217\u51fd\u6570$h1, h2$\uff0c\u5982\u679c$h1(key) = d$ \u51b2\u7a81\uff0c\u5219\u8ba1\u7b97$h2(key)$\uff0c\u6839\u636e\u8fd9\u4e2a\u503c\u8ba1\u7b97\u63a2\u67e5\u5e8f\u5217$(d + k * h2(key)) \\% M $ \u3002\n\n$h2(key)$\u5fc5\u987b\u4e0eM\u4e92\u7d20\u3002\n</code></pre> \\[ \\displaylines{ d = h_1(key) \\\\ d_i = (d + p(key, i)) \\% M \\\\ p(key, i) = i*h_2(key) } \\] <ul> <li> <p>Implementation: Dictionary</p> <pre><code>Elem* HT;\nint M;\nint current;\nElem EMPTY;\nElem TOMB;\nElem temp;\n\nbool hashInsert(const Elem&amp; e){\n    int home = h(getkey(e));\n    int i = 0, pos = home;\n    while(HT[pos] != EMPTY){\n        if(e == HT[pos]) return false; // e exists \n        i++;\n        pos = (home + p(getkey(e), i)) % M;\n    }\n    HT[pos] = e;\n    return true;\n}\n\nbool hashSearch(const Key&amp; K, Elem&amp; e){\n    int i=0, pos = home = h(K);\n    while(HT[pos] != EMPTY){\n        if(K == getkey(HT[pos])){\n            e = HT[pos];\n            return true;\n        }\n        i++;\n        pos = (home + p(K, i)) % M;\n    }\n    return false;\n}\n\n// delete is difficult\n// \u53ea\u6709\u5f00\u6563\u5217\u624d\u80fd\u771f\u6b63\u5220\u9664\u3002\u95ed\u6563\u5217\u53ea\u80fd\u505a\u6807\u8bb0\uff0c\u4ee5\u514d\u5f71\u54cd\u540e\u7eed\u68c0\u7d22\u7684\u6b63\u786e\u6027\u3002\nElem hashDelete(const Key&amp; K){\n    int i=0, pos = home = h(K);\n    while(HT[pos] != EMPTY){\n        if(K == getkey(HT[pos])){\n            temp = HT[pos];\n            HT[pos] = TOMB;\n            return temp;\n        }\n        i++;\n        pos = (home + p(K, i)) % M;\n    }\n    return EMPTY;\n}\n\n// modified tomb insert \n// \u6709\u5893\u7891\u5148\u63d2\u5165\u5893\u7891\uff0c\u4f46\u7531\u4e8e\u8981\u907f\u514d\u63d2\u5165\u4e24\u4e2a\u76f8\u540c\u7684\u5143\u7d20\uff0c\u68c0\u7d22\u8fc7\u7a0b\u4ecd\u7136\u8981\u68c0\u7d22\u5b8c\u5168\uff08\u6392\u9664e exists\u7684\u60c5\u51b5\uff09\nbool hashInsert(const Elem&amp; e){\n    int home = h(getkey(e));\n    int i = 0, pos = home;\n    int insplace;\n    bool tomb = false;\n    while(HT[pos] != EMPTY){\n        if(e == HT[pos]) return false; // e exists \n        else if(TOMB == HT[pos] &amp;&amp; !tomb){\n            insplace = pos;\n            tomb = true;\n        }\n        i++;\n        pos = (home + p(getkey(e), i)) % M;\n    }\n    if(!tomb) insplace = pos;\n    HT[pos] = e;\n    return true;\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/basic/DA10_Search/#_11","title":"\u6548\u7387\u5206\u6790","text":"<p>\u7ecf\u9a8c\u8868\u660e\uff0c\u8d1f\u8f7d\u56e0\u5b50alpha\u5c0f\u4e8e0.5\u65f6\uff0c\u5927\u90e8\u5206\u64cd\u4f5c\u9884\u671f\u4ee3\u4ef7\u5747\u5c0f\u4e8e2\uff0c\u8fdc\u6bd4\u4e8c\u5206\u68c0\u7d22\u4f18\u79c0\uff0c\u4f46\u662falpha\u5927\u4e8e0.5\u65f6\u6027\u80fd\u6025\u5267\u4e0b\u964d\u3002</p> <p>\u63d2\u5165\u4e0e\u5220\u9664\u9891\u7e41\u7684\u6563\u5217\u8868\u6548\u7387\u4f1a\u964d\u4f4e\uff08\u8d1f\u8f7d\u56e0\u5b50\u589e\u5927\uff0c\u540c\u4e49\u8bcd\u8868\u53d8\u957f\uff0c\u5893\u7891\u53d8\u591a\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u671f\u91cd\u65b0\u6563\u5217\u6765\u89e3\u51b3\uff08\u6e05\u9664\u5893\u7891\uff0c\u628a\u8bbf\u95ee\u6700\u9891\u7e41\u7684\u8bb0\u5f55\u5411\u524d\u79fb\u52a8\u5230\u57fa\u5730\u5740\uff09</p>"},{"location":"algorithm/basic/DA10_Search/#exercises","title":"Exercises","text":"\\[ \\displaylines{ ASL = 0.6*1 + 0.4*(0.6*2+0.4*(0.6*3+...)) = (1-a)\\sum_i^{N}(i*a^i) } \\]"},{"location":"algorithm/basic/DA11_Index/","title":"Index","text":"<p>\u7d22\u5f15\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u9ad8\u6548\u68c0\u7d22&amp;\u52a8\u6001\u8c03\u6574\uff08\u6570\u636e\u5e93\u6280\u672f\uff09\u3002</p> <ul> <li>\u4e3b\u7801\uff08Primary Key\uff09\uff1a\u6bcf\u6761\u8bb0\u5f55\u7684\u552f\u4e00\u6807\u8bc6\u3002</li> </ul> <ul> <li>\u8f85\u7801\uff1a\u53ef\u91cd\u590d\u7684\u5c5e\u6027</li> </ul> <ul> <li> <p>\u7d22\u5f15\uff1a\u628a\u5173\u952e\u7801\u4e0e\u5b83\u5bf9\u5e94\u7684\u8bb0\u5f55\u672a\u77e5\u5173\u8054\u8d77\u6765\u7684\u8fc7\u7a0b\uff08\u5173\u952e\u7801\uff0c\u6307\u9488\uff09</p> <ul> <li> <p>\u7a20\u5bc6\u7d22\u5f15\uff1a\u6bcf\u4e2a\u8bb0\u5f55\u5efa\u7acb\u4e00\u4e2a\u7d22\u5f15\u9879\u3002</p> <p>\u4e3b\u6587\u4ef6\u65e0\u9700\u6309\u7167\u5173\u952e\u7801\u6392\u5e8f\u3002</p> </li> </ul> <ul> <li> <p>\u7a00\u758f\u7d22\u5f15\uff1a\u4e00\u7ec4\u8bb0\u5f55\u5efa\u7acb\u4e00\u4e2a\u7d22\u5f15\u9879\u3002</p> <p>\u4e3b\u6587\u4ef6\u5fc5\u987b\u6309\u7167\u5173\u952e\u7801\u6b21\u5e8f\u5b58\u653e\u3002</p> <p>\u53ef\u4ee5\u628a\u8bb0\u5f55\u5206\u5757\uff0c\u7d22\u5f15\u6307\u9488\u6307\u5411\u6bcf\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002</p> </li> </ul> </li> </ul> <ul> <li>\u7d22\u5f15\u6587\u4ef6\uff1a\u8bb0\u5f55\u8fd9\u79cd\u8054\u7cfb\u7684\u6587\u4ef6\u3002</li> </ul> <ul> <li> <p>\u4e3b\u6587\u4ef6\uff1a\u539f\u59cb\u6570\u636e\u8bb0\u5f55</p> <p>\u4e00\u4e2a\u4e3b\u6587\u4ef6\u53ef\u80fd\u6709\u591a\u4e2a\u76f8\u5173\u7d22\u5f15\u6587\u4ef6\uff0c\u6bcf\u4e2a\u7d22\u5f15\u6587\u4ef6\u652f\u6301\u4e00\u4e2a\u7d22\u5f15\u5b57\u6bb5\u3002</p> </li> </ul>"},{"location":"algorithm/basic/DA11_Index/#_1","title":"\u7ebf\u6027\u68c0\u7d22","text":"<p>\u6309\u7167\u7d22\u5f15\u7801\u503c\u7684\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\u7684\u6587\u4ef6\u3002</p> <ul> <li> <p>\u7279\u70b9</p> <p>\u53ef\u4ee5\u8bbf\u95ee\u53d8\u957f\u6570\u636e\u5e93\u8bb0\u5f55\uff0c\u652f\u6301\u9ad8\u6548\u4e8c\u5206\u68c0\u7d22\u3002</p> <p>\u4f53\u79ef\u592a\u5927\uff0c\u53ea\u80fd\u5b58\u50a8\u5728\u78c1\u76d8\u4e2d\uff0c\u5f71\u54cd\u6548\u7387\u3002</p> </li> </ul> <ul> <li> <p>\u4e8c\u7ea7\u7ebf\u6027\u7d22\u5f15</p> <p>\u4e00\u4e2a\u78c1\u76d8\u53ef\u4ee5\u5b58\u653eM\u4e2a\u8bb0\u5f55\u3002</p> <p>\u539f\u59cb\u6570\u636e\u6709N\u4e2a\u8bb0\u5f55\uff0c\u4e00\u7ea7\u7d22\u5f15\u4e5f\u6709N\u4e2a\u8bb0\u5f55\uff0c\u5219\u4e00\u7ea7\u7d22\u5f15\u5360\u7528\\(N/M\\)\u4e2a\u78c1\u76d8\u5757\u3002</p> <p>\u518d\u5bf9\u4e00\u7ea7\u7d22\u5f15\u6309\u7167\u78c1\u76d8\u5757\u5efa\u7acb\u4e8c\u7ea7\u7d22\u5f15\uff0c\u53ea\u9700\u8981\\(N/M^2\\)\u4e2a\u78c1\u76d8\u5757\u3002</p> <p>\u6bcf\u4e2a\u4e8c\u7ea7\u7d22\u5f15\u5b58\u653e\u5bf9\u5e94\u7684\u4e00\u7ea7\u7d22\u5f15\u5757\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7d22\u5f15\u3002</p> <p>\u68c0\u7d22\u8fc7\u7a0b\u4f7f\u7528\u4e24\u6b21\u4e8c\u5206\u641c\u7d22\u5373\u53ef\u3002</p> </li> </ul> <ul> <li>\u5047\u5b9a\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u67094096\u5b57\u8282\u7684\u78c1\u76d8\u5757\uff0c\u6bcf\u4e2a\u78c1\u76d8\u7684\u78c1\u76d8\u53f7\u53ef\u4ee5\u7528\u4e00\u4e2a4\u5b57\u8282\u7684\u6574\u6570\u8868\u793a\u3002\u8981\u5b58\u50a8\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u4e2d4\u4e2a\u5b57\u8282\u662f\u5173\u952e\u7801\uff0c64\u4e2a\u5b57\u8282\u662f\u6570\u636e\u5b57\u6bb5\u3002\u8bb0\u5f55\u5df2\u7ecf\u6392\u5e8f\uff0c\u987a\u5e8f\u5730\u5b58\u50a8\u5728\u78c1\u76d8\u6587\u4ef6\u4e2d\u3002\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u7a20\u5bc6\u7d22\u5f15\uff0c\u8be5\u7ebf\u6027\u7d22\u5f15\u7684\u7ed3\u6784\u4e3a\uff1a\uff08\u6bcf\u4e2a\u6587\u4ef6\u78c1\u76d8\u5757\u7684\u6700\u5c0f\u5173\u952e\u7801\uff0c\u8be5\u5757\u78c1\u76d8\u7684\u78c1\u76d8\u53f7\uff09\uff0c\u901a\u8fc7\u7ebf\u6027\u7d22\u5f15\u8bbf\u95ee\u78c1\u76d8\u6587\u4ef6\u4e2d\u7684\u8bb0\u5f55\u3002</li> </ul> <ul> <li> <p>\u5982\u679c\u7ebf\u6027\u7d22\u5f15\u7684\u5927\u5c0f\u662f2MB\u3002\u6700\u591a\u53ef\u4ee5\u5728\u78c1\u76d8\u6587\u4ef6\u4e2d\u5b58\u50a8 15M \u6761\u8bb0\u5f55\u3002</p> <p>2MB/8B * (4096B/68B) = 0.25M * 60 = 15M</p> </li> </ul> <ul> <li> <p>\u5982\u679c\u7ebf\u6027\u7d22\u5f15\u4e5f\u5b58\u50a8\u5728\u78c1\u76d8\u4e2d\uff08\u8fd9\u6837\u5b83\u7684\u5927\u5c0f\u4ec5\u53d7\u4e8c\u7ea7\u7d22\u5f15\u7684\u9650\u5236\uff09\uff0c\u800c\u4e14\u4f7f\u75284096\u4e2a\u5b57\u8282\u7684\u4e8c\u7ea7\u7d22\u5f15\uff0c\u4e8c\u7ea7\u7d22\u5f15\u4e2d\u7684\u6bcf\u4e2a\u5355\u5143\u5f15\u7528\u7ebf\u6027\u7d22\u5f15\u7684\u78c1\u76d8\u5757\u4e2d\u6700\u5c0f\u7684\u5173\u952e\u7801\u503c\u3002\u6587\u4ef6\u4e2d\u6700\u591a\u53ef\u4ee5\u5b58\u50a8 15M \u6761\u8bb0\u5f55\u3002</p> <p>4096/8 (\u4e8c\u7ea7\u7d22\u5f15\u4e2a\u6570) * 4096/8 (\u6bcf\u4e2a\u4e8c\u7ea7\u7d22\u5f15\u6307\u5411\u4e00\u4e2a\u5b58\u4e00\u7ea7\u7d22\u5f15\u7684\u5757\uff0c\u6bcf\u4e2a\u5757\u4e2d\u4e00\u7ea7\u7d22\u5f15\u7684\u4e2a\u6570) * 4096/68 (\u6bcf\u4e2a\u4e00\u7ea7\u7d22\u5f15\u6307\u5411\u4e00\u4e2a\u5757\uff0c\u6bcf\u4e2a\u5757\u5b58\u653e\u8bb0\u5f55\u7684\u4e2a\u6570) = 2^18 * 60 = 15M</p> </li> </ul>"},{"location":"algorithm/basic/DA11_Index/#deprecated","title":"\u9759\u6001\u68c0\u7d22(Deprecated)","text":"<p>\u6587\u4ef6\u521b\u5efa\u5b8c\u6210\u65f6\u7d22\u5f15\u5c31\u4e0d\u80fd\u518d\u88ab\u4fee\u6539\u4e86\u3002</p> <p>\u51e0\u4e4e\u6ca1\u6709\u63d2\u5165/\u5220\u9664\uff0c\u6216\u8005\u5141\u8bb8\u5b9a\u671f\u91cd\u65b0\u7ec4\u7ec7\u7ed3\u6784\u7684\u8bdd\uff0c\u6548\u7387\u8fd8\u662f\u5f88\u9ad8\u7684\u3002</p>"},{"location":"algorithm/basic/DA11_Index/#_2","title":"\u5012\u6392\u68c0\u7d22","text":"<p>\u7531\u5c5e\u6027\u503c\u6765\u786e\u5b9a\u8bb0\u5f55\u7684\u4f4d\u7f6e\uff0c\u79f0\u4e3a\u5012\u6392\u68c0\u7d22\uff08\u57fa\u4e8e\u5c5e\u6027/\u57fa\u4e8e\u6b63\u6587\uff09\u3002</p> <ul> <li> <p>\u57fa\u4e8e\u5c5e\u6027\u7684\u5012\u6392</p> <p>\u5012\u6392\u8868\uff1a<code>(attr, ptrList)</code></p> <p>\u200b \u5c5e\u6027\uff08\u4e0d\u552f\u4e00\uff09 <code>--&gt;</code> \u82e5\u5e72\u8bb0\u5f55\u6307\u9488\uff08\u552f\u4e00\uff0c\u5982\u5173\u952e\u7801\u6216\u4e3b\u6587\u4ef6\u5730\u5740\uff09</p> <p>\u200b \u53ef\u4ee5\u5bf9\u4e0d\u540c\u5c5e\u6027\u5efa\u7acb\u591a\u4e2a\u5012\u6392\u8868\u3002</p> <p>\u4f18\u70b9\uff1a\u57fa\u4e8e\u5c5e\u6027\u7684\u9ad8\u6548\u68c0\u7d22\u3002</p> <p>\u7f3a\u70b9\uff1a\u5012\u6392\u8868\u7a7a\u95f4\u4ee3\u4ef7\uff0c\u66f4\u65b0\u8fd0\u7b97\u6548\u7387\u964d\u4f4e\u3002</p> </li> </ul> <ul> <li> <p>\u5bf9\u6b63\u6587\u6587\u4ef6\u7684\u5012\u6392</p> <p>\u652f\u6301\u6587\u672c\u5185\u5bb9\u7684\u5feb\u901f\u68c0\u7d22</p> <ul> <li> <p>\u8bcd\u7d22\u5f15</p> <p>\u63d0\u53d6\u5173\u952e\u8bcd\uff08\u8fc7\u6ee4\u505c\u7528\u8bcd\uff09\uff0c\u5bf9\u5173\u952e\u8bcd\u5efa\u7acb\u5012\u6392\u8868\uff1a</p> <p><code>(keyword, [(text, position), ...])</code></p> <p>\u68c0\u7d22\u65f6\uff0c\u9996\u5148\u68c0\u7d22\u5173\u952e\u8bcd\uff0c\u4e4b\u540e\u63d0\u53d6\u5173\u952e\u8bcd\u5bf9\u5e94\u7684\u8bb0\u5f55\u6307\u9488\u5217\u8868\uff0c\u83b7\u53d6\u8bb0\u5f55\u3002</p> <p>\u901a\u5e38\u7528\u53e6\u4e00\u4e2a\u7d22\u5f15\u7ed3\u6784\u5bf9\u5173\u952e\u8bcd\u8fdb\u884c\u68c0\u7d22\uff0c\u5982Trie\u56fe\uff0c\u6563\u5217\u3002</p> </li> </ul> <ul> <li>\u5168\u6587\u7d22\u5f15</li> </ul> <p>\u4f18\u70b9\uff1a\u9ad8\u6548\u68c0\u7d22\u6587\u672c\u6570\u636e\u5e93\u3002</p> <p>\u7f3a\u70b9\uff1a\u652f\u6301\u7684\u68c0\u7d22\u7c7b\u578b\u6709\u9650\uff0c\u68c0\u7d22\u8bcd\u6709\u9650\uff0c\u7a7a\u95f4\u4ee3\u4ef7\u6781\u9ad8\u3002</p> </li> </ul>"},{"location":"algorithm/basic/DA11_Index/#_3","title":"\u52a8\u6001\u68c0\u7d22","text":"<p>\u52a8\u6001\u66f4\u65b0\u5220\u9664\uff0c\u5e76\u4fdd\u6301\u6700\u4f73\u68c0\u7d22\u6027\u80fd\u3002</p>"},{"location":"algorithm/basic/DA11_Index/#b","title":"B\u6811","text":"<ul> <li> <p>\u5b9a\u4e49</p> <p>m\u9636B\u6811\u4e3am\u8def\u5e73\u8861\u67e5\u627e\u6811\uff0c\u6216\u8005\u4e3a\u7a7a\uff0c\u6216\u8005\uff1a</p> <ul> <li>\u6bcf\u4e2a\u8282\u70b9\u81f3\u591am\u4e2a\u5b50\u6811\uff08m-1\u4e2a\u5173\u952e\u7801\uff09</li> <li>\u6839\u8282\u70b9\u81f3\u5c112\u4e2a\u5b50\u6811\uff0c\u5176\u4ed6\u975e\u53f6\u8282\u70b9\u81f3\u5c11<code>ceil(m/2)</code>\u4e2a\u5b50\u6811\u3002</li> </ul> </li> </ul> <ul> <li> <p>**\u8282\u70b9\u7684\u4e00\u822c\u5f62\u6001  **</p> <p>\u6bcf\u4e2a\u8282\u70b9\u90fd\u5b58\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u78c1\u76d8\u5757\u4e2d\uff0c\u6240\u4ee5\u6bcf\u8bfb\u5165\u4e00\u4e2a\u8282\u70b9\u9700\u8981\u78c1\u76d8IO\u4e00\u6b21\u3002</p> <pre><code>[ P0 K1 P1 K2 P2 ... P(j-1) Kj Pj ]\n</code></pre> <p>\u5305\u542bj\u4e2a\u9012\u589e\u5173\u952e\u7801K\uff0cj+1\u4e2a\u6307\u5411\u4e24\u4e2a\u5173\u952e\u7801\u4e4b\u95f4\u7684\u5b50\u8282\u70b9\u7684\u6307\u9488\u3002</p> <p>\u6ce8\u610f\u5173\u952e\u7801\u4ece1\u5f00\u59cb\u7f16\u53f7\u3002</p> </li> </ul> <ul> <li> <p>\u6027\u8d28</p> <ul> <li>\u6709k\u4e2a\u5b50\u6811\uff08\u6307\u9488P\uff09\u7684\u8282\u70b9\u6709k-1\u4e2a\u5173\u952e\u7801K</li> <li>\u6811\u9ad8\u5e73\u8861\uff0c\u53f6\u8282\u70b9\u4f4d\u4e8e\u540c\u4e00\u5c42\uff0c\u5173\u952e\u7801\u4e0d\u91cd\u590d</li> <li>\u7236\u8282\u70b9\u5173\u952e\u7801\u662f\u5b50\u8282\u70b9\u7684\u5206\u754c</li> <li>\u8bbf\u95ee\u5c40\u90e8\u6027\u539f\u7406\uff1a\u503c\u76f8\u8fd1\u7684\u8bb0\u5f55\u653e\u5728\u76f8\u8fd1\u7684\u78c1\u76d8\u9875\u4e2d\u3002</li> <li>\u8282\u70b9\u5173\u952e\u7801\u81f3\u5c11\u4e00\u5b9a\u6bd4\u4f8b\u662f\u6ee1\u7684\uff08\u4fdd\u6301\u6548\u7387\uff09</li> </ul> </li> </ul> <ul> <li> <p>\u67e5\u627e</p> <ul> <li> <p>\u4e24\u6b65\u4ea4\u66ff</p> <ul> <li>\u8bfb\u53d6\u6839\u8282\u70b9\uff0c\u5728\u5176K\u4e2a\u5173\u952e\u7801\u4e2d\u68c0\u7d22\u76ee\u6807\u5173\u952e\u7801T\u3002\u627e\u5230\u5219\u68c0\u7d22\u7ed3\u675f\u3002</li> <li>\u5426\u5219\uff0cT\u843d\u5728\u4e24\u4e2aK\u4e4b\u95f4\uff0c\u53d6\u5bf9\u5e94\u7684P\u5b50\u6811\u7ee7\u7eed\u68c0\u7d22\u3002\u5982\u679cP\u4e3a\u7a7a\u6307\u9488\uff0c\u68c0\u7d22\u5931\u8d25\u3002</li> </ul> </li> </ul> <ul> <li> <p>\u68c0\u7d22\u957f\u5ea6</p> <p>H\u4e3a\u6811\u9ad8\uff0c\u5219\u6700\u591aH\u6b21\u8bfb\u76d8\u4e0a\u7684\u8282\u70b9\u3002</p> <p>\u8003\u8651\u627e\u5230\u540e\u8981\u518d\u8bfb\u53d6\u4e3b\u6570\u636e\uff0c\u5219\u6700\u591a\u9700\u8981\u8bbf\u5916H+1\u6b21\u3002</p> </li> </ul> </li> </ul> <ul> <li> <p>\u63d2\u5165</p> <p>\u4fdd\u6301\u7b49\u9ad8\uff08\u5c3d\u91cf\uff09\u3001\u7b49\u9636\u7684\u6027\u8d28\u3002</p> <p>\u627e\u5230\u6700\u5e95\u5c42\u5408\u9002\u4f4d\u7f6e\u63d2\u5165\uff0c\u6ea2\u51fa\u5219\u8282\u70b9\u5206\u88c2\u4e3a\u5de6\u53f3\u4e24\u4e2a\u8282\u70b9\uff0c\u4e2d\u95f4\u5173\u952e\u7801\u8fde\u540c\u65b0\u6307\u9488\u63d0\u5347\u8fdb\u5165\u7236\u8282\u70b9\uff0c\u76f4\u5230\u4e0d\u6ea2\u51fa\uff08\u6839\u8282\u70b9\u4e5f\u6ea2\u51fa\u65f6\uff0c\u6811\u9ad8\u589e\u52a0\u4e00\u5c42\uff09\u3002</p> <p>\u8282\u70b9\u5206\u88c2\uff1a\u63d2\u5165\u540e\u82e5\u8282\u70b9\u6570\u4e3am\uff08\u6ea2\u51fa\uff09\uff0c\u5219</p> <pre><code>[K1 K2 ... Km] -&gt; [K1 ... K(ceil(m/2)-1)] + \n                [K(ceil(m/2))] + \n                [K(ceil(m/2)+1) ... Km]\n</code></pre> <p>\u67e5\u627e\uff1a\u5931\u8d25\u9700\u8981\u8bfb\u76d8H\u6b21\u3002</p> <p>\u63d2\u5165\uff1a\u4e0d\u5206\u88c2\u9700\u89811\u6b21\u5199\u76d8\uff0c\u5206\u88c2\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u9700\u89813\u6b21\u5199\u76d8\uff0c\u5206\u88c2\u4e2d\u95f4\u7684\u8282\u70b9\u9700\u89812\u6b21\u5199\u76d8\u3002</p> <p>\u6545\u63d2\u5165\u6700\u591aIO\u6b21\u6570\u4e3a\uff1a\\(H+3+(H-1)*2 = 3H+1\\)</p> </li> </ul> <ul> <li> <p>\u5220\u9664</p> <ul> <li> <p>\u53f6\u8282\u70b9</p> <ul> <li>\u5220\u9664\u540e\u8282\u70b9\u6570\u4e0d\u5c0f\u4e8eceil(m/2)-1\uff1a\u76f4\u63a5\u5220\u9664</li> </ul> <ul> <li> <p>\u5220\u9664\u540e\u8282\u70b9\u6570\u5c0f\u4e8eceil(m/2)-1</p> <ul> <li> <p>\u76f8\u90bb\u5144\u5f1f\u8282\u70b9\u5173\u952e\u7801\u5927\u4e8eceil(m/2)-1</p> <p>\u501f\u82e5\u5e72\u5173\u952e\u7801\uff0c\u8c03\u6574\u7236\u8282\u70b9\uff08\u5b9e\u9645\u7ed3\u679c\u662f\u628a\u7236\u8282\u70b9\u5206\u754c\u62c9\u4e0b\u6765\uff0c\u5144\u5f1f\u7684\u63a8\u4e0a\u53bb\uff09</p> </li> </ul> <ul> <li> <p>\u76f8\u90bb\u5144\u5f1f\u8282\u70b9\u5173\u952e\u7801\u7b49\u4e8eceil(m/2)-1</p> <p>\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\uff0c\u5e76\u628a\u7236\u8282\u70b9\u5206\u754c\u62c9\u4e0b\u6765\uff08\u6709\u53ef\u80fd\u4f7f\u6811\u9ad8\u51cf\u4e00\uff09</p> </li> </ul> </li> </ul> </li> </ul> <pre><code>## rank = 3\n# ====== init ======\n        [55,65]\n      /    |    \\\n   [47] [60,62] [78]\n# ====== delete 78 ====== (borrow from brother)\n        [55,62]\n      /    |    \\\n   [47]   [60]   [65]\n</code></pre> <ul> <li> <p>\u975e\u53f6\u8282\u70b9</p> <p>\u628a\u6b64\u5173\u952e\u7801\u4e0e\u540e\u7ee7\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6210\u4e3a\u53f6\u8282\u70b9\u518d\u5220\u9664\u3002</p> </li> </ul> </li> </ul> <ul> <li> <p>\u6027\u80fd\u5206\u6790</p> <p>\u5171\u6709N\u4e2a\u5173\u952e\u7801\u7684B\u6811\u6709N+1\u4e2a\u53f6\u8282\u70b9\uff08\u5916\u90e8\u7a7a\u6307\u9488\uff09\u3002</p> <p>\u8bc1\u660e\uff1a\u8bbe\u6709l\u4e2a\u7a7a\u6307\u9488\uff0cn\u4e2a\u8282\u70b9\uff0c\u7b2ci\u8282\u70b9\u6709x_i\u4e2a\u5173\u952e\u7801\uff0cx\u603b\u548c\u5373\u5173\u952e\u7801\u603b\u6570N\uff0c\u5219\u8fb9\u7684\u603b\u6570m\u4e3a\uff1a</p> </li> </ul> \\[ \\displaylines{   m = l + m' = l + n - 1 = \\sum_{i=1}^n(x_i + 1) = N + n } \\] <p>\u8bbe\u6811m\u9636k\u5c42\uff08\u6839\u8282\u70b9\u5728\u7b2c0\u5c42\uff09\uff0c\u5219\u901a\u8fc7\u53e6\u4e00\u79cd\u65b9\u6cd5\u8ba1\u7b97\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u6570\uff0c</p> <p>\u6700\u5927\u9ad8\u5ea6\u516c\u5f0f\uff1a\uff08\u4e5f\u662f\u6700\u5927\u68c0\u7d22\u6b21\u6570\uff09</p> \\[ \\displaylines{   N+1 \\ge 2*\\lceil \\frac m 2 \\rceil^{k-1} \\\\   k \\le 1 + log_{\\lceil m/2 \\rceil}(\\frac {N+1} 2) \\\\ } \\] <p>\u6700\u5c0f\u9ad8\u5ea6\u516c\u5f0f\uff1a</p> \\[ \\displaylines{   N+1 \\le m^k \\\\   k\\ge log_m(N+1) } \\] <p>\u8bbep\u4e3a\u5185\u90e8\u8282\u70b9\u6570\uff0cs\u4e3a\u6bcf\u63d2\u5165\u4e00\u4e2a\u5173\u952e\u7801\u7684\u5e73\u5747\u5206\u88c2\u8282\u70b9\u6570\uff1a</p> \\[ \\displaylines{   s = \\frac{p-1}{N-1} \\le \\frac 1 {\\lceil m/2 \\rceil - 1} } \\] <ul> <li>\u9ad8\u5ea6\u4e3a2\u76845\u9636B\u6811\uff0c\u6240\u542b\u5173\u952e\u5b57\u7684\u4e2a\u6570\u6700\u5c11\u662f5\u3002</li> </ul> <p>\u7b2c\u4e00\u5c42\u6700\u591a\u67094\u4e2a\u5173\u952e\u5b57\uff0c\u63d2\u5165\u7b2c\u4e94\u4e2a\u540e\u5206\u88c2\u4e3a\u4e24\u5c42\u3002</p> <ul> <li>B\u6811\u4e0d\u652f\u6301\u987a\u5e8f\u67e5\u627e\u3002B+\u6811\u652f\u6301\u987a\u5e8f\u67e5\u627e\u3002</li> </ul> <p>B+\u6709\u94fe\u8868\uff0c\u4f46B\u6811\u6ca1\u6709\u8fd9\u79cd\u65b9\u4fbf\u7684\u7ed3\u6784\u3002</p> <ul> <li>3\u9636B\u6811\u542b2047\u4e2a\u5173\u952e\u5b57\uff0c\u5219\u6700\u9ad811\u5c42\uff0c\u6700\u77ee7\u5c42\u3002</li> </ul> <p>\u82e5\u8003\u8651\u53f6\u8282\u70b9\u4e5f\u662f\u4e00\u5c42\uff0c\u5219\u6700\u9ad812\u5c42\u3002</p>"},{"location":"algorithm/basic/DA11_Index/#b_1","title":"B+\u6811","text":"<p>B\u6811\u53d8\u4f53\uff0c\u53ea\u5728\u53f6\u8282\u70b9\u5b58\u50a8\u4fe1\u606f\u3002</p> <p>MySQL\u7d22\u5f15\u91c7\u7528\u7684\u5c31\u662fB+\u6811\u3002</p> <ul> <li> <p>\u5b9a\u4e49</p> <p>m\u9636B+\u6811\u6216\u8005\u4e3a\u7a7a\uff0c\u6216\u8005\uff1a</p> <ul> <li>\u6bcf\u4e2a\u8282\u70b9\u81f3\u591am\u4e2a\u5b50\u8282\u70b9</li> <li>\u6839\u8282\u70b9\u81f3\u5c112\u4e2a\u5b50\u8282\u70b9\uff0c\u975e\u6839\u8282\u70b9\u81f3\u5c11<code>ceil(m/2)</code>\u4e2a\u5b50\u8282\u70b9\uff0c</li> </ul> </li> </ul> <ul> <li> <p>\u6027\u8d28</p> <ul> <li> <p>\u6709k\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9\u6709k\u4e2a\u5173\u952e\u7801\uff08\u4ece1\u5f00\u59cb\u7f16\u53f7\uff01\uff09</p> <pre><code>[K1 P1 ... Km Pm]\n</code></pre> <p>\u6bcf\u4e2aPi\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u5bf9\u5e94\u7684Ki\u4e3a\u5b50\u8282\u70b9\u4e2d\u5173\u952e\u7801\u7684\u6700\u5927\u503c\uff08\u6216\u6700\u5c0f\u503c\uff09\u3002</p> </li> </ul> <ul> <li>\u53f6\u8282\u70b9\u4e00\u822c\u7528\u53cc\u94fe\u8868\u8fde\u63a5\u8d77\u6765</li> </ul> </li> </ul> <ul> <li> <p>\u67e5\u627e</p> <p>\u8bfb\u53d6\u6839\u8282\u70b9\uff0c\u4e8c\u5206\u68c0\u7d22\u8303\u56f4\uff0c\u53d6\u5bf9\u5e94\u5b50\u6811\u7ee7\u7eed\u67e5\u627e\u3002</p> <p>\u76f4\u5230\u67e5\u627e\u5230\u53f6\u8282\u70b9\u5c42\u3002</p> </li> </ul> <ul> <li> <p>\u63d2\u5165</p> <ul> <li> <p>\u5206\u88c2\uff1a</p> <pre><code>[K1 ... Km Km+1] --&gt; [K1 ... K(floor(m/2))] + \n                [K(ceil(m/2)) ... Km Km+1]\n</code></pre> <p>\u4e4b\u540e\u63d0\u5347<code>K(floor(m/2))</code>\u5230\u7236\u8282\u70b9\uff0c\u9012\u5f52\u68c0\u67e5\u662f\u5426\u9700\u8981\u5206\u88c2\u3002</p> </li> </ul> </li> </ul> <ul> <li> <p>\u5220\u9664</p> <ul> <li>\u5220\u9664\u5173\u952e\u7801\u540e\u4e2a\u6570\u5927\u4e8e<code>ceil(m/2)</code>\uff0c\u7ed3\u675f\u3002</li> <li> <p>\u5220\u9664\u5173\u952e\u7801\u540e\u4e2a\u6570\u5c0f\u4e8e<code>ceil(m/2)\uff1a</code></p> <ul> <li> <p>\u5144\u5f1f\u53ef\u4ee5\u501f\u8282\u70b9\uff1a\u501f\u4e00\u4e2a\uff0c\u8c03\u6574\u7236\u8282\u70b9\u4e2d\u7684\u5173\u952e\u7801\uff0c\u7ed3\u675f\u3002</p> <p>\u9700\u8981\u628a\u5144\u5f1f\u7684\u4e00\u4e2a\u5173\u952e\u7801\u4e0e\u5bf9\u5e94\u5b50\u6811\u632a\u8fc7\u6765\uff0c\u5e76\u4fee\u6539\u7236\u8282\u70b9\u5206\u754c\u3002</p> </li> </ul> <ul> <li>\u5144\u5f1f\u4e5f\u501f\u4e0d\u4e86\uff0c\u548c\u5144\u5f1f\u5408\u5e76\u3002\u5220\u9664\u4e00\u4e2a\u7236\u8282\u70b9\u5173\u952e\u7801\uff0c\u9012\u5f52\u5411\u4e0a\u68c0\u67e5\u7236\u8282\u70b9\u5173\u952e\u7801\u6570\u91cf\u3002</li> </ul> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA11_Index/#_4","title":"\u7ea2\u9ed1\u6811","text":""},{"location":"algorithm/basic/DA11_Index/#_5","title":"\u5b9a\u4e49","text":"<p>\u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f\u7684BST\u6811\uff1a</p> <ul> <li>\u9ed1\u7ea2\u4e8c\u8272\uff1a\u6bcf\u4e2a\u8282\u70b9\u88ab\u67d3\u8272\u4e3a\u7ea2\u8272\u6216\u9ed1\u8272\u3002</li> <li>\u9996\u5c3e\u7686\u9ed1\uff1a\u6839\u8282\u70b9\u4e0e\u53f6\u8282\u70b9\uff08NULL\uff09\u5747\u4e3a\u9ed1\u8272\u3002</li> <li>\u7ea2\u7ea2\u4e0d\u8fde\uff1a\u7ea2\u8272\u8282\u70b9\u4e0d\u76f8\u8fde\u3002</li> <li>\u9ed1\u70b9\u540c\u9636\uff1a\u4efb\u610f\u8282\u70b9\u5230\u5176\u53f6\u8282\u70b9\u7684\u8def\u5f84\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u8282\u70b9\u3002</li> </ul> <p>\u8282\u70b9X\u7684\u9636\uff08\u9ed1\u8272\u9ad8\u5ea6\uff0cRank\uff09\uff1a\u8be5\u8282\u70b9\u5230\u5bf9\u5e94\u5b50\u6811\u7684\u4efb\u4e00\u5916\u90e8\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u9ed1\u8272\u8282\u70b9\u7684\u4e2a\u6570\u3002\u4e0d\u5305\u62ec\u81ea\u8eab\uff0c\u5305\u62ec\u53f6\u8282\u70b9\u3002\u53f6\u8282\u70b9\u96360\uff0c\u6839\u8282\u70b9\u7684\u9636\u79f0\u4e3a\u6811\u7684\u9636\u3002</p>"},{"location":"algorithm/basic/DA11_Index/#_6","title":"\u6027\u8d28","text":"<ul> <li>\u6ee1\u4e8c\u53c9\u6811\uff08\u6269\u5145\u4e8c\u53c9\u6811\uff0c\u6811\u53f6\u5747\u4e3a\u9ed1\u8272NULL\uff09</li> </ul> <ul> <li> <p>k\u9636\u7ea2\u9ed1\u6811\u6839\u5230\u53f6\u7684\u7b80\u5355\u8def\u5f84\u957f\u5ea6\u4ecb\u4e8e<code>[k, 2k]</code>\u95f4</p> <p>\u5747\u4e3a\u9ed1\u8282\u70b9\u6700\u77ed\uff0c\u9ed1\u7ea2\u76f8\u95f4\u6700\u957f\u3002\u6b64\u6027\u8d28\u9650\u5236\u4e86\u6811\u9ad8\uff0c\u5141\u8bb8\u7ea2\u9ed1\u6811\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u76f8\u6bd4\u666e\u901a\u7684BST\u90fd\u662f\u9ad8\u6548\u7684\u3002</p> </li> </ul> <ul> <li>\u5185\u90e8\u8282\u70b9\u6570\u6700\u5c11\u662f\u9ad8\u4e3ak\u7684\u5b8c\u5168\u6ee1\u4e8c\u53c9\u6811\uff0c\u5373\u81f3\u5c11\u6709\\(2^k-1\\)\u4e2a\u5185\u90e8\u8282\u70b9\u3002</li> </ul> <ul> <li> <p>n\u4e2a\u5185\u90e8\u8282\u70b9\u7ea2\u9ed1\u6811\u7684\u6700\u5927\u9ad8\u5ea6\uff1a\\(2log_2(n+1)+1\\)</p> <p>\u8bbe\u9636\u4e3ak\uff0c\u6811\u9ad8\u4e3ah\u3002</p> </li> </ul> \\[ \\displaylines{   h \\le 2k+1 \\\\   n \\ge 2^k - 1 \\\\   \\Rightarrow h\\le 2log_2(n+1)+1 } \\]"},{"location":"algorithm/basic/DA11_Index/#_7","title":"\u7ea2\u9ed1\u6811\u4e4b\u63d2\u5165","text":"<pre><code># TL;DR\n\u9996\u5148\u63d2\u5165\u76ee\u6807\u4f4d\u7f6e\uff0c\u6807\u8bb0\u4e3a\u7ea2\u8272\u3002\n* P\u4e0d\u5b58\u5728\uff1a\u53d8\u9ed1\u3002\n* P\u9ed1\u8272\uff1a\u7ed3\u675f\u3002\n* P\u7ea2\u8272\uff1a\u53cc\u7ea2\u8c03\u6574\u3002\n    * U\u9ed1\u8272\uff08eg.P\u5de6U\u53f3\uff09\uff1a\n        * X\u4e0eU\u540c\u4fa7\uff08eg.\u4e3a\u5de6\u5b50\u8282\u70b9\uff09\uff1a\u65cb\u8f6cGP\uff0c\u6362\u8272\uff08P\u53d8\u9ed1\uff0cXG\u53d8\u7ea2\uff09\u3002\n        * X\u4e0eU\u5f02\u4fa7\uff08eg.\u4e3a\u53f3\u5b50\u8282\u70b9\uff09\uff1a\u65cb\u8f6cPX\uff08\u9000\u5316\u5230\u4e0a\u4e00\u79cd\u60c5\u51b5\uff09\uff0c\u65cb\u8f6cGX\uff0c\u6362\u8272\uff08X\u53d8\u9ed1\uff0cGP\u53d8\u7ea2\uff09\u3002\n        # \u6362\u8272\u89c4\u5f8b\uff1a\u5f53\u524d\u7684\u7236\u8282\u70b9\u53d8\u9ed1\uff0c\u4e24\u4e2a\u5b50\u8282\u70b9\u53d8\u7ea2\n    * U\u7ea2\u8272\uff1a\n        \u6362\u8272\uff08G\u975e\u6839\u8282\u70b9\u65f6\u53d8\u7ea2\uff1bPU\u53d8\u9ed1\uff09\uff0c\u9012\u5f52\u5411\u4e0a\u7ea2\u7ea2\u68c0\u67e5\u3002\n</code></pre> <p>\u7ea2\u9ed1\u6811\u672c\u8eab\u4ecd\u662fBST\u6811\uff0c\u63d2\u5165\u5143\u7d20\u7684\u4f4d\u7f6e\u9996\u5148\u6839\u636eBST\u7684\u4e8c\u5206\u89c4\u5219\u627e\u5230\uff0c\u4e00\u5b9a\u662f\u67d0\u4e00\u4e2aNULL\u53f6\u8282\u70b9\u5904\u3002</p> <p>\u65b0\u63d2\u5165\u7684\u8282\u70b9X\u6807\u8bb0\u4e3a\u7ea2\u8272\u3002\u8bbe\u7236\u8282\u70b9P\uff0c\u7956\u7236\u8282\u70b9G\uff0c\u53d4\u8282\u70b9U\u3002</p> <ul> <li>X\u65e0\u7236\u8282\u70b9\uff08X\u662f\u6839\u8282\u70b9\uff09\uff1a\u6362\u4e3a\u9ed1\u8272\uff0c\u7ed3\u675f\u3002</li> </ul> <ul> <li>\u7236\u8282\u70b9P\u9ed1\u8272\uff1a\u7ed3\u675f\uff08\u4e0d\u7834\u574f\u7ea2\u9ed1\u6811\u7684\u7ea6\u675f\uff09\u3002</li> </ul> <ul> <li> <p>\u7236\u8282\u70b9P\u7ea2\u8272\uff1a\u8fdb\u884c\u53cc\u7ea2\u8c03\u6574\uff1a</p> <p>\u6b64\u65f6\u5df2\u77e5P\u4e3a\u7ea2\u8272\uff0c\u6545G\u4e3a\u9ed1\u8272\u4e14\u9636\u4e3a1\u3002</p> <ul> <li> <p>U\u4e3a\u9ed1\u8272\uff1a\u65cb\u8f6c</p> <p>\u7531\u4e8eG\u9636\u4e3a1\uff0cU\u53ea\u80fd\u662fNULL\u53f6\u8282\u70b9\u3002</p> <p>\u8c03\u6574\u65b9\u6cd5\uff1a\u4ee5G\u4e3a\u8f74\uff0c\u65cb\u8f6cP\u3002</p> <pre><code>### BST Rotation\n### \u65cb\u8f6c\u64cd\u4f5c\u672c\u8d28\u4e0a\u662f\u5728**\u4e0d\u7834\u574fBST\u6811\u7684\u4e8c\u5206\u6027\u8d28**\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u8282\u70b9\u7684\u65b9\u6cd5\uff01\n## Right Rotation\n# axis X, target Y. Note B is transfered.\n       \\                \\\n       [X]              [Y]\n      /   \\            /   \\\n    [Y]     C   --&gt;   A    [X]\n   /   \\                  /   \\\n  A    *B*               *B*   C\n\n## Left Rotation\n# axis Y, target X. Reversion of Right Rotation.\n       \\                \\\n       [X]              [Y]\n      /   \\            /   \\\n    [Y]    C    &lt;--   A    [X]\n   /   \\                  /   \\\n  A    *B*               *B*   C\n</code></pre> <pre><code>### RB-Tree RR rotation\n### \u4ee5\u4e0b\u8ba8\u8bba\u9488\u5bf9P\u5728\u5de6\uff0cU\u5728\u53f3\u7684\u60c5\u51b5\u3002P\u53f3U\u5de6\u65f6\uff0c\u4e24\u79cdcase\u8981\u53cd\u8fc7\u6765\u3002\n## X is left child\n# ====== insert X ======\n       \\\n        [G]\n       /   \\\n     (P)    []U\n    /   \\\n  (X)   []\n /  \\ \n[]  []\n\n# ====== right rotate G, P ======  \n# Note the color is also changed!\n        \\\n        [P]\n       /    \\\n     (X)     (G)\n    /   \\   /   \\\n   []   [] []   []U\n\n## X is right child\n# ====== insert X ======\n       \\\n        [G]\n       /   \\\n     (P)    []U\n    /   \\\n   []   (X)\n        /  \\ \n       []  []\n\n# ====== left rotate P, X ====== \n# degenerate to case [X is left child]\n       \\\n        [G]\n       /   \\\n     (X)    []U\n    /   \\\n  (P)   []\n /  \\ \n[]  []\n\n# ===== right rotate G,X ======\n        \\\n        [X]\n       /    \\\n     (P)     (G)\n    /   \\   /   \\\n   []   [] []   []U\n</code></pre> </li> </ul> <ul> <li> <p>U\u4e3a\u7ea2\u8272\uff1a\u6362\u8272</p> <p>G\u9636\u4e3a1\uff0c\u6545\u7ea2\u8272U\u8282\u70b9\u4e0b\u53ea\u80fd\u6302\u4e24\u4e2a\u53f6\u8282\u70b9\u3002</p> <pre><code>### RB-Tree RR change color\n## for simplicity, we omit [] NULL leaves.\n# ====== insert X ======\n      \\\n      [G]\n     /   \\\n   (P)   (U)\n  /\n(X)\n\n# ====== change color ======\n# of G, P, U\n      \\\n      (G)\n     /   \\\n   [P]   [U]\n  /\n(X)\n</code></pre> <p>\u5982\u679cG\u662f\u6839\u8282\u70b9\uff0c\u5219\u4e0d\u7528\u6539\u53d8G\u7684\u989c\u8272\u3002</p> <p>\u5426\u5219\uff0c\u7531\u4e8e\u6b64\u65f6G\u53d8\u4e3a\u7ea2\u8272\uff0c\u9700\u8981\u9012\u5f52\u5411\u4e0a\u7ee7\u7eed\u8fdb\u884c\u7ea2\u7ea2\u68c0\u67e5\u3002</p> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA11_Index/#_8","title":"\u7ea2\u9ed1\u6811\u4e4b\u5220\u9664","text":"<pre><code># TL;DR\n* X\u6ca1\u6709\u7a7a\u6811\u53f6\uff1a\u4e0e\u540e\u7ee7\u4ea4\u6362\uff0c\u518d\u5220\u9664\u540e\u7ee7\uff08\u9000\u5316\u4e3a\u4e0b\u4e24\u79cd\u60c5\u51b5\uff09\n* X\u6709\u4e00\u4e2a\u7a7a\u6811\u53f6\uff1a\n    \u5220\u9664X\uff0c\u7528\u975e\u7a7a\u5b50\u8282\u70b9\u66ff\u6362\uff0c\u53d8\u9ed1\u3002\n* X\u6709\u4e24\u4e2a\u7a7a\u6811\u53f6\uff1a\n    * X\u7ea2\u8272\uff1a\u76f4\u63a5\u5220\u9664X\u3002\n    * X\u9ed1\u8272\uff1a\u53cc\u9ed1\u8c03\u6574\u3002\n        * B\u7ea2\u8272\uff1aPB\u65cb\u8f6c\uff0c\u53d8\u8272\uff08\u6b64\u5904BP\u6362\u8272\uff09\uff0c\u9000\u5316\u4e3a\u4e0b\u4e24\u79cd\u60c5\u51b5\u3002\n        * B\u9ed1\u8272\uff1a\n            * LR\u5747\u9ed1\uff1a\u5220\u9664X\uff0cB\u53d8\u7ea2\uff0cP\u53d8\u9ed1\uff0c\u9012\u5f52\u5411\u4e0a\u53cc\u9ed1\u8c03\u6574\u3002\n            * L\u9ed1R(N)\u7ea2\uff1a\u5220\u9664X\uff0cPB\u65cb\u8f6c\uff0c\u6362\u8272\uff08PN\u53d8\u9ed1\uff0cB\u53d8\u4e3aP\u7684\u539f\u8272\uff09\u3002\n            * L(N)\u9ed1R\u7ea2\uff1a\u5220\u9664X\uff0cBN\u65cb\u8f6c\uff0cPN\u65cb\u8f6c\uff0c\u6362\u8272\uff08PB\u53d8\u9ed1\uff0cN\u53d8\u4e3aP\u7684\u539f\u8272\uff09\u3002\n            * LR\u5747\u7ea2\uff1a\u4e0a\u4e24\u79cd\u60c5\u51b5\u4efb\u9009\u5176\u4e00\u6267\u884c\u5373\u53ef\u3002\n</code></pre> <ul> <li> <p>\u5f85\u5220\u8282\u70b9\u6ca1\u6709\u7a7a\u6811\u53f6\uff1a</p> <p>\u6839\u636eBST\u89c4\u5219\uff0c\u5148\u4e0e\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u540e\u7ee7\u7ed3\u70b9\u4ea4\u6362\uff08\u6362\u503c\u4e0d\u6362\u8272\uff09\uff0c\u518d\u5220\u9664\u8be5\u540e\u7ee7\uff08\u9000\u5316\u5230\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff09\u3002</p> </li> </ul> <ul> <li> <p>\u5f85\u5220\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7a7a\u6811\u53f6\uff1a</p> <p>\u9996\u5148\uff0c\u5f85\u5220\u8282\u70b9\u53ea\u80fd\u662f\u9ed1\u8272\u7684\uff0c\u4e14\u975e\u7a7a\u7684\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u4e00\u5b9a\u662f\u7ea2\u8272\u8282\u70b9\uff0c\u8be5\u7ea2\u8272\u8282\u70b9\u4e0b\u53ea\u80fd\u6302\u4e24\u4e2a\u53f6\u8282\u70b9\uff08\u5426\u5219\u4e24\u4e2a\u5b50\u6811\u9636\u4e0d\u76f8\u7b49\uff09\u3002\u5220\u9664\u540e\u628a\u7ea2\u5b50\u8282\u70b9\u66ff\u6362\u5230\u6b64\u5904\uff0c\u53d8\u9ed1\uff0c\u7ed3\u675f\u3002</p> <pre><code>## only one case\n# ====== delete X ======\n     /\n   [X]\n  /   \\\n []   (Y)     \n     /   \\\n    []   []\n# ====== lift Y, change color ======\n     /\n   [Y]\n  /   \\\n []   []     \n</code></pre> </li> </ul> <ul> <li> <p>\u5f85\u5220\u8282\u70b9\u6709\u4e24\u4e2a\u7a7a\u6811\u53f6\uff1a</p> <ul> <li>\u5f85\u5220\u8282\u70b9\u7ea2\u8272\uff0c\u76f4\u63a5\u5220\u9664\u3002</li> </ul> <ul> <li> <p>\u5f85\u5220\u8282\u70b9\u9ed1\u8272\uff0c\u53cc\u9ed1\u8c03\u6574\uff08\u76f4\u63a5\u5220\u9664\u4f1a\u4f7f\u9636\u5931\u8861\uff09\uff1a</p> <p>\u8bbe\u5f85\u5220\u8282\u70b9\u4e3aX\uff08\u53cc\u9ed1\u8282\u70b9\uff09\uff0c\u7236\u8282\u70b9P\uff0c\u5144\u5f1f\u8282\u70b9B\u3002</p> <ul> <li> <p>B\u4e3a\u7ea2\u8272\uff1a</p> <p>\u5219P\u53ea\u80fd\u4e3a\u9ed1\u8272\uff0cB\u7684\u5b50\u8282\u70b9\u4e3a\u975e\u7a7a\u9ed1\u8272\u5b50\u8282\u70b9\u3002</p> <p>\u64cd\u4f5c\uff1a\u65cb\u8f6cP-B\uff0c\u8f6c\u5316\u4e3a\u540e\u4e24\u79cd\u60c5\u51b5\u3002</p> <pre><code>## delete Condition 1\n# ====== init ======\n# l\u3001r\u662f\u9636\u4e3a2\u7684\u5b50\u6811, l\u3001r\u672c\u8eab\u662f\u975e\u7a7a**\u9ed1**\u8282\u70b9\u3002\n      \\\n       P\n     /   \\\n   [X]    (B)\n  /  \\    /  \\\n []  []  l    r\n\n# ====== rotate P, B ======\n      \\\n      (B)\n     /   \\\n    P     r\n  /  \\\n[X]   l\n\n# ====== change color ======\n      \\\n       B\n     /   \\\n   (P)     r\n  /  \\\n[X]   l\n\n# since l is a black Brother for X now\n# this question degenerates to the following two cases:\n</code></pre> </li> </ul> <ul> <li> <p>B\u4e3a\u9ed1\u8272\uff0cB\u7684\u5b50\u8282\u70b9\u5747\u9ed1\u8272\uff1a</p> <p>\u6b64\u65f6P\u4e3a\u7ea2\u8272\u6216\u9ed1\u8272\u3002B\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u53ea\u80fd\u4e3a\u53f6\u8282\u70b9\u3002</p> <pre><code>## delete Condition 2\n# ====== init ======\n      \\\n       P\n     /   \\\n   [X]   [B]\n  /  \\   /  \\\n []  [] []  []\n\n# ====== delete X ======\n      \\\n       P\n     /   \\\n    []   [B]\n         /  \\\n        []  []\n\n# ====== change color ======\n       \\\n      [P]\n     /   \\\n    []   (B)\n         /  \\\n        []  []\n</code></pre> <p>P\u539f\u6765\u7ea2\u8272\u65f6\uff0c\u8c03\u6574\u7ed3\u675f\u3002</p> <p>P\u539f\u6765\u9ed1\u8272\u65f6\uff0c\u7531\u4e8e\u8fd9\u4e00\u4e2a\u5b50\u6811\u6574\u4f53\u5c11\u4e86\u4e00\u9636\uff0c\u9700\u8981\u9012\u5f52\u5411\u4e0a\u53cc\u9ed1\u8c03\u6574\u3002</p> </li> </ul> <ul> <li> <p>B\u4e3a\u9ed1\u8272\uff0cB\u7684\u5b50\u8282\u70b9\u6709\u81f3\u5c11\u4e00\u4e2a\u7ea2\u8272\uff1a</p> <p>\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002</p> <pre><code>### delete Condition 3\n### for simplicity, omit NULL leaves.\n\n## only right Nephew is red\n## so B's left child is black, and thus must be NULL leaf.\n# ====== init ======\n      \\\n       P\n     /   \\\n   [X]   [B]\n            \\\n            (N)\n\n# ====== delete X ======\n      \\\n       P\n         \\\n         [B]\n            \\\n            (N)\n\n# ====== rotate P,B ======\n      \\\n      [B]\n     /   \\\n    P     (N)\n\n# ====== change color ======\n# here B is changed to the original color of P\n      \\\n       B\n     /   \\\n   [P]    [N]\n\n## only left Nephew is red\n# ====== init ======\n      \\\n       P\n     /   \\\n   [X]   [B]\n        /   \n      (N)\n\n# ====== delete X ======\n      \\\n       P\n         \\\n         [B]\n        /   \n      (N)\n\n# ====== rotate B,N ======\n      \\\n       P\n         \\\n         (N)\n            \\\n            [B]\n\n# ====== rotate P,N ======\n      \\\n      (N)\n     /   \\\n    P    [B]\n\n# ====== change color ======\n# here N is changed to the original color of P\n      \\\n       N\n     /   \\\n   [P]    [B]\n\n## both Nephews are red\n## do either of the first two methods is OK\n## for simplicity, we adopt the first method, to work on (R).\n# ====== init ======\n      \\\n       P\n     /   \\\n   [X]   [B]\n        /   \\\n      (L)   (R)\n\n# ====== delete X ======\n      \\\n       P\n         \\\n         [B]\n        /   \\   \n      (L)   (R)\n\n# ====== rotate P,B ======\n      \\\n      [B]\n     /   \\\n    P     (R)\n     \\\n     (L)\n\n# ====== change color ======\n      \\\n       B\n     /   \\\n   [P]    [R]\n     \\\n     (L)\n\n# ====== another possible method ======\n#        \\\n#         L\n#       /   \\\n#     [P]    [B]\n#              \\\n#               (R)\n</code></pre> </li> </ul> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA11_Index/#_9","title":"\u7ea2\u9ed1\u6811\u6027\u80fd","text":"<p>\u5e73\u5747\u548c\u6700\u5dee\u68c0\u7d22\\(O(lgn)\\)\u3002</p> <p>\u7edf\u8ba1\u6027\u80fd\u4f18\u4e8eAVL\u6811\u3002\u4e14\u589e\u5220\u7b97\u6cd5\u76f8\u5bf9\u7b80\u5355\u3002</p> <p>set\uff0cmultiset\uff0cmap\uff0cmultimap\u5747\u4e3a\u7ea2\u9ed1\u6811\u53d8\u4f53\u3002</p>"},{"location":"algorithm/basic/DA12_Advanced/","title":"Advanced Data Structure","text":""},{"location":"algorithm/basic/DA12_Advanced/#_1","title":"\u591a\u7ef4\u6570\u7ec4","text":"<ul> <li> <p>\u6570\u7ec4\u7684\u5b58\u50a8\u4e0e\u5b9a\u4f4d</p> <p>\u884c\u4f18\u5148\uff1aC\uff0c \u5217\u4f18\u5148\uff1aFortran</p> <p>\u4e0b\u6807\u8ba1\u7b97 \uff1a</p> </li> </ul> \\[ \\displaylines{   loc(A[j_0, ..., j_{n-1}]) = loc(A[0,...,0])\\\\   + size*[\\sum_{i=0}^{n-2}(j_i\\prod_{k=i+1}^{n-1}d_k)+j_{n-1}] } \\] <ul> <li> <p>\u7279\u6b8a\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8</p> <ul> <li>\u5bf9\u79f0\u77e9\u9635</li> <li>\u5bf9\u89d2\u77e9\u9635\uff1a\u53ea\u9700\u5b58\u50a8N\u4e2a\u5bf9\u89d2\u5143\u3002</li> <li>\u4e0a/\u4e0b\u4e09\u89d2\u77e9\u9635\uff1a\\(N(N+1)/2+1\\)</li> <li>\u7a00\u758f\u77e9\u9635\uff1a\u4e09\u5143\u7ec4\u8868\uff0c\u5341\u5b57\u94fe\u8868</li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA12_Advanced/#generalized-lists-multi-list","title":"Generalized Lists \uff08\u5e7f\u4e49\u8868\uff0cMulti-list\uff09","text":"<p>\u7ebf\u6027\u8868\u7684\u62d3\u5c55\uff0c\u7ebf\u6027\u8868\u5185\u7684\u5143\u7d20\u5747\u4e3a\u540c\u4e00\u7c7b\u578b\u3002</p> <p>\u4e00\u4e2a\u5e7f\u4e49\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u662f\u5b50\u8868\uff08sub-list\uff09\u6216\u539f\u5b50\uff08atom\uff09\u3002</p> <p>\u5e7f\u4e49\u8868\u6df1\u5ea6\uff1a\u5d4c\u5957\u7684\u6700\u591a\u5b50\u8868\u6570\uff0c\u6240\u6709\u5143\u7d20\u5316\u89e3\u4e3a\u539f\u5b50\u540e\u7684\u62ec\u53f7\u5c42\u6570\u3002</p> <p>HEAD: \u5e7f\u4e49\u8868\u4e2d\u7b2c\u4e00\u4e2a(!)\u5143\u7d20(!)\u3002</p> <p>TAIL: \u5e7f\u4e49\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ee5\u5916\u7684\u5143\u7d20\u6784\u6210\u7684(!)\u5e7f\u4e49\u8868(!)\u3002</p> <p>\u200b   eg. <code>L = ((a,b),c), c = H(T(L)), b=H(T(H(L)))</code></p> <ul> <li> <p>\u7ebf\u6027\u8868\uff08sequential list\uff09</p> <p>\u7b49\u4ef7\u4e8e\u4e00\u68f5\u6df1\u5ea6\u4e3a1\u7684\u6811\u3002</p> </li> </ul> <ul> <li> <p>\u7eaf\u8868\uff08pure list\uff09</p> <p>\u4ece\u6839\u8282\u70b9\u5230\u4efb\u610f\u4e00\u4e2a\u53f6\u8282\u70b9\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5373\u4efb\u4f55\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u7b49\u4ef7\u4e8e\u4e00\u68f5\u6811\u3002</p> </li> </ul> <ul> <li> <p>\u53ef\u91cd\u5165\u8868/\u518d\u5165\u8868</p> <p>\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\uff0c\u4f46\u4e0d\u5305\u542b\u56de\u8def\u3002\u7b49\u4ef7\u4e8eDAG\u3002\u6df1\u5ea6\u5b9a\u4e49\u540c\u4e0a\u3002</p> </li> </ul> <ul> <li> <p>\u5faa\u73af\u8868/\u9012\u5f52\u8868</p> <p>\u53ef\u4ee5\u5305\u542b\u56de\u8def\u3002\u7b49\u4ef7\u4e8e\u56fe\u3002\u65e0\u6cd5\u8ba1\u7b97\u6df1\u5ea6\u3002</p> <p>eg. (L1:(L2:(L1, a)))</p> <pre><code>           *\n          /\n         L1\n        ^ \\\n        |__L2\n            \\ \n             a\n</code></pre> </li> </ul>"},{"location":"algorithm/basic/DA12_Advanced/#trie","title":"\u5b57\u5178\u6811 Trie","text":"<ul> <li> <p>\u82f1\u6587\u5b57\u6bcdTrie\u6811</p> <p>\u7528\u4e8e\u591a\u5b50\u4e32\u7684\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\u3002</p> <p>Trie\u6811\u5f80\u5f80\u4e0d\u5e73\u8861\u3002</p> </li> </ul> <ul> <li>\u4e8c\u53c9Trie\u6811\uff08PAT-Tree\uff0c Patricia\uff09</li> </ul>"},{"location":"algorithm/basic/DA12_Advanced/#bst-variants","title":"\u4e8c\u53c9\u6392\u5e8f\u6811\u53d8\u4f53  BST Variants","text":""},{"location":"algorithm/basic/DA12_Advanced/#bst","title":"\u6700\u4f73BST","text":"<ul> <li> <p>N\u4e2a\u5173\u952e\u7801\u7684\u96c6\u5408\u6784\u6210<code>N!</code>\u79cd\u6392\u5217\u3002</p> <p>\u5176\u4e2d\u53ea\u6709\\(Catalan(N) = \\frac {C_{2n}^n}{n+1}\\)\u4e2a\u6392\u5217\u53ef\u4ee5\u6784\u6210BST\u3002</p> </li> </ul> <ul> <li> <p>BST\u67e5\u627e\u6548\u7387\u7684\u6d4b\u91cf</p> <p>\u5bf9BST\u6269\u5145\uff0c\u5219\u5916\u90e8\u8282\u70b9\u5373\u67e5\u627e\u5931\u8d25\u7684\u4f4d\u7f6e\u3002</p> <p>\u6700\u4f73BST\uff1a\u6839\u636e\u7528\u6237\u5386\u53f2\u8bbf\u95ee\u9891\u7387\uff0c\u53ef\u4ee5\u8ba1\u7b97ASL\u6700\u5c0f\u7684BST\u3002</p> </li> </ul>"},{"location":"algorithm/basic/DA12_Advanced/#bst_1","title":"\u6784\u9020\u6700\u4f73BST\u7684\u65b9\u6cd5","text":"<ul> <li> <p>\u8282\u70b9\u68c0\u7d22\u7b49\u6982\u7387</p> <p>p\u4e3a\u5185\u90e8\u8282\u70b9\uff0c\u5171n\u4e2a\uff1bq\u4e3a\u5916\u90e8\u8282\u70b9\uff0c\u5171n+1\u4e2a\u3002</p> </li> </ul> \\[ \\displaylines{   \\frac {p_i} W = \\frac {q_j} W = \\frac 1 {2n+1} \\\\   ASL(n)  = \\frac 1 {2n+1} (\\sum_{i=1}^n(H(p_i)+1)+\\sum_{j=0}^nH(q_j)) \\\\   = \\frac 1 {2n+1} (I+n+E)\\\\   = \\frac {2I+3n} {2n+1} } \\] <p>\u200b \u6545\u5728n\u5df2\u77e5\u65f6\uff0c\u6784\u9020I\u6700\u77ed\u7684BST\u5373\u53ef\uff0c\u5373\u7c7b\u4f3c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5f62\u72b6\u3002</p> <p>* \u8282\u70b9\u68c0\u7d22\u4e0d\u7b49\u6982\u7387</p> <pre><code>\u52a8\u6001\u89c4\u5212\u6784\u9020\uff0c\u4efb\u4f55\u5b50\u6811\u90fd\u662f\u6700\u4f73BST\u3002\n\n`t(i, j)`: \u5305\u542b\u5185\u90e8\u8282\u70b9i+1\u5230j\u7684\u5b50\u6811\n\n`C(i, j)`: \u8282\u70b9i+1\u5230j\u67e5\u8be2\u4ee3\u4ef7\n\n`W(i, j)`: \u6743\u503c\u603b\u548c\uff0ci+1\u5230j\u7684\u5185\u90e8\u8282\u70b9\u6743\u91cd\u52a0\u4e0ai\u5230j\u5916\u90e8\u8282\u70b9\u7684\u6743\u91cd\u3002\n\n\u9012\u63a8\u516c\u5f0f\uff1a\n\n`C(i, j) = W(i, j) + min{C(i, k-1) + C(k, j)}, for k in [i, j]`\n</code></pre> <p></p>"},{"location":"algorithm/basic/DA12_Advanced/#bstavl","title":"\u5e73\u8861BST\uff08AVL\uff09","text":""},{"location":"algorithm/basic/DA12_Advanced/#_2","title":"\u5e73\u8861\u56e0\u5b50","text":"<p><code>bf(x) = height(rightchild(x))-height(leftchild(x))</code></p> <p>AVL\u6811\u7684\u6240\u6709\u8282\u70b9bf\u503c\u53ea\u80fd\u662f<code>{0, 1, -1}</code>\u3002</p> <p>\\(ASL = O(lg n)\\).</p>"},{"location":"algorithm/basic/DA12_Advanced/#_3","title":"\u6027\u8d28","text":"<ul> <li>\u7a7a\u4e8c\u53c9\u6811\u662fAVL\u6811</li> <li>T\u4e3aAVL\u6811\uff0c\u5219\u5de6\u53f3\u5b50\u6811L\uff0cR\u4e5f\u662fAVL\u6811\uff0c\u4e14\\(|h_R-h_L|\\le1\\)\u3002</li> <li>T\u7684\u9ad8\u5ea6\u4e3a\\(O(lg n)\\)\u3002</li> </ul>"},{"location":"algorithm/basic/DA12_Advanced/#avl","title":"AVL\u63d2\u5165","text":"<pre><code># TL;DR\n\u5148\u6839\u636eBST\u89c4\u5219\u627e\u5230\u63d2\u5165\u4f4d\u7f6e\uff0c\u5e76\u63d2\u5165\uff0c\u56de\u6eaf\u4e24\u5c42\u7236\u8282\u70b9\u68c0\u67e5bf\u3002\n* \u4ecd\u5e73\u8861\uff1a\u7ed3\u675f\n* \u5931\u8861\uff1a\n    * LL\uff0cRR\u578b\uff1a\u5355\u65cb\u8f6c\n    * LR\uff0cRL\u578b\uff1a\u53cc\u65cb\u8f6c\uff08\u63d0\u5347\u6700\u5c3e\u8282\u70b9\uff09\n\n# \u53cc\u65cb\u8f6c\u662f\u5760\u7b80\u5355\u7684\uff01\u6392\u6210\u4e00\u6392\uff0c\u63d0\u5347\u5c3e\u8282\u70b9\u5c31\u5e73\u8861\u5566\uff01\n</code></pre> <p>\u5148\u6839\u636eBST\u89c4\u5219\u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u3002</p> <ul> <li>\u63d2\u5165\u53d1\u751f\u504f\u91cd\uff0c\u4f46\u4ecd\u7136\u5e73\u8861</li> </ul> <ul> <li>\u63d2\u5165\u524d\u6709\u504f\u91cd\uff0c\u63d2\u5165\u540e\u5e73\u8861</li> </ul> <ul> <li> <p>\u63d2\u5165\u540e\u5931\u8861\uff0c\u8fdb\u884c\u5e73\u8861\u8c03\u6574</p> <p>\u4ece\u65b0\u63d2\u5165\u7684\u8282\u70b9u\u5411\u4e0a\u67e5\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5e73\u8861\u7684\u7956\u5148A\uff0c\u8bbeA\u6307\u5411u\u7684\u8def\u5f84\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\u4e3aB\uff0c\u7b2c\u4e8c\u4e2a\u5b50\u8282\u70b9\u4e3aC\u3002</p> <ul> <li> <p>\u5355\u65cb\u8f6c</p> <ul> <li>LL\uff1aA\u7684L\u7684L\u5bfc\u81f4\u5931\u8861\uff0c<code>bf(A)=-2</code></li> </ul> <pre><code># ===== init =====\n          A(-2)\n          /    \\\n     B(-1)   [h]T2\n     /    \\\n*T0[h+1]* [h]T1\n\n# ===== rotate A,B =====\n         B(0)\n         /    \\\n    T0[h+1]    A(0)\n              /    \\\n          T1[h]    [h]T2\n</code></pre> </li> </ul> <ul> <li>RR\uff1aA\u7684R\u7684R\u5bfc\u81f4\u5931\u8861\uff0c<code>bf(A)=2</code></li> </ul> <ul> <li> <p>\u53cc\u65cb\u8f6c</p> <p>\u6700\u7ec8\u6548\u679c\uff1a\u5148\u628a\u56db\u4e2a\u5b50\u6811\u6392\u6210\u4e00\u884c\uff0c\u518d\u628aC\u632a\u5230\u6700\u4e0a\u9762\uff0cAB\u653e\u4e2d\u95f4\u3002</p> <ul> <li>LR\uff1aA\u7684L\u7684R\u5bfc\u81f4\u5931\u8861\uff0c<code>bf(A)=-2</code></li> </ul> <pre><code># ===== init =====\n            A(-2)\n           /     \\\n        B(1)     [h]E\n       /    \\\n    D[h]    (-1)C\n            /   \\\n        *F[h]*  [h-1]G\n\n# ===== rotate B,C =====\n            A(-2)\n           /     \\\n        C(-2)    [h]E\n       /    \\\n    B(0)    [h-1]G\n   /   \\\nD[h]   [h]F\n\n# ===== rotate A,C =====\n             C(0)\n           /      \\\n          /         \\\n        B(0)         (1)A\n       /    \\        /   \\\n    D[h]    [h]F  G[h-1] [h]E\n</code></pre> <ul> <li>RL\uff1aA\u7684R\u7684L\u5bfc\u81f4\u5931\u8861\uff0c<code>bf(A)=2</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA12_Advanced/#avl_1","title":"AVL\u5220\u9664","text":"<pre><code># TL;DR\n\u5982\u679c\u662f\u4e2d\u95f4\u8282\u70b9\uff0c\u5148\u4e0e\u524d\u9a71/\u540e\u7ee7\u4ea4\u6362\u4f4d\u7f6e\uff0c\u5220\u9664\u4e4b\uff0c\u518d\u5411\u4e0a\u4e24\u5c42\u68c0\u67e5\u7236\u8282\u70b9T\u7684bf\u3002\n* \u5e73\u8861\uff1a\n    * \u9ad8\u5ea6\u4e0d\u53d8\uff1a\u7ed3\u675f\n    * \u9ad8\u5ea6\u51cf\u4e00\uff1a\u9012\u5f52\u5411\u4e0a\uff0c\u68c0\u67e5bf\n* \u5931\u8861\uff1a\n    \u8bbe\u7236\u8282\u70b9\u9ad8\u5b50\u6811R\uff0c\u8ba8\u8bba\u5176bf\uff1a\n    * bf(R)==0\uff1a\u5355\u65cb\u8f6cRT\uff0c\u7ed3\u675f\n    * bf(R)\u4e0ebf(T)\u540c\u53f7: \u5355\u65cb\u8f6cRT\uff0c\u9012\u5f52\u5411\u4e0a\n    * bf(R)\u4e0ebf(T)\u5f02\u53f7\uff1a\u53cc\u65cb\u8f6cLR\u3001R\uff0cLR\u3001T\uff1b\u9012\u5f52\u5411\u4e0a\n</code></pre> <p>\u5148\u4e0e\u540e\u7ee7\uff08\u53f3\u5b50\u6811\u6700\u5c0f\u503c\uff09\u6216\u524d\u9a71\uff08\u5de6\u5b50\u6811\u6700\u5927\u503c\uff09\u4ea4\u6362\u518d\u8fdb\u884c\u5220\u9664\u3002</p> <p>\u8bbe\u88ab\u5220\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e3aroot\u3002\u53ef\u80fd\u9700\u8981\u5411\u4e0a\u56de\u6eaf (modified = True)\u3002</p> <ul> <li> <p><code>bf(root) = 0</code></p> <p>\u5de6\u5b50\u6811/\u53f3\u5b50\u6811\u88ab\u7f29\u77ed\uff0cbf = 1/-1\uff0cmodified = False</p> </li> </ul> <ul> <li> <p><code>bf(root) != 0</code>\uff0c\u4e14\u8f83\u9ad8\u5b50\u6811\u88ab\u7f29\u77ed</p> <p>bf=0\uff0cmodified=True\uff08\u6811\u9ad8\u51cf\u4e00\uff09\uff0c\u6545\u56de\u6eaf\u5411\u4e0a\u68c0\u67e5\u7236\u8282\u70b9bf\u3002</p> </li> </ul> <ul> <li> <p><code>bf(root) != 0</code>\uff0c\u4e14\u8f83\u4f4e\u5b50\u6811\u88ab\u7f29\u77ed</p> <p>\u5f00\u59cb\u65f6bf(root) =1/-1\uff0c\u4e0d\u59a8\u8bbe\u8f83\u9ad8\u5b50\u6811\u4e3aright\uff0c\u5219bf(root)=1\u3002</p> <ul> <li> <p><code>bf(right) = 0</code></p> <p>\u5355\u65cb\u8f6croot\uff0cright\uff1bmodified=False</p> <pre><code># ===== init =====\n        T(1)        :[h+2]\n        /   \\\n      [h]   (0)R\n            /  \\\n          [h]   [h]\n# ===== delete =====\n        T(2)        :[h+2]\n        /   \\\n    [h-1]   (0)R\n            /  \\\n          [h]   [h]\n# ===== rotate T,R =====\n        R(-1)       :[h+2]\n        /   \\\n     T(1)    [h]\n      /  \\\n   [h-1]  [h]\n</code></pre> </li> </ul> <ul> <li> <p><code>bf(right) == bf(root)</code></p> <p>\u5355\u65cb\u8f6croot\uff0cright\uff1bmodified=True\uff08\u6811\u9ad8\u51cf\u4e00\uff09\uff0c\u56de\u6eaf\u3002</p> <pre><code># ===== init =====\n        T(1)        :[h+2]\n        /   \\\n     [h]    (1)R\n            /  \\\n        [h-1]   [h]\n\n# ===== delete =====\n        T(2)        :[h+2]\n        /   \\\n    [h-1]   (1)R\n            /  \\\n        [h-1]   [h] \n\n# ===== rotate T,R =====\n        R(0)        :[h+1], backtrace\n        /   \\\n     T(0)    [h]\n     /   \\\n [h-1]   [h-1]\n</code></pre> </li> </ul> <ul> <li> <p><code>bf(right) != bf(root)</code></p> <p>\u53cc\u65cb\u8f6cRL\uff0cR\uff1broot\uff0cRL\uff1bmodified=True\uff08\u6811\u9ad8\u51cf\u4e00\uff09\uff0c\u56de\u6eaf\u3002</p> <pre><code>### based on condition of LR(left of right):\n## bf(LR)=0\n# ===== init =====\n          T(1)          :[h+2]\n         /    \\\n      [h]      (-1)R\n              /   \\\n          LR(0)    [h-1]\n          /   \\\n      [h-1]   [h-1]\n# ===== delete =====\n          T(2)\n         /    \\\n    [h-1]      (-1)R\n              /   \\\n          LR(0)    [h-1]\n          /   \\\n      [h-1]   [h-1]\n\n# ===== double rotate =====\n             LR(0)          :[h+1], backtrace\n           /       \\\n          /          \\\n        T(0)         (0)R\n       /    \\        /   \\\n    [h-1]   [h-1] [h-1]  [h-1]\n\n\n## bf(LR)=1\n# ===== init =====\n          T(1)\n         /    \\\n      [h]      (-1)R\n              /   \\\n          LR(1)    [h-1]\n          /   \\\n      [h-2]   [h-1]   \n# ===== delete =====\n          T(2)\n         /    \\\n    [h-1]      (-1)R\n              /   \\\n          LR(1)    [h-1]\n          /   \\\n      [h-2]   [h-1]   \n# ===== double rotate =====\n             LR(0)\n           /       \\\n          /          \\\n        T(-1)        (0)R\n       /    \\        /   \\\n    [h-1]   [h-2] [h-1]  [h-1]\n\n\n## bf(LR)=-1\n# ===== init =====\n          T(1)\n         /    \\\n      [h]      (-1)R\n              /   \\\n          LR(-1)   [h-1]\n          /   \\\n      [h-1]   [h-2]\n# ===== delete =====\n          T(2)\n         /    \\\n    [h-1]      (-1)R\n              /   \\\n          LR(1)    [h-1]\n          /   \\\n      [h-1]   [h-2]  \n# ===== double rotate =====\n             LR(0)\n           /       \\\n          /          \\\n        T(0)         (1)R\n       /    \\        /   \\\n    [h-1]   [h-1] [h-2]  [h-1]\n</code></pre> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA12_Advanced/#splay","title":"\u4f38\u5c55\u6811\uff08Splay\uff09","text":"<p>\u52a8\u6001\u81ea\u7ec4\u7ec7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u68c0\u7d22\u9891\u7e41\u7684\u8bb0\u5f55\u79bb\u6839\u8282\u70b9\u66f4\u8fd1\u3002</p> <p>Splay\u89c4\u5219\u4fdd\u8bc1\u8bbf\u95ee\u4ee3\u4ef7\u8f83\u4f4e\uff0c\u4e0d\u4fdd\u8bc1\u5e73\u8861\u3002</p>"},{"location":"algorithm/basic/DA12_Advanced/#splaying","title":"\u5c55\u5f00 Splaying","text":"<p>\u8bbf\u95ee\u8282\u70b9X\u65f6\uff0c\u8fdb\u884c\u5c55\u5f00\u64cd\u4f5c\uff1a</p> <ul> <li>\u63d2\u5165/\u68c0\u7d22X\uff1a\u628aX\u79fb\u52a8\u5230BST\u6839\u8282\u70b9\u3002</li> <li>\u5220\u9664X\uff1a\u5148\u4e0e\u524d\u9a71/\u540e\u7ee7\u4ea4\u6362\uff0c\u5220\u9664\u540e\uff0c\u628a\u6b64\u65f6X\u7684\u7236\u8282\u70b9\u79fb\u52a8\u5230BST\u6839\u8282\u70b9\u3002</li> </ul> <p>\u5177\u4f53\u800c\u8a00\uff1a</p> <ul> <li>X\u662f\u6839\u8282\u70b9\u7684\u76f4\u63a5\u5b50\u8282\u70b9\uff1a\u5355\u65cb\u8f6c</li> <li> <p>X\u79bb\u6839\u8282\u70b9\u4e24\u5c42\u53ca\u4ee5\u4e0a\uff1a\u4e00\u7cfb\u5217\u53cc\u65cb\u8f6c+\u53ef\u80fd\u7684\u5355\u65cb\u8f6c</p> <ul> <li> <p>\u4e00\u5b57\u578b\u65cb\u8f6c\uff1aLL/RR\uff0c\u540c\u6784\u8c03\u6574\u3002\u4ec5\u4ec5\u628aX\u5411\u4e0a\u63d0\u5347\u3002</p> <p>\u5feb\u901f\u505a\u6cd5\uff1a\u53cc\u91cd\u5355\u65cb\u8f6c</p> <pre><code># ===== insert C =====\n        A\n       / \\\n      B   D\n     / \\\n    C   E\n# ===== rotate AB =====\n        B\n       / \\\n      C   A\n         / \\\n        E   D\n# ===== rotate BC =====\n        C\n         \\\n          B\n           \\\n            A\n           / \\\n          E   D\n</code></pre> <p>\u6ce8\u610f\uff01Splay\u9ed8\u8ba4\u81ea\u9876\u5411\u4e0b\u7684\u8fdb\u884c\u65cb\u8f6c\uff1a</p> <pre><code># ===== insert 6 =====\n    8\n   / \n  7\n /\n6\n# ===== rotate 8,7 =====\n    7\n   / \\\n  6   8\n\n# ===== rotate 7,6 =====\n   6\n    \\\n     7\n      \\\n       8\n\n## another method, **Don't use this!!!**\n# ===== rotate 6,7 =====\n   8\n  /\n 6\n  \\\n   7\n# ===== rotate 8,6 =====\n   6\n    \\\n     8\n    /\n   7\n</code></pre> </li> </ul> <ul> <li> <p>\u4e4b\u5b57\u5f62\u65cb\u8f6c\uff1aLR/RL\uff0c\u5f02\u6784\u8c03\u6574\u3002\u63d0\u5347X\u7684\u540c\u65f6\uff0c\u5b50\u6811\u9ad8\u5ea6\u51cf\u4e00\uff0c\u8d8b\u8fd1\u5e73\u8861\u3002</p> <p>\u5feb\u901f\u505a\u6cd5\uff1a\u8fd9\u4e2a\u5c31\u662f\u53cc\u65cb\u8f6c\uff0c\u53ef\u4ee5\u76f4\u63a5\u6392\u4e00\u6392\u3001\u63d0\u5347\u5c3e\u3002</p> </li> </ul> </li> </ul>"},{"location":"algorithm/basic/DA12_Advanced/#_4","title":"\u6548\u7387\u5206\u6790","text":"<ul> <li>\u4e00\u6b21\u8bbf\u95ee\u64cd\u4f5c\u7684\u4ee3\u4ef7\uff1a\\(O(n)\\)\uff0c\u4e0d\u4fdd\u8bc1\u5355\u4e2a\u64cd\u4f5c\u9ad8\u6548\u3002</li> </ul> <ul> <li>m\u6b21\u8bbf\u95ee\u64cd\u4f5c\u7684\u603b\u4ee3\u4ef7\uff1a\\(O(mlgn)\\)\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5e73\u5747\u4ee3\u4ef7\\(O(lgn)\\)\uff0c\u4fdd\u8bc1\u591a\u4e2a\u64cd\u4f5c\u5e73\u5747\u9ad8\u6548\u3002</li> </ul>"},{"location":"algorithm/review/ACM_IO/","title":"ACM IO","text":""},{"location":"algorithm/review/ACM_IO/#acm-style-io","title":"ACM style I/O","text":""},{"location":"algorithm/review/ACM_IO/#scanfprintf","title":"scanf/printf","text":"<p>Not recommended to use...</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"int %d, float %f, double %lf, string %s, char %c, endl \\n\", 42, 3.141, 3.141, \"string\", 'c');\n\n    // float precision\n    printf(\"float %.2f \\n\", 3.141); // 3.14\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int x;\n    scanf(\"%d\", &amp;x);\n\n    int x, y;\n    scanf(\"%d%d\", &amp;x, &amp;y);\n\n    float f;\n    scanf(\"%f\", &amp;f);\n\n    char c;\n    scanf(\"%c\", &amp;c); // this will scan spaces too!\n    scanf(\" %c\", &amp;c); // this will ignore all leading spaces...\n}\n</code></pre>"},{"location":"algorithm/review/ACM_IO/#iostream","title":"iostream","text":"<p>Acceleration:</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n}\n</code></pre> <p><code>cin &gt;&gt; x</code> are separated by spaces or line breaks. types are auto-casted.</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst static int N = 1000;\nint xs[N];\n\nint main() {\n    // input until EOF\n    int x;\n    int i = 0;\n    while (cin &gt;&gt; x) {\n        xs[i++] = x;\n    }\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n    string s;\n    cin &gt;&gt; s; // only get one word\n}\n</code></pre> <p>If you want to get a whole input line (may contain spaces) to string:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n\nint main() {\n    string s;\n    getline(cin, s); // NOT cin.getline(c_str);\n\n    // if s is a single int\n    int x = stoi(s);\n\n    // if s is a list of int (unknown length), to extract them:\n    istringstream iss(s);\n    int x;\n    while (iss &gt;&gt; x) {\n        cout &lt;&lt; x &lt;&lt; \" \";\n    }\n}\n</code></pre> <p>Example of an input that contain N+1 lines, the first line is N, then the next N lines are integers of unknown length:</p> <pre><code>int N;\nstring s;\ngetline(cin, s); // cannot cin &gt;&gt; N; cin won't consume the endline, and will cause the next getline to get an empty string!\nN = stoi(s);\nfor (int i = 0; i &lt; N; i++) {\n    // get a line of ints\n    getline(cin, s);\n    istringstream iss(s);\n    int x;\n    while (iss &gt;&gt; x) {\n        // ...\n    }\n}\n</code></pre> <p><code>cout</code> precision:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n\nusing namespace std;\n\nint main() {\n    double f = 3.1415926;\n    // default, in total 5 effective numbers.\n    cout &lt;&lt; setprecision(5) &lt;&lt; f &lt;&lt; endl; // 3.1416\n\n    // fixed-point float notation, always 5 numbers after floating-point.\n    cout &lt;&lt; fixed &lt;&lt; setprecision(5) &lt;&lt; f &lt;&lt; endl; // 3.14159\n}\n</code></pre>"},{"location":"algorithm/review/Python/","title":"Python","text":""},{"location":"algorithm/review/Python/#python-migration","title":"Python migration","text":""},{"location":"algorithm/review/Python/#acm-style-io","title":"ACM-style IO","text":"<p>Input:</p> <pre><code># read a line to string\nl = input()\n\n# to read space (include multiple spaces and tabs) separated int\nls = [int(x) for x in input().split()]\n</code></pre> <p>Output:</p> <pre><code>x = 0.123\nprint(f'{x:.2f}')\nprint('{:.2f}'.format(x))\n\ni = 6\nprint(f'{x:05d}')\n\ns = 'hello'\nprint(f'{s}')\n\n# ints separated by one space\nls = [1, 2, 3]\nprint(' '.join([str(x) for x in ls])) # \"1 2 3\"\n\n# print end\nprint(x, end='') # do not append \\n\n</code></pre>"},{"location":"algorithm/review/Python/#list","title":"list","text":"<pre><code>l = []\nl.append(x)\nl += [x]\nl.extend(l2)\n\n# slicing\nl[1:]\nl[:-1]\n\n# reverse\nl[::-1]\n\n# sort\nsorted(l) # small to large\nsorted(l, reversed=True) # large to small\nl.sort()\n\n# remove by index\ndel l[idx]\nv = l.pop(idx)\n\n# remove by value\nl.remove(val) # ValueError if not found\nl = [x in l if x != val]\n</code></pre> <ul> <li> <p>remove in for loop:</p> <p>Not well supported. Use list comprehension or filter.</p> </li> </ul>"},{"location":"algorithm/review/Python/#set","title":"set","text":"<pre><code>s = set()\n\ns.add(x)\n\nif x in s:\n    print('YES')\n\ns.remove(x) # ValueError if not found\ns.discard(x) # pass if not found.\n</code></pre>"},{"location":"algorithm/review/Python/#dict","title":"dict","text":"<pre><code>d = {}\n\nd['x'] = 1\n\ndel d['x']\n\nfor k, v in d.items():\n    pass\n\nfor k in d:\n    print(k, d[k])\n\nif k in d:\n    print(d[k])    \n</code></pre>"},{"location":"algorithm/review/Python/#tricks","title":"tricks","text":"<ul> <li> <p>automatic memorizing recursion:</p> <pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n &lt; 2: return n\n    return fib(n - 1) + fib(n - 2)\n</code></pre> </li> </ul>"},{"location":"algorithm/review/Trie/","title":"Trie\u6811","text":"<p>\u524d\u7f00\u6811/\u5b57\u5178\u6811\u3002\u8f93\u5165\u4e00\u4e2a\u8bcd\u5178\uff08\u591a\u4e2a\u6a21\u5f0f\u5b57\u7b26\u4e32\uff09\uff0c\u7528\u4e8e\u68c0\u7d22\u4efb\u610f\u5b57\u7b26\u4e32\uff08\u7684\u524d\u7f00\uff09\u662f\u5426\u51fa\u73b0\u5728\u8bcd\u5178\u4e2d\u3002</p> <p>\u5b9e\u73b0\\(O(|S|)\\)\u65f6\u95f4\u7684\u63d2\u5165\u5b57\u7b26\u4e32\u3001\u68c0\u7d22\u5b57\u7b26\u4e32\uff08\u524d\u7f00\uff09\u529f\u80fd\u3002</p> <pre><code>class Trie {\npublic:\n    struct node {\n        bool exist = false;\n        node* children[26];\n    };\n    node* root;\n\n    Trie() {\n        root = new node();\n    }\n\n    void insert(string word) {\n        node *cur = root;\n        for (char c: word) {\n            int idx = c - 'a';\n            if (cur-&gt;children[idx] == nullptr) cur-&gt;children[idx] = new node();\n            cur = cur-&gt;children[idx];\n        }\n        cur-&gt;exist = true;\n    }\n\n    bool search(string word) {\n        node *cur = root;\n        for (char c: word) {\n            int idx = c - 'a';\n            if (cur-&gt;children[idx] == nullptr) return false;\n            cur = cur-&gt;children[idx];\n        }\n        if (cur-&gt;exist) return true;\n        else return false;\n    }\n\n    bool startsWith(string prefix) {\n        node *cur = root;\n        for (char c: prefix) {\n            int idx = c - 'a';\n            if (cur-&gt;children[idx] == nullptr) return false;\n            cur = cur-&gt;children[idx];\n        }\n        return true;\n    }\n};\n\n\n// concise ver.\nstruct trie {\n  int nex[100000][26], cnt;\n  bool exist[100000];  // \u8be5\u7ed3\u70b9\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728\n\n  void insert(char *s, int l) {  // \u63d2\u5165\u5b57\u7b26\u4e32\n    int p = 0;\n    for (int i = 0; i &lt; l; i++) {\n      int c = s[i] - 'a';\n      if (!nex[p][c]) nex[p][c] = ++cnt;  // \u5982\u679c\u6ca1\u6709\uff0c\u5c31\u6dfb\u52a0\u7ed3\u70b9\n      p = nex[p][c];\n    }\n    exist[p] = 1;\n  }\n  bool find(char *s, int l) {  // \u67e5\u627e\u5b57\u7b26\u4e32\n    int p = 0;\n    for (int i = 0; i &lt; l; i++) {\n      int c = s[i] - 'a';\n      if (!nex[p][c]) return 0;\n      p = nex[p][c];\n    }\n    return exist[p];\n  }\n};\n</code></pre>"},{"location":"algorithm/review/Trie/#trie_1","title":"Trie\u56fe","text":"<p>AC\u81ea\u52a8\u673a\uff08Trie\u6811\u4e0a\u7684KMP\uff09\u3002\u8f93\u5165\u4e00\u4e2a\u8bcd\u5178\uff0c\u7528\u4e8e\u68c0\u67e5\u4efb\u610f\u5b57\u7b26\u4e32\u662f\u5426\u5305\u542b\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u3002</p> <ul> <li>\u4e0eTrie\u6811\u7684\u533a\u522b\uff1a\u4e0d\u4e00\u5b9a\u662f\u524d\u7f00\uff0c\u5355\u8bcd\u53ef\u4ee5\u51fa\u73b0\u5728\u5b57\u7b26\u4e32\u4efb\u610f\u4f4d\u7f6e\u3002</li> <li>\u4e0eKMP\u7684\u533a\u522b\uff1a\u53ef\u4ee5\u540c\u65f6\u5bf9\u591a\u4e2a\u6a21\u5f0f\u4e32\uff08\u8bcd\u5178\uff09\u8fdb\u884c\u5339\u914d\u3002</li> </ul> <p>\u5047\u8bbe\u8bcd\u5178\u5305\u542bN\u4e2a\u6a21\u5f0f\u4e32\\(\\{P_i\\}\\)\uff0c\u8981\u68c0\u7d22\u7684\u5b57\u7b26\u4e32\u957f\u5ea6L\u3002</p> <ul> <li>\u5bf9\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5355\u72ec\u8fdb\u884cKMP\u5339\u914d\uff1a\\(O(\\sum_i^N|P_i|+NL)\\)\u3002</li> <li>\u5148\u5efa\u7acbTrie\u6811\uff0c\u518d\u5bf9\u5b57\u7b26\u4e32\u679a\u4e3e\u8d77\u70b9\uff1a\\(O(\\sum_i^N|P_i| +L^2)\\)\u3002</li> </ul> <p>Trie\u56fe\u53ef\u4ee5\u5b9e\u73b0\\(O(\\sum_i^N|P_i| +L)\\)\u7684\u590d\u6742\u5ea6\u3002</p> <pre><code>const int letters = 26;\n\nstruct node {\n    bool bad;\n    node* pre;  // prefix pointer\n    node* child[letters];\n    node() {\n        memset(child, 0, sizeof(child));\n        pre = NULL;\n        bad = false;\n    }\n};\n\nvoid insert(node* rt, string s) {\n    int len = s.length();\n    for (int i = 0; i &lt; len; i++) {\n        int idx = s[i] - 'a';\n        if (rt-&gt;child[idx] == NULL) rt-&gt;child[idx] = new node();\n        rt = rt-&gt;child[idx];\n    }\n    rt-&gt;bad = true;\n}\n\nvoid buildDFA(node* rt) {\n    node* rrt = new node();\n    rt-&gt;pre = rrt;\n    for (int i = 0; i &lt; letters; i++) rrt-&gt;child[i] = rt;\n    queue&lt;node*&gt; q;\n    q.push(rt);\n    while (!q.empty()) {\n        node* p = q.front(); q.pop();\n        for (int i = 0; i &lt; letters; i++) {\n            node* pc = p-&gt;child[i];\n            if (pc) {\n                node* ppre = p-&gt;pre;\n                while (ppre-&gt;child[i] == NULL) ppre = ppre-&gt;pre;\n                pc-&gt;pre = ppre-&gt;child[i];\n                if (pc-&gt;pre-&gt;bad) pc-&gt;bad = true;\n                q.push(pc);\n            }\n        }\n    }\n}\n\nbool match(node* rt, string s) {\n    int len = s.length();\n    node* p = rt;\n    for (int i = 0; i &lt; len; i++) {\n        int idx = s[i] - 'a';\n        while (p != rt &amp;&amp; p-&gt;child[idx] == NULL) p = p-&gt;pre;\n        if (p-&gt;child[idx]) {\n            p = p-&gt;child[idx];\n            if (p-&gt;bad) return true;\n        }\n        else continue;\n    }\n    return false;\n}\n</code></pre>"},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/","title":"\u4e8c\u5206\u6cd5 Binary Search","text":""},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/#_1","title":"\u5e94\u7528\u4e8c\u5206\u6cd5\u7684\u524d\u63d0\u6761\u4ef6","text":"<p>\u641c\u7d22\u7a7a\u95f4\u5355\u8c03\uff01</p> \\[ \\displaylines{ i &lt; j \\Rightarrow test(i) \\rightarrow test(j) } \\]"},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/#_2","title":"\u5206\u7c7b\uff08\u6839\u636e\u641c\u7d22\u76ee\u6807\uff09","text":"<ul> <li> <p>\u5355\u503c</p> <p><pre><code>int binary_search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1; \n    while(left &lt;= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] &lt; target) {\n            left = mid + 1;\n        } else if (nums[mid] &gt; target) {\n            right = mid - 1; \n        } else if(nums[mid] == target) {\n            // \u76f4\u63a5\u8fd4\u56de\n            return mid;\n        }\n    }\n    // \u76f4\u63a5\u8fd4\u56de\n    return -1;\n}\n</code></pre> * \u5de6\u8fb9\u754c</p> <p><pre><code>int left_bound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left &lt;= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] &lt; target) {\n            left = mid + 1;\n        } else if (nums[mid] &gt; target) {\n            right = mid - 1;\n        } else if (nums[mid] == target) {\n            // \u522b\u8fd4\u56de\uff0c\u9501\u5b9a\u5de6\u4fa7\u8fb9\u754c\n            right = mid - 1;\n        }\n    }\n    // \u6700\u540e\u8981\u68c0\u67e5 left \u8d8a\u754c\u7684\u60c5\u51b5\n    if (left &gt;= nums.length || nums[left] != target)\n        return -1;\n    return left;\n}\n\n// simplif version\nbool test(int m) {\n    // ... 1 2 [ 3 4 ...\n    //   false [ true\n    if (OK(m)) return true;\n  else: return false;\n} \n\nint left_bound() {\n    int l = L, r = R;\n    while (l &lt;= r) {\n        int m = (l + r) / 2;\n        if (test(m)) r = m - 1;\n        else l = m + 1;\n    }\n    return l;\n}\n</code></pre> * \u53f3\u8fb9\u754c</p> <p><pre><code>int right_bound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left &lt;= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] &lt; target) {\n            left = mid + 1;\n        } else if (nums[mid] &gt; target) {\n            right = mid - 1;\n        } else if (nums[mid] == target) {\n            // \u522b\u8fd4\u56de\uff0c\u9501\u5b9a\u53f3\u4fa7\u8fb9\u754c\n            left = mid + 1;\n        }\n    }\n    // \u6700\u540e\u8981\u68c0\u67e5 right \u8d8a\u754c\u7684\u60c5\u51b5\n    if (right &lt; 0 || nums[right] != target)\n        return -1;\n    return right;\n}\n\n// simplified version\nbool test(int m) {\n    // ... 1 2 ] 3 4 ...\n    //    true ] false\n    if (OK(m)) return true;\n    else: return false;\n} \n\nint right_bound() {\n    int l = L, r = R;\n    while (l &lt;= r) {\n        int m = (l + r) / 2;\n        if (test(m)) l = m + 1;\n        else r = m - 1;\n    }\n    return r;\n}\n</code></pre> * STD function for simple usage:</p> <pre><code>#include &lt;algorithm&gt;\n\n// lower_bound( begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a**\u5927\u4e8e\u6216\u7b49\u4e8e**num\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002\n// upper_bound(begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a**\u5927\u4e8e**num\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002\n\n// small --&gt; large\nsort(v.begin(), v.end());\nint l = lower_bound(v.begin(), v.end(), x) - v.begin();\nint r = upper_bound(v.begin(), v.end(), x) - v.begin();\n\n// large --&gt; small\nsort(v.begin(), v.end(), greater&lt;int&gt;());\nint l = lower_bound(v.begin(), v.end(), x, greater&lt;int&gt;()) - v.begin();\nint r = upper_bound(v.begin(), v.end(), x, greater&lt;int&gt;()) - v.begin();\n\n// remember to check the boundary!\n// e.g., find the nearest number to x in v.\nint ans;\nint i = lower_bound(v.begin(), v.end(), x) ;\nif (i == 0) {\n    ans = v[i];\n} else if (i == v.size()) {\n    ans = v[i-1];\n} else {\n  if (abs(v[i] - x) &lt; abs(v[i-1] - x)) ans = v[i];\n    else ans = v[i-1];\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/#_3","title":"\u6d6e\u70b9\u4e8c\u5206","text":"<p>\u9700\u8981\u6307\u5b9a\u7cbe\u5ea6eps\uff0c\u4f46\u4e0d\u9700\u8981\u4fee\u6539\u8fb9\u754c\u3002</p> <pre><code>float mysqrt(float x, float eps=1e-4) {\n    float l = 0, r = x;\n    while (r - l &gt;= eps) {\n        float m = (l + r) / 2;\n        if (m * m - x &gt; eps) r = m;\n        else l = m;\n    }\n    return l;\n}\n</code></pre>"},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/#_4","title":"\u9898\u76ee","text":""},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/#174","title":"174 \u5730\u4e0b\u57ce\u6e38\u620f","text":"<p>\u6b63\u5411\u52a8\u6001\u89c4\u5212\u4e0d\u73b0\u5b9e\uff0c\u9700\u8981\u8bb0\u5f55\u62b5\u8fbe\u65f6\u6700\u5927\u751f\u547d\u4e0e\u9014\u4e2d\u6700\u5c0f\u751f\u547d\uff0c\u4e0d\u6ee1\u8db3\u6700\u4f18\u5b50\u7ed3\u6784\u3002</p> <p>\u4f46\u662f\u5728\u7ed9\u5b9a\u751f\u547d\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b63\u5411\u52a8\u6001\u89c4\u5212\u5f97\u5230\u62b5\u8fbe\u65f6\u7684\u6700\u5927\u751f\u547d\u3002</p> <p>\u5b58\u6d3b\u662f\u751f\u547d\u7684\u5355\u8c03\u51fd\u6570\uff0c\u95ee\u9898\u8f6c\u53d8\u4e3a\u5bf9\u5de6\u8fb9\u754c\uff08\u6700\u5c0f\u9700\u8981\u751f\u547d\uff09\u7684\u4e8c\u5206\u641c\u7d22\u3002</p> <p>\u4ece <code>+inf</code>\u5f00\u59cb\u641c\u7d22\uff0c\u95ee\u9898\u4fdd\u8bc1\u6709\u89e3\uff0c\u6545\u4e0d\u9700\u8981\u8d8a\u754c\u68c0\u67e5\u3002</p> <pre><code>class Solution {\npublic:\n    bool test(vector&lt;vector&lt;int&gt;&gt;&amp; dungeon, int m) {\n        int M = dungeon.size();\n        int N = dungeon[0].size();\n        vector&lt;vector&lt;int&gt;&gt; dp(M + 1, vector&lt;int&gt;(N + 1, -0x3f3f3f));\n        dp[0][1] = dp[1][0] = m;\n        for (int i = 1; i &lt;= M; i++) {\n            for (int j = 1; j &lt;= N; j++) {\n                int val = max(dp[i-1][j], dp[i][j-1]) + dungeon[i-1][j-1];\n                if (val &lt;= 0) continue;\n                else dp[i][j] = val;\n            }\n        }\n        return dp[M][N] &gt; 0;\n    }\n    int calculateMinimumHP(vector&lt;vector&lt;int&gt;&gt;&amp; dungeon) {\n        // [l, r] binary search, left bound\n        int l = 1, r = 0x3f3f3f3f;\n        while (l &lt;= r) {\n            int m = l + (r - l) / 2;\n            // m survives\n            if (test(dungeon, m)) r = m - 1;\n            else l = m + 1;\n        }\n        return l;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/#_5","title":"\u6b63\u65b9\u5f62\u77e9\u9635\u8fb9\u957f","text":"<p>\u524d\u7f00\u548c + \u53f3\u8fb9\u754c\u641c\u7d22\u3002</p> <pre><code>class Solution {\npublic:\n    bool test(vector&lt;vector&lt;int&gt;&gt;&amp; s, int k, int threshold){\n        int m = s.size();\n        int n = s[0].size();\n        for (int i = 0; i &lt; m - k; i++) {\n            for (int j = 0; j &lt; n - k; j++) {\n                if (s[i+k][j+k] - s[i+k][j] - s[i][j+k] + s[i][j] &lt;= threshold){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    int maxSideLength(vector&lt;vector&lt;int&gt;&gt;&amp; mat, int threshold) {\n        int m = mat.size();\n        if (m == 0) return 0;\n        int n = mat[0].size();\n        if (n == 0) return 0;\n        // prefix sum\n        vector&lt;vector&lt;int&gt;&gt; s(m+1, vector&lt;int&gt;(n+1, 0));\n        for (int i = 1; i &lt;= m; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + mat[i-1][j-1];\n            }\n        }\n        // bs right bound []\n        int l = 1, r = max(m, n);\n        while (l &lt;= r) {\n            int m = (l + r) / 2;\n            if (test(s, m, threshold)) l = m + 1;\n            else r = m - 1;\n        }\n        return r;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/#162","title":"162\u5bfb\u627e\u5cf0\u503c","text":"<p>\u8fb9\u754c\u5224\u5b9a\u5341\u5206\u9ebb\u70e6\u3002</p> <pre><code>class Solution {\npublic:\n    int findPeakElement(vector&lt;int&gt;&amp; nums) {\n        // size == 1\n        if (nums.size() == 1) return 0;\n        int l = 0, r = nums.size() - 1;\n        while (l &lt;= r) {\n            int m = l + (r - l) / 2;\n            // border\n            if (m == 0) return nums[m] &gt; nums[m + 1] ? m : m + 1;\n            if (m == nums.size() - 1) return nums[m] &gt; nums[m - 1] ? m : m - 1;\n            // middle\n            if (nums[m] &gt; nums[m - 1] &amp;&amp; nums[m] &gt; nums[m + 1]) return m;\n            else if (nums[m] &lt;= nums[m - 1]) r = m - 1;\n            else if (nums[m] &lt;= nums[m + 1]) l = m + 1;\n        }\n        return -1; // never reach here.\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E4%BA%8C%E5%88%86%E6%B3%95/#_6","title":"\u53ef\u79fb\u9664\u5b57\u7b26\u7684\u6700\u5927\u6570\u76ee","text":"<p>\u5b50\u5e8f\u5217\u5224\u65ad\u8981\u7528\u53cc\u6307\u9488\u6cd5\uff01</p> <pre><code>class Solution {\npublic:\n    // lr pointer for O(m+n) subsequence check\n    bool check(int m, string&amp; s, string&amp; p, vector&lt;int&gt;&amp; v) {\n        int i = 0, j = 0;\n        while (i &lt; s.size() &amp;&amp; j &lt; p.size()) {\n            if (s[i] == p[j] &amp;&amp; v[i] &gt; m) {\n                i++; j++;\n            } else {\n                i++;\n            }\n        }\n        return (j == p.size());\n    }\n    int maximumRemovals(string s, string p, vector&lt;int&gt;&amp; removable) {\n        // for O(1) check if a char is removed at time t.\n        vector&lt;int&gt; v(s.size(), 0x7fffffff);\n        for (int i = 0; i &lt; removable.size(); i++) {\n            v[removable[i]] = i;\n        }\n        // binary search for left border\n        int l = 0, r = removable.size() - 1;\n        while (l &lt;= r) {\n            int m = (l + r) / 2;\n            if (check(m, s, p, v)) l = m + 1;\n            else r = m - 1;\n        }\n        return r + 1;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%85%B6%E4%BB%96/","title":"\u5176\u4ed6","text":""},{"location":"algorithm/review/%E5%85%B6%E4%BB%96/#fisher-yates-shuffle-knuth-shuffle","title":"Fisher-Yates Shuffle (Knuth Shuffle)","text":"<p>Random shuffle in \\(O(N)\\) time complexity.</p> <pre><code>void shuffle(vector&lt;int&gt;&amp; nums) {\n    for (int i = 0; i &lt; nums.size(); i++) {\n        int j = i + rand() % (nums.size() - i);\n        swap(nums[i], nums[j]);\n    }\n}\n</code></pre>"},{"location":"algorithm/review/%E5%87%A0%E4%BD%95/","title":"\u51e0\u4f55","text":""},{"location":"algorithm/review/%E5%87%A0%E4%BD%95/#_1","title":"\u4e09\u70b9\u5171\u7ebf","text":"<p>\u7528\u4e58\u6cd5\u4ee3\u66ff\u9664\u6cd5\u53ef\u4ee5\u907f\u514d\u5224\u65ad\u5206\u6bcd\u4e3a\u96f6\u3002</p> <pre><code>// this is wrong\n(a[0] - b[0]) / (a[1] - b[1]) != (a[0] - c[0]) / (a[1] - c[1]);\n// this is also wrong.\n(a[0] - b[0]) / (a[1] - b[1] + eps) != (a[0] - c[0]) / (a[1] - c[1] + eps);\n\n// but this is OK\n(a[0] - b[0]) * (a[1] - c[1]) != (a[0] - c[0]) * (a[1] - b[1]);\n</code></pre>"},{"location":"algorithm/review/%E5%87%B8%E4%BC%98%E5%8C%96/","title":"\u51f8\u4f18\u5316","text":""},{"location":"algorithm/review/%E5%87%B8%E4%BC%98%E5%8C%96/#_1","title":"\u51e0\u4f55\u4e2d\u5fc3","text":"<p>\u7ed9\u5b9a\u4e00\u4e9b\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\uff0c\u6c42\u4e00\u4e2a\u76ee\u6807\u70b9\u4f7f\u5f97\u5176\u5230\u6240\u6709\u7ed9\u5b9a\u70b9\u7684\u6b27\u6c0f\u8ddd\u79bb\u4e4b\u548c\u6700\u5c0f\u3002</p> \\[ \\displaylines{ \\min_{x,y}\\sum_{i}\\sqrt{(x-x_i)^2 + (y-y_i)^2} } \\] <p>\u6ca1\u6709\u89e3\u6790\u89e3\uff0c\u4f46\u76ee\u6807\u51fd\u6570\u4e3a\u51f8\u51fd\u6570\uff0c\u6545\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u6c42\u89e3\uff1a</p> <pre><code>class Solution {\npublic:\n    double getMinDistSum(vector&lt;vector&lt;int&gt;&gt;&amp; positions) {\n        double eps = 1e-7;\n        double alpha = 1;\n        double decay = 1e-3;\n\n        int n = positions.size();\n        int batchSize = min(n, 32);\n\n        // mean position\n        double x = 0.0, y = 0.0;\n        for (const auto&amp; pos: positions) {\n            x += pos[0];\n            y += pos[1];\n        }\n        x /= n;\n        y /= n;\n\n        // random engine\n        mt19937 gen{random_device{}()};\n\n        // loop epoch until convergence\n        while (true) {\n            shuffle(positions.begin(), positions.end(), gen);\n            double xPrev = x;\n            double yPrev = y;\n            // mini-batch SGD\n            for (int i = 0; i &lt; n; i += batchSize) {\n                int j = min(i + batchSize, n);\n                double dx = 0.0, dy = 0.0;\n                // accumulate gradient per batch\n                for (int k = i; k &lt; j; ++k) {\n                    const auto&amp; pos = positions[k];\n                    dx += (x - pos[0]) / (sqrt((x - pos[0]) * (x - pos[0]) + (y - pos[1]) * (y - pos[1])) + eps);\n                    dy += (y - pos[1]) / (sqrt((x - pos[0]) * (x - pos[0]) + (y - pos[1]) * (y - pos[1])) + eps);\n                }\n                // update\n                x -= alpha * dx;\n                y -= alpha * dy;\n                // lower lr\n                alpha *= (1.0 - decay);\n            }\n            // determine convergence\n            if (sqrt((x - xPrev) * (x - xPrev) + (y - yPrev) * (y - yPrev)) &lt; eps) {\n                break;\n            }\n        }\n\n        // get objective function value\n        auto getDist = [&amp;](double xc, double yc) {\n            double ans = 0;\n            for (const auto&amp; pos: positions) {\n                ans += sqrt((pos[0] - xc) * (pos[0] - xc) + (pos[1] - yc) * (pos[1] - yc));\n            }\n            return ans;\n        };        \n\n        return getDist(x, y);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_2","title":"\u524d\u63d0","text":"<ul> <li>\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u95ee\u9898\u7684\u89e3\u53ef\u4ee5\u901a\u8fc7\u7ec4\u5408\u5b50\u95ee\u9898\u7684\u89e3\u5f97\u5230\uff0c\u5373\u53ef\u4ee5\u901a\u8fc7\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u8868\u793a\u3002 </li> </ul> <ul> <li>\u91cd\u53e0\u5b50\u95ee\u9898\uff1a\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u5b50\u95ee\u9898\u91cd\u53e0\u3002</li> </ul> <ul> <li>\u901a\u5e38\u662f\u6c42\u6700\u503c\u95ee\u9898\u3002</li> </ul>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#knapsack","title":"Knapsack","text":""},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#01","title":"0/1","text":"<p>\u6700\u5927\u5bb9\u91cfN\uff0c\u5171M\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6700\u591a\u9009\u4e00\u6b21\u3002</p> <p>\u72b6\u6001\u65b9\u7a0b\uff1a\\(f[i][j]\\)\u8868\u793a\u4f7f\u7528\u524d\\(i\\)\u4e2a\u7269\u54c1\uff0c\u6700\u5927\u5bb9\u91cf\u4e3a\\(j\\)\u65f6\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002</p> \\[ \\displaylines{ f[i][j] = \\max(f[i-1][j], f[i-1][j-w[j]]+v[j]) \\\\ , 0 \\le i \\le M, 0 \\le j \\le N \\\\ } \\] <p>\u8fb9\u754c\u6761\u4ef6\uff1a</p> <ul> <li>\\(f[0][j] = 0\\)</li> <li>\\(f[i][0] = 0\\)</li> </ul> <pre><code>const int M = 100 + 1; // object\nconst int N = 1000 + 1; // space\n\nint ws[M];\nint vs[M];\n\nint dp[M][N];\n\nint main() {\n    // inputs\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; ws[i] &gt;&gt; vs[i];\n    }\n    // init\n    memset(dp, 0, sizeof(dp));\n    // loop\n    for (int i = 1; i &lt;= m; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            dp[i][j] = dp[i-1][j];\n            if (j &gt;= ws[i]) dp[i][j] = max(dp[i][j], dp[i-1][j-ws[i]]+vs[i]);\n        }\n    }\n    // return\n    cout &lt;&lt; dp[m][n] &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u7a7a\u95f4\u4f18\u5316\uff1a</p> <pre><code>const int M = 100 + 1;\nconst int N = 1000 + 1;\n\nint ws[M];\nint vs[M];\n\nint dp[N];\n\nint main() {\n    // inputs\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; ws[i] &gt;&gt; vs[i];\n    }\n    // init\n    memset(dp, 0, sizeof(dp));\n    // loop\n    for (int i = 1; i &lt;= m; i++) {\n        // reversed order! dp[i][j] only use dp[i-1][k] where k &lt; j\n        for (int j = n; j &gt;= 1; j--) {\n            if (j &gt;= ws[i]) dp[j] = max(dp[j], dp[j-ws[i]]+vs[i]);\n        }\n    }\n    // return\n    cout &lt;&lt; dp[n] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#complete","title":"Complete","text":"<p>\u6700\u5927\u5bb9\u91cfN\uff0c\u5171M\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u9009\u4efb\u610f\u6b21\u3002</p> \\[ \\displaylines{ f[i][j] = \\max_{0 \\le k \\le K}(f[i-1][j-kw[i]] + kv[i]) \\\\ f[i][j] = \\max(f[i-1][j], f[i][j-w[i]]+v[i]) } \\] <pre><code>const int M = 100 + 1;\nconst int N = 1000 + 1;\n\nint ws[M];\nint vs[M];\n\nint dp[M][N];\n\nint main() {\n    // inputs\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; ws[i] &gt;&gt; vs[i];\n    }\n    // init\n    memset(dp, 0, sizeof(dp));\n    // loop\n    for (int i = 1; i &lt;= m; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            dp[i][j] = dp[i-1][j];\n            if (j &gt;= ws[i]) dp[i][j] = max(dp[i][j], dp[i][j-ws[i]]+vs[i]);\n        }\n    }\n    // return\n    cout &lt;&lt; dp[m][n] &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u7a7a\u95f4\u4f18\u5316\uff1a</p> <pre><code>const int M = 100 + 1;\nconst int N = 1000 + 1;\n\nint ws[M];\nint vs[M];\n\nint dp[N];\n\nint main() {\n    // inputs\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; ws[i] &gt;&gt; vs[i];\n    }\n    // init\n    memset(dp, 0, sizeof(dp));\n    // loop\n    for (int i = 1; i &lt;= m; i++) {\n        // ordered! dp[i][j] can use dp[i][j-ws[i]]\n        for (int j = 1; j &lt;= n; j++) {\n            if (j &gt;= ws[i]) dp[j] = max(dp[j], dp[j-ws[i]]+vs[i]);\n        }\n    }\n    // return\n    cout &lt;&lt; dp[n] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_3","title":"\u8d2a\u5fc3\u5373\u53ef\u7684\u60c5\u51b5","text":"<ul> <li> <p>0/1\u80cc\u5305\uff0c\u4f46\u6240\u6709\u7269\u54c1\u7684\u4ef7\u503c\u90fd\u4e00\u6837\u3002</p> <p>\u76f4\u63a5\u5bf9\u7269\u54c1\u91cd\u91cf\u4ece\u4f4e\u5230\u9ad8\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u6309\u987a\u5e8f\u88c5\u5165\u80cc\u5305\uff0c\u76f4\u5230\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u5373\u53ef\u3002</p> <p>e.g. \u6700\u5927\u96ea\u7cd5\u6570</p> <pre><code>class Solution {\npublic:\n    int maxIceCream(vector&lt;int&gt;&amp; costs, int coins) {\n        sort(costs.begin(), costs.end());\n        int res = 0;\n        // don't fany parenthesis...\n        while ((res &lt; costs.size()) &amp;&amp; ((coins -= costs[res]) &gt;= 0)) {\n            res++;\n        }\n        return res;\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_4","title":"\u9898\u76ee","text":""},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_5","title":"\u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de \u548c\u4e3a n \u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6700\u5c11\u6570\u91cf \u3002</p> <p>\u5b8c\u5168\u5e73\u65b9\u6570 \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5176\u503c\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6574\u6570\u7684\u5e73\u65b9\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5176\u503c\u7b49\u4e8e\u4e00\u4e2a\u6574\u6570\u81ea\u4e58\u7684\u79ef\u3002\u4f8b\u5982\uff0c1\u30014\u30019 \u548c 16 \u90fd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u800c 3 \u548c 11 \u4e0d\u662f\u3002 </p> <pre><code>class Solution {\npublic:\n    int numSquares(int n) {\n        // complete knapsack\n        int m = sqrt(n) + 1;\n        // init\n        vector&lt;int&gt; dp(n + 1, 0x3f3f3f3f); // dp[1~n] should be inf\n        dp[0] = 0; // but dp[0] is 0\n        // loop\n        for (int i = 1; i &lt;= m; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                if (j - i * i &gt;= 0) dp[j] = min(dp[j], dp[j - i * i] + 1);\n            }\n        }\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#lcs","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 LCS","text":"<p>\u5b50\u5e8f\u5217(Subsequence)\u53ef\u4ee5\u4e0d\u8fde\u7eed\uff01(\u4e0e\u6700\u957f\u516c\u5171\u5b50\u4e32\u4e0d\u540c)</p> <p>\u7ecf\u5178\u52a8\u6001\u89c4\u5212\u89e3\u6cd5\\(O(n^2)\\)\uff1a</p> <p><code>dp[i][j]</code>\u4e3a\u4f7f\u7528\u524d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u524d<code>i</code>\u4e2a\u5b57\u7b26\u3001\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u524d<code>j</code>\u4e2a\u5b57\u7b26\u65f6\u7684LCS\u957f\u5ea6\u3002</p> <pre><code>class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        // init by max-size, to zeros.\n        int dp[1005][1005];\n        // start from 1, to avoid border detection.\n        for (int i = 1; i &lt;= text1.size(); i++) {\n            for (int j = 1; j &lt;= text2.size(); j++) {\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n                if (text1[i-1] == text2[j-1]) dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1);\n            }\n        }\n        return dp[text1.size()][text2.size()];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#lis","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 LIS","text":"<p>DP solution \\(O(n^2)\\):</p> <pre><code>class Solution {\npublic:\n    int lengthOfLIS(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; dp(n, 1); // LIS ending at nums[i]\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; i; j++) {\n                if (nums[j] &lt; nums[i]) {\n                    dp[i] = max(dp[i], dp[j] + 1);\n                }\n            }\n            ans = max(ans, dp[i]);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>Greedy + Binary Search \\(O(n \\log n)\\):</p> <pre><code>class Solution {\npublic:\n    int lengthOfLIS(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; v; // keep track of the best LIS \n        for (int i = 0; i &lt; n; i++) {\n            int idx = lower_bound(v.begin(), v.end(), nums[i]) - v.begin();\n            if (idx == v.size()) v.push_back(nums[i]);\n            else v[idx] = nums[i];\n        }\n        return v.size();\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#lislcs","title":"\u53ef\u4ee5\u8f6c\u6362\u4e3aLIS\u7684LCS\u95ee\u9898","text":"<p>\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u4e2d\u6709\u4e00\u4e2a\u5e8f\u5217\u7684\u5143\u7d20\u662f\u5404\u4e0d\u76f8\u540c\u7684\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5e8f\u5217\u89c6\u4e3a\u4e00\u4e2a\u6392\u5e8f\u5173\u7cfb\uff0c\u4ece\u800c\u5c06LCS\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u5e8f\u5217\u7684LIS\u95ee\u9898\uff0c\u4ece\u800c\\(O(n \\log n)\\)\u89e3\u51b3\u3002</p> <p>\u4f8b\u9898\uff1a\uff08\u5de7\u5999\u7684\u4f7f\u7528map\u505a\u66ff\u6362\uff09</p> <pre><code>class Solution {\npublic:\n    int minOperations(vector&lt;int&gt;&amp; target, vector&lt;int&gt;&amp; arr) {\n        int m = target.size(), n = arr.size();\n        // build an order map\n        map&lt;int, int&gt; M;\n        for (int i = 0; i &lt; m; i++) M[target[i]] = i;\n        // LIS\n        vector&lt;int&gt; v;\n        for (int i = 0; i &lt; n; i++) {\n            // ignore those unmet elements!\n            if (M.count(arr[i])) {\n                int idx = lower_bound(v.begin(), v.end(), M[arr[i]]) - v.begin();\n                if (idx == v.size()) v.push_back(M[arr[i]]);\n                else v[idx] = M[arr[i]];\n            }\n        }\n        return m - v.size();\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#lis_1","title":"LIS\u7684\u6570\u91cf","text":"<p>\u9700\u8981\u8bb0\u5f55\u989d\u5916\u7684\u4fe1\u606f\u3002</p> <pre><code>// dp ver.\nclass Solution {\npublic:\n    int findNumberOfLIS(vector&lt;int&gt; &amp;nums) {\n        int n = nums.size(), maxLen = 0, ans = 0;\n        vector&lt;int&gt; dp(n), cnt(n);\n        for (int i = 0; i &lt; n; ++i) {\n            dp[i] = 1;\n            cnt[i] = 1;\n            for (int j = 0; j &lt; i; ++j) {\n                if (nums[i] &gt; nums[j]) {\n                    if (dp[j] + 1 &gt; dp[i]) {\n                        dp[i] = dp[j] + 1;\n                        cnt[i] = cnt[j]; // \u91cd\u7f6e\u8ba1\u6570\n                    } else if (dp[j] + 1 == dp[i]) {\n                        cnt[i] += cnt[j];\n                    }\n                }\n            }\n            if (dp[i] &gt; maxLen) {\n                maxLen = dp[i];\n                ans = cnt[i]; // \u91cd\u7f6e\u8ba1\u6570\n            } else if (dp[i] == maxLen) {\n                ans += cnt[i];\n            }\n        }\n        return ans;\n    }\n};\n\n\n// binary search ver.\nclass Solution {\n    int binarySearch(int n, function&lt;bool(int)&gt; f) {\n        int l = 0, r = n;\n        while (l &lt; r) {\n            int mid = (l + r) / 2;\n            if (f(mid)) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n\npublic:\n    int findNumberOfLIS(vector&lt;int&gt; &amp;nums) {\n        vector&lt;vector&lt;int&gt;&gt; d, cnt;\n        for (int v : nums) {\n            int i = binarySearch(d.size(), [&amp;](int i) { return d[i].back() &gt;= v; });\n            int c = 1;\n            if (i &gt; 0) {\n                int k = binarySearch(d[i - 1].size(), [&amp;](int k) { return d[i - 1][k] &lt; v; });\n                c = cnt[i - 1].back() - cnt[i - 1][k];\n            }\n            if (i == d.size()) {\n                d.push_back({v});\n                cnt.push_back({0, c});\n            } else {\n                d[i].push_back(v);\n                cnt[i].push_back(cnt[i].back() + c);\n            }\n        }\n        return cnt.back().back();\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_6","title":"\u6700\u957f\u516c\u5171\u5b50\u4e32","text":"<p>\u5b50\u4e32(Substring)\u5fc5\u987b\u8fde\u7eed\uff01</p> <p>\u52a8\u6001\u89c4\u5212\\(O(n^2)\\)\uff1a</p> <p><code>dp[i][j]</code>\u4e3a\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7b2c<code>i</code>\u4e2a\u5b57\u7b26\u3001\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7b2c<code>j</code>\u4e2a\u5b57\u7b26\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u3002</p> <p>\u9700\u8981\u4f7f\u7528\u989d\u5916\u7684\u53d8\u91cf\u7ef4\u62a4\u5168\u5c40\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\u3002</p> <pre><code>class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        // init by max-size, to zeros.\n        int dp[1005][1005];\n        int res = 0;\n        // start from 1, to avoid border detection.\n        for (int i = 1; i &lt;= text1.size(); i++) {\n            for (int j = 1; j &lt;= text2.size(); j++) {\n                if (text1[i-1] == text2[j-1]) {\n                    dp[i][j] = dp[i-1][j-1] + 1;\n                    res = max(res, dp[i][j]);\n                }\n                else dp[i][j] = 0;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_7","title":"\u6700\u957f\u516c\u5171\u5b50\u4e32\uff08\u591a\u5e8f\u5217\uff09","text":"<p>(POJ Corporate Identity)</p> <ul> <li> <p>KMP Brute Force</p> <p>N strings' LCS. </p> <p>Time Complexity: \\(O(N^2L^2)\\), L is the minimum length of the N strings.</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nconst int maxn = 4005;\nconst int maxc = 205;\n\nint Next[maxc];\n\nvoid getNext(string&amp; p) {\n  int l = p.length();\n  Next[0] = -1;\n  int i = 0, k = -1;\n  while (i &lt; l - 1) {\n      while (k &gt;= 0 &amp;&amp; p[k] != p[i]) k = Next[k];\n      i++, k++;\n      if (p[k] == p[i]) Next[i] = Next[k]; \n      else Next[i] = k;\n  }\n}\n\nint KMP(string&amp; t, string&amp; p) {\n  int tlen = t.length();\n  int plen = p.length();\n  if (tlen &lt; plen) return -1;\n  int i = 0, j = 0;\n  while (i &lt; tlen &amp;&amp; j &lt; plen) {\n      if (j == -1 || t[i] == p[j]) i++, j++;\n      else j = Next[j];  \n  }\n  if (j == plen) return i - j;\n  else return -1;\n}\n\nint N;\nstring ss[maxn];\nint main() {\n  while (cin &gt;&gt; N &amp;&amp; N) {\n      for (int i = 0; i &lt; N; i++) cin &gt;&gt; ss[i];\n      int len = ss[0].size();\n        string ans;\n      for (int i = len; i &gt; 0; i--) {\n          for (int j = 0; i + j &lt;= len; j++) {\n              string tmp = ss[0].substr(j, i);\n              getNext(tmp);\n              bool flag = true;\n              for (int k = 1; k &lt; N; k++) {\n                  if (KMP(ss[k], tmp) == -1) {\n                      flag = false;\n                        break;\n                  }\n              }\n              if (flag) {\n                    // lexically longest\n                  if(tmp.size()&gt;ans.size()) ans = tmp;\n                    else if(tmp.size()==ans.size() &amp;&amp; tmp&lt;ans) ans = tmp;\n              }\n          }\n      }\n        if(ans.empty()) cout &lt;&lt; \"IDENTITY LOST\" &lt;&lt; endl;\n        else cout&lt;&lt;ans&lt;&lt;endl;\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>KMP Binary Search</p> <p>\\(O(L \\log L*N^2)\\)\uff0c enough for most problems !</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nstring ss[6];\nint N;\n\nbool check(int x) {\n  for (int i = 0; i &lt;= int(ss[0].size()) - x; i++) {\n      string sub = ss[0].substr(i, x);\n      bool flag = true;\n      for (int i = 1; i &lt; N; i++) {\n          if (ss[i].find(sub) == -1) {\n              flag = false;\n              break;\n          }\n      }\n      if (flag) return true;\n  }\n  return false;\n}\n\nint main() {\n  cin &gt;&gt; N;\n  string ans;\n  for (int i = 0; i &lt; N; i++) cin &gt;&gt; ss[i];\n  int left = 0, right = 2005;\n  while (left &lt; right) {\n      int mid = (left + right) / 2;\n      if (check(mid)) left = mid + 1;\n      else right = mid;\n  }\n  cout &lt;&lt; left - 1 &lt;&lt; endl;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Suffix Array</p> <p>Time Complexity: \\(O(N^2\\log L)\\)</p> <p>Effective, but not always easy to write, anyway.</p> </li> </ul>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_8","title":"\u72b6\u6001\u538b\u7f29","text":"<p>\u901a\u5e38\u9898\u76ee\u4e2d\u4f1a\u6709\u4e00\u4e2a\u5e8f\u5217\uff0810~30\u957f\u5ea6\uff09\uff0c\u8fd9\u4e2a\u5e8f\u5217\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5373\u4f7f\u7528\u4e00\u4e2a<code>int</code>\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217\u7684\u72b6\u6001\u3002</p>"},{"location":"algorithm/review/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#wonderful-strings","title":"Wonderful Strings","text":"<p>\u5982\u679c\u67d0\u4e2a\u5b57\u7b26\u4e32\u4e2d \u81f3\u591a\u4e00\u4e2a \u5b57\u6bcd\u51fa\u73b0 \u5947\u6570 \u6b21\uff0c\u5219\u79f0\u5176\u4e3a \u6700\u7f8e \u5b57\u7b26\u4e32\u3002</p> <p>\u4f8b\u5982\uff0c\"ccjjc\" \u548c \"abab\" \u90fd\u662f\u6700\u7f8e\u5b57\u7b26\u4e32\uff0c\u4f46 \"ab\" \u4e0d\u662f\u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 word \uff0c\u8be5\u5b57\u7b26\u4e32\u7531\u524d\u5341\u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff08'a' \u5230 'j'\uff09\u3002\u8bf7\u4f60\u8fd4\u56de word \u4e2d \u6700\u7f8e\u975e\u7a7a\u5b50\u5b57\u7b26\u4e32 \u7684\u6570\u76ee\u3002\u5982\u679c\u540c\u6837\u7684\u5b50\u5b57\u7b26\u4e32\u5728 word \u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u90a3\u4e48\u5e94\u5f53\u5bf9 \u6bcf\u6b21\u51fa\u73b0 \u5206\u522b\u8ba1\u6570\u3002</p> <p>\u5b50\u5b57\u7b26\u4e32 \u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u5b57\u7b26\u5e8f\u5217\u3002</p> <pre><code>class Solution {\npublic:\n    // substring problem, naive solution is to iterate begin:end, O(n^2)\n    // problem size &lt;= 10^5, so we need at most O(nlogn)\n    long long wonderfulSubstrings(string word) {\n        // to avoid O(n^2), we usually need a map to count different prefixes.\n        unordered_map&lt;int, int&gt; cnt;\n        cnt[0] = 1;\n        long long ans = 0;\n        // state compression, note 10 digits &lt;= 2^10, can be represented with an integer.\n        int mask = 0;\n        for (int i = 0; i &lt; word.size(); i++) {\n            int c = word[i] - 'a';\n            // current mask\n            mask ^= (1 &lt;&lt; c);\n            // 0 odd: the same prefix mask\n            ans += cnt[mask];\n            // 1 odd: 10 types of suitable prefixes, add each count to ans.\n            for (int j = 0 ; j &lt; 10; j++) {\n                int prefix = (mask ^ (1 &lt;&lt; j));\n                ans += cnt[prefix];\n            }\n            // update prefix map.\n            cnt[mask]++;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/","title":"\u533a\u95f4\u95ee\u9898","text":""},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_2","title":"\u533a\u95f4\u6c42\u548c","text":"\u6570\u7ec4\u4fee\u6539 \u67e5\u8be2 \u7b97\u6cd5\uff08\u6700\u4f73\u65b9\u6848\u5728\u524d\uff09 \u9759\u6001 \u533a\u95f4\u6c42\u548c \u524d\u7f00\u548c\uff0c\u6811\u72b6\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811 \u5355\u70b9\u589e\u91cf \u533a\u95f4\u6c42\u548c \u6811\u72b6\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811 \u533a\u95f4\u589e\u91cf \u5355\u70b9 \u5dee\u5206\uff0c\u7ebf\u6bb5\u6811 \u533a\u95f4\u589e\u91cf \u533a\u95f4\u6c42\u548c \u7ebf\u6bb5\u6811 <ul> <li>\u533a\u95f4\u67e5\u8be2\u4e5f\u5305\u542b\u5355\u70b9\u67e5\u8be2\u3002</li> <li>\u7ebf\u6bb5\u6811\u4e3a\u6700\u901a\u7528\u7684\u65b9\u6848\uff08\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff09\uff0c\u4f46\u5bf9\u4e8e\u66f4\u9650\u5b9a\u7684\u573a\u666f\uff0c\u524d\u7f00\u548c\u3001\u5dee\u5206\u7b49\u65b9\u6cd5\u66f4\u7b80\u5355\u3002</li> </ul>"},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_3","title":"\u524d\u7f00\u548c","text":"<p>\u652f\u6301\\(O(1)\\)\u65f6\u95f4\u7684\u533a\u95f4\u67e5\u8be2\u3002</p> <pre><code>// build\nsums[i] = sums[i-1] + arr[i];\n// query\nQ[i, j] = sums[j] - sums[i-1]\n</code></pre> <ul> <li> <p>1D array</p> <pre><code>class NumArray {\npublic:\n    vector&lt;int&gt; sums;\n\n    NumArray(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        sums.resize(n + 1); // note: sums[0] is reserved for easy border handling.\n        for (int i = 0; i &lt; n; i++) {\n            sums[i + 1] = sums[i] + nums[i];\n        }\n    }\n\n    int sumRange(int i, int j) {\n        return sums[j + 1] - sums[i];\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>2D array</p> <p>\u901a\u5e38\u7528<code>s[i+1][j+1]</code>\u8868\u793a\u5de6\u4e0a\u5b50\u77e9\u9635<code>x[0:i+1][0:j+1]</code>\u7684\u6c42\u548c\uff0c\u8fd9\u6837\u53ef\u4ee5\u6b63\u5411\u5faa\u73af\u8ba1\u7b97\u3002</p> <pre><code>class NumMatrix {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; sums;\n\n    NumMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        sums.resize(m + 1, vector&lt;int&gt;(n + 1));\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                sums[i + 1][j + 1] = sums[i][j + 1] + sums[i + 1][j] - sums[i][j] + matrix[i][j];\n            }\n        }\n\n    }\n\n    int sumRegion(int row1, int col1, int row2, int col2) {\n        return sums[row2 + 1][col2 + 1] - sums[row1][col2 + 1] - sums[row2 + 1][col1] + sums[row1][col1];\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_4","title":"\u5dee\u5206","text":"<p>\u652f\u6301\\(O(1)\\)\u7684\u533a\u95f4\u4fee\u6539\uff0c\u4ee5\u53ca\u5747\u644a\\(O(1)\\)\u7684\u5355\u70b9\u67e5\u8be2\uff08\u9700\u8981\u67e5\u8be2\u6240\u6709\u5355\u70b9\u7684\u503c\uff09\u3002</p> <p>tips\uff1a\u5982\u679c\u533a\u95f4\u4fee\u6539\u4e0e\u533a\u95f4\u67e5\u8be2\u662f\u5b8c\u5168\u5206\u79bb\u7684\uff0c\u5373\u5148\u8fdb\u884c\u6240\u6709\u533a\u95f4\u4fee\u6539\u540e\uff0c\u518d\u8fdb\u884c\u6240\u6709\u533a\u95f4\u67e5\u8be2\uff0c\u53ef\u4ee5\u5148\u5dee\u5206\u540e\u524d\u7f00\u548c\uff0c\u4e5f\u80fd\u8fbe\u5230\\(O(n+m)\\)\u7684\u590d\u6742\u5ea6\u3002\u4f46\u5982\u679c\u8fd9\u4e24\u79cd\u64cd\u4f5c\u6df7\u5408\u8fdb\u884c\uff0c\u5219\u53ea\u80fd\u5229\u7528\u7ebf\u6bb5\u6811\\(O(m\\log n)\\)\u3002</p> <pre><code>// build\ndiff[i] = arr[i] - arr[i-1];\n// modify: add x to [i, j]\ndiff[i] += x;\ndiff[j+1] -= x;\n// query (must be sequential)\narr[i] = diff[i] + arr[i-1]\n</code></pre> <ul> <li> <p>1D array</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; corpFlightBookings(vector&lt;vector&lt;int&gt;&gt;&amp; bookings, int n) {\n        // init as 0\n        vector&lt;int&gt; nums(n, 0);\n        // modify\n        for (auto&amp; v : bookings) {\n            nums[v[0] - 1] += v[2];\n            if (v[1] &lt; n) nums[v[1]] -= v[2];\n        }\n        // query\n        for (int i = 1; i &lt; n; i++) {\n            nums[i] += nums[i - 1];\n        }\n        return nums;\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>1D discretized array</p> <p>\u533a\u95f4\u8303\u56f4\u8fdc\u5927\u4e8e\u533a\u95f4\u6570\u91cf\u65f6\uff0c\u9700\u8981\u4f7f\u7528map\u6a21\u62df\u7a00\u758f\u6570\u7ec4\u3002</p> <pre><code>class MyCalendarThree {\npublic:\n    map&lt;int, int&gt; m;\n    MyCalendarThree() {}\n    int book(int start, int end) {\n        // modify\n        m[start]++;\n        m[end]--;\n        // query max value, O(n), suboptimal to segtree O(logC)\n        int ans = 0, val = 0;\n        for (auto [k, v]: m) { // ordered map\n            val += v; // reconstruct\n            ans = max(ans, val);\n        }\n        return ans;\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>2D array</p> <p>\u901a\u5e38\u7528<code>s[i][j]</code>\u8868\u793a\u53f3\u4e0b\u5b50\u77e9\u9635<code>x[i:][j:]</code>\u7684\u589e\u91cf\uff0c\u8fd9\u6837\u53ef\u4ee5\u6b63\u5411\u5faa\u73af\u6c42\u539f\u59cb\u77e9\u9635\u503c\u3002</p> <p></p> <pre><code>// init as 0\nvector&lt;vector&lt;int&gt;&gt; diff(m + 1, vector&lt;int&gt;(n + 1, 0));\n\n// modify original mat (e.g., add x to mat[i:i+ii][j:j+jj])\ndiff[i][j] += x;\ndiff[i][j+jj] -= x;\ndiff[i+ii][j] -= x;\ndiff[i+ii][j+jj] += x;\n\n// query (saved mat[i][j] to res[i+1][j+1] for easy border condition)\nvector&lt;vector&lt;int&gt;&gt; res(m + 1, vector&lt;int&gt;(n + 1, 0));\nfor (int i = 1; i &lt;= m; i++) {\n    for (int j = 1; j &lt;= n; j++) {\n        res[i][j] = res[i][j-1] + res[i-1][j] - res[i-1][j-1] + diff[i-1][j-1];\n    }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_5","title":"\u6811\u72b6\u6570\u7ec4","text":"<p>\u652f\u6301\\(O(\\log n)\\)\u65f6\u95f4\u7684\u5355\u70b9\u66f4\u65b0\u4e0e\u533a\u95f4\u6c42\u548c\u3002</p> <p>\u9ed8\u8ba4\u4e0b\u6807\u4ece1\u5f00\u59cb\uff01\uff01\uff01</p> <ul> <li> <p>1D array</p> <pre><code>class NumArray {\npublic:\n    int lowbit(int x) { return x &amp; (-x); }\n    vector&lt;int&gt; bit, arr; // arr is to record the single point value.\n\n    // arr[i] += v\n    void add(int i, int v) {\n        for (i; i &lt; bit.size(); i += lowbit(i)) bit[i] += v;\n    }\n\n    // prefix sum of arr[1, ..., i]\n    int query(int i) {\n        int res = 0;\n        for (i; i &gt; 0; i -= lowbit(i)) res += bit[i];\n        return res;\n    }\n\n    NumArray(vector&lt;int&gt;&amp; nums) {\n        bit.resize(nums.size() + 1);\n        arr.resize(nums.size() + 1);\n        for (int i = 0; i &lt; nums.size(); i++) {\n            add(i + 1, nums[i]);\n            arr[i + 1] = nums[i];\n        }\n    }\n\n    // note: this is modify, not add!\n    void update(int index, int val) {\n        add(index + 1, val - arr[index + 1]);\n        arr[index + 1] = val;\n    }\n\n    int sumRange(int left, int right) {\n        return query(right + 1) - query(left);\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_6","title":"\u7ebf\u6bb5\u6811","text":"<p>\u652f\u6301\\(O(\\log n)\\)\u65f6\u95f4\u7684\u533a\u95f4\u66f4\u65b0\u4e0e\u533a\u95f4\u6c42\u548c\uff0c\u4f46\u5e38\u6570\u8f83\u5927\u3002</p> <ul> <li> <p>1D array</p> <pre><code>class Solution {\npublic:\n\n    #define ll long long // in case of overflow\n\n    // must use traditional memory allocation.\n    const static int maxn = 20000;\n\n    struct node {\n        int l, r;\n        ll sum, inc;\n        int mid() { return (l + r) / 2; }\n    } tr[maxn&lt;&lt;2];\n\n    #define lc 2*rt+1\n    #define rc 2*rt+2\n\n    void pushup(int rt) {\n        tr[rt].sum = tr[lc].sum + tr[rc].sum;\n    }\n\n    void pushdown(int rt) {\n        if (tr[rt].inc) {\n            tr[rt].sum += (tr[rt].r - tr[rt].l + 1)*tr[rt].inc;\n            tr[lc].inc += tr[rt].inc;\n            tr[rc].inc += tr[rt].inc;\n            tr[rt].inc = 0;\n        }\n    }\n\n    void build(int rt, int l, int r) {\n        tr[rt].l = l;\n        tr[rt].r = r;\n        tr[rt].inc = 0;\n        if (l == r) {\n            //tr[rt].sum = arr[l]; // if init is not all 0, support init from an arr.\n            return;\n        }\n        int m = (l + r) / 2;\n        build(lc, l, m);\n        build(rc, m + 1, r);\n        pushup(rt);\n    }\n\n\n    void add(int rt, int l, int r, int v) {\n        if (tr[rt].l == l &amp;&amp; tr[rt].r == r) {\n            tr[rt].inc += v;\n            return;\n        }\n        tr[rt].sum += (r - l + 1)*v;\n        int m = tr[rt].mid();\n        if (l &gt; m) add(rc, l, r, v);\n        else if (r &lt;= m) add(lc, l, r, v);\n        else {\n            add(lc, l, m, v);\n            add(rc, m + 1, r, v);\n        }\n    }\n\n\n    ll query(int rt, int l, int r) {\n        if (tr[rt].l == l &amp;&amp; tr[rt].r == r) return tr[rt].sum + tr[rt].inc*(r - l + 1);\n        pushdown(rt);\n        int m = tr[rt].mid();\n        if (l &gt; m) return query(rc, l, r);\n        else if (r &lt;= m) return query(lc, l, r);\n        else return query(lc, l, m) + query(rc, m + 1, r);\n    }\n\n    vector&lt;int&gt; corpFlightBookings(vector&lt;vector&lt;int&gt;&gt;&amp; bookings, int n) {\n        build(0, 0, n-1);\n        for (auto v: bookings) add(0, v[0]-1, v[1]-1, v[2]);\n        vector&lt;int&gt; ans;\n        for (int i = 0; i &lt; n; i++) ans.push_back(query(0, i, i));\n        return ans;\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_7","title":"\u533a\u95f4\u6700\u503c","text":"\u6570\u7ec4\u4fee\u6539 \u7b97\u6cd5 \u9759\u6001 ST\u8868\uff0c\u7ebf\u6bb5\u6811 \u533a\u95f4\u589e\u91cf \u7ebf\u6bb5\u6811 \u533a\u95f4\u66ff\u6362\uff08\u65e0\u539f\u59cb\u6570\u7ec4\uff09 \u7ebf\u6bb5\u6811 \u5355\u70b9\u66ff\u6362 \u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4"},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#st","title":"ST\u8868","text":""},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_8","title":"\u6269\u5c55\u6811\u72b6\u6570\u7ec4","text":"<p>\u652f\u6301\u5355\u70b9\u66ff\u6362\uff0c\u533a\u95f4\u67e5\u8be2</p> <pre><code>// maximum BIT\nconst int maxn = 100;\nint N;\nint arr[maxn], bit[maxn];\n\nint lowbit(int x) { return x &amp; (-x); }\n\nvoid init(int n) {\n    for (int i = 1; i &lt;= n; i++) {\n        bit[i] = arr[i];\n        for (int j = 1; j &lt; lowbit(i); j *= 2) \n            bit[i] = max(bit[i], bit[i - j]);\n    }\n}\n\n// O(lg^2n)\nvoid update(int i, int x) {\n    arr[i] = x;\n    for (i; i &lt;= N; i += lowbit(i)) {\n        bit[i] = x;\n        for (int j = 1; j &lt; lowbit(i); j *= 2)\n            bit[i] = max(bit[i], bit[i - j]);\n    }\n}\n\n// O(lg^2n)\nint query(int i, int j) {\n    int ans = 0;\n    while (j &gt;= i) {\n        ans = max(ans, arr[j]);\n        for (j-=1; j - lowbit(j) &gt;= i; j -= lowbit(j))\n            ans = max(ans, bit[j]);\n    }\n    return ans;\n}\n</code></pre>"},{"location":"algorithm/review/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_9","title":"\u7ebf\u6bb5\u6811","text":"<ul> <li> <p>\u66ff\u6362</p> <pre><code>const static int maxn = 10005;\n\nstruct node {\n    int l, r;\n    int mx, lazy;\n    int m() { return (l + r) / 2; }\n} seg[4 * maxn];\n\nvoid build(int rt, int l, int r) {\n    seg[rt].l = l;\n    seg[rt].r = r;\n    seg[rt].mx = 0;\n    seg[rt].lazy = 0;\n    if (l == r) return;\n    build(2 * rt + 1, l, (l + r) / 2);\n    build(2 * rt + 2, (l + r) / 2 + 1, r);\n}\n\nvoid pushup(int rt){\n    seg[rt].mx = max(seg[2 * rt + 1].mx, seg[2 * rt + 2].mx);\n}\n\nvoid pushdown(int rt) {\n    if (seg[rt].lazy) {\n        //cout&lt;&lt;\"push down \"&lt;&lt;rt&lt;&lt;\" \"&lt;&lt; seg[rt].l &lt;&lt; \"-\" &lt;&lt; seg[rt].r &lt;&lt; endl;\n        seg[2 * rt + 1].mx = seg[rt].mx;\n        seg[2 * rt + 2].mx = seg[rt].mx;\n        seg[2 * rt + 2].lazy = seg[2 * rt + 1].lazy = 1;\n        seg[rt].lazy = 0;\n    }\n}\n\nint query(int rt, int l, int r) {\n    if (l == seg[rt].l &amp;&amp; r == seg[rt].r)\n        return seg[rt].mx;\n    // push down\n    pushdown(rt);\n    int m = seg[rt].m();\n    if (r &lt;= m) return query(2 * rt + 1, l, r);\n    else if (l &gt; m) return query(2 * rt + 2, l, r);\n    else return max(query(2 * rt + 1, l, m), query(2 * rt + 2, m + 1, r));\n}\n\nvoid modify(int rt, int l, int r, int v) {\n    if (l == seg[rt].l &amp;&amp; r == seg[rt].r) {\n        seg[rt].mx = v; // set to v, not add v.\n        seg[rt].lazy = 1;\n        return;\n    }\n    // push down\n    pushdown(rt);\n    // interval decomp\n    int m = seg[rt].m();\n    if (r &lt;= m) modify(2 * rt + 1, l, r, v);\n    else if (l &gt; m) modify(2 * rt + 2, l, r, v);\n    else {\n        modify(2 * rt + 1, l, m, v);\n        modify(2 * rt + 2, m + 1, r, v);\n    }\n    // push up\n    pushup(rt);\n}\n</code></pre> </li> </ul> <ul> <li> <p>\u589e\u91cf</p> <pre><code>\n</code></pre> </li> </ul> <ul> <li> <p>\u52a8\u6001</p> <pre><code>\n</code></pre> </li> </ul>"},{"location":"algorithm/review/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/","title":"\u5355\u8c03\u961f\u5217 Monotone Queue","text":"<p>\u5373\u4fdd\u8bc1\u961f\u5217\u5185\u5143\u7d20\u5355\u8c03\u6027\u7684\u961f\u5217\u3002</p> <p>\u901a\u5e38\u7528\u4e8e\u6ed1\u52a8\u7a97\u53e3\u7684\u6781\u503c\u95ee\u9898\u3002</p> <pre><code>//// c version (min)\nint q[maxn]; // the monotone values inside the window \nint p[maxn]; // the indices\nint h = 0, t = 0;\nfor (int i = 0; i &lt; n; i++) {\n    // remove time-out \n    while (h &lt; t &amp;&amp; p[h] &lt;= i - k) h++;\n    // maintain queue (cs[i] is the current val, remove vals larger than it.)\n    while (t &gt;= 1 &amp;&amp; xs[i] &lt; q[t-1]) t--;\n    p[t] = i;\n    q[t++] = xs[i];\n    // now q[h] is the min value in window (i-k, i]\n    ...;\n}\n\n//// stl version (min)\nvector&lt;int&gt; q; // store values\ndeque&lt;int&gt; p; // store enqueue time\nfor (int i = 0; i &lt; n; i++) {\n    while (!p.empty() &amp;&amp; p.front() &lt;= i - k) p.pop_front();\n    while (!p.empty() &amp;&amp; xs[i] &lt; q[p.back()]) p.pop_back(); // &lt; or &lt;= is both OK.\n    p.push_back(i);\n    q.push_back(xs[i]);\n    // q[p.front()] is the min value in window (i-k, i]\n    ...;\n}\n\n//// stl version (max)\nvector&lt;int&gt; q; // store values\ndeque&lt;int&gt; p; // store enqueue time\nfor (int i = 0; i &lt; n; i++) {\n    while (!p.empty() &amp;&amp; p.front() &lt;= i - k) p.pop_front();\n    while (!p.empty() &amp;&amp; xs[i] &gt; q[p.back()]) p.pop_back(); // &gt; or &gt;= is both OK.\n    p.push_back(i);\n    q.push_back(xs[i]);\n    // q[p.front()] is the min value in window (i-k, i]\n    ...;\n}\n</code></pre>"},{"location":"algorithm/review/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#_1","title":"\u6ed1\u52a8\u7a97\u53e3\u6781\u503c","text":"<p>\u88f8\u6a21\u677f\\(O(N)\\)\uff1a</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        // monotone queue\n        vector&lt;int&gt; q;\n        deque&lt;int&gt; p;\n        vector&lt;int&gt; ans;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            while (!p.empty() &amp;&amp; p.front() &lt;= i - k) p.pop_front();\n            while (!p.empty() &amp;&amp; q[p.back()] &lt;= nums[i]) p.pop_back();\n            p.push_back(i);\n            q.push_back(nums[i]);\n            if (i &gt;= k - 1) ans.push_back(q[p.front()]);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u53e6\u4e00\u79cd\u5f62\u5f0f\uff08deque\u4e0d\u7ef4\u62a4\u65f6\u95f4\uff0c\u76f4\u63a5\u7ef4\u62a4\u6700\u503c\uff09</p> <pre><code>class Solution {\npublic:\n    struct monoque{\n        deque&lt;int&gt; que;\n        void push(int n){\n            while(!que.empty() &amp;&amp; que.back()&lt;n) que.pop_back();   \n            que.push_back(n);\n        }\n        int getmax(){ return que.front(); }\n        void pop(int n){ \n            if(que.front() == n) que.pop_front(); \n        }\n    };\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        int N = nums.size();\n        vector&lt;int&gt; ans;\n        monoque que;\n        for(int i=0; i&lt;N; i++){\n            que.push(nums[i]);\n            if(i&gt;=k-1){\n                ans.push_back(que.getmax());\n                que.pop(nums[i-k+1]);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u4f7f\u7528Sparse Table\u7684RMQ\u7b97\u6cd5\u4e5f\u53ef\u4ee5\\(O(N)\\)\u3002</p>"},{"location":"algorithm/review/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#maximum-value-in-queue","title":"Maximum value in queue","text":"<p>deque\u76f4\u63a5\u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u7684\u6700\u503c\u3002</p> <pre><code>class MaxQueue {\npublic:\n\n    queue&lt;int&gt; q;\n    deque&lt;int&gt; p;\n\n    MaxQueue() {}\n\n    int max_value() {\n        if (q.empty()) return -1;\n        return p.front();\n    }\n\n    void push_back(int value) {\n        q.push(value);\n        while (!p.empty() &amp;&amp; value &gt; p.back()) p.pop_back(); // must be &gt;, cannot use &gt;=\n        p.push_back(value);\n    }\n\n    int pop_front() {\n        if (q.empty()) return -1;\n        int x = q.front(); q.pop();\n        if (x == p.front()) p.pop_front();\n        return x;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#maximum-sum-circular-subarray","title":"Maximum Sum Circular Subarray","text":"<p>\u524d\u7f00\u548c&amp;\u6ed1\u52a8\u7a97\u53e3\uff1a</p> <pre><code>class Solution {\npublic:\n    int maxSubarraySumCircular(vector&lt;int&gt;&amp; A) {\n        int n = A.size();\n\n        // copy\n        vector&lt;int&gt; AA;\n        for (int i = 0; i &lt; n; i++) AA.push_back(A[i]);\n        for (int i = 0; i &lt; n; i++) AA.push_back(A[i]);\n\n        // cumsum\n        vector&lt;int&gt; cs(2*n+1, 0);\n        for (int i = 1; i &lt;= 2 * n; i++) {\n            cs[i] = cs[i - 1] + AA[i - 1];\n        }\n\n        vector&lt;int&gt; q; // store values\n        deque&lt;int&gt; p; // store enqueue time\n        q.push_back(0);\n        p.push_back(0);\n\n        int ans = -0x3f3f3f3f;\n        for (int i = 1; i &lt;= 2 * n; i++) {\n            // maintain queue\n            while (!p.empty() &amp;&amp; p.front() &lt; i - n) p.pop_front();\n            // maintain ans\n            ans = max(ans, cs[i] - q[p.front()]);\n            // maintain queue\n            while (!p.empty() &amp;&amp; cs[i] &lt; q[p.back()]) p.pop_back();\n            p.push_back(i);\n            q.push_back(cs[i]);\n        }\n        return ans;\n\n    }\n};\n</code></pre> <p>Kadane Twice\uff1a</p> <pre><code>class Solution {\npublic:\n    int maxSubarraySumCircular(vector&lt;int&gt;&amp; A) {\n        int n = A.size();\n        // kadane 1\n        int ans = A[0];\n        int dp = A[0];\n        for (int i = 1; i &lt; n; i++) {\n            dp = max(dp + A[i], A[i]);\n            ans = max(ans, dp);\n        }\n        // kadane 2 (if at least 3 elements)\n        int ans2 = ans;\n        if (n &gt;= 3) {\n            int s = 0;\n            for (int i = 0; i &lt; n; i++) s += A[i];\n            ans2 = A[1];\n            dp = A[1];\n            for (int i = 2; i &lt; n - 1; i++) {\n                dp = min(dp + A[i], A[i]);\n                ans2 = min(ans2, dp);\n            }\n            ans2 = s - ans2;\n        }\n        // final\n        return max(ans, ans2);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#the-next-larger-element-monotone-stack","title":"The next larger element (monotone stack)","text":"<p>\u7ed9\u4f60\u4e24\u4e2a \u6ca1\u6709\u91cd\u590d\u5143\u7d20 \u7684\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u5176\u4e2dnums1 \u662f nums2 \u7684\u5b50\u96c6\u3002\u8bf7\u4f60\u627e\u51fa nums1 \u4e2d\u6bcf\u4e2a\u5143\u7d20\u5728 nums2 \u4e2d\u7684\u4e0b\u4e00\u4e2a\u6bd4\u5176\u5927\u7684\u503c\u3002</p> <p>nums1 \u4e2d\u6570\u5b57 x \u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u662f\u6307 x \u5728 nums2 \u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u6bd4 x \u5927\u7684\u5143\u7d20\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u8f93\u51fa -1 \u3002 </p> <p>\u5012\u5e8f\u904d\u5386+\u5355\u8c03\u6808\u3002\\(O(n+m)\\)\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        // track next larger element for all pos in nums2\n        unordered_map&lt;int,int&gt; hashmap;\n        stack&lt;int&gt; st;\n        for (int i = nums2.size() - 1; i &gt;= 0; --i) {\n            int num = nums2[i];\n            while (!st.empty() &amp;&amp; num &gt;= st.top()) st.pop();\n            hashmap[num] = st.empty() ? -1 : st.top();\n            st.push(num);\n        }\n        // retrieve answer\n        vector&lt;int&gt; res(nums1.size());\n        for (int i = 0; i &lt; nums1.size(); ++i) {\n            res[i] = hashmap[nums1[i]];\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/","title":"\u53cc\u6307\u9488","text":""},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/#loop-detection","title":"loop detection","text":"<ul> <li> <p>Method 1: hash table</p> <pre><code>unordered_set&lt;node*&gt; visited;\n</code></pre> </li> </ul> <ul> <li> <p>Method 2: fast-slow pointer</p> <p><code>O(1)</code> Space.</p> <p>fast\u4e00\u6b21\u8d70\u4e24\u683c\uff0cslow\u4e00\u6b21\u8d70\u4e00\u683c\uff1b\u4e24\u6307\u9488\u76f8\u9047\u5219\u8bf4\u660e\u6709\u73af\u3002</p> <p>\u82e5\u8981\u627e\u5230\u73af\u5934\uff0c\u5219\u76f8\u9047\u4e4b\u540e\u518d\u4ece\u8d77\u70b9\u8dd1\u4e00\u4e2a\u6307\u9488\uff0c\u6b64\u6307\u9488\u4e0eslow\u6307\u9488\u76f8\u9047\u65f6\u5373\u5230\u8fbe\u73af\u5934\u3002</p> </li> </ul>"},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/#_1","title":"\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u641c\u7d22","text":""},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/#_2","title":"\u4e24\u6570\u4e4b\u548c","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u5176\u4e2d\u6240\u6709\u4e0d\u91cd\u590d\u7684\u4e24\u4e2a\u6570\uff0c\u4f7f\u5176\u548c\u4e3a\u7279\u5b9a\u503c\u3002</p> <pre><code>// O(n), lr pointer\nvector&lt;vector&lt;int&gt;&gt; twoSumTarget(vector&lt;int&gt;&amp; nums, int target) {\n    sort(nums.begin(), nums.end());\n\n    vector&lt;vector&lt;int&gt;&gt; res;\n\n    int l = 0, r = nums.size() - 1;\n    while (l &lt; r) {\n        int sum = nums[l] + nums[r];\n        int left = nums[l], right = nums[r];\n        if (sum &lt; target) {\n            while (l &lt; r &amp;&amp; nums[l] == left) l++;\n        } else if (sum &gt; target) {\n            while (l &lt; r &amp;&amp; nums[r] == right) r--;\n        } else {\n            res.push_back({left, right});\n            while (l &lt; r &amp;&amp; nums[l] == left) l++;\n            while (l &lt; r &amp;&amp; nums[r] == right) r--;\n        }\n    }\n\n    return res;\n}\n\n\n// \u5982\u679c\u53ea\u9700\u8981\u6c42\u4e00\u7ec4\u8fd9\u6837\u7684\u6570\u636e\uff08\u7684\u4e0b\u6807\uff09\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528hash\n// \u4f46hash\u6cd5\u6c42\u6240\u6709\u65f6\u4e0d\u597d\u53bb\u91cd\u590d\uff0c\u6545\u4e0d\u63a8\u8350\u3002\n// O(n), hash\nvector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n    unordered_map&lt;int, int&gt; v;\n    for (int i = 0; i &lt; nums.size(); i++) {\n        int x = nums[i];\n        if (v.count(target - x)) return vector&lt;int&gt;{i, v[target - x]};\n        else v[x] = i;\n    }\n    return vector&lt;int&gt;{-1, -1}; // never reach here\n}\n</code></pre>"},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/#_3","title":"\u4e09\u6570\u4e4b\u548c","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u5176\u4e2d\u6240\u6709\u4e0d\u91cd\u590d\u7684\u4e09\u4e2a\u6570\uff0c\u4f7f\u5176\u548c\u4e3a0\u3002</p> <pre><code>// O(n^2), lr pointer\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        // \u679a\u4e3e a\n        for (int first = 0; first &lt; n; ++first) {\n            // \u9700\u8981\u548c\u4e0a\u4e00\u6b21\u679a\u4e3e\u7684\u6570\u4e0d\u76f8\u540c\n            if (first &gt; 0 &amp;&amp; nums[first] == nums[first - 1]) {\n                continue;\n            }\n            // c \u5bf9\u5e94\u7684\u6307\u9488\u521d\u59cb\u6307\u5411\u6570\u7ec4\u7684\u6700\u53f3\u7aef\n            int third = n - 1;\n            int target = -nums[first];\n            // \u679a\u4e3e b\n            for (int second = first + 1; second &lt; n; ++second) {\n                // \u9700\u8981\u548c\u4e0a\u4e00\u6b21\u679a\u4e3e\u7684\u6570\u4e0d\u76f8\u540c\n                if (second &gt; first + 1 &amp;&amp; nums[second] == nums[second - 1]) {\n                    continue;\n                }\n                // \u9700\u8981\u4fdd\u8bc1 b \u7684\u6307\u9488\u5728 c \u7684\u6307\u9488\u7684\u5de6\u4fa7\n                while (second &lt; third &amp;&amp; nums[second] + nums[third] &gt; target) {\n                    --third;\n                }\n                // \u5982\u679c\u6307\u9488\u91cd\u5408\uff0c\u968f\u7740 b \u540e\u7eed\u7684\u589e\u52a0\n                // \u5c31\u4e0d\u4f1a\u6709\u6ee1\u8db3 a+b+c=0 \u5e76\u4e14 b&lt;c \u7684 c \u4e86\uff0c\u53ef\u4ee5\u9000\u51fa\u5faa\u73af\n                if (second == third) {\n                    break;\n                }\n                if (nums[second] + nums[third] == target) {\n                    ans.push_back({nums[first], nums[second], nums[third]});\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/#_4","title":"\u5408\u6cd5\u4e09\u89d2\u5f62\u4e2a\u6570","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u8fb9\u957f\u6570\u7ec4\uff0c\u6c42\u5176\u4e2d\u53ef\u4ee5\u7ec4\u6210\u5408\u6cd5\u4e09\u89d2\u5f62\u7684\u4e09\u5143\u7ec4\u4e2a\u6570\u3002</p> <p>\u66b4\u529b\u679a\u4e3e\u4e09\u6761\u8fb9\\(O(N^3)\\)\uff1b\u6392\u5e8f\u540e\u679a\u4e3e\u4e24\u6761\u8fb9\uff0c\u4e8c\u5206\u7b2c\u4e09\u6761\u8fb9\\(O(N^2\\log N)\\)\u3002</p> <p>\u6392\u5e8f\u540e\u679a\u4e3e\u4e00\u6761\u8fb9\uff0c\u53cc\u6307\u9488\u5904\u7406\u53e6\u5916\u4e24\u6761\u8fb9\\(O(N^2)\\)\u3002</p> <pre><code>class Solution {\npublic:\n    int triangleNumber(vector&lt;int&gt;&amp; nums) {\n        sort(nums.begin(), nums.end());\n        int ans = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            // double pointer (j, k)\n            for (int j = i + 1, k = i + 1; j &lt; nums.size(); j++) {\n                // j and k both only takes at most N ++step\n                while (k + 1 &lt; nums.size() &amp;&amp; nums[k + 1] &lt; nums[i] + nums[j]) k++;\n                ans += max(k - j, 0);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/#_5","title":"\u94fe\u8868\u76f8\u4ea4\u70b9","text":"<p>\u53cc\u6307\u9488\u6362\u5bb6\u3002\u8bc1\u660e\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u65b9\u6cd5\u60f3\u4e0d\u5230\u554a\u3002</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == nullptr || headB == nullptr) return nullptr;\n        ListNode *a = headA, *b = headB;\n        while (a != b) {\n            if (a) a = a-&gt;next; else a = headB;\n            if (b) b = b-&gt;next; else b = headA;\n        }\n        return a;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/#_6","title":"\u6551\u751f\u8247\u7684\u6700\u5c11\u6570\u91cf","text":"<p>\u5e76\u4e0d\u662f\u52a8\u89c4\uff0c\u95ee\u7684\u662f\u888b\u5b50\u7684\u6700\u5c11\u6570\u91cf\u3002</p> <p>\u5e94\u8be5\u7528\u8d2a\u5fc3\u6cd5\u505a\uff0c\u6bcf\u6b21\u5c3d\u53ef\u80fd\u586b\u6ee1\u888b\u5b50\uff08\u5148\u585e\u5927\u7684\uff0c\u7136\u540e\u7528\u5c0f\u7684\u5f00\u59cb\u586b\uff09\u3002</p> <p>\u8fdb\u4e00\u6b65\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u3002</p> <p>\u6bcf\u8258\u8239\u8f7d\u4eba\u91cf\u4e0a\u9650\u4e3a2\uff1a</p> <pre><code>class Solution {\npublic:\n    int numRescueBoats(vector&lt;int&gt;&amp; people, int limit) {\n        // greedy, double pointer\n        sort(people.begin(), people.end());\n        int l = 0, r = people.size() - 1;\n        int ans = 0;\n        while (l &lt;= r) {\n            int rem = limit - people[r];\n            if (l &lt; r &amp;&amp; rem &gt;= people[l]) {\n                rem -= people[l];\n                l++;\n            }\n            ans++;\n            r--;\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u6bcf\u8258\u8239\u8f7d\u4eba\u91cf\u4efb\u610f\u7684\u60c5\u51b5\uff1a</p> <pre><code>class Solution {\npublic:\n    int numRescueBoats(vector&lt;int&gt;&amp; people, int limit) {\n        // greedy, double pointer\n        sort(people.begin(), people.end());\n        int l = 0, r = people.size() - 1;\n        int ans = 0;\n        while (l &lt;= r) {\n            int rem = limit - people[r];\n            // change to while !\n            while (l &lt; r &amp;&amp; rem &gt;= people[l]) {\n                rem -= people[l];\n                l++;\n            }\n            ans++;\n            r--;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%8F%8C%E6%8C%87%E9%92%88/#s","title":"\u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6574\u6570\u5e8f\u5217","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 target \uff0c\u8f93\u51fa\u6240\u6709\u548c\u4e3a target \u7684\u8fde\u7eed\u6b63\u6574\u6570\u5e8f\u5217\uff08\u81f3\u5c11\u542b\u6709\u4e24\u4e2a\u6570\uff09\u3002\u5e8f\u5217\u5185\u7684\u6570\u5b57\u7531\u5c0f\u5230\u5927\u6392\u5217\uff0c\u4e0d\u540c\u5e8f\u5217\u6309\u7167\u9996\u4e2a\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5217\u3002</p> <p>\u4e24\u4e2a\u6307\u9488\u90fd\u4ece\u9996\u90e8\u5f00\u59cb\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; findContinuousSequence(int target) {\n        int l = 1, r = 2;\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        while (l &lt; r &amp;&amp; r &lt;= (target + 1) / 2) {\n            int s = (l + r) * (r - l + 1) / 2;\n            if (s == target) {\n                vector&lt;int&gt; tmp;\n                for (int i = l; i &lt;= r; i++) tmp.push_back(i);\n                ans.push_back(tmp);\n                l++; // don't forget this.\n            }\n            else if (s &lt; target) r++;\n            else l++;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%93%88%E5%B8%8C/","title":"hash","text":""},{"location":"algorithm/review/%E5%93%88%E5%B8%8C/#k","title":"\u548c\u4e3aK\u7684\u5b50\u6570\u7ec4","text":"<p>\u6c42\u6570\u7ec4\u4e2d\u548c\u4e3aK\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u3002\u524d\u7f00\u548c\u5c06\u95ee\u9898\u8f6c\u6362\u4e3a\u7c7b\u4f3c\u4e8e\u4e24\u6570\u4e4b\u548c\u7684\u95ee\u9898\uff0c\u518d\u4f7f\u7528\u54c8\u5e0c\u3002</p> <pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        // map of &lt;sum, cnt&gt;\n        map&lt;int, int&gt; m;\n        m[0] = 1;\n        int sum = 0, ans = 0;\n        for(int i = 0; i &lt; nums.size(); i++){\n            // cumsum\n            sum += nums[i];\n            // check answer\n            if (m.count(sum - k)) ans += m[sum-k];\n            // update map\n            if (m.count(sum)) m[sum]++;\n            else m[sum] = 1;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%9B%9E%E6%BA%AF/","title":"Recursion","text":""},{"location":"algorithm/review/%E5%9B%9E%E6%BA%AF/#_1","title":"\u5168\u6392\u5217","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n\n        vector&lt;vector&lt;int&gt;&gt; ans;\n\n        if (nums.empty()) {\n            ans.push_back(vector&lt;int&gt;());\n            return ans;\n        }\n\n        for (int i = 0; i &lt; nums.size(); i++) {\n            // must copy\n            vector&lt;int&gt; others(nums);\n            others.erase(others.begin() + i);\n            // r\n            auto p = permute(others);\n            for (auto v: p) {\n                v.insert(v.begin(), nums[i]);\n                ans.push_back(v);\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%9B%9E%E6%BA%AF/#_2","title":"\u5168\u7ec4\u5408","text":"<p>\u56de\u6eaf\uff1a</p> <pre><code>// find all combinations that sums to target\nint ans = 0;\nvoid dfs(vector&lt;int&gt;&amp; v, int target, int idx, int cur) {\n    if (idx == v.size()) {\n        if (cur == target) ans++;\n        return;\n    }\n\n    // dispatch two conditions\n    dfs(v, target, idx + 1, cur); // do not use v[idx]\n    dfs(v, target, idx + 1, cur + v[idx]); // use v[idx]\n}\n\ndfs(v, target, 0, 0);\n</code></pre> <p>\u8fed\u4ee3\uff08\u66f4\u6162\uff0c\u4e14\u8981\u6c42<code>v.size() &lt; 32</code>\uff09\uff1a</p> <pre><code>// find all combinations that sums to target\nint ans = 0;\nint maxm = (1 &lt;&lt; v.size()) - 1;\nfor (int m = 0; m &lt;= maxm; m++) {\n    int val = 0;\n    for (int i = 0; i &lt; v.size(); i++) {\n        if (m &amp; (1 &lt;&lt; i)) {\n            val += v[i];\n        }\n    }\n    if (val == target) ans++;\n}\n</code></pre>"},{"location":"algorithm/review/%E5%9B%9E%E6%BA%AF/#n","title":"N\u7687\u540e","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; tostr(vector&lt;vector&lt;int&gt;&gt; ans, int n) {\n        vector&lt;vector&lt;string&gt;&gt; sans;\n        for (auto v : ans) {\n            vector&lt;string&gt; sv;\n            for (int x : v) {\n                string s;\n                for (int i=0; i&lt;n; i++) {\n                    if (i != x) s += '.';\n                    else s += 'Q';\n                }\n                sv.push_back(s);\n            }\n            sans.push_back(sv);\n        }\n        return sans;\n    }\n\n    bool safe(vector&lt;int&gt; cur, int i) {\n        int s = cur.size();\n        for (int j=0; j&lt;s; j++) {\n            if (cur[j] == i || j - cur[j] == s - i || j + cur[j] == i + s) return false;\n        }\n        return true;\n    }\n\n    void solve(vector&lt;vector&lt;int&gt;&gt;&amp; ans, vector&lt;int&gt; cur, int n) {\n        if (cur.size() == n) {\n            ans.push_back(cur);\n            return;\n        }\n        for (int i=0; i&lt;n; i++) {\n            if (safe(cur, i)) {\n                auto next = cur;\n                next.push_back(i);\n                solve(ans, next, n);\n            }\n        }\n    }\n\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; cur;\n        solve(ans, cur, n);\n        return tostr(ans, n);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%9B%BE/","title":"\u56fe","text":""},{"location":"algorithm/review/%E5%9B%BE/#_1","title":"\u53ef\u4ee5\u7ec8\u6b62\u7684\u70b9","text":"<p>\u627e\u5230\u56fe\u4e2d\u6240\u6709\u53ef\u4ee5\u6700\u7ec8\u62b5\u8fbe\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\u7684\u70b9\u3002</p> <p>\u8fd9\u4e9b\u70b9\u5fc5\u987b\u5728\u73af\u4e0a\u7684\u70b9\u540e\uff0c\u800c\u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u68c0\u6d4b\u6240\u6709\u73af\u4e0a\u7684\u70b9\u4ee5\u53ca\u73af\u540e\u7684\u70b9\u3002\u56e0\u6b64\u53ea\u9700\u8981\u5148\u5c06\u56fe\u53d6\u53cd\uff0c\u518d\u505a\u62d3\u6251\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u53ea\u62ff\u5230\u73af\u540e\u7684\u70b9\u3002\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n+m)\\)\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; eventualSafeNodes(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {\n        // reversed graph\n        int N = graph.size();\n        vector&lt;vector&lt;int&gt;&gt; rgraph(N);\n        for (int i = 0; i &lt; N; i++) {\n            for (int j: graph[i]) {\n                rgraph[j].push_back(i);\n            }\n        }\n        // toposort\n        vector&lt;int&gt; ind(N);\n        for (int i = 0; i &lt; N; i++) ind[i] = graph[i].size();\n        vector&lt;int&gt; ans;\n        queue&lt;int&gt; q;\n        for (int i = 0; i &lt; N; i++) {\n            if (ind[i] == 0) q.push(i);\n        }\n        while (!q.empty()) {\n            int p = q.front(); q.pop();\n            ans.push_back(p);\n            for (int i: rgraph[p]) {\n                if (--ind[i] == 0) q.push(i);\n            }\n        }\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n};\n</code></pre> <p>\u66f4\u5de7\u5999\u7684\u505a\u6cd5\u662f\u76f4\u63a5DFS\u6807\u8bb0\u72b6\u6001\uff1a\u9ed8\u8ba4\u72b6\u6001\u4e3a\u4e0d\u5b89\u5168\uff0c\u4ece\u800c\u5229\u7528\u73af\u4e0a\u9012\u5f52\u7684\u7279\u70b9\uff0c\u5c06\u6574\u4e2a\u73af\u5224\u5b9a\u4e3a\u4e0d\u5b89\u5168\u3002\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n+m)\\)\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; eventualSafeNodes(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {\n        vector&lt;int&gt; v(graph.size(), 0);\n\n        function&lt;bool(int)&gt; issafe = [&amp;](int x) -&gt; bool {\n            if (v[x]) return v[x] == 2;\n            v[x] = 1;\n            for (int y: graph[x]) {\n                if (!issafe(y)) return false;\n            }\n            v[x] = 2;\n            return true;\n        };\n\n        vector&lt;int&gt; ans;\n        for (int i = 0; i &lt; graph.size(); i++) {\n            if (issafe(i)) ans.push_back(i);\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%9B%BE/#_2","title":"\u904d\u5386\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def","text":"<p>\u6c42\u4e00\u4e2a\u65e0\u5411\u56fe\u53ef\u4ece\u4efb\u610f\u8282\u70b9\u51fa\u53d1\u3001\u53ef\u91cd\u590d\u7ecf\u8fc7\u8282\u70b9\u7684\u904d\u5386\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u7684\u6700\u77ed\u957f\u5ea6\u3002</p> <p>NP\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\\(O(n^22^n)\\)\u3002\u6700\u77ed\u8def\u53ef\u4ee5\u901a\u8fc7BFS\u6c42\u89e3\uff0c\u4f46\u8fd9\u91cc\u7684\u72b6\u6001\u4e0d\u53ea\u5305\u542b\u5f53\u524d\u8282\u70b9\uff0c\u8fd8\u5305\u542b\u5df2\u7ecf\u7ecf\u8fc7\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u72b6\u6001\u538b\u7f29\u8bb0\u5f55\u3002</p> <pre><code>class Solution {\npublic:\n    int shortestPathLength(vector&lt;vector&lt;int&gt;&gt;&amp; graph) {\n        int n = graph.size(); // &lt;= 12\n        int S = pow(2, n) - 1;\n        // state compression + bfs\n        queue&lt;tuple&lt;int, int, int&gt;&gt; q;\n        vector&lt;vector&lt;int&gt;&gt; v(n, vector&lt;int&gt;(S+1, 0)); // faster than set&lt;tuple&lt;int,int&gt;&gt;\n        for (int i = 0; i &lt; n; i++) {\n            q.emplace(i, 1 &lt;&lt; i, 0); // emplace is faster than push\n            v[i][1 &lt;&lt; i] = 1; // always set to vis right after push\n        }\n        while (!q.empty()) {\n            auto [p, s, d] = q.front(); q.pop();\n            //cout &lt;&lt; p &lt;&lt; \" \" &lt;&lt; bitset&lt;12&gt;(s).to_string() &lt;&lt; \" \" &lt;&lt; d &lt;&lt; endl;\n            if (s == S) return d;\n            for (int next_p: graph[p]) {\n                int next_s = s | (1 &lt;&lt; next_p);\n                if (!v[next_p][next_s]) {\n                    q.emplace(next_p, next_s, d+1);\n                    v[next_p][next_s] = 1;\n                }\n            }\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%9C%A8%E7%BA%BF%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/","title":"\u5728\u7ebf\u533a\u95f4\u95ee\u9898","text":""},{"location":"algorithm/review/%E5%9C%A8%E7%BA%BF%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#_1","title":"\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u5408\u5e76\u5730\u533a\u95f4","text":"<p>\u6bcf\u6b21\u53ea\u6dfb\u52a0\u4e00\u4e2a\u70b9\uff0c\u968f\u65f6\u67e5\u8be2\u5f53\u524d\u7684\u5408\u5e76\u540e\u7684\u6240\u6709\u533a\u95f4\u3002</p> <p>\u79bb\u7ebf\u533a\u95f4\u5408\u5e76\u53ea\u9700\u8981\u5bf9\u6240\u6709\u533a\u95f4\u6309\u7167\u8d77\u70b9\u6392\u5e8f\uff0c\u4e4b\u540e\u904d\u5386\u4e00\u904d\u5373\u53ef\uff0c\u4f46\u662f\u5728\u7ebf\u533a\u95f4\u5408\u5e76\u5219\u65e0\u6cd5\u8fdb\u884c\u79bb\u7ebf\u7684\u6392\u5e8f\uff01\u56e0\u6b64\u9700\u8981\u7528\u6709\u5e8f\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u73b0\u6709\u7684\u533a\u95f4\u3002\u9700\u8981\u5206\u4e94\u7c7b\u8ba8\u8bba\uff1a</p> <pre><code>class SummaryRanges {\nprivate:\n    map&lt;int, int&gt; intervals;\n\npublic:\n    SummaryRanges() {}\n\n    void addNum(int val) {\n        // \u627e\u5230 l1 \u6700\u5c0f\u7684\u4e14\u6ee1\u8db3 l1 &gt; val \u7684\u533a\u95f4 interval1 = [l1, r1]\n        // \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u533a\u95f4\uff0cinterval1 \u4e3a\u5c3e\u8fed\u4ee3\u5668\n        auto interval1 = intervals.upper_bound(val);\n        // \u627e\u5230 l0 \u6700\u5927\u7684\u4e14\u6ee1\u8db3 l0 &lt;= val \u7684\u533a\u95f4 interval0 = [l0, r0]\n        // \u5728\u6709\u5e8f\u96c6\u5408\u4e2d\uff0cinterval0 \u5c31\u662f interval1 \u7684\u524d\u4e00\u4e2a\u533a\u95f4\n        // \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u533a\u95f4\uff0cinterval0 \u4e3a\u5c3e\u8fed\u4ee3\u5668\n        auto interval0 = (interval1 == intervals.begin() ? intervals.end() : prev(interval1));\n\n        if (interval0 != intervals.end() &amp;&amp; interval0-&gt;first &lt;= val &amp;&amp; val &lt;= interval0-&gt;second) {\n            // \u60c5\u51b5\u4e00\n            return;\n        }\n        else {\n            bool left_aside = (interval0 != intervals.end() &amp;&amp; interval0-&gt;second + 1 == val);\n            bool right_aside = (interval1 != intervals.end() &amp;&amp; interval1-&gt;first - 1 == val);\n            if (left_aside &amp;&amp; right_aside) {\n                // \u60c5\u51b5\u56db\n                int left = interval0-&gt;first, right = interval1-&gt;second;\n                intervals.erase(interval0);\n                intervals.erase(interval1);\n                intervals.emplace(left, right);\n            }\n            else if (left_aside) {\n                // \u60c5\u51b5\u4e8c\n                ++interval0-&gt;second;\n            }\n            else if (right_aside) {\n                // \u60c5\u51b5\u4e09\n                int right = interval1-&gt;second;\n                intervals.erase(interval1);\n                intervals.emplace(val, right);\n            }\n            else {\n                // \u60c5\u51b5\u4e94\n                intervals.emplace(val, val);\n            }\n        }\n    }\n\n    vector&lt;vector&lt;int&gt;&gt; getIntervals() {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        for (const auto&amp; [left, right]: intervals) {\n            ans.push_back({left, right});\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%9C%A8%E7%BA%BF%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/#range","title":"Range\u6a21\u5757","text":"<p>\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u533a\u95f4\uff08\u6dfb\u52a0\u6216\u5220\u9664\uff09\uff0c\u968f\u65f6\u67e5\u8be2\u67d0\u4e2a\u533a\u95f4\u662f\u5426\u88ab\u5b8c\u5168\u586b\u5145\u3002</p> <p>\u7ebf\u6bb5\u6811\u7684\u7ecf\u5178\u5e94\u7528\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f41e9\uff0c\u9700\u8981\u52a8\u6001\u5206\u914d\u7ebf\u6bb5\u6811\u3002</p> <pre><code>class RangeModule {\npublic:\n    // dynamically allocated segment tree\n    struct node {\n        int l, r, v, z;\n        node *ll, *rr;\n        node(int _l, int _r, int _v = 0): l(_l), r(_r), v(_v), z(0), ll(nullptr), rr(nullptr) {}\n        int m() { return (l+r)/2; }\n    };\n\n    void pushdown(node* n) {\n        if (n-&gt;z) {\n            n-&gt;ll-&gt;v = n-&gt;v;\n            n-&gt;ll-&gt;z = 1;\n            n-&gt;rr-&gt;v = n-&gt;v;\n            n-&gt;rr-&gt;z = 1;\n            n-&gt;z = 0;\n        }\n    }\n\n    void pushup(node* n) {\n        n-&gt;v = n-&gt;ll-&gt;v &amp;&amp; n-&gt;rr-&gt;v;\n    }\n\n    void modify(node* n, int l, int r, int v) {\n        //cout &lt;&lt; \"mod \" &lt;&lt; v &lt;&lt; \" | [\" &lt;&lt; n-&gt;l &lt;&lt; \", \" &lt;&lt; n-&gt;r &lt;&lt; \"], [\" &lt;&lt; l &lt;&lt; \", \" &lt;&lt;r &lt;&lt; \"]\" &lt;&lt; endl;\n        if (n-&gt;l == l &amp;&amp; n-&gt;r == r) {\n            n-&gt;v = v;\n            n-&gt;z = 1;\n            return;\n        }\n        int nm = n-&gt;m();\n        if (n-&gt;ll == nullptr) n-&gt;ll = new node(n-&gt;l, nm, n-&gt;v);\n        if (n-&gt;rr == nullptr) n-&gt;rr = new node(nm + 1, n-&gt;r, n-&gt;v);\n        pushdown(n);\n        if (r &lt;= nm) modify(n-&gt;ll, l, r, v);\n        else if (l &gt; nm) modify(n-&gt;rr, l, r, v);\n        else {\n            modify(n-&gt;ll, l, nm, v);\n            modify(n-&gt;rr, nm + 1, r, v);\n        }\n        pushup(n);\n    }\n\n    bool query(node* n, int l, int r) {\n        //cout &lt;&lt; \"query \" &lt;&lt; \"[\" &lt;&lt; n-&gt;l &lt;&lt; \", \" &lt;&lt; n-&gt;r &lt;&lt; \"], [\" &lt;&lt; l &lt;&lt; \", \" &lt;&lt;r &lt;&lt; \"] \" &lt;&lt; n-&gt;v &lt;&lt; endl;\n        if (n-&gt;l == l &amp;&amp; n-&gt;r == r) {\n            return n-&gt;v;\n        }\n        int nm = n-&gt;m();\n        if (n-&gt;ll == nullptr) n-&gt;ll = new node(n-&gt;l, nm, n-&gt;v);\n        if (n-&gt;rr == nullptr) n-&gt;rr = new node(nm + 1, n-&gt;r, n-&gt;v);\n        pushdown(n);\n        if (r &lt;= nm) return query(n-&gt;ll, l, r);\n        else if (l &gt; nm) return query(n-&gt;rr, l, r);\n        else return query(n-&gt;ll, l, nm) &amp;&amp; query(n-&gt;rr, nm + 1, r);\n    }\n\n    node* root = new node(0, 1e9, 0);\n\n    //////////////////////////////////////\n\n    RangeModule() {}\n\n    void addRange(int left, int right) {\n        modify(root, left, right- 1, 1);\n    }\n\n    bool queryRange(int left, int right) {\n        return query(root, left, right - 1);\n    }\n\n    void removeRange(int left, int right) {\n        modify(root, left, right - 1, 0);\n    }\n};\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule* obj = new RangeModule();\n * obj-&gt;addRange(left,right);\n * bool param_2 = obj-&gt;queryRange(left,right);\n * obj-&gt;removeRange(left,right);\n */\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u7528set\u7ef4\u62a4\u6709\u5e8f\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <pre><code>class RangeModule {\n    set&lt;pair&lt;int,int&gt;&gt; s;\npublic:\n    RangeModule() {}\n\n    void addRange(int left, int right) {\n        auto it = s.lower_bound({left, left});\n        if (it != s.begin()) it--;\n        while (it != s.end() &amp;&amp; it-&gt;first &lt;= right){\n            if (it-&gt;second &lt; left) {\n                it++;\n                continue;\n            }\n            left = min(it-&gt;first, left);\n            right = max(it-&gt;second, right);\n            s.erase(it++);\n        }\n        s.insert(make_pair(left, right));\n    }\n\n    bool queryRange(int left, int right) {\n        auto it = s.lower_bound({left, left});\n        if (it-&gt;first &lt;= left &amp;&amp; it-&gt;second &gt;= right) return true;\n        if (it != s.begin()) {\n            --it;  \n            if (it-&gt;first &lt;= left &amp;&amp; it-&gt;second &gt;= right) return true;\n        }\n        return false;\n    }\n\n    void removeRange(int left, int right) {\n        if (s.empty()) return;\n        auto it = s.lower_bound({left, left});\n        if (it != s.begin()) it--;\n        while (it != s.end() &amp;&amp; it-&gt;first &lt; right){\n            if (it-&gt;second &lt;= left){\n                it++;\n                continue;\n            }\n            if (it-&gt;first &lt; left) s.insert({it-&gt;first, left});\n            if (it-&gt;second &gt; right) s.insert({right, it-&gt;second});\n            s.erase(it++);\n        }\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E5%9F%BA%E7%A1%80/","title":"Common sense","text":"<ul> <li> <p><code>1e9+7</code></p> <p>A large prime, usually used as the modulo.</p> </li> </ul> <ul> <li> <p><code>0x3f3f3f3f</code></p> <p>usually used as <code>+inf int</code> .</p> <pre><code>// binary search\nint l = 0, r = 0x3f3f3f3f;\n\n// dp memset\nmemset(dp, 0x3f, sizeof(dp));\n</code></pre> </li> </ul> <ul> <li> <p>leetcode errors</p> <ul> <li> <p>Index out of bounds</p> <pre><code>AddressSanitizer: heap-buffer-overflow \nAddressSanitizer: stack-buffer-overflow\nAddressSanitizer: global-buffer-overflow \n</code></pre> </li> </ul> <ul> <li> <p>access a deleted array</p> <pre><code>AddressSanitizer: heap-use-after-free\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>c++ solution template</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n#include &lt;climits&gt;\n#include &lt;stack&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\n#include &lt;map&gt;\n#include &lt;list&gt;\n#include &lt;cassert&gt;\n#include &lt;unordered_map&gt;\n\n#define DEBUG false\n\n#define $(x) {if (DEBUG) {cout &lt;&lt; __LINE__ &lt;&lt; \": \"; {x} cout &lt;&lt; endl;}}\n#define _(x) {cout &lt;&lt; #x &lt;&lt; \" = \" &lt;&lt; x &lt;&lt; \" \";}\n\nconst double E = 1e-8;\nconst double PI = acos(-1);\n\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false);\n\n}\n</code></pre> </li> </ul> <ul> <li> <p>fast power</p> <pre><code>// pow(n, p) % M, p &gt;= 0\n\n// int / long long version\nint power_modulo(int n, int p, int M) {\n    int res = 1;\n    while (p &gt; 0) {\n        if (p % 2 == 1) res = (res * n) % M;\n        p /= 2;\n        n = (n * n) % M;\n    }\n    return res;\n}\n\n// double version\ndouble power(double n, long long p) {\n    double res = 1;\n    while (p &gt; 0) {\n        if (p % 2 == 1) ans *= n;\n        p /= 2;\n        n *= n;\n    }\n    return res;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Fibonacci</p> <pre><code>// dynamic programming, O(N)\nint fib(int n) {\n    if (n == 0) return 0;\n    else if (n == 1) return 1;\n    int a = 0, b = 1, c;\n    for (int i = 2; i &lt;= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n}\n\n// fast power, O(logN)\nint fib(int n) {\n    if (n &lt;= 1) return 1;\n    vector&lt;vector&lt;int&gt;&gt; a = {{1, 1}, {1, 0}};\n    a = matpow(a, n - 2);\n    return a[0][0] + a[0][1];\n}\n\nvector&lt;vector&lt;int&gt;&gt; matpow(vector&lt;vector&lt;int&gt;&gt; a, int p) {\n    vector&lt;vector&lt;int&gt;&gt; ans = {{1, 0}, {0, 1}}; // I\n    while (p) {\n        if (p % 2) ans = matmul(ans, a);\n        p /= 2;\n        a = matmul(a, a);\n    }\n    return ans;\n}\n\nvector&lt;vector&lt;int&gt;&gt; matmul(vector&lt;vector&lt;int&gt;&gt; a, vector&lt;vector&lt;int&gt;&gt; b) {\n  vector&lt;vector&lt;int&gt;&gt; res(2, vector&lt;int&gt;(2, 0));\n  res[0][0] = a[0][0] * b[0][0] + a[0][1] * b[1][0];\n      res[0][1] = a[0][0] * b[0][1] + a[0][1] * b[1][1];\n      res[1][0] = a[1][0] * b[0][0] + a[1][1] * b[1][0];\n  res[1][1] = a[1][0] * b[0][1] + a[1][1] * b[1][1];\n    return res;\n}\n\n// Binet formula, O(1)\nint fib(int n) {\n    double r = (1 + sqrt(5)) / 2; // 0.618\n    int ans = (int)round(pow(r, n) / sqrt(5)); // rounded results!\n    return ans;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Bit operator</p> <pre><code>#define GET_BIT(n, i) (((n) &amp; (1LL &lt;&lt; ((i)-1))) &gt;&gt; ((i)-1)) // i start from 1\n#define SET_BIT(n, i) ((n) | (1LL &lt;&lt; ((i)-1)))\n#define CLR_BIT(n, i) ((n) &amp; ~(1LL &lt;&lt; ((i)-1)))\n\n\n// 2's complement\n// method1: \u5168\u90e8\u53d6\u53cd\uff0c\u6700\u540e\u52a0\u4e00 \n// e.g., -x == (~x) + 1;\n// method2: \u4ece\u4f4e\u4f4d\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a1\u4e3a\u6b62\u4fdd\u6301\u4e0d\u53d8\uff08\u5305\u542b\u7b2c\u4e00\u4e2a1\uff09\uff0c\u5176\u4f59\u53d6\u53cd\u3002\n// e.g., 00111100 --&gt; 11000100 (== 11000011 + 1)\n\n// lowbit operator (find the last bit's position)\n// lowbit(01101000) --&gt; 00001000\nauto lowbit = [](int x) { return x &amp; (-x); }\n\n// highbit (application of lowbit)\n// highbit(01101000) --&gt; 01000000\nint highbit(int x) {\n    int res = 0;\n    // delayed update, when i == 0, res == last i.\n    for (int i = x; i != 0; i -= lowbit(i)) res = i;\n    return res;\n}\n\n// application: complement without leading 0\n// 00000101 --&gt; 00000010\n// this equals to masked complement, where we need a highbit mask, and find out a second-highbit mask is also OK (since the highest bit is always 1)\n// 11111010 &amp; 00000111 == 11111010 &amp; 00000011 == 00000010\nint maskedComplement(int x) {\n    int mask = highbit(x) - 1;\n    return (~x) &amp; mask;\n}\n\n// display in binary\n#include &lt;bitset&gt;\nvoid show_binary(unsigned long long x) {\n  printf(\"%s\\n\", bitset&lt;64&gt;(x).to_string().c_str());\n}\n\n// interesting results\n('a' | ' ') == 'a';\n('A' | ' ') == 'a';\n('b' &amp; '_') == 'B';\n('B' &amp; '_') == 'B';\n('d' ^ ' ') == 'D';\n('D' ^ ' ') == 'd';\n\n// eliminate last 1 in binary format\nn = n &amp; (n - 1);\n\n// application\nbool isPowerOfTwo(int n) {\n    if (n &lt;= 0) return false;\n    return (n &amp; (n - 1)) == 0;\n}\nint count1(int n) {\n    int ans = 0;\n    while (n) {\n        n &amp;= n - 1;\n        ans++;\n    }\n    return ans;\n}\n\n// \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5143\u7d20\nint singleNumber(vector&lt;int&gt;&amp; nums) {\n    int res = 0;\n    for (int n : nums) {\n        res ^= n;\n    }\n    return res;\n}\n\n// simulate a + b\nint add(int a, int b) {\n    while (b) {\n        unsigned int c = (unsigned int)(a &amp; b) &lt;&lt; 1; // to handle negatives\n        a ^= b;\n        b = c;\n    }\n    return a;\n}\n</code></pre> </li> </ul> <ul> <li> <p>implement square root</p> <pre><code>// binary search\n// O(logx)\nfloat mysqrt(float x\uff0c float eps=1e-4) {\n    float l = 0, r = x;\n    while (r - l &gt;= eps) {\n        float m = (l + r) / 2;\n        if (m * m - x &gt; eps) r = m;\n        else l = m;\n    }\n    return l;\n}\n\n// babylonian method (a special case of Newton's method for finding root)\n// O(logx)\nfloat mysqrt(float x, float eps=1e-4) {\n    float r = x, r2;\n    while (true) {\n        r2 = (r + x / r) / 2; // iterate to get better optimzation.\n        if (abs(r2 - r) &lt; eps) break; // the thresold.\n        else r = r2;\n    }\n    return r2;\n}\n</code></pre> </li> </ul> <ul> <li> <p>GCD/LCM</p> <pre><code>int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n\nint lcm(int a, int b) {\n    if (gcd(a,b)&gt;0) {\n        return (a / gcd(a, b)) * b;\n    }\n    return 0;\n}\n</code></pre> </li> </ul> <ul> <li> <p>is prime</p> <pre><code>bool is_prime(int n) {\n    if (n &lt;= 1) return false;\n    if (n == 2) return true;\n    for (int i = 2; i &lt; sqrt(n) + 1; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// A prime number greater than 3 can be written in the form 6n - 1 or 6n + 1 \n// This is of the order O(sqrt(n))  with reduced leading constant\nbool is_prime(int n) {\n    if (n == 1 || n % 2 == 0) return false;  \n    if (n == 2 || n == 3) return true;\n    int t = sqrt(n);\n    int k = t / 6;\n    for (int i = 1; i &lt;= k; i++) {\n      if((n%(6*t - 1)==0) || (n%(6*t + 1)==0)) return false;\n    }\n    return true;\n}\n\n// prime table\nint is_prime[UP_LIMIT + 1];\nfor (int i = 1; i &lt;= UP_LIMIT; i++) // init to 1\n    is_prime[i] = 1;\nfor (int i = 4; i &lt;= UP_LIMIT; i += 2) // even number is not\n    is_prime[i] = 0;\nfor (int k = 3; k*k &lt;= UP_LIMIT; k++) // start from 9, end at sqrt\n    if (is_prime[k])\n        for(int i = k*k; i &lt;= UP_LIMIT; i += 2*k) // every two is not \n            is_prime[i] = 0;\n</code></pre> </li> </ul> <ul> <li> <p>combination &amp; permutation number</p> <p>\u4e58\u6cd5\u9006\u5143</p> <pre><code>//// n choose r mod p\n\n// fastpower\nusing ll = long long;\nll fastpower(ll a,ll b,ll p) {\n    ll res=1;\n    while(b) {\n        if(b&amp;1) res=res*a%p;\n        a=a*a%p;\n        b&gt;&gt;=1;\n    }\n    return res;\n}\n\n// suitable case: 1 &lt;= r &lt;= n &lt;= 10^3\n// \u5229\u7528\u9012\u63a8\u516c\u5f0f\uff1aC(n, r) = C(n-1, r-1) + C(n-r, r)\n\n// suitable case: 1 &lt;= r &lt;= n &lt;= 10^6\n// \u5229\u7528\u4e58\u6cd5\u9006\u5143\uff0ca^{-1} = a^{p-2} (mod p), \u901a\u8fc7nCr = n! / r! / (n-r)!\u8ba1\u7b97\uff0c\u901a\u5e38\u7528\u6253\u8868\u7684\u5f62\u5f0f\u3002\nconst int maxn = 1e5+5;\nconst int p = 1e9+7;\n\nll fac[maxn], invfac[maxn]; // always use ll, only cast to int for answer.\n\nvoid init(int n) {\n  for (int i = 1; i &lt; n; i++) {\n      fac[i] = (ll) fac[i-1] * i % p;\n      invfac[i] = (ll) invfac[i-1] * fastpower(i, p-2, p) % p; // O(logn)\n\n  }    \n}\n\nll C(int a, int b) {\n    if (a &lt; b) return 0;\n    return fac[a] * invfac[b] % p * invfac[a-b] % p;\n}\n\n\n// suitable case: 1 &lt;= r &lt;= n &lt;= 10^18, 1 &lt;= p &lt;= 10^5\uff0cp\u4e3a\u7d20\u6570\u3002\n// \u5229\u7528Lucas\u5b9a\u7406\uff1aC(n, r) % p = C(n / p, r / p) * C(n % p, r % p) % p\n// 10^18\u8f93\u5165\u8303\u56f4\u65e0\u6cd5\u6253\u8868\uff0c\u6545\u52a8\u6001\u8ba1\u7b97\u9006\u5143\nll C(ll a, ll b, ll p) {\n    if (b &gt; a) return 0;\n    ll x = 1, y = 1;\n    for(int i = 1, j = a; i &lt;= b; i++,j--) {\n        x = x * j % p;\n        y = y * i % p;\n    }\n    return x * fastpower(y, p-2, p) % p;\n}\n\nll lucas(ll a, ll b, ll p)\n{\n    if (a &lt; p &amp;&amp; b &lt; p) return C(a, b, p);\n    else return C(a % p,b % p, p) * lucas(a/p, b/p, p) % p;\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/review/%E5%9F%BA%E7%A1%80/#_1","title":"\u6811\u7684\u62d3\u6251\u6392\u5e8f\u6570\u91cf","text":"<pre><code>class Solution {\npublic:\n    const int M = 1e9 + 7;\n    const static int maxn = 1e5 + 5;\n    using ll = long long;\n    ll fac[maxn], invfac[maxn];\n    vector&lt;vector&lt;int&gt;&gt; children;    \n\n    ll fastpower(ll a,ll b,ll p) {\n        ll res=1;\n        while(b) {\n            if(b&amp;1) res=res*a%p;\n            a=a*a%p;\n            b&gt;&gt;=1;\n        }\n        return res;\n    }\n\n    void init(int N) {\n        fac[0] = invfac[0] = 1;\n        for (int i = 1; i &lt; N; i++) {\n            fac[i] = (ll) fac[i-1] * i % M;\n            invfac[i] = (ll) invfac[i-1] * fastpower(i, M-2, M) % M;\n        }\n    }\n\n    tuple&lt;int,int&gt; solve(int idx) {\n        // leaf\n        if (children[idx].empty()) return {1, 1};\n        // loop children\n        ll res = 1;\n        int sum_len = 0;\n        for (int i = 0; i &lt; children[idx].size(); i++) {\n            auto [len, perm] = solve(children[idx][i]);\n            sum_len += len;\n            res = res * perm % M * invfac[len] % M;\n        }\n        res = res * fac[sum_len] % M;\n        return {sum_len + 1, res};\n    }\n\n    int waysToBuildRooms(vector&lt;int&gt;&amp; prevRoom) {\n        // init (note TLE if init 1e5+5)\n        init(prevRoom.size() + 5);\n        // build tree\n        children.resize(prevRoom.size());\n        for (int i = 1; i &lt; prevRoom.size(); i++) {\n            children[prevRoom[i]].push_back(i);\n        }\n        // recursive call\n        auto [len, ans] = solve(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/","title":"\u641c\u7d22\u7b97\u6cd5","text":""},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#concepts","title":"Concepts","text":"<p>Uninformed (Blind) Search: \u5bf9\u8981\u641c\u7d22\u7684\u8282\u70b9\u4e00\u65e0\u6240\u77e5\u3002</p> <p>Informed (Heuristic) Search: \u5bf9\u8981\u641c\u7d22\u7684\u8282\u70b9\u6709\u4e00\u4e9b\u542f\u53d1\u6027\u7684\u77e5\u8bc6\uff0c\u53ef\u4ee5\u7528\u6765\u52a0\u901f\u641c\u7d22\u3002</p>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#bfs","title":"BFS","text":"<pre><code>def bfs(s0):\n    q = [s0]\n    vis = set()\n\n    while not q.empty():\n        s = q[0]; q = q[1:]\n        if is_goal(s):\n            return s\n        vis.add(s)\n        for n in s.neighbors(): # direct neighbors (distance = 1)\n            if not n in vis:\n                q.append(n)\n\n    return None\n\nbfs(s0)\n</code></pre> <ul> <li>*Space *: \\(O(|V|)\\) for the queue of all nodes in a certain depth.</li> </ul> <ul> <li>Time: \\(O(|V|)\\) </li> </ul> <ul> <li>BFS\u9700\u8981\u8bbe\u8ba1vis\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u53ea\u9002\u7528\u4e8evis\u662f\u5168\u5c40\u7684\u95ee\u9898\uff08\u62b5\u8fbe\u4e00\u4e2a\u72b6\u6001\u540e\uff0c\u4e4b\u540e\u5c31\u4e0d\u80fd\u901a\u8fc7\u5176\u4ed6\u8def\u5f84\u518d\u62b5\u8fbe\u8fd9\u4e2a\u72b6\u6001\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u6b21\u62b5\u8fbe\u662f\u6b21\u4f18\u7684\uff09\u3002</li> </ul>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#dfs","title":"DFS","text":"<pre><code>vis = set()\ndef dfs(s):\n    if is_goal(s): return s\n    for n in s.neighbors(): # direct neighbors (distance = 1)\n        if not n in vis:\n            vis.add(n)\n            res = dfs(n)\n            if res is not None:\n                return res\n    return None\n\ndfs(s0)  \n</code></pre> <ul> <li>*Space *: \\(O(|V|)\\) if for a graph (the vis list), but \\(O(D)\\) for a tree (no need for vis list).</li> </ul> <ul> <li>Time: \\(O(|V|)\\)</li> </ul>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#dfsbfs","title":"DFS\u4e0eBFS\u7684\u533a\u522b","text":"<ul> <li>\u641c\u7d22\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\uff1a\u90fd\u53ef\u4ee5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\\(O(|V|)\\)\u200b.</li> </ul> <ul> <li>\u641c\u7d22\u6700\u4f18\u8def\u5f84\uff1aBFS\u65f6\u95f4\u6548\u7387\u66f4\u9ad8\uff0c\u4f46\u9700\u8981\u5b58\u50a8\u961f\u5217\u3002DFS\u7a7a\u95f4\u6548\u7387\u66f4\u9ad8\uff0c\u4f46\u65f6\u95f4\u66f4\u957f\u3002</li> </ul> <ul> <li> <p>\u641c\u7d22\u5168\u90e8\u8def\u5f84\u3001\u8def\u5f84\u662f\u5426\u5b58\u5728\uff1a\u901a\u5e38\u5141\u8bb8\u8def\u5f84\u91cd\u53e0\uff0c\u6b64\u65f6\u53ea\u80fd\u7528DFS\uff01\uff08DFS\u53ef\u4ee5\u5305\u542b\u7ed3\u6784<code>vis[i]=1; dfs(i); vis[i]=0</code>\uff0c\u6b64\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6307\u6570\u7ea7\uff0c\u4e14\u65e0\u6cd5\u6709\u6548\u5730\u7528BFS\u7684vis\u72b6\u6001\u5b9e\u73b0\u3002\uff09</p> <p>\u201c\u89e3\u662f\u5426\u5b58\u5728\u201d\u7684\u95ee\u9898\u901a\u5e38\u9700\u8981\u526a\u679d\u3002</p> </li> </ul>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#_2","title":"\u5728\u5b57\u6bcd\u77e9\u9635\u4e2d\u68c0\u7d22\u5355\u8bcd","text":"<p>\u6b64\u95ee\u9898\u5141\u8bb8\u5355\u8bcd\u641c\u7d22\u8def\u5f84\u91cd\u53e0\uff0c\u4ece\u800c\u53ea\u80fd\u7528DFS\u3002\u4f8b\u5982\u5982\u4e0b\u5b9e\u4f8b\uff1a</p> <pre><code>[['a', 'b'],\n ['b', 'a']]\n \"abab\"\n</code></pre> <pre><code>class Solution {\npublic:\n    int dx[4] = {0, 0, 1, -1};\n    int dy[4] = {1, -1, 0, 0};\n    bool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) {\n        int N = board.size(), M = board[0].size(), L = word.size();\n\n        vector&lt;vector&lt;int&gt;&gt; vis(N, vector&lt;int&gt;(M, 0));\n        bool flag = false;\n\n        function&lt;void(int, int, int)&gt; dfs = [&amp;](int i, int j, int l) {\n            if (l == L) {\n                flag = true;\n                return;\n            }\n            for (int d = 0; d &lt; 4; d++) {\n                int ni = i + dx[d], nj = j + dy[d];\n                if (ni &gt;= 0 &amp;&amp; nj &gt;= 0 &amp;&amp; ni &lt; N &amp;&amp; nj &lt; M &amp;&amp; vis[ni][nj] == 0 &amp;&amp; board[ni][nj] == word[l]) {\n                    vis[ni][nj] = 1;\n                    dfs(ni, nj, l+1);\n                    if (flag) return; // necessary pruning! else TLE.\n                    vis[ni][nj] = 0;\n                }\n            }\n        };\n\n        for (int i = 0; i &lt; N; i++) {\n            for (int j = 0; j &lt; M; j++) {\n                if (board[i][j] == word[0]) {\n                    vis = vector&lt;vector&lt;int&gt;&gt;(N, vector&lt;int&gt;(M, 0)); // set 0\n                    vis[i][j] = 1;\n                    dfs(i, j, 1);\n                    if (flag) return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(3^LMN)\\)\uff0c\u6700\u574f\u9700\u8981\u904d\u5386\u6240\u6709\u957f\u5ea6L\u7684\u8def\u5f84\uff0c\u6bcf\u6b65\u6709\u4e09\u4e2a\u65b9\u5411\uff08\u4e0d\u80fd\u56de\u5934\uff09\uff0c\u6700\u591a\u6709\\(MN\\)\u4e2a\u8d77\u70b9\u3002</p>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#ids","title":"IDS","text":"<p>DFS\u5728\u7279\u5b9a\u6570\u636e\u4e0b\u5177\u6709\u4f18\u52bf\uff0c\u4f46\u4e5f\u6709\u4e00\u4e2a\u91cd\u5927\u7f3a\u9677\uff0c\u5373\u6811\u7684\u6df1\u5ea6\u6709\u53ef\u80fd\u662f\u65e0\u9650\u7684\u3002</p> <p>\u6b64\u65f6\u53ef\u4ee5\u7ed3\u5408BFS\u4e0eDFS\uff0c\u9650\u5236\u6bcf\u6b21DFS\u7684\u6700\u5927\u641c\u7d22\u6df1\u5ea6\u3002</p> <p>\u6bcf\u6b21\u589e\u5927\u641c\u7d22\u6df1\u5ea6\u4e0a\u9650\u90fd\u4f1a\u5bfc\u81f4DFS\u7684\u91cd\u65b0\u8c03\u7528\uff0c\u4f46\u5728\u5b8c\u5168\u591a\u53c9\u6811\u7684\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u8282\u70b9\u603b\u662f\u8fdc\u591a\u4e8e\u91cd\u590d\u641c\u7d22\u7684\u7ed3\u70b9\u7684\u3002</p>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#best-fs","title":"Best-FS","text":"<p>\u5bf9\u8282\u70b9\u7684\u5df2\u77e5\u4fe1\u606f\u53ef\u4ee5\u7528\u4e24\u4e2a\u51fd\u6570\u6765\u8868\u793a\uff1a</p> <p>\\(g(s)\\): cost function that measures the cost from \\(s_0\\) to \\(s\\). (e.g. the current steps)</p> <p>\\(h(s)\\): heuristic function that estimates the cost from \\(s\\) to \\(s_g\\)</p> <pre><code>def bfs(s0):\n    q = [s0]\n    vis = set()\n\n    while not q.empty():\n        s = q[0]; q = q[1:]\n        if is_goal(s):\n            return s\n        vis.add(s)\n        for n in s.neighbors(): # neighbors increasingly ordered by function x(s)\n            if not n in vis:\n                q.append(n)\n\n    return None\n\nbfs(s0)\n</code></pre> <ul> <li>\\(x(s)= g(s)\\): this reduces to BFS.</li> </ul> <ul> <li>\\(x(s) = h(s)\\): Greedy Search.</li> </ul> <ul> <li>\\(x(s) = g(s) + h(s)\\): Heuristic Seaerch.</li> </ul>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#a","title":"A*","text":"<p>\\(h(s)\\) is admissible if \\(h(s) \\le C(s, s_g)\\).</p> <p>A* is a heuristic search algorithm that uses admissible \\(h(s)\\).</p> <p>A* is complete and optimal.</p> <p>\u4f46\u662f\u8fd9\u6837\u7684\\(h(s)\\)\u4e0d\u4e00\u5b9a\u597d\u627e\u3002</p>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#ida","title":"IDA*","text":"<p>A* use BFS as the backbone. </p> <p>To reduce the Space Complexity of BFS, we can use IDS to replace BFS.</p> <p>This is called IDA*.</p>"},{"location":"algorithm/review/%E6%90%9C%E7%B4%A2/#alpha-beta-pruning","title":"alpha-beta pruning","text":"<p>\u5bf9\u4e8e\u53cc\u65b9\u3001\u96f6\u548c\u3001\u786e\u5b9a\u6027\u7684\u6e38\u620f\uff08TicTacToe\uff0c\u4e94\u5b50\u68cb\uff0c\u56f4\u68cb\uff09\uff0c\u5176\u641c\u7d22\u6811\u7684\u641c\u7d22\u76ee\u6807\u6bcf\u5c42\u90fd\u4f1a\u53cd\u8f6c\uff0c\u5373MIN\u5c42-MAX\u5c42\u7ed3\u6784\u3002</p> <p>\u8fdb\u4e00\u6b65\u5047\u8bbe\u53cc\u65b9\u90fd\u662f\u7edd\u5bf9\u7406\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528AB\u526a\u679d\u641c\u7d22\u3002</p> <p>alpha: \u6211\u65b9\uff08MAX\uff09\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>beta: \u5bf9\u65b9\uff08MIN\uff09\u7ed9\u6211\u4eec\u7684\u6700\u5c0f\u5229\u6da6\u3002</p> <pre><code>def minimax(node, depth, a=-inf, b=+inf):\n    if node is a terminal node or depth == 0:\n        return the heuristic value of node\n    if node is min node:\n        foreach child of node:\n            b = min(b, minimax(child, depth-1, a, b))\n            if b &lt;= a:\n                  return b\n        return b\n    else:\n        foreach child of node:\n            a = max(a, minimax(child, depth-1, a, b))\n            if b &lt;= a:\n                   return a\n        return a\n</code></pre> <p>\u5bf9\u624b\u53d1\u73b0\u53ef\u4ee5\u7ed9\u6211\u4eec\u4e00\u4e2a\u6bd4\u6211\u4eec\u5f53\u524d\u53ef\u83b7\u5f97\u6700\u5927\u6536\u76ca\u503c\u66f4\u5c0f\u7684\u503c\u65f6\uff0c\u89e6\u53d1\u526a\u679d\u3002</p> <p>\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u6bd4\u6211\u4eec\u5f53\u524d\u83b7\u5f97\u6700\u5c0f\u6536\u76ca\u503c\u66f4\u5927\u7684\u503c\u65f6\uff0c\u89e6\u53d1\u526a\u679d\u3002</p>"},{"location":"algorithm/review/%E8%B4%AA%E5%BF%83/","title":"Greedy","text":""},{"location":"algorithm/review/%E8%B4%AA%E5%BF%83/#super-washing-machine","title":"super washing machine","text":"<p>\u5047\u8bbe\u6709 n \u53f0\u8d85\u7ea7\u6d17\u8863\u673a\u653e\u5728\u540c\u4e00\u6392\u4e0a\u3002\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6bcf\u53f0\u6d17\u8863\u673a\u5185\u53ef\u80fd\u6709\u4e00\u5b9a\u91cf\u7684\u8863\u670d\uff0c\u4e5f\u53ef\u80fd\u662f\u7a7a\u7684\u3002\u5728\u6bcf\u4e00\u6b65\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4efb\u610f m (1 &lt;= m &lt;= n) \u53f0\u6d17\u8863\u673a\uff0c\u4e0e\u6b64\u540c\u65f6\u5c06\u6bcf\u53f0\u6d17\u8863\u673a\u7684\u4e00\u4ef6\u8863\u670d\u9001\u5230\u76f8\u90bb\u7684\u4e00\u53f0\u6d17\u8863\u673a\u3002\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 machines \u4ee3\u8868\u4ece\u5de6\u81f3\u53f3\u6bcf\u53f0\u6d17\u8863\u673a\u4e2d\u7684\u8863\u7269\u6570\u91cf\uff0c\u8bf7\u7ed9\u51fa\u80fd\u8ba9\u6240\u6709\u6d17\u8863\u673a\u4e2d\u5269\u4e0b\u7684\u8863\u7269\u7684\u6570\u91cf\u76f8\u7b49\u7684 \u6700\u5c11\u7684\u64cd\u4f5c\u6b65\u6570 \u3002\u5982\u679c\u4e0d\u80fd\u4f7f\u6bcf\u53f0\u6d17\u8863\u673a\u4e2d\u8863\u7269\u7684\u6570\u91cf\u76f8\u7b49\uff0c\u5219\u8fd4\u56de -1 \u3002</p> <p>\u8d2a\u5fc3\u9b54\u6cd5\u3002</p> <pre><code>class Solution {\npublic:\n    int findMinMoves(vector&lt;int&gt; &amp;machines) {\n        int tot = accumulate(machines.begin(), machines.end(), 0);\n        int n = machines.size();\n        if (tot % n) {\n            return -1;\n        }\n        int avg = tot / n;\n        int ans = 0, sum = 0;\n        for (int num: machines) {\n            num -= avg;\n            sum += num;\n            ans = max(ans, max(abs(sum), num));\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E8%B4%AA%E5%BF%83/#_1","title":"\u63a5\u96e8\u6c34","text":"<p>\u7ed9\u5b9a <code>n</code> \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a <code>1</code> \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002</p> <p>\u4e09\u904d\u5faa\u73af\u7684\u4f18\u96c5\u8d2a\u5fc3\uff1a</p> <pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        int size = height.size();\n        vector&lt;int&gt; left_max(size), right_max(size);\n        left_max[0] = 0;\n        right_max[size - 1] = 0;\n        int max = height[0];\n        for (int i = 1; i &lt; size; ++i){\n            left_max[i] = max;\n            max = std::max(max, height[i]);\n        }\n        max = height[size - 1];\n        for (int i = size - 2; i &gt;= 0; --i){\n            right_max[i] = max;\n            max = std::max(max, height[i]);\n        }\n        int res = 0, con;\n        // final loop\n        for (int i = 0; i &lt; size; ++i){\n            con = std::min(left_max[i], right_max[i]);\n            res += (con - height[i] &lt; 0) ? 0 : con - height[i];\n        }\n        return res;\n    }\n};\n</code></pre> <p>\u7528\u6808\u53d1\u73b0\u4e0d\u5f97\u4e0d\u52a8\u6001\u79bb\u6563\u5316\u7684\u4e11\u964b\u8d2a\u5fc3\uff1a</p> <pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        stack&lt;pair&lt;int, int&gt;&gt; s; // id, height\n        map&lt;int, int&gt; d;\n        int ans = 0;\n        for (int i = 0; i &lt; height.size(); i++) {\n            int H = height[i];\n            d[H]++;\n            if (!s.empty()) {\n                int last = 0;\n                for (auto it = d.begin(); it != d.end(); it++) {\n                    int h = it-&gt;first;\n                    if (h == 0) continue;\n                    if (h &gt; H) break;\n                    while (!s.empty() &amp;&amp; s.top().second &lt; h) {\n                        // must remove useless discrete values, else TLE\n                        if (--d[s.top().second] &lt;= 0) d.erase(s.top().second);\n                        s.pop();\n                    }\n                    if (!s.empty()) {\n                        ans += (i - s.top().first - 1) * (h - last);\n                        //cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; H &lt;&lt; \" at \"&lt;&lt; h &lt;&lt; \" ans = \" &lt;&lt; ans &lt;&lt; endl;\n                    }\n                    last = h;\n                }\n            }\n            if (H &gt; 0) s.push({i, H});\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/%E8%B4%AA%E5%BF%83/#2d","title":"\u63a5\u96e8\u6c342D","text":"<p>\u4ecd\u7136\u662f\u8d2a\u5fc3\uff0c1D\u4e2d\u53ea\u6c42\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u5de6\u53f3\u6700\u9ad8\u70b9\uff0c\u57282D\u4e2d\u53d8\u6210\u4e86\u6c42\u6bcf\u4e2a\u4f4d\u7f6e\u5230\u4efb\u610f\u8fb9\u754c\u7684\u6240\u6709\u8def\u5f84\u4e2d\u7684\u6700\u9ad8\u70b9\uff01\uff08\u800c\u4e0d\u4ec5\u4ec5\u662f\u56db\u4e2a\u65b9\u5411\u7684\u6700\u9ad8\u70b9\uff09</p> <p>\u4e8e\u662f\u8fd9\u5176\u5b9e\u53d8\u6210\u4e86Dijkstra\u6700\u77ed\u8def\u95ee\u9898\u3002</p> <pre><code>typedef pair&lt;int,int&gt; pii;\n\nclass Solution {\npublic:\n    int trapRainWater(vector&lt;vector&lt;int&gt;&gt;&amp; heightMap) {  \n        if (heightMap.size() &lt;= 2 || heightMap[0].size() &lt;= 2) {\n            return 0;\n        }  \n        int m = heightMap.size();\n        int n = heightMap[0].size();\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        vector&lt;vector&lt;bool&gt;&gt; visit(m, vector&lt;bool&gt;(n, false));\n        for (int i = 0; i &lt; m; ++i) {\n            for (int j = 0; j &lt; n; ++j) {\n                if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {\n                    pq.push({heightMap[i][j], i * n + j});\n                    visit[i][j] = true;\n                }\n            }\n        }\n\n        int res = 0;\n        int dirs[] = {-1, 0, 1, 0, -1};\n        while (!pq.empty()) {\n            pii curr = pq.top();\n            pq.pop();            \n            for (int k = 0; k &lt; 4; ++k) {\n                int nx = curr.second / n + dirs[k];\n                int ny = curr.second % n + dirs[k + 1];\n                if( nx &gt;= 0 &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; n &amp;&amp; !visit[nx][ny]) {\n                    if (heightMap[nx][ny] &lt; curr.first) {\n                        res += curr.first - heightMap[nx][ny]; \n                    }\n                    visit[nx][ny] = true;\n                    pq.push({max(heightMap[nx][ny], curr.first), nx * n + ny});\n                }\n            }\n        }\n\n        return res;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E4%BA%8C%E5%88%86%E6%B3%95%E9%A2%98%E7%9B%AE/","title":"\u4e8c\u5206\u6cd5\u9898\u76ee","text":"<ul> <li> <p>Search in Rotated sorted array (leetcode 33)</p> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        // find pivot\n        int l=0, r=nums.size()-1;\n        while(l&lt;r){\n            int m = l + (r - l) / 2;\n            if(nums[m] &gt; nums[r]) l = m + 1;\n            else r = m;\n        }\n        // normal binary search\n        int idx;\n        idx = lower_bound(nums.begin(), nums.begin()+l, target) - nums.begin();\n        if(idx &lt; l &amp;&amp; nums[idx] == target) return idx;\n        idx = lower_bound(nums.begin()+l, nums.end(), target) - (nums.begin()+l);\n        if(l+idx &lt; nums.size() &amp;&amp; nums[l+idx] == target) return idx+l;\n        return -1;\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>Search in Duplicated &amp; Rotated sorted array (leetcode 154)</p> <pre><code>class Solution {\npublic:\n    int findMin(vector&lt;int&gt;&amp; nums) {\n        int N = nums.size();\n        if(!N) return false;\n\n        // find pivot\n        int l=0, r=N-1;\n        while(l&lt;r){\n            int m = l+(r-l)/2;\n            if(nums[l] == nums[r]) l++; // remove duplication\n            else if(nums[m] &gt; nums[r]) l = m+1;\n            else r = m;\n        }\n\n        return min(nums[0], nums[l]);\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>Use <code>std</code> correctly, especially when not found.</p> <p>leetcode 34.</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        if(nums.empty()) return vector&lt;int&gt;(2, -1);\n        vector&lt;int&gt; ans;\n        int a = lower_bound(nums.begin(), nums.end(), target) - nums.begin();\n        int b = upper_bound(nums.begin(), nums.end(), target) - nums.begin();\n        cout&lt;&lt;a&lt;&lt;\" \"&lt;&lt;b&lt;&lt;endl;\n        // not found exception\n        if(a&gt;=nums.size() || nums[a] != target) ans.push_back(-1);\n        else ans.push_back(a);\n        if(b-1&gt;=nums.size() || nums[b-1] != target) ans.push_back(-1);\n        else ans.push_back(b-1);\n        return ans;\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>Split Array Largest Sum leetcode 410</p> <p>```c++ class Solution { public:     #define ll long long     bool check(vector&amp; nums, ll mid, int m){         int cnt = 0;         ll sum = 0;         for(int i=0; i mid){                 sum = nums[i];                 cnt++;                 if(cnt &gt;= m) return true;             }         }         return false;     } <pre><code>int splitArray(vector&lt;int&gt;&amp; nums, int m) {\n    ll sum=0;\n    int mx = 0;\n    for(int i=0; i&lt;nums.size(); i++){\n        sum += nums[i];\n        mx = max(mx, nums[i]);\n    }\n    ll left = mx, right = sum;\n    while(left&lt;right){\n        ll mid = (left + right) / 2;\n        if(check(nums, mid, m)) left = mid + 1;\n        else right = mid;\n    }\n    return int(left);\n\n}\n</code></pre> <p>}; ```</p> <ul> <li> <p>\u5bfb\u627e\u6700\u8fd1\u6570</p> <p>```python T = int(input())</p> <p>data = input() S = [int(ele) for ele in data.split()]</p> <p>def solve(S, T):     S.sort()     i = 0     j = len(S) - 1     res = S[i] + S[j]     while i &lt; j:         cur_val = S[i] + S[j]         if abs(cur_val - T) &lt; abs(res - T) or abs(cur_val - T) == abs(res - T) and cur_val &lt; res:             res = cur_val         if cur_val == T:             break         elif cur_val &lt; T:             i = i + 1         else:             j = j - 1     return res print(solve(S, T)) ```</p> </li> </ul>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/","title":"Dynamic Programming","text":""},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#student-attendance-record-ii-leetcode-552","title":"Student Attendance Record II (leetcode 552)","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6570\u3002\u6c42\u53ef\u751f\u6210\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u7684\u6570\u91cf\uff0c\u5b50\u95ee\u9898\u662f\u4e0d\u540c\u7684\u7ed3\u5c3e\u3002</p> <pre><code>class Solution {\npublic:\n    int checkRecord(int n) {\n        int m = 1e9+7;\n        int* P = new int[n+1];\n        int* L = new int[n+1];\n        int* A = new int[n+1];\n\n        P[1] = L[1] = A[1] = 1;\n        P[2] = L[2] = 3;\n        A[2] = 2;\n        A[3] = 4;\n\n        for(int i=2; i&lt;=n; i++){\n            P[i-1] %= m;\n            L[i-1] %= m;\n            A[i-1] %= m;\n\n            P[i] = ((P[i-1] + L[i-1])%m + A[i-1])%m;\n            if(i&gt;2) L[i] = ((P[i-1]+A[i-1])%m+(P[i-2]+A[i-2])%m)%m;\n            if(i&gt;3) A[i] = ((A[i-1]+A[i-2])%m+A[i-3])%m;\n        }\n\n        return ((P[n]+L[n])%m+A[n])%m;\n    }\n};\n</code></pre> <p>A sillier yet straight answer:</p> <pre><code>class Solution {\npublic:\n    int checkRecord(int n) {\n        int m = 1e9+7;\n        int* P = new int[n+1]; // no A\n        int* L = new int[n+1]; // no A, single L\n        int* LL = new int[n+1];\n        int* A = new int[n+1];\n        int* AP = new int[n+1];\n        int* AL = new int[n+1];\n        int* ALL = new int[n+1];\n\n        P[1] = L[1] = A[1] = 1;\n        LL[1] = AP[1] = AL[1] = ALL[1] = 0;\n\n        for(int i=2; i&lt;=n; i++){\n            P[i] = ((P[i-1] + L[i-1])%m + LL[i-1])%m;\n            L[i] = P[i-1];\n            LL[i] = L[i-1];\n            A[i] = ((P[i-1] + L[i-1])%m + LL[i-1])%m;\n            AL[i] = (AP[i-1] + A[i-1])%m;\n            AP[i] = (((A[i-1] + AL[i-1])%m + ALL[i-1])%m + AP[i-1])%m;\n            ALL[i] = AL[i-1];\n        }\n\n        return ((((((P[n]+L[n])%m+A[n])%m+LL[n])%m+AP[n])%m+AL[n])%m+ALL[n])%m;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#knight-935","title":"Knight 935","text":"<p>\u7c7b\u4f3c\u7684\u8f93\u5165\u4e00\u4e2a\u6570\u7684\u9898\u76ee\u3002</p> <pre><code>class Solution {\npublic:\n    int knightDialer(int N) {\n        int m = 1e9+7;\n        vector&lt;vector&lt;int&gt;&gt; dp(N+1, vector&lt;int&gt;(10,0));\n        for(int i=0; i&lt;10; i++) dp[1][i]=1;\n        for(int i=2; i&lt;=N; i++){\n            dp[i][1] = (dp[i-1][6] + dp[i-1][8])%m;\n            dp[i][2] = (dp[i-1][7] + dp[i-1][9])%m;\n            dp[i][3] = (dp[i-1][4] + dp[i-1][8])%m;\n            dp[i][4] = ((dp[i-1][3] + dp[i-1][9])%m + dp[i-1][0])%m;\n            dp[i][5] = 0;\n            dp[i][6] = ((dp[i-1][1] + dp[i-1][7])%m + dp[i-1][0])%m;\n            dp[i][7] = (dp[i-1][2] + dp[i-1][6])%m;\n            dp[i][8] = (dp[i-1][1] + dp[i-1][3])%m;\n            dp[i][9] = (dp[i-1][2] + dp[i-1][4])%m;\n            dp[i][0] = (dp[i-1][4] + dp[i-1][6])%m;\n        }\n        int ans = 0;\n        for(int i=0; i&lt;10; i++) ans = (ans + dp[N][i])%m;\n        return ans;\n    }\n};\n</code></pre> <p>\\(O(lg N)\\) exponentiation by sequaring (\u77e9\u9635\u5feb\u901f\u5e42) </p> <pre><code>def knightDialer(self, N):\n    mod = 10**9 + 7\n    if N == 1: return 10\n    M = np.matrix([[0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n                   [0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\n                   [0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\n                   [0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\n                   [1, 0, 0, 1, 0, 0, 0, 0, 0, 1],\n                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                   [1, 1, 0, 0, 0, 0, 0, 1, 0, 0],\n                   [0, 0, 1, 0, 0, 0, 1, 0, 0, 0],\n                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\n                   [0, 0, 1, 0, 1, 0, 0, 0, 0, 0]])\n    res, N = 1, N - 1\n    while N:\n        if N % 2: res = res * M % mod\n        M = M * M % mod\n        N /= 2\n    return int(np.sum(res)) % mod\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#remove-boxes-leetcode-546","title":"Remove Boxes (leetcode 546)","text":"<p>\u8f93\u5165\u4e00\u7ef4\u6570\u7ec4\u3002\u7b80\u5355\u7684\u4e8c\u7ef4\u7aef\u70b9DP\u7f3a\u5931\u4fe1\u606f\uff0c\u6545\u62d3\u5c55\u7ef4\u5ea6\u5230\u4e09\u7ef4DP\uff0c\u8bb0\u5f55\u533a\u95f4[i, j]\u4ee5\u53cai\u5de6\u4fa7\uff08\u533a\u95f4\u5916\uff09\u4e0ei\u540c\u8272\u7684\u65b9\u5757\u6570k\u3002k\u503c\u5e76\u975e\u56fa\u5b9a\uff0c\u800c\u5728\u6d88\u9664\u65b9\u5757\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u53d8\u5316\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u7ef4\u5ea6\u3002</p> <pre><code>// Top-Down DP (memorization)\nclass Solution {\npublic:\n    int dp[105][105][105];\n    vector&lt;int&gt; boxes;\n\n    int solve(int i, int j, int k){\n        if(dp[i][j][k]!=-1) return dp[i][j][k];\n        if(j&lt;i) return 0;\n        int res = (k+1)*(k+1) + solve(i+1, j, 0);\n        for(int m=i+1; m&lt;=j; m++){\n            if(boxes[i] == boxes[m]){\n                res = max(res, solve(i+1, m-1, 0)+solve(m, j, k+1));\n            }\n        }\n        return dp[i][j][k]=res;\n    }\n\n    int removeBoxes(vector&lt;int&gt;&amp; Boxes) {\n        boxes = Boxes;\n        memset(dp, -1, sizeof(dp));\n        return solve(0, boxes.size()-1, 0);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#burst-balloons-leetcode-312","title":"Burst Balloons (leetcode 312)","text":"<p>\u8f93\u5165\u4e00\u7ef4\u6570\u7ec4\u3002<code>dp[i][j]</code>\u4ee3\u8868<code>[i, j]</code>\u6c14\u7403\u7206\u70b8\u5230\u53ea\u5269i\u4e0ej\u65f6\u7684\u6700\u9ad8\u5f97\u5206\u3002</p> <p>\u6bcf\u6b21\u533a\u95f4dp\u65f6\uff0c\u8bbem\u4e3a\u6700\u540e\u7206\u70b8\u7684\u90a3\u4e00\u4e2a\u6c14\u7403\uff0c\u904d\u5386<code>(i, j)</code>\u3002</p> <pre><code>// Top-Down\nclass Solution {\npublic:\n    int dp[505][505];\n    vector&lt;int&gt; ns;\n\n    int solve(int i, int j){\n        if(dp[i][j]!=-1) return dp[i][j];\n        if(i+1 &gt;= j) return dp[i][j] = 0;\n        int res = 0;\n        for(int m=i+1; m&lt;j; m++){\n            res = max(res, solve(i, m)+solve(m, j)+ns[i]*ns[m]*ns[j]);\n        }\n        return dp[i][j] = res;\n    }\n\n    int maxCoins(vector&lt;int&gt;&amp; nums) {\n        ns.push_back(1);\n        for(int x:nums) ns.push_back(x);\n        ns.push_back(1);\n        memset(dp, -1, sizeof(dp));\n        return solve(0, ns.size()-1);\n    }\n};\n\n// Bottum-up\nclass Solution {\npublic:\n    int maxCoins(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; ns;\n        ns.push_back(1);\n        for(int x:nums) ns.push_back(x);\n        ns.push_back(1);\n        int N = ns.size();\n        int dp[505][505];\n        memset(dp, 0, sizeof(dp));\n\n        for(int l=2; l&lt;N; l++){\n            for(int j=l; j&lt;N; j++){\n                int i = j-l;\n                for(int m=i+1; m&lt;j; m++){\n                    dp[i][j] = max(dp[i][j], ns[i]*ns[m]*ns[j]+dp[i][m]+dp[m][j]);\n                }\n            }\n        }\n\n        return dp[0][N-1];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#stickers-to-spell-word-691","title":"Stickers to Spell Word (691)","text":"<p>minimum string coverage problem, the following is a slow silly version. Converting string to vector\\&lt;int&gt; caused the map to be very slow. \u72b6\u6001\u538b\u7f29DP\u3002</p> <pre><code>class Solution {\npublic:\n    map&lt;vector&lt;int&gt;, int&gt; dp;\n    vector&lt;vector&lt;int&gt;&gt; Stickers;\n\n    vector&lt;int&gt; str2vec(string s){\n        vector&lt;int&gt; cnt(26, 0);\n        for(char c:s) cnt[c-'a']++;\n        return cnt;\n    }\n\n    bool allNeg(vector&lt;int&gt;&amp; v){\n        for(int i:v) if(i&gt;0) return false;\n        return true;\n    }\n\n    bool allEq(vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b){\n        for(int i=0; i&lt;26; i++) if(a[i]!=b[i]) return false;\n        return true;\n    }\n\n    vector&lt;int&gt; allSub(vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b){\n        vector&lt;int&gt; ans;\n        for(int i=0; i&lt;a.size(); i++)\n            ans.push_back((a[i]-b[i]&lt;=0)?0:a[i]-b[i]);\n        return ans;\n    }\n\n    int solve(vector&lt;int&gt; s){\n        if(dp.count(s)) return dp[s];\n        if(allNeg(s)) return dp[s]=0;\n        int res = 0x3f3f3f3f;\n        for(vector&lt;int&gt; p:Stickers){\n            vector&lt;int&gt; q = allSub(s, p);\n            // necessary\n            if(!allEq(s, q))\n                res = min(res, 1+solve(q));\n        }\n        return dp[s]=res;\n    }\n\n    int minStickers(vector&lt;string&gt;&amp; stickers, string target) {\n        int len = target.size();\n        for(string s:stickers)\n            Stickers.push_back(str2vec(s));\n        int ans = solve(str2vec(target));\n        return ans==0x3f3f3f3f?-1:ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#partition-equal-subset-sum-416","title":"Partition Equal Subset Sum 416","text":"<p>\u5224\u65ad\u4e00\u7ef4\u6570\u7ec4\u662f\u5426\u80fd\u88ab\u5212\u5206\u4e3a\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u4e24\u4e2a\u5b50\u96c6\u5404\u81ea\u7684\u548c\u76f8\u7b49\u3002\u53ea\u662f\u5224\u65ad\uff0c\u6545\u53ea\u9700\u8981\u4e8c\u7ef4\u52a8\u5f52\u3002</p> <ul> <li> <p><code>dp[i][j]</code> means the first i nums can make up j.</p> <pre><code>class Solution {\npublic:  \n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int N = nums.size();\n        int sum = 0;\n        for(int i=0; i&lt;N; i++) sum+=nums[i];\n\n        if(sum%2!=0) return false;\n        sum /= 2;\n\n        vector&lt;vector&lt;int&gt;&gt; dp(N+1, vector&lt;int&gt;(sum+1, 0));\n\n        for(int i=0; i&lt;=N; i++) dp[i][0]=1;\n        for(int i=1; i&lt;=N; i++){\n            for(int j=1; j&lt;=sum; j++){\n                dp[i][j] = dp[i-1][j];\n                if(j &gt;= nums[i-1] &amp;&amp; dp[i-1][j-nums[i-1]]) dp[i][j]=1;\n            }\n        }\n\n        return dp[N][sum];\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>Note that we only use dp[i-1] in the formula, we can save space by:</p> <pre><code>class Solution {\npublic:  \n    bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int N = nums.size();\n        int sum = 0;\n        for(int i=0; i&lt;N; i++) sum+=nums[i];\n\n        if(sum%2!=0) return false;\n        sum /= 2;\n\n        vector&lt;int&gt; dp(sum+1, 0);\n\n        dp[0] = 1;\n        for(int i=1; i&lt;=N; i++){\n            // reversely, since the formula use left information.\n            for(int j=sum; j&gt;=1; j--){\n                if(j &gt;= nums[i-1] &amp;&amp; dp[j-nums[i-1]]) dp[j]=1;\n            }\n        }\n\n        return dp[sum];\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#target-sum-494","title":"Target Sum 494","text":"<p>\u8f93\u5165\u4e00\u7ef4\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u5b57\u524d\u6dfb\u52a0+/-\u53f7\uff0c\u6c42\u80fd\u591f\u51d1\u51fatarget\u7684\u79cd\u7c7b\u6570\u3002</p> <p>\u795e\u306e\u7b54\u3048\uff1a</p> <pre><code>class Solution {\npublic:\n    // \u4e0e\u4e0a\u4e00\u9898\u76f8\u540c\u7684\u5185\u6838\uff0c\u6c42\u6570\u7ec4\u51d1\u51fatarget\u7684\u5b50\u96c6\u7684\u79cd\u7c7b\u6570\uff0c\u4e00\u7ef4\u6570\u7ec4\u4f18\u5316\u3002\n    int solve(vector&lt;int&gt;&amp; nums, int target){\n        vector&lt;int&gt; dp(target+1, 0); // \u4e0d\u7528\u6c42cumsum\n        dp[0] = 1;\n        for(int i=0; i&lt;nums.size(); i++)\n            for(int j=target; j&gt;=nums[i]; j--) // \u9006\u5e8f\n                dp[j] += dp[j-nums[i]];\n        return dp[target];\n    }\n    /*\n    \u5373\u628anums\u5206\u4e3a\u4e24\u4e2a\u5b50\u96c6N\uff08\u524d\u6dfb\u8d1f\u53f7\uff09\uff0cP\uff08\u524d\u6dfb\u6b63\u53f7\uff09\u3002\n    sum(N)+sum(P) = sum(nums)\n    sum(P)-sum(N) = S\n    --&gt; 2*sum(P) = S + sum(nums)\n    */\n    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) {\n        int sum = accumulate(nums.begin(), nums.end(), 0);\n        if(sum&lt;S || (sum+S)%2!=0) return 0;\n        else return solve(nums, (sum+S)/2);\n    }\n\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#ones-and-zeros-474","title":"Ones and Zeros 474","text":"<p>some what like a knapsack problem, but i failed to figure it out again.</p> <pre><code>Input: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\nOutput: 2\n</code></pre> <pre><code>class Solution {\npublic:\n    int cnt(string&amp; s, char c){\n        int res = 0;\n        for(char i:s) if(i==c) res++;\n        return res;\n    }\n\n    int findMaxForm(vector&lt;string&gt;&amp; strs, int m, int n) {\n        vector&lt;vector&lt;int&gt;&gt; dp(m+1, vector&lt;int&gt;(n+1, 0));\n        // order of strs is of no care\n        for(int l=0; l&lt;strs.size(); l++){\n            int cnt0 = cnt(strs[l], '0');\n            int cnt1 = cnt(strs[l], '1');\n            // since the formula uses left-top information, we have to go from right-bottom to left-top, to avoid using duplicated information from this iteration.\n            for(int i=m; i&gt;=cnt0; i--){\n                for(int j=n; j&gt;=cnt1; j--){\n                    dp[i][j] = max(dp[i][j], 1 + dp[i-cnt0][j-cnt1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#non-negative-integers-without-consecutive-ones-600","title":"Non-negative integers without Consecutive Ones 600","text":"<pre><code>class Solution {\npublic:\n    int findIntegers(int num) {\n        int len = 1, tmp = num;\n        while(tmp){\n            tmp&gt;&gt;=1;\n            len++;\n        }\n\n        int* A = new int[len+1];\n        int* B = new int[len+1];\n        A[1] = B[1] = 1;\n\n        for(int i=2; i&lt;len; i++){\n            A[i] = A[i-1] + B[i-1] ;\n            B[i] = A[i-1];\n        }\n\n        int res = A[len-1] + B[len-1];\n\n        // later processing, crazy.\n        for(int i=len-2; i&gt;=0; i--){\n            if(((num&gt;&gt;i)&amp;1) &amp;&amp; ((num&gt;&gt;(i-1))&amp;1)) break;\n            if(!((num&gt;&gt;i)&amp;1) &amp;&amp; !((num&gt;&gt;(i-1))&amp;1)) res-=B[i];\n        }\n\n        return res;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#running","title":"Running \u8d1d\u831c\u7684\u6668\u7ec3\u8ba1\u5212","text":"<p>\u4e00\u8a00\u96be\u5c3d\u7684\u8f6c\u79fb\u65b9\u7a0b\uff0c\u76ee\u524d\u8fd8\u662f\u8d85\u8fc7\u4e86\u6211\u7684\u80fd\u529b\u554a\u3002\u3002\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nconst int maxn = 10005;\nconst int maxm = 505;\nint dist[maxn];\nint dp[maxn][maxm];\n\nint N, M;\nint main() {\n    cin &gt;&gt; N &gt;&gt; M;\n    for (int i = 1; i &lt;= N; i++) cin &gt;&gt; dist[i];\n    memset(dp, 0, sizeof(dp));\n    // start from minute 1\n    for (int i = 1; i &lt;= N; i++) {\n        // tiredness 0 is modified differently\n        for (int j = 1; j &lt;= M; j++) {\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + dist[i]); // run at i\n            if (i &gt;= j) dp[i][0] = max(dp[i][0], dp[i - j][j]); // rest at i-j\n        }\n        dp[i][0] = max(dp[i][0], dp[i - 1][0]); // rest at i-1\n    }\n    cout &lt;&lt; dp[N][0] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#longest-palindromic-subsequence-516","title":"Longest Palindromic SubSequence 516","text":"<p>\u5b50\u95ee\u9898\u867d\u7136\u770b\u4e0a\u53bb\u5f88\u663e\u7136\uff0c\u4f46\u662f\u9012\u63a8\u516c\u5f0f\u4e0d\u597d\u60f3\uff0c\u603b\u4e4b\u53c8\u8dea\u4e86\u3002</p> <pre><code>class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        int len = s.size();\n        if(len==0) return 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(len, vector&lt;int&gt;(len, 0));\n\n        for(int l=1; l&lt;=len; l++){\n            for(int i=0; i&lt;=len-l; i++){\n                int j = i+l-1;\n                // init\n                if(j==i) dp[i][j] = 1;\n                else if(j==i+1){\n                    if(s[i]==s[j]) dp[i][j] = 2;\n                    else dp[i][j] = 1;\n                }\n                // transfer \n                else{\n                    if(s[i]==s[j]) dp[i][j] = dp[i+1][j-1]+2;\n                    else dp[i][j] = max(dp[i+1][j], dp[i][j-1]);\n                }\n            }\n        }\n\n        return dp[0][len-1];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#nearby-cows","title":"Nearby cows","text":"<p>DP in a tree.</p> <pre><code>#define _CRT_SECURE_NO_WARNINGS\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n\nconst int maxn = 100005;\nconst int maxk = 25;\nint N, K;\nint M[maxn][maxk];\n\nstruct edge {\n    int f, t;\n    edge() {}\n    edge(int f, int t) :f(f), t(t) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nvoid solve() {\n    // aggregating information from k-nearest neighbours.\n    for (int k = 1; k &lt;= K; k++) {\n        for (int i = 1; i &lt;= N; i++) {\n            int deg = G[i].size();\n            for (int j = 0; j &lt; deg; j++) {\n                edge&amp; e = G[i][j];\n                M[i][k] += M[e.t][k - 1];\n            }\n            if (k == 1) M[i][k] += M[i][0];\n            else M[i][k] -= M[i][k - 2] * (deg - 1);\n        }\n    }\n}\n\nint x, y;\nint main() {\n    cin &gt;&gt; N &gt;&gt; K;\n    for (int i = 1; i &lt; N; i++) {\n        cin &gt;&gt; x &gt;&gt; y;\n        G[x].push_back(edge(x, y));\n        G[y].push_back(edge(y, x));\n    }\n    for (int i = 1; i &lt;= N; i++) cin &gt;&gt; M[i][0];\n    solve();\n    for (int i = 1; i &lt;= N; i++) cout &lt;&lt; M[i][K] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#tallest-billboard-956","title":"Tallest BillBoard 956","text":"<p>\u4e0e\u3010\u662f\u5426\u5b58\u5728\u548c\u4e3a\u67d0\u4e2a\u503c\u7684\u5b50\u96c6\u3011\u7c7b\u4f3c\uff0c\u4f46\u601d\u8def\u5f88\u4e0d\u540c\uff0c\u76f8\u5f53\u4e8e\u662f\u627e\u3010\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u548c\u4e3a\u67d0\u4e2a\u503c\u7684\u5b50\u96c6\uff0c\u53ea\u9700\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\u3011\u3002\u8fd9\u6837\u9898\u76ee\u5c31\u590d\u6742\u4e86\u8d77\u6765\u3002</p> <pre><code>class Solution {\npublic:\n    // the equivalent problem: \n    // assign +/-/0 before each rod, find out the max value of 'the sum of +s or -s' we can get to make the final expression equals zero.\n    static const int inf = 0x3f3f3f3f;\n    int tallestBillboard(vector&lt;int&gt;&amp; rods) {\n        if(rods.empty()) return 0;\n\n        int len = rods.size();\n        int sum = accumulate(rods.begin(), rods.end(), 0);\n\n        // dp[i][s]: using the first i nums, having written `sum+s` (s may be negative, so we use sum+s to force it positive) out, the maximum score we can get using the remaining numbers to make the final sum is 0.\n        vector&lt;vector&lt;int&gt;&gt; dp(len+1, vector&lt;int&gt;(2*sum+1, -inf));\n\n        dp[len][sum] = 0;\n        for(int i=len-1; i&gt;=0; i--){\n            for(int j=0; j&lt;=2*sum; j++){\n                // 0\n                dp[i][j] = max(dp[i][j], dp[i+1][j]);\n                // -\n                if(j&gt;=rods[i]) \n                    dp[i][j] = max(dp[i][j], dp[i+1][j-rods[i]]);\n                // +\n                if(j&lt;=2*sum-rods[i]) \n                    dp[i][j] = max(dp[i][j], dp[i+1][j+rods[i]] + rods[i]);\n            }\n        }\n\n        return dp[0][sum];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#delete-to-make-sorted-960","title":"Delete to make sorted  960","text":"<p>Clear!</p> <pre><code>class Solution {\npublic:\n    int minDeletionSize(vector&lt;string&gt;&amp; A) {\n        int len = A.size();\n        if(!len) return 0;\n        int slen = A[0].size();\n\n        vector&lt;int&gt; dp(slen, INT_MAX);\n        dp[0]=0;\n        for(int i=1; i&lt;slen; i++){\n            for(int j=0; j&lt;i; j++){\n                bool flag = true;\n                for(int k=0; k&lt;len; k++){\n                    if(A[k][i] &lt; A[k][j]){        \n                        flag = false;\n                        break;\n                    }\n                }\n                if(flag) dp[i] = min(dp[i], dp[j] + i-j-1);\n                else dp[i] = min(dp[i], i);\n            }\n        }\n        int ans = INT_MAX;\n        for(int i=0; i&lt;slen; i++) ans = min(ans, dp[i]+slen-i-1);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#distinct-subsequences-115","title":"Distinct SubSequences 115","text":"<p>find all subseqs equal to <code>t</code> in <code>s</code>. SIMPLE !</p> <pre><code>class Solution {\npublic:\n    int numDistinct(string s, string t) {\n        int slen = s.size();\n        int tlen = t.size();\n\n        vector&lt;vector&lt;int&gt;&gt; dp(tlen+1, vector&lt;int&gt;(slen+1, 0));\n\n        for(int i=0; i&lt;slen; i++) dp[0][i] = 1;\n\n        for(int i=0; i&lt;tlen; i++){\n            for(int j=0; j&lt;slen; j++){\n                if(t[i]==s[j]) dp[i+1][j+1] = dp[i+1][j] + dp[i][j];\n                else dp[i+1][j+1] = dp[i+1][j];\n            }\n        }\n\n        return dp[tlen][slen];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#distince-subsequences-ii-940","title":"Distince SubSequences II 940","text":"<p>dp[i] means distinct subseqs in the first i characters. Transfer formula is incredible.</p> <p><code>dp[i] = 2*dp[i-1] - dp[last[s[i]]-1]</code></p> <pre><code>class Solution {\npublic:\n    #define ll long long\n    int distinctSubseqII(string S) {\n        ll m = 1e9 + 7;\n        int len = S.size();\n        vector&lt;ll&gt; dp(len+1, 0);\n        map&lt;char, int&gt; last;\n        // empty string, need to be subtracted in the end (due to the definition here)\n        dp[0] = 1;\n        // transfer\n        for(int i=0; i&lt;len; i++){\n            dp[i+1] = (2*dp[i])%m;\n            if(last.count(S[i])) dp[i+1] -= dp[last[S[i]]];\n            dp[i+1] %= m;\n            last[S[i]] = i;\n        }\n        // note the minus in transfer formula, so add m for security.\n        return (dp[len]-1+m)%m;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#length-of-longest-fibo-subsequence-873","title":"Length of Longest Fibo Subsequence 873","text":"<p>map accelerated DP. \u7528Map\u67e5\u627e\u552f\u4e00\u7684\u7279\u5b9a\u503c\uff0c\u800c\u4e0d\u662f\u5faa\u73af\u68c0\u9a8c\uff0c\u59cb\u7ec8\u662f\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u91cd\u8981\u6280\u5de7\u3002</p> <pre><code>class Solution {\npublic:\n    int lenLongestFibSubseq(vector&lt;int&gt;&amp; A) {\n        int len = A.size();\n        // map construction\n        map&lt;int, int&gt; m;\n        for(int i=0; i&lt;len; i++) m[A[i]]=i;\n        // dp[i][j]: LFSL of FS ending with A[i], A[j].\n        vector&lt;vector&lt;int&gt;&gt; dp(len, vector&lt;int&gt;(len, 2));\n        // transfer\n        int ans = 0;\n        for(int i=0; i&lt;len; i++){\n            for(int j=i; j&lt;len; j++){\n                // m[A[j]-A[i]]&lt;i is necessary\n                if(m.count(A[j]-A[i]) &amp;&amp; m[A[j]-A[i]]&lt;i)\n                    dp[i][j] = max(dp[i][j], dp[m[A[j]-A[i]]][i]+1);\n                ans = max(ans, dp[i][j]);\n            }\n        }\n        // due to problem definition\n        return ans&gt;2 ? ans : 0;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#coin-change-322","title":"Coin Change 322","text":"<p>Infinite knapsack. Very Orthodox and Effective DP Problem!</p> <pre><code>class Solution {\npublic:\n    #define inf 0x3f3f3f3f\n    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {\n        // infinite knapsack\n        int len = coins.size();\n        vector&lt;int&gt; dp(amount+1, inf);\n        dp[0] = 0;\n        for(int j=0; j&lt;=amount; j++){\n            for(int i=0; i&lt;len; i++){\n                if(j&gt;=coins[i]) dp[j] = min(dp[j], dp[j-coins[i]]+1);\n            }\n        }\n\n        return dp[amount]==inf?-1:dp[amount];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE/#count-bits-338","title":"Count bits 338","text":"<p>Interesting DP formula, just for fun!</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; countBits(int num) {\n        vector&lt;int&gt; ans(num+1, 0);        \n        for(int i=0; i&lt;=num; i++) ans[i] = ans[i&gt;&gt;1] + (i&amp;1);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%9B%BE%E8%AE%BA/","title":"Graph Problems","text":""},{"location":"algorithm/review/old/%E5%9B%BE%E8%AE%BA/#relocation-luogu-3044","title":"Relocation (Luogu 3044)","text":"<p>Dijkstra + State Compression DP</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;bitset&gt;\n\nusing namespace std;\n\nconst int maxn = 10005;\nconst int maxm = 50005;\nconst int maxk = 6;\nconst int inf = 0x7f7f7f7f;\n\nint N, M, K;\nint x, y, w;\nint mkt[maxk];\n\nstruct edge {\n    int f, t, w;\n    edge() {}\n    edge(int f, int t, int w) :f(f), t(t), w(w) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nvoid insert_edge(int x, int y, int w) {\n    G[x].push_back(edge(x, y, w));\n    G[y].push_back(edge(y, x, w));\n}\n\nint dist[maxk][maxn];\n#define P pair&lt;int,int&gt;\nvoid dijkstra(int s, int k) {\n    int* d = dist[k];\n    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt;&gt; q;\n    q.push(P(0, s));\n    d[s] = 0;\n    while (!q.empty()) {\n        P p = q.top(); q.pop();\n        int u = p.second;\n        if (d[u] &lt; p.first) continue;\n        for (int i = 0; i &lt; G[u].size(); i++) {\n            edge&amp; e = G[u][i];\n            int v = e.t;\n            if (d[v] &gt; d[u] + e.w) {\n                d[v] = d[u] + e.w;\n                q.push(P(d[v], v));\n            }\n        }\n    }\n}\n\nint dp[(1&lt;&lt;maxk) + 1][maxk + 1]; // state, last_choosen\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; K;\n    for (int i = 0; i &lt; K; i++) cin &gt;&gt; mkt[i];\n    for (int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        insert_edge(x, y, w);\n    }\n\n    memset(dist, 0x3f, sizeof(dist));\n    for (int k = 0; k &lt; K; k++) dijkstra(mkt[k], k);\n\n    int mxSt = (1 &lt;&lt; K) - 1;\n\n    int ans = inf;\n    for (int i = 1; i &lt;= N; i++) {\n        bool flag = false;\n        for (int k = 0; k &lt; K; k++) if (mkt[k] == i) flag = true;\n        if (flag) continue;\n\n        //cout &lt;&lt; \"enumerate city \" &lt;&lt; i &lt;&lt; endl;\n\n        memset(dp, 0x3f, sizeof(dp));\n        for (int k = 0; k &lt; K; k++) dp[1&lt;&lt;k][k] = dist[k][i];\n        for (int st = 0; st &lt; mxSt; st++) {\n            // enumerate possilbe last choosen city j\n            for (int j = 0; j &lt; K; j++) {\n                if ((st &gt;&gt; j) &amp; 1) {\n                    // enumerate next choosen city k\n                    for (int k = 0; k &lt; K; k++) {\n                        if (!((st &gt;&gt; k) &amp; 1)) {\n                            int newSt = st | (1 &lt;&lt; k);\n                            dp[newSt][k] = min(dp[newSt][k], dp[st][j] + dist[j][mkt[k]]);\n                            //cout &lt;&lt; \"dp \" &lt;&lt;bitset&lt;8&gt;(st)&lt;&lt;\" \"&lt;&lt;j&lt;&lt; \" -&gt; \"&lt;&lt; bitset&lt;8&gt;(newSt) &lt;&lt; \" \" &lt;&lt; k &lt;&lt; \" = \" &lt;&lt; dp[newSt][k] &lt;&lt; endl;\n                        }\n                    }\n                }\n            }\n        }\n        for (int k = 0; k &lt; K; k++) ans = min(ans, dp[mxSt][k] + dist[k][i]);\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/review/old/%E5%9B%BE%E8%AE%BA/#full-tank","title":"Full Tank ?","text":"<p>\u592a\u96be\u4e86\uff0c\u672c\u8d28DP\uff0cDijkstra\u53ef\u4ee5\u64cd\u4f5c\u4e8c\u7ef4\u6570\u7ec4\u3002</p> <pre><code>#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;queue&gt;\n#define rep(i,j,k) for(i=j;i&lt;k;i++)\nusing namespace std;\nconst int N = 1001, M = 20001, inf = 0x7f7f7f7f;\nint h[N], p[M], v[M], w[M], c[N], cnt = 0;\nint dp[N][101], vis[N][101], s, t, cap;\nstruct Data { \n    int x, o, c; \n    Data() {}\n    Data(int x, int o, int c) :x(x), o(o), c(c) {}\n};\nbool operator &lt;(Data a, Data b) { return a.c &gt; b.c; }\n\nvoid add(int x, int y, int z) {\n    p[++cnt] = h[x]; w[cnt] = z; v[cnt] = y; h[x] = cnt;\n}\n\nint dij() {\n    priority_queue&lt;Data&gt; q;\n    memset(dp, 127, sizeof dp);\n    memset(vis, 0, sizeof vis);\n    dp[s][0] = 0;\n    q.push(Data(s, 0, 0));\n    while (!q.empty()) {\n        Data u = q.top(); q.pop();\n        vis[u.x][u.o] = 1;\n        if (u.x == t) return u.c;\n        if (u.o &lt; cap &amp;&amp; !vis[u.x][u.o + 1] &amp;&amp;\n            dp[u.x][u.o + 1] &gt; dp[u.x][u.o] + c[u.x]) {\n            dp[u.x][u.o + 1] = dp[u.x][u.o] + c[u.x];\n            q.push(Data(u.x, u.o + 1, dp[u.x][u.o + 1]));\n        }\n        for (int i = h[u.x]; i; i = p[i])\n            if (u.o &gt;= w[i] &amp;&amp; !vis[v[i]][u.o - w[i]] &amp;&amp;\n                dp[v[i]][u.o - w[i]] &gt; dp[u.x][u.o]) {\n                dp[v[i]][u.o - w[i]] = dp[u.x][u.o];\n                q.push(Data(v[i], u.o - w[i], dp[v[i]][u.o - w[i]]));\n            }\n    }\n    return -1;\n}\n\nint main() {\n    int n, i, m, q;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    rep(i, 0, n) scanf(\"%d\", c + i);\n    while (m--) {\n        scanf(\"%d%d%d\", &amp;s, &amp;t, &amp;cap);\n        add(s, t, cap); add(t, s, cap);\n    }\n    scanf(\"%d\", &amp;q);\n    while (q--) {\n        scanf(\"%d%d%d\", &amp;cap, &amp;s, &amp;t);\n        int re = dij();\n        if (re == -1) puts(\"impossible\");\n        else printf(\"%d\\n\", re);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/review/old/%E5%9B%BE%E8%AE%BA/#_1","title":"\u9053\u8def","text":"<p>\u7c7b\u4f3c\u4e0a\u9898\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\nconst int maxn = 105;\nconst int maxr = 10005;\nconst int maxk = 10005;\nconst int inf = 0x3f3f3f3f;\n\nint N, K, R;\n\nstruct edge {\n    int f, t, l, c;\n    edge() {}\n    edge(int f, int t, int l, int c) :f(f), t(t), l(l), c(c) {}\n};\n\nvector&lt;edge&gt; G[maxn];\n\nvoid insert_edge(int f, int t, int l, int c) {\n    G[f].push_back(edge(f, t, l, c));\n    //G[t].push_back(edge(t, f, l, c));\n}\n\nint dist[maxn][maxk];\n\nstruct node {\n    int pos, cost, dist;\n    node() {}\n    node(int p, int c, int d) :pos(p), cost(c), dist(d) {}\n    bool operator &lt; (const node&amp; b) const {\n        return dist &gt; b.dist;\n    }\n};\n\nvoid dijkstra() {\n    memset(dist, 0x3f, sizeof(dist));\n    dist[1][0] = 0;\n    priority_queue&lt;node&gt; q;\n    q.push(node(1, 0, 0));\n    while (!q.empty()) {\n        node p = q.top(); q.pop();\n        if (p.dist != dist[p.pos][p.cost]) continue;\n        for (int i = 0; i &lt; G[p.pos].size(); i++) {\n            edge&amp; e = G[p.pos][i];\n            if (p.cost+e.c &lt;= K &amp;&amp; dist[e.t][p.cost+e.c] &gt; dist[p.pos][p.cost] + e.l) {\n                dist[e.t][p.cost+e.c] = dist[p.pos][p.cost] + e.l;\n                q.push(node(e.t, p.cost + e.c, dist[e.t][p.cost+e.c]));\n            }\n        }\n    }\n}\n\nint f, t, l, c;\nint main() {\n    cin &gt;&gt; K &gt;&gt; N &gt;&gt; R;\n    for (int i = 0; i &lt; R; i++) {\n        cin &gt;&gt; f &gt;&gt; t &gt;&gt; l &gt;&gt; c;\n        insert_edge(f, t, l, c);\n    }\n    dijkstra();\n    int ans = inf;\n    for (int k = 0; k &lt;= K; k++) ans = min(ans, dist[N][k]);\n    cout &lt;&lt; (ans == inf ? -1 : ans) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/review/old/%E5%9B%BE%E8%AE%BA/#window-pains","title":"Window Pains","text":"<p>Topo sort to find Directed Loops. \u6709\u5411\u56fe\u5224\u5708\uff0c\u5c31\u7528\u62d3\u6251\u6392\u5e8f\uff01\u6b64\u5916\u6b64\u9898\u5982\u4f55\u6784\u56fe\u4e5f\u6bd4\u8f83\u56f0\u96be\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\nconst int maxn = 10;\nint N = 9;\n\nint G[maxn][maxn];\nint mat[4][4];\n\nvoid insert_edge(int a, int b) {\n    G[a][b] = 1;\n}\n\nvoid build() {\n    memset(G, 0, sizeof(G));\n    for (int i = 0; i &lt; 3; i++) {\n        for (int j = 0; j &lt; 3; j++) {\n            int val = i * 3 + j + 1;\n            if (mat[i][j] != val) insert_edge(val, mat[i][j]);\n            if (mat[i][j+1] != val) insert_edge(val, mat[i][j+1]);\n            if (mat[i+1][j] != val) insert_edge(val, mat[i+1][j]);\n            if (mat[i+1][j+1] != val) insert_edge(val, mat[i+1][j+1]);\n        }\n    }\n}\n\nint vis[maxn];\nint ind[maxn];\n\nbool checkloop() {\n    memset(vis, 0, sizeof(vis));\n    memset(ind, 0, sizeof(ind));\n    // calc ind[]\n    for (int i = 1; i &lt;= N; i++)\n        for (int j = 1; j &lt;= N; j++)\n            if (G[i][j]) ind[j]++;\n    // bfs\n    queue&lt;int&gt; q;\n    for (int i = 1; i &lt;= N; i++) if (ind[i] == 0) q.push(i);\n    while (!q.empty()) {\n        int p = q.front(); q.pop();\n        vis[p] = 1;\n        for (int i = 1; i &lt;= N; i++) {\n            if (G[p][i]) {\n                if (--ind[i] == 0) q.push(i);\n            }\n        }\n    }\n    // check unvisited points (loops)\n    for (int i = 1; i &lt;= N; i++) if (!vis[i]) return true;\n    return false;\n}\n\nstring s;\nint main() {\n    while (cin &gt;&gt; s) {\n        if (s == \"START\") {\n            for (int i = 0; i &lt; 4; i++) {\n                for (int j = 0; j &lt; 4; j++) {\n                    cin &gt;&gt; mat[i][j];\n                }\n            }\n            build();\n            if (checkloop()) cout &lt;&lt; \"THESE WINDOWS ARE BROKEN\" &lt;&lt; endl;\n            else cout &lt;&lt; \"THESE WINDOWS ARE CLEAN\" &lt;&lt; endl;\n        }\n        else if (s == \"END\") continue;\n        else if (s == \"ENDOFINPUT\") break;\n    }\n}\n</code></pre>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/","title":"fASTER","text":""},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#reverse-pair","title":"Reverse Pair","text":"<ul> <li>naive: \\(O(n^2)\\)</li> </ul> <ul> <li> <p>BIT: \\(O(nlogn)\\)</p> <p>\u601d\u8def\uff1a\u521b\u5efa\u5305\u542b\u8f93\u5165\u8303\u56f4\uff08\u8fc7\u5927\u65f6\u79bb\u6563\u5316\uff09\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6bcf\u6b21\u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u52a0\u4e0a\u8be5\u5143\u7d20\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u51fa\u73b0\u8fc7\u7684\u6b21\u6570\uff08\u533a\u95f4\u6c42\u548c\uff09\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\nconst int maxn = 50005;\nint N;\nint arr[maxn], arr2[maxn], bit[maxn];\nmap&lt;int, int&gt; m;\n\nint lowbit(int x) { return x &amp; (-x); }\nvoid add(int n, int x) {\n  for (n; n &lt;= N; n += lowbit(n)) bit[n] += x;\n}\nint getsum(int n) {\n  int res = 0;\n  for (n; n &gt; 0; n -= lowbit(n)) res += bit[n];\n  return res;\n}\n\nint main() {\n  while (cin &gt;&gt; N &amp;&amp; N) {\n      m.clear();\n      memset(bit, 0, sizeof(bit));\n      for (int i = 0; i &lt; N; i++) cin &gt;&gt; arr[i];\n      // discretization\n      memcpy(arr2, arr, sizeof(arr));\n      sort(arr2, arr2 + N); // [0, N) -&gt; [minv, maxv]\n      for (int i = 0; i &lt; N; i++) m[arr2[i]] = i; // [0, N) &lt;- [minv, maxv]\n      long long ans = 0;\n      for (int i = 0; i &lt; N; i++) {\n          add(m[arr[i]] + 1, 1);\n          ans += i + 1 - getsum(m[arr[i]] + 1);\n      }\n      cout &lt;&lt; ans &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Merge sort: \\(O(nlogn)\\)</p> <p>\u601d\u8def\uff1a\u5f52\u5e76\u8fc7\u7a0b\u4e2d\u9047\u5230\u5de6\u8fb9\u5927\u4e8e\u53f3\u8fb9\uff0c\u5219\u6b64\u5904\u4e3a\u9006\u5e8f\u5bf9\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\nconst int maxn = 50005;\nint N;\nint arr[maxn], tmp[maxn];\nlong long ans = 0;\n\nvoid merge(int l, int r, int *a, int *b) {\n  if (r == l) return;\n  int m = (l + r) / 2;\n  merge(l, m, a, b);\n  merge(m + 1, r, a, b);\n  int i = l, j = m + 1, k = l;\n  while (i &lt;= m &amp;&amp; j &lt;= r) {\n      if (a[i] &lt;= a[j]) b[k++] = a[i++];\n      else {\n          ans += m + 1 - i; // update\n          b[k++] = a[j++];\n      }\n  }\n  while (i &lt;= m) b[k++] = a[i++];\n  while (j &lt;= r) b[k++] = a[j++];\n  for (int i = l; i &lt;= r; i++) a[i] = b[i];\n}\n\nint main() {\n  while (cin &gt;&gt; N &amp;&amp; N) {\n      for (int i = 0; i &lt; N; i++) cin &gt;&gt; arr[i];\n      ans = 0;\n      merge(0, N - 1, arr, tmp);\n      cout &lt;&lt; ans &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#variants","title":"Variants","text":"<ul> <li> <p>(Leetcode 493) Count (i, j) where <code>i&lt;j</code> and <code>arr[i] &gt; 2*arr[j]</code>.</p> <ul> <li> <p>mergesort</p> <p>\u5728\u6392\u5e8f\u4e4b\u5916\u72ec\u7acb\u7684\u64cd\u4f5c\u8ba1\u6570\u3002\u6b64\u5916\uff0c\u5c3d\u7ba1\u9898\u76ee\u8bf4\u4e86\u6570\u636e\u662fint\u5185\uff0c\u7531\u4e8e\u6bd4\u8f83\u65f6\u9700\u8981*2\uff0c\u4ecd\u6709\u6ea2\u51fa\u98ce\u9669\uff0c\u6240\u4ee5\u7528ll\u3002</p> <pre><code>class Solution {\npublic:\n    long long ans = 0;\n    // T(n) = 2T(n/2) + O(2n)\n    void mergesort(long long* a, long long* b, int l, int r){\n        if(l==r) return;\n        int m = (l+r)/2;\n        mergesort(a, b, l, m);\n        mergesort(a, b, m+1, r);\n        // count only, O(n)\n        int i=l, j=m+1, k=l;\n        while(i&lt;=m &amp;&amp; j&lt;=r){  \n            if(a[i] &gt; 2*a[j]){\n                ans += m - i + 1;\n                j++;\n            }\n            else i++;\n        }\n        // sort, O(n)\n        i=l, j=m+1, k=l;\n        while(i&lt;=m &amp;&amp; j&lt;=r){\n            if(a[i] &gt; a[j]) b[k++] = a[j++];\n            else b[k++] = a[i++]; \n        }\n        while(i&lt;=m) b[k++] = a[i++];\n        while(j&lt;=r) b[k++] = a[j++];\n        for(int i=l; i&lt;=r; i++) a[i] = b[i];\n    }\n    int reversePairs(vector&lt;int&gt;&amp; nums) {\n        if(nums.empty()) return 0;\n        int N = nums.size();\n        ans = 0;\n        long long* b = new long long[N];\n        long long* a = new long long[N];\n        for(int i=0; i&lt;N; i++) a[i]=nums[i];\n        mergesort(a, b, 0, N-1);\n        return ans;\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>BIT</p> <p>\u79bb\u6563\u5316\u4ecd\u7136\u662f\u5fc5\u8981\u7684\uff0c\u800c\u6b63\u786e\u6027\u9700\u8981\u5728\u539f\u6765\u7684\u6570\u7ec4\u4e2d\u641c\u7d22\u4e24\u500d\u5173\u7cfb\uff0c\u800c\u4e0d\u662f\u5728\u79bb\u6563\u540e\u7684\u6570\u7ec4\u4e2d\u641c\u7d22\u3002</p> <p>Lower Bound\u5404\u79cd\u8fb9\u754c\u6761\u4ef6\u592a\u96be\u5904\u7406\u597d\u4e86\u3002</p> <pre><code>class Solution{\npublic:\n    const static int maxn = 50005;\n    long long bit[maxn];\n    int N;\n    int lowbit(int x){return x&amp;(-x);}\n    void add(int i, int x){\n        for(i;i&gt;0;i-=lowbit(i)) bit[i]+=x;\n    }\n    int getsum(int i){\n        int sum = 0;\n        for(i;i&lt;=N;i+=lowbit(i)) sum += bit[i];\n        return sum;\n    }\n    void init(int n){\n        for(int i=0; i&lt;=n; i++) bit[i] = 0;\n    }\n\n    int reversePairs(vector&lt;int&gt;&amp; nums) {\n        if(nums.empty()) return 0;\n        N = nums.size();\n        init(N);\n        vector&lt;int&gt; pos(nums);\n        sort(pos.begin(), pos.end());\n\n        int ans = 0;\n\n        for(int i=0; i&lt;N; i++){\n            int p = lower_bound(pos.begin(), pos.end(), nums[i]) - pos.begin();\n            int p2 = lower_bound(pos.begin(), pos.end(), 2LL*nums[i]+1) - pos.begin();\n            ans += getsum(p2+1);\n            add(p+1, 1);\n        }\n\n        return ans;\n    }\n};\n</code></pre> </li> </ul> </li> </ul>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#interval-scheduling-maximization-problem","title":"Interval Scheduling Maximization Problem","text":"<p>given a set of intervals, find the maximum numbers of intervals that are non-overlapping.</p> <ul> <li> <p>Greedy: \\(O(nlgn)\\) (and is enough)</p> <pre><code>// here [0,1] and [1,1] are considered as overlapped.\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nconst int maxn = 10005;\nint N;\n\nstruct node {\n  int s, e;\n  bool operator&lt; (const node&amp; b) const { return e &lt; b.e; }\n} act[maxn];\n\n\nint main() {\n  cin &gt;&gt; N;\n    // input\n  for (int i = 0; i &lt; N; i++) \n      cin &gt;&gt; act[i].s &gt;&gt; act[i].e;\n    // sort, smaller ending time first, and starting time is useless.\n  sort(act, act + N);\n  int ans = 0, end = -1;\n    // remove the interval with smallest ending time \n    // and all overlapped interval with it, ans++\n  for (int i = 0; i &lt; N; i++) {\n      if (act[i].s &gt; end) {\n          ans++;\n          end = act[i].e;\n      }\n      else continue;\n  }\n  cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#variants_1","title":"Variants","text":"<ul> <li> <p>GISDP: Grouped Interval Scheduling decision problem</p> <p>Every two intervals shouldn't be in the same group, just decide whether such a compatible set exists.</p> <ul> <li>if all groups contain at most 2 intervals. Polynomial.</li> <li>more than 2 intervals: NP-hard.</li> </ul> </li> </ul>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#monotonic-queue","title":"Monotonic Queue","text":"<p>\u5355\u8c03\u961f\u5217\uff0cpush\u5143\u7d20\u65f6\u5148\u628a\u961f\u5c3e\u5c0f\u4e8ex\u7684\u5143\u7d20pop\u6389\uff0c\u4fdd\u8bc1\u961f\u9996\u59cb\u7ec8\u4e3a\u6700\u5927\u5143\u7d20\u3002\u9002\u5408\u4e8e\u6ed1\u52a8\u533a\u95f4\u53d6\u6700\u503c\u95ee\u9898\u3002</p> <p>\\(O(1)\\) for pop() and getmax() ! ( but in worst cases \\(O( n)\\) for push(). )</p> <ul> <li> <p>Sliding Window Maximum (leetcode 239)</p> <p>Very clever Linear solution &amp; implementation !</p> <pre><code>class Solution {\npublic:\n    struct monoque{\n        deque&lt;int&gt; que;\n        // keep que monotonically decreasing\n        void push(int n){\n            while(!que.empty() &amp;&amp; que.back()&lt;n) que.pop_back();   \n            que.push_back(n);\n        }\n        int getmax(){ return que.front(); }\n        // n is the element ought to be deleted, this makes difference!\n        void pop(int n){ \n            if(que.front() == n) que.pop_front(); \n        }\n    };\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        int N = nums.size();\n        vector&lt;int&gt; ans;\n        monoque que;\n        for(int i=0; i&lt;N; i++){\n            que.push(nums[i]);\n            if(i&gt;=k-1){\n                ans.push_back(que.getmax());\n                que.pop(nums[i-k+1]);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#maximum-minimum-integer-sequence","title":"Maximum &amp; Minimum Integer Sequence","text":"<p>Greedy. But the comparator is hard to come about.</p> <pre><code>import functools\n\nn = int(input())\nnums = input().split()\n\n# python sorted cmp\ndef cmp(a, b):\n    a, b = int(a+b), int(b+a)\n    if a==b:\n        return 0 # eq\n    elif a&lt;b:\n        return -1 # a &lt; b\n    else:\n        return 1 # a &gt; b\n\n# functools.cmp_to_key\nnums = sorted(nums, key=functools.cmp_to_key(cmp))\nprint(''.join(reversed(nums)),''.join(nums))\n</code></pre> <pre><code>// leetcode 179 \nclass Solution {\npublic:\n    static bool cmp(const string&amp; a, const string&amp; b){\n        return stoll(a+b) &gt; stoll(b+a);\n    }\n    string largestNumber(vector&lt;int&gt;&amp; nums) {\n        vector&lt;string&gt; snums;\n        for(int i=0; i&lt;nums.size(); i++)\n            snums.push_back(to_string(nums[i]));\n        sort(snums.begin(), snums.end(), cmp);\n        string ans;\n        for(int i=0; i&lt;nums.size(); i++) ans+=snums[i];\n        while(ans[0] == '0' &amp;&amp; ans.size()&gt;1) ans = ans.substr(1);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#palindrome","title":"Palindrome","text":"<p>Manacher is the golden key.</p> <pre><code>class Solution {\npublic:\n    int manacher(string s){\n        // init\n        string S = \"@#\";\n        for(int i=0; i&lt;s.size(); i++) S += s[i] + \"#\";\n        S += \"$\";\n        // calc\n        int center = 0, right = 0;\n        int* z = new int[S.size()];\n        for(int i=1; i&lt;S.size(); i++){\n            if(i&lt;right) z[i] = min(right-i, z[2*center-i]);\n            while(S[i+z[i]+1] == S[i-z[i]-1]) z[i]++;\n            if(i+z[i]&gt;right){\n                center = i;\n                right = i + z[i];\n            }\n        }\n        // find longest \n        int mx = 0;\n        for(int i=1; i&lt;S.size(); i++)\n            mx = max(mx, (z[i]+1)/2);\n        return mx;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#cumulative-sum","title":"Cumulative Sum","text":"<p>\u5b50\u5e8f\u5217(Subarray, continuous)\u6c42\u548c\u95ee\u9898\uff0c\u679a\u4e3e\u5b50\u5e8f\u5217O(n^2)\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u7684\u8ba1\u7b97O(n)\uff0cNaive\u7b97\u6cd5O(n^3\uff09\u3002</p> <p>Cumsum\u9884\u5904\u7406O(n)\uff0c\u679a\u4e3e\u5b50\u5e8f\u5217O(n^2)\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u7684\u8ba1\u7b97O(1)\uff0c\u603b\u5171O(n^2)\u3002</p> <ul> <li> <p>leetcode 560 Subarray Sum Equals K</p> <p>\u7531\u4e8e\u8981\u6c42\u7279\u6b8a\uff0c\u8fd8\u53ef\u4ee5\u6563\u5217\u8ba1\u6570\u4f18\u5316\u5230O(n)\u3002</p> <pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        map&lt;int, int&gt; m;\n        m[0] = 1;\n        int sum = 0, ans = 0;\n        for(int i=0; i&lt;nums.size(); i++){\n            sum += nums[i];\n            if(m.count(sum-k)) ans+= m[sum-k];\n            if(m.count(sum)) m[sum]++;\n            else m[sum] = 1;\n        }\n        return ans;\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#o1-space-cults","title":"O(1) Space Cults","text":"<ul> <li> <p>find the unique number</p> <p><code>[1,2,1,3,3] -&gt; 2</code></p> <p>XOR solution.</p> </li> </ul> <ul> <li> <p>find the duplicate number</p> <p><code>[1,3,4,2,2] -&gt; 2</code>  Amazingly a Floyd Cycle Detection Solution:</p> <pre><code>class Solution {\npublic:\n    int findDuplicate(vector&lt;int&gt;&amp; nums) {\n        int slow=0, fast=0;\n        do{\n            slow = nums[slow];\n            fast = nums[nums[fast]];\n        } while(slow != fast);\n\n        slow = 0;\n        while(slow != fast){\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n\n        return slow;\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#range-maximum","title":"Range Maximum","text":"<ul> <li> <p>Segment tree</p> <p>\u533a\u95f4\u66f4\u65b0O(lgn)\uff0c\u9884\u5904\u7406O(nlgn)\uff0c\u533a\u95f4\u67e5\u8be2O(lgn)</p> </li> </ul> <ul> <li> <p>BIT</p> <p>\u5355\u70b9\u66f4\u65b0O(lg^2n)\uff0c\u9884\u5904\u7406O(nlg^2n)\uff0c\u533a\u95f4\u67e5\u8be2O(lg^2n)</p> </li> </ul> <ul> <li> <p>RMQ</p> <p>\u4e0d\u652f\u6301\u66f4\u65b0\uff0c\u9884\u5904\u7406O(nlgn)\uff0c\u533a\u95f4\u67e5\u8be2O(1)</p> </li> </ul>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#longest-valid-parenthesis-substring-32","title":"Longest Valid Parenthesis substring 32","text":"<p>DP is complicated, use stack and think reversely.</p> <p>\u6bcf\u4e24\u4e2a\u65e0\u6cd5\u5339\u914d\u7684\u5b57\u7b26\u4e4b\u95f4\u7684\u5b50\u4e32\u4e00\u5b9a\u662f\u6b63\u786e\u5339\u914d\u7684\uff0c\u6240\u4ee5\u7528\u6808\u8bb0\u5f55\u5931\u914d\u5b57\u7b26\uff0c\u51cf\u4e00\u51cf\u5373\u53ef\uff01</p> <pre><code>class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        stack&lt;int&gt; stk;\n        for(int i=0; i&lt;s.size(); i++){\n            if(s[i] == '(') stk.push(i);\n            else{\n                if(!stk.empty() &amp;&amp; s[stk.top()]=='(') stk.pop();\n                else stk.push(i);\n            }\n        }\n        if(stk.empty()) return s.size();\n        else{\n            int end = s.size(), start = 0, ans = 0;\n            while(!stk.empty()){\n                start = stk.top(); stk.pop();\n                ans = max(ans, end-start-1);\n                end = start;\n            }\n            ans = max(ans, end);\n            return ans;\n        }\n    }\n};\n</code></pre>"},{"location":"algorithm/review/old/%E5%A4%8D%E6%9D%82%E5%BA%A6/#_1","title":"\u6392\u5e8f\u7684\u4ee3\u4ef7","text":"<p>\u6c42\u901a\u8fc7\u4ea4\u6362\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\uff08\u4ee3\u4ef7\u4e3a\u4e24\u4e2a\u6570\u5b57\u4e4b\u548c\uff09\u4f7f\u5f97\u6570\u7ec4\u6709\u5e8f\u6240\u8981\u82b1\u8d39\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002</p> <p>\u601d\u8def\uff1a\u7d22\u5f15\u6392\u5e8f\uff0c\u6bcf\u4e2a\u4ea4\u6362\u73af\u7684\u6700\u5c0f\u4ee3\u4ef7\u4e3a\uff1a\u73af\u4e2d\u5143\u7d20\u4e4b\u548c+\u73af\u4e2d\u6700\u5c0f\u5143\u7d20*\uff08\u73af\u4e2d\u5143\u7d20\u6570\u76ee-2\uff09\uff0c\u6216\u8005\u628a\u73af\u4e2d\u6700\u5c0f\u5143\u7d20\u6682\u65f6\u4e0e\u6574\u4f53\u6700\u5c0f\u5143\u7d20\u4e92\u6362\u518d\u6c42\u4ee3\u4ef7\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int maxn = 1000005;\nconst int inf = 0x3f3f3f3f;\nint N;\n\nint vis[maxn];\n\nstruct node {\n    int val, idx;\n    bool operator &lt; (const node&amp; b) const {\n        return val &lt; b.val;\n    }\n} nodes[maxn];\n\nint ans, mn;\n\nint solveLoop(int x) {\n    int lmn = inf, cnt = 0, res = 0;\n    while (!vis[x]) {\n        vis[x] = 1;\n        lmn = min(lmn, nodes[x].val);\n        cnt++;\n        res += nodes[x].val;\n        x = nodes[x].idx;\n    }\n    int val1 = res + lmn * (cnt - 2);\n    int val2 = res + mn * cnt + lmn + mn; // important\n    return min(val1, val2);\n}\n\nint main() {\n    while (cin &gt;&gt; N &amp;&amp; N) {\n        mn = inf;\n        for (int i = 0; i &lt; N; i++) {\n            cin &gt;&gt; nodes[i].val;\n            nodes[i].idx = i;\n            mn = min(mn, nodes[i].val);\n        }\n        sort(nodes, nodes + N);\n        memset(vis, 0, sizeof(vis));\n        ans = 0;\n        for (int i = 0; i &lt; N; i++) if (!vis[i]) ans += solveLoop(i);\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"Amazing String Algorithms","text":""},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","title":"\u6700\u5c0f\u8986\u76d6\u5b50\u4e32","text":"<p>\u6c42\u6700\u5c0f\u8986\u76d6\u5b50\u4e32\u3002</p> <ul> <li> <p>KMP</p> <p>\u5b9a\u7406\uff1a\u6700\u5c0f\u8986\u76d6\u5b50\u4e32\u957f\u5ea6\u4e3a<code>N-next[N]</code>\u3002</p> <p>\u6700\u5c0f\u8986\u76d6\u5b50\u4e32\u5373\u524dN-Next[N]\u4e2a\u5b57\u7b26\u6784\u6210\u7684\u5b50\u4e32\u3002</p> </li> </ul>"},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/#variants","title":"Variants","text":"<ul> <li> <p>\u4e8c\u7ef4\u6700\u5c0f\u8986\u76d6\u77e9\u9635\u9762\u79ef\uff08\u6324\u5976\u7f51\u7edc\uff09</p> <p>\u611a\u8822\u7684char**\u4f20\u5165\u540e\u65e0\u6cd5\u4e8c\u7ef4\u4e0b\u6807\u8bbf\u95ee\uff0c\u6240\u4ee5\u53ea\u80fd\u5199\u4e24\u5957\u51fd\u6570\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int maxr = 10005;\nconst int maxc = 80;\nint R, C;\nchar mat[maxr][maxc];\nchar tmat[maxc][maxr];\n\nbool coleq(int i, int j) {\n  for (int k = 0; k &lt; R; k++)\n      if (mat[k][i] != mat[k][j]) return false;\n  return true;\n}\n\nbool roweq(int i, int j) {\n  for (int k = 0; k &lt; C; k++)\n      if (tmat[k][i] != tmat[k][j]) return false;\n  return true;\n}\n\nint colmncov() {\n  vector&lt;int&gt; next(C + 1, 0);\n  next[0] = -1;\n  int i = 0, k = -1;\n  while (i &lt; C) {\n      while (k &gt;= 0 &amp;&amp; !coleq(i, k)) k = next[k];\n      i++, k++;\n      next[i] = k;\n  }\n  return C - next[C];\n}\n\nint rowmncov() {\n  vector&lt;int&gt; next(R + 1, 0);\n  next[0] = -1;\n  int i = 0, k = -1;\n  while (i &lt; R) {\n      while (k &gt;= 0 &amp;&amp; !roweq(i, k)) k = next[k];\n      i++, k++;\n      next[i] = k;\n  }\n  return R - next[R];\n}\n\nint main() {\n  cin &gt;&gt; R &gt;&gt; C;\n  memset(mat, '\\0', sizeof(mat));\n  memset(tmat, '\\0', sizeof(tmat));\n  for (int i = 0; i &lt; R; i++) {\n      for (int j = 0; j &lt; C; j++) {\n          cin &gt;&gt; mat[i][j];\n          tmat[j][i] = mat[i][j];\n      }\n  }\n  cout &lt;&lt; rowmncov() * colmncov() &lt;&lt; endl;\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","title":"\u6700\u5c0f\u91cd\u590d\u5b50\u4e32","text":"<p>\u5224\u65ad\u662f\u5426\u5b58\u5728\u6700\u5c0f\u91cd\u590d\u5b50\u4e32\u3002</p> <ul> <li> <p>KMP based</p> <pre><code>class Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        int len = s.size();\n        s += \"$\";\n        vector&lt;int&gt; next(len+1, 0);\n        next[0] = -1;\n        int i=0, k=-1;\n        while(i&lt;len){\n            while(k&gt;=0 &amp;&amp; s[i] != s[k]) k = next[k];\n            i++, k++;\n            next[i] = k;\n        }\n        // minimum cover substring\n        int cov = len - next[len];\n        return cov&lt;len &amp;&amp; len%cov==0;\n    }\n};\n</code></pre> </li> </ul> <ul> <li> <p>Trick</p> <p>Trick is trick because you will never know why trick is trick.</p> <pre><code>class Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        return (s+s).substr(1,2*s.size()-2).find(s)!=-1;\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_3","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<ul> <li> <p>Manacher \uff08c++\u5199\u6cd5\u5de8\u5927\u70e6\u4eba\uff09</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int maxl = 105;\nint r[maxl * 2];\n\nstring manacher(string s) {\n  string ss = \"^#\";\n  for (int i = 0; i &lt; s.size(); i++) ss += s[i], ss += '#';\n  ss += '$';\n  memset(r, 0, sizeof(r));\n  int p = 0, l = 0;\n  for (int i = 0; i &lt; ss.size(); i++) {\n      r[i] = l &gt; i ? min(r[2 * p - i], l - i) : 1;\n      while (ss[i + r[i]] == ss[i - r[i]]) r[i]++;\n      if (i + r[i] &gt; l) {\n          l = i + r[i];\n          p = i;\n      }\n  }\n  int idx = 0;\n  for (int i = 1; i &lt; ss.size(); i++) {\n      if (r[i] &gt; r[idx]) {\n          idx = i;\n      }\n  }\n  string res = \"\";\n  for (int i = idx - r[idx] + 1; i &lt; idx + r[idx]; i++) {\n      if (ss[i] != '#') res += ss[i];\n  }\n  return res;\n}\n\nint main() {\n  string s;\n  while (cin &gt;&gt; s) {\n      cout &lt;&lt; manacher(s) &lt;&lt; endl;\n  }\n}\n</code></pre> </li> </ul>"},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_4","title":"\u6700\u957f\u516c\u5171\u5b50\u4e32","text":"<p>\u6c42N\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\uff08\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6700\u957f\u4e3aL\uff09</p> <ul> <li>KMP + Binary Search\uff0c\\(O(LlgL*N^2)\\)</li> <li>Suffix Array + Binary Search\uff0c\\(O(lgL*N^2)\\)</li> </ul>"},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_5","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>\u6c422\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002</p> <ul> <li>DP</li> </ul>"},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_6","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217","text":"<ul> <li>DP</li> </ul>"},{"location":"algorithm/review/old/%E5%AD%97%E7%AC%A6%E4%B8%B2/#distinct-subsequences","title":"Distinct Subsequences","text":"<p>\u6c42\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684Unique\u7684\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u3002</p> <ul> <li>DP</li> </ul>"},{"location":"algorithm/review/problem_series/best_time_to_buy_and_sell_stock/","title":"Best time to buy and sell stock","text":""},{"location":"algorithm/review/problem_series/best_time_to_buy_and_sell_stock/#i","title":"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u2160","text":"<p>\u7ed9\u5b9a\u6570\u7ec4\uff0c\u7b2c\\(i\\)\u4e2a\u503c\u4e3a\u4e3a\u4e00\u652f\u80a1\u7968\u5728\u7b2c\\(i\\)\u5929\u7684\u4ef7\u683c\u3002</p> <p>\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u4e70\u4e00\u6b21\uff0c\u5356\u4e00\u6b21\uff09\u5e76\u4e14\u4e00\u5929\u53ea\u80fd\u5b8c\u6210\u4e00\u6b21\u4e70\u6216\u8005\u5356\uff0c\u6c42\u6700\u5927\u5229\u76ca\u3002</p> <p>\u8d2a\u5fc3\u6cd5\uff0c\u6c42\u6700\u4f4e\u70b9\u4e0e\u6700\u9ad8\u70b9\u76f8\u51cf\u5373\u53ef\u3002</p> \\[ \\displaylines{ \\text{profit}[i] = \\max(\\text{profit}[i-1], \\text{prices}[i]-\\min_{1\\le j\\le i}\\{\\text{prices}[j]\\}) \\\\ \\text{profit}[1] = 0 \\\\ \\text{ans} = \\text{profit}[n] } \\]"},{"location":"algorithm/review/problem_series/best_time_to_buy_and_sell_stock/#ii","title":"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u2161","text":"<p>\u5141\u8bb8\u5b8c\u6210\u591a\u7b14\u4ea4\u6613\uff0c\u4f46\u540c\u65f6\u53ea\u80fd\u53c2\u4e0e\u4e00\u7b14\u4ea4\u6613\uff08\u4e70\u5165\u524d\u5fc5\u987b\u5168\u90e8\u5356\u51fa\uff09\u3002</p> <p>\u8d2a\u5fc3\u6cd5\uff0c\u53ea\u8981\u4ef7\u683c\u5347\u9ad8\u5c31\u5356\u51fa\u3002</p> \\[ \\displaylines{ \\text{profit}[i] = \\text{profit}[i-1] + \\max\\{0, \\text{prices}[i] - \\text{prices}[i-1]\\}\\\\ \\text{profit}[1] = 0 \\\\ \\text{ans} = \\text{profit}[n] } \\]"},{"location":"algorithm/review/problem_series/best_time_to_buy_and_sell_stock/#iii","title":"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u2162","text":"<p>\u6700\u591a\u5b8c\u6210\u4e24\u7b14\u4ea4\u6613\u3002</p> <p>\u904d\u5386\u5206\u754c\u70b9\uff0c\u8c03\u7528\u4e24\u6b21\u95ee\u9898\u2160\u3002</p>"},{"location":"algorithm/review/problem_series/best_time_to_buy_and_sell_stock/#iv","title":"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u2163","text":"<p>\u6700\u591a\u5b8c\u6210K\u7b14\u4ea4\u6613\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u3002</p> <p></p>"},{"location":"algorithm/review/problem_series/digit_simulation/","title":"Digit simulation","text":""},{"location":"algorithm/review/problem_series/digit_simulation/#n1","title":"\u524dn\u4e2a\u6574\u6570\u4e2d\u6570\u5b571\u7684\u4e2a\u6570","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <code>n</code>\uff0c\u8ba1\u7b97\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e <code>n</code> \u7684\u975e\u8d1f\u6574\u6570\u4e2d\u6570\u5b57 <code>1</code> \u51fa\u73b0\u7684\u4e2a\u6570\u3002</p> <p>\u516c\u5f0f\u9700\u8981\u5f52\u7eb3\u89c4\u5f8b\uff0c\u8be6\u89c1here.</p> <pre><code>class Solution {\npublic:\n    int countDigitOne(int n) {\n        int ans = 0;\n        // loop digit\n        long long p = 1; // p = 10^k\n        for (int k = 0; n &gt;= p; k++) {\n            ans += (n / (p * 10)) * p + min(max(n % (p * 10) - p + 1, 0LL), p);\n            p *= 10;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/digit_simulation/#n","title":"\u6574\u6570\u5e8f\u5217\u4e2d\u7b2cN\u4f4d\u6570\u5b57","text":"<p>\u5728\u65e0\u9650\u7684\u6574\u6570\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...\u4e2d\u627e\u5230\u7b2c <code>n</code> \u4f4d\u6570\u5b57\u3002</p> <p>\u4ecd\u7136\u662f\u5f52\u7eb3\u89c4\u5f8b\u3002</p> <pre><code>class Solution {\npublic:\n    int findNthDigit(int n) {\n        int d = 1;\n        while(n &gt; d * 9 * pow(10, d - 1)) {\n            n -= d * 9 * pow(10, d - 1);\n            d++;\n        }\n\n        int num = pow(10, d-1) + (n - 1) / d;\n        int pos = n % d;\n        if(!pos) pos = d;\n        int ans = int(num / pow(10, d - pos)) % 10;\n\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/jump_game/","title":"Jump game","text":""},{"location":"algorithm/review/problem_series/jump_game/#jump-game","title":"jump game","text":""},{"location":"algorithm/review/problem_series/jump_game/#jump-game-2","title":"jump game 2","text":""},{"location":"algorithm/review/problem_series/median_of_data_stream/","title":"Median of data stream","text":""},{"location":"algorithm/review/problem_series/median_of_data_stream/#get-the-median-of-a-data-stream","title":"get the median of a data stream","text":"<p>\u6700\u7b80\u5355\u7684\u505a\u6cd5\u662f\u63d2\u5165\u6392\u5e8f\uff0c\u4f46\u6bcf\u6b21\u63d2\u5165\u8017\u65f6\\(O(N)\\)\u3002\u4e0b\u9762\u7684\u4e24\u79cd\u65b9\u6cd5\u5747\u4e3a\\(O(\\log N)\\)\u7684\u63d2\u5165\u8017\u65f6\u3002\uff08\u67e5\u8be2\u8017\u65f6\u5747\u4e3a\\(O(1)\\)\uff09</p>"},{"location":"algorithm/review/problem_series/median_of_data_stream/#_1","title":"\u53cc\u5806","text":"<p>\u5f88\u5de7\u5999\u7684\u505a\u6cd5\uff0c\u63d2\u5165\u65f6\u53ef\u80fd\u8981\u8fdb\u884c\u5806\u95f4\u7684\u5143\u7d20\u4ea4\u6362\u3002</p> <pre><code>class MedianFinder {\npublic:\n    /** initialize your data structure here. */\n    priority_queue&lt;int&gt; mx;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; mn;\n\n    MedianFinder() {\n    }\n\n    void addNum(int num) {\n        // logn\n        if (mx.size() == mn.size()) {\n            if (!mn.empty() &amp;&amp; num &gt; mn.top()) {\n                mx.push(mn.top()); mn.pop();\n                mn.push(num);\n            } else {\n                mx.push(num);\n            }\n        } else {\n            if (num &lt; mx.top()) {\n                mn.push(mx.top()); mx.pop();\n                mx.push(num);\n            } else {\n                mn.push(num);\n            }\n        }\n    }\n\n    double findMedian() {\n        if (mn.size() == mx.size()) {\n            return (mn.top() + mx.top()) * 0.5;\n        } else {\n            return mx.top();\n        }\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/median_of_data_stream/#multiset","title":"multiset\u7ef4\u62a4\u4e2d\u70b9\u8fed\u4ee3\u5668","text":"<p><code>multiset</code>\u672c\u8eab\u5c31\u662f\u7ea2\u9ed1\u6811\uff0c\u5177\u6709\\(O(\\log N)\\)\u7684\u63d2\u5165\u8017\u65f6\uff0c\u5173\u952e\u5728\u4e8e\u5982\u4f55\u5b9e\u73b0\\(O(1)\\)\u7684\u67e5\u8be2\u8017\u65f6\u3002</p> <pre><code>class MedianFinder {\n    multiset&lt;int&gt; data;\n    multiset&lt;int&gt;::iterator mid;\n\npublic:\n    MedianFinder() : mid(data.end()) {}\n\n    void addNum(int num)\n    {\n        int n = data.size();\n        data.insert(num);\n\n        if (!n)                                 // first element inserted\n            mid = data.begin();\n        else if (num &lt; *mid)                    // median is decreased\n            mid = (n &amp; 1 ? mid : prev(mid));\n        else                                    // median is increased\n            mid = (n &amp; 1 ? next(mid) : mid);\n    }\n\n    double findMedian()\n    {\n         int n = data.size();\n        return (*mid + *next(mid, n % 2 - 1)) * 0.5;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E6%8A%95%E5%87%BAx%E7%9A%84%E6%A6%82%E7%8E%87/","title":"N\u4e2a\u9ab0\u5b50\u6295\u51fax\u7684\u6982\u7387","text":""},{"location":"algorithm/review/problem_series/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E6%8A%95%E5%87%BAx%E7%9A%84%E6%A6%82%E7%8E%87/#nx","title":"n\u4e2a\u9ab0\u5b50\u6295\u51fax\u7684\u6982\u7387","text":"<p>\u4ece\u6570\u5b66\u4e0a\u63a8\u5bfc\u516c\u5f0f\u5341\u5206\u590d\u6742\uff0c\u4f46\u6ee1\u8db3\u52a8\u6001\u89c4\u5212\u7684\u6761\u4ef6\uff0c\u5177\u6709\u9012\u63a8\u6027\u8d28\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;double&gt; dicesProbability(int n) {\n        map&lt;pair&lt;int, int&gt;, int&gt; dp;\n        for (int i = 1; i &lt;= 6; i++) dp[{1, i}] = 1;\n        for (int i = 2; i &lt;= n; i++) {\n            for (int x = i; x &lt;= 6 * i; x++) {\n                for (int j = 1; j &lt;= 6; j++) {\n                    dp[{i, x}] += dp[{i-1, x - j}];\n                }\n            }\n        }\n        vector&lt;double&gt; ans;\n        for (int x = n; x &lt;= 6 * n; x++) {\n            ans.push_back((double)dp[{n, x}] / pow(6, n));\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u6570\u5b66\u516c\u5f0f\uff1a</p> <p>\u51fa\u73b0\\(k\\)\u7684\u6982\u7387\u4e3a\\(x^k\\)\u7684\u7cfb\u6570\u3002</p> \\[ \\displaylines{ (x+x^2+x^3+x^4+x^5+x^6)^n / 6^n } \\] <p>\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u4e8c\u9879\u5f0f\u5b9a\u7406\u5c55\u5f00\uff1a</p> <p></p> <p>\u7136\u800c\u5c55\u5f00\u7684\u7cfb\u6570\u516c\u5f0f\u8fc7\u4e8e\u590d\u6742\uff0c\u6240\u4ee5\u6ca1\u6cd5\u7528\u3002</p>"},{"location":"algorithm/review/problem_series/palindrome/","title":"Palindrome","text":""},{"location":"algorithm/review/problem_series/palindrome/#_1","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p>\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\uff08Substring\uff0c\u8fde\u7eed\uff09\u3002</p> <p>\u66b4\u529b\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55\u5230\u6700\u957f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n^2)\\)\u3002</p> <p>Manacher\u7b97\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n)\\)\uff1a</p> <pre><code>// manacher in c++ is complicated...\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int len = s.size();\n\n        // build assistant string\n        string ss = \"^\";\n        for(int i=0; i&lt;len; i++) {\n            ss += \"#\";\n            ss += s[i];\n        }\n        ss += \"#$\";\n\n        // arm length\n        int m[2005];\n        int p = 0, po = 0;\n        for (int i = 1; i &lt;= 2 * len + 1; i++){\n            if (p &gt; i) m[i] = min(p-i, m[2*po-i]);\n            else m[i] = 1;\n            while (ss[i-m[i]] == ss[i+m[i]]) m[i]++;\n            if (m[i] + i &gt; p){\n                p = m[i] + i;\n                po = i;\n            }\n        }\n        po = 1;\n        for (int i = 1; i &lt;= 2 * len + 1; i++){\n            if (m[i] &gt; m[po]) po = i;\n        }\n\n        // get the longest palindrome\n        string tmp = ss.substr(po-m[po]+1, 2*m[po]-1);\n        string ans;\n        for(int i=0; i&lt;tmp.size(); i++){\n            if(tmp[i]!='#') ans+=tmp[i];\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/palindrome/#_2","title":"\u56de\u6587\u5b50\u4e32\u6570\u91cf","text":"<p>\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002</p> <p>Manacher\u7b97\u6cd5\\(O(n)\\):</p> <pre><code>class Solution(object):\n    def countSubstrings(self, S):\n\n        def manachers(S):\n            A = '@#' + '#'.join(S) + '#$'\n            Z = [0] * len(A)\n            center = right = 0\n            for i in range(1, len(A) - 1):\n                if i &lt; right:\n                    Z[i] = min(right - i, Z[2 * center - i])\n                while A[i + Z[i] + 1] == A[i - Z[i] - 1]:\n                    Z[i] += 1\n                if i + Z[i] &gt; right:\n                    center, right = i, i + Z[i]\n            return Z\n\n        return sum((v+1)//2 for v in manachers(S))\n</code></pre>"},{"location":"algorithm/review/problem_series/palindrome/#_3","title":"\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217","text":"<p>\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff08Subsequence\uff0c\u53ef\u4ee5\u4e0d\u8fde\u7eed\uff09\u3002</p> <p>\u52a8\u6001\u89c4\u5212\uff0c\\(O(n^2)\\).</p> <pre><code>class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        int len = s.size();\n        if (len == 0) return 0;\n\n        vector&lt;vector&lt;int&gt;&gt; dp(len, vector&lt;int&gt;(len, 0));\n\n        for (int l=1; l&lt;=len; l++){\n            for (int i=0; i&lt;=len-l; i++){\n                int j = i+l-1;\n                if (j==i) dp[i][j] = 1;\n                else if (j==i+1) {\n                    if (s[i]==s[j]) dp[i][j] = 2;\n                    else dp[i][j] = 1;\n                }\n                else {\n                    if (s[i]==s[j]) dp[i][j] = dp[i+1][j-1]+2;\n                    else dp[i][j] = max(dp[i+1][j], dp[i][j-1]);\n                }\n            }\n        }\n\n        return dp[0][len-1];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/palindrome/#_4","title":"\u4e0d\u540c\u56de\u6587\u5b50\u5e8f\u5217\u7684\u6570\u91cf","text":""},{"location":"algorithm/review/problem_series/regex/","title":"Regex","text":""},{"location":"algorithm/review/problem_series/regex/#regex-match","title":"regex match","text":"<p>dp, dp!</p> <p></p> <pre><code>class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int m = s.size();\n        int n = p.size();\n\n        auto matches = [&amp;](int i, int j) {\n            if (i == 0) {\n                return false;\n            }\n            if (p[j - 1] == '.') {\n                return true;\n            }\n            return s[i - 1] == p[j - 1];\n        };\n\n        vector&lt;vector&lt;int&gt;&gt; f(m + 1, vector&lt;int&gt;(n + 1));\n        f[0][0] = true;\n        for (int i = 0; i &lt;= m; ++i) {\n            for (int j = 1; j &lt;= n; ++j) {\n                if (p[j - 1] == '*') {\n                    f[i][j] |= f[i][j - 2];\n                    if (matches(i, j - 1)) {\n                        f[i][j] |= f[i - 1][j];\n                    }\n                }\n                else {\n                    if (matches(i, j)) {\n                        f[i][j] |= f[i - 1][j - 1];\n                    }\n                }\n            }\n        }\n        return f[m][n];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/rotation_array/","title":"Rotation array","text":""},{"location":"algorithm/review/problem_series/rotation_array/#array-rotation-in-place","title":"array rotation in-place","text":"<p>Not difficult, just some tedious index calculation.</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; rotateGrid(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int k) {\n        int M = grid.size();\n        int N = grid[0].size();\n        for (int i = 0; i &lt; min(M/2, N/2); i++) {\n            int m = M - 2 * i;\n            int n = N - 2 * i;\n            for (int j = 0; j &lt; (k % (m * 2 + n * 2 - 4)); j++) {\n                int tmp = grid[i][i];\n                for (int k = i; k &lt; i + n - 1; k++) {\n                    grid[i][k] = grid[i][k+1];\n                }\n                for (int k = i; k &lt; i + m - 1; k++) {\n                    grid[k][N - i - 1] = grid[k + 1][N - i - 1];\n                }\n                for (int k = N - i - 1; k &gt; i; k--) {\n                    grid[M - i - 1][k] = grid[M - i - 1][k - 1];\n                }\n                for (int k = M - i - 1; k &gt; i + 1; k--) {\n                    grid[k][i] = grid[k - 1][i];\n                }\n                grid[i + 1][i] = tmp;\n            }\n        }\n        return grid;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/search_2d_matrix/","title":"Search 2d matrix","text":""},{"location":"algorithm/review/problem_series/search_2d_matrix/#_1","title":"\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e","text":"<p>\u5728\u4e00\u4e2a n * m \u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u9ad8\u6548\u7684\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002</p> <p>\u5e76\u4e0d\u662f\u4e8c\u7ef4\u4e8c\u5206\uff01\u6ca1\u6709\u4e8c\u7ef4\u4e8c\u5206\u6cd5\uff01</p> <pre><code>[[1, 3, 5],\n [2, 4, 6],\n [11,13,15],\n [12,14,16]]\n\nboth row-col and col-row binary search for 13 will fail!\n</code></pre> <p>\u5947\u5999\u904d\u5386\u6cd5\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u3002</p> <pre><code>class Solution {\npublic:\n    bool findNumberIn2DArray(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        if (matrix.empty() || matrix[0].empty()) return false;\n        int H = matrix.size(), W = matrix[0].size();\n        // not 2d binary search... there is no such thing!\n        int i = 0, j = W - 1;\n        while (i &lt; H &amp;&amp; j &gt;= 0) {\n            //cout &lt;&lt; i &lt;&lt;\",\"&lt;&lt; j &lt;&lt; \" = \" &lt;&lt; matrix[i][j] &lt;&lt; endl;\n            if (matrix[i][j] == target) return true;\n            else if (matrix[i][j] &lt; target) i++;\n            else j--;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/sudoku/","title":"Sudoku","text":""},{"location":"algorithm/review/problem_series/sudoku/#solve-sodoku","title":"solve sodoku","text":"<p>DFS\u56de\u6eaf\u5373\u53ef\uff0c\u53ef\u4ee5\u7528bit\u64cd\u4f5c\u4f18\u5316<code>check()</code>\uff0c\u4f46\u6ca1\u5fc5\u8981\uff08</p> <pre><code>class Solution {\npublic:\n    bool check(vector&lt;vector&lt;char&gt;&gt;&amp; board, int i, int j, char c) {\n        int ii = i / 3 * 3, jj = j / 3 * 3;\n        for (int k = 0; k &lt; 9; k++) {\n            if (board[i][k] == c) return false;\n            if (board[k][j] == c) return false;\n            if (board[ii + k % 3][jj + k / 3] == c) return false;\n        }\n        return true;\n    }\n    bool finished = false;\n    void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; board, queue&lt;pair&lt;int,int&gt;&gt; q) {\n        if (q.empty()) {\n            finished = true;\n            return;\n        }\n        auto [i, j] = q.front(); q.pop();\n        for (char c = '1'; c &lt;= '9'; c++) {\n            if (check(board, i, j, c)) {\n                board[i][j] = c;\n                dfs(board, q);\n                if (finished) return;\n                board[i][j] = '.';\n            }\n        }\n    }\n    void solveSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n        // brute-force dfs\n        queue&lt;pair&lt;int,int&gt;&gt; q;\n        for (int i = 0; i &lt; 9; i++) {\n            for (int j = 0; j &lt; 9; j++) {\n                if (board[i][j] == '.') {\n                    q.emplace(i, j);\n                }\n            }\n        }\n        finished = false;\n        dfs(board, q);\n        // assert finished;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/ugly_number/","title":"Ugly number","text":""},{"location":"algorithm/review/problem_series/ugly_number/#_1","title":"\u4e11\u6570","text":"<pre><code>// nlogn, priority_queue.\nclass Solution {\npublic:\n    int nthUglyNumber(int n) {\n        long long ans;\n        priority_queue&lt;long long, vector&lt;long long&gt;, greater&lt;long long&gt;&gt; q;\n        q.push(1);\n        for (int i = 0; i &lt; n; i++) {\n            ans = q.top(); q.pop();\n            while (!q.empty() &amp;&amp; q.top() == ans) q.pop();\n            //cout &lt;&lt; i &lt;&lt; \" = \" &lt;&lt; ans &lt;&lt; endl;\n            q.push(ans * 2);\n            q.push(ans * 3);\n            q.push(ans * 5);\n        }\n        return ans;\n    }\n};\n\n\n// n, pointer magic.\nclass Solution {\npublic:\n    int nthUglyNumber(int n) {\n        vector&lt;int&gt; nums = {1};\n        int p2 = 0, p3 = 0, p5 = 0;\n        for (int i = 1; i &lt; n; i++) {\n            int x2 = nums[p2] * 2;\n            int x3 = nums[p3] * 3;\n            int x5 = nums[p5] * 5;\n\n            int x = min(x2, min(x3, x5));\n            if (x == x2) p2++;\n            if (x == x3) p3++;\n            if (x == x5) p5++;\n\n            nums.push_back(x);\n        }\n        return nums.back();\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/valid_stack_pop_sequence/","title":"Valid stack pop sequence","text":""},{"location":"algorithm/review/problem_series/valid_stack_pop_sequence/#valid-stack-pop-sequence","title":"valid stack pop sequence","text":"<p>In fact a very simple simulation. </p> <p>Just try to pop as many elements as possible after each push.</p> <pre><code>class Solution {\npublic:\n    bool validateStackSequences(vector&lt;int&gt;&amp; pushed, vector&lt;int&gt;&amp; popped) {\n        stack&lt;int&gt; s;\n        int j = 0;\n        for (int i = 0; i &lt; pushed.size(); i++) {\n            s.push(pushed[i]);\n            while (!s.empty() &amp;&amp; s.top() == popped[j]) {\n                s.pop();\n                j++;\n            }\n        }\n        return s.empty();\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%902D%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%91%E3%80%902D%E5%B7%AE%E5%88%86%E3%80%91%E9%82%AE%E7%A5%A8%E7%BD%91%E6%A0%BC/","title":"\u30102D\u524d\u7f00\u548c\u3011\u30102D\u5dee\u5206\u3011\u90ae\u7968\u7f51\u683c","text":""},{"location":"algorithm/review/problem_series/%E3%80%902D%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%91%E3%80%902D%E5%B7%AE%E5%88%86%E3%80%91%E9%82%AE%E7%A5%A8%E7%BD%91%E6%A0%BC/#_1","title":"\u7528\u90ae\u7968\u8d34\u6ee1\u7f51\u683c\u56fe","text":"<p>\u7ed9\u4f60\u4e00\u4e2a m x n \u7684\u4e8c\u8fdb\u5236\u77e9\u9635 grid \uff0c\u6bcf\u4e2a\u683c\u5b50\u8981\u4e48\u4e3a 0 \uff08\u7a7a\uff09\u8981\u4e48\u4e3a 1 \uff08\u88ab\u5360\u636e\uff09\u3002</p> <p>\u7ed9\u4f60\u90ae\u7968\u7684\u5c3a\u5bf8\u4e3a stampHeight x stampWidth \u3002\u6211\u4eec\u60f3\u5c06\u90ae\u7968\u8d34\u8fdb\u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\uff0c\u4e14\u6ee1\u8db3\u4ee5\u4e0b \u9650\u5236 \u548c \u8981\u6c42 \uff1a</p> <p>\u8986\u76d6\u6240\u6709 \u7a7a \u683c\u5b50\u3002 \u4e0d\u8986\u76d6\u4efb\u4f55 \u88ab\u5360\u636e \u7684\u683c\u5b50\u3002 \u6211\u4eec\u53ef\u4ee5\u653e\u5165\u4efb\u610f\u6570\u76ee\u7684\u90ae\u7968\u3002 \u90ae\u7968\u53ef\u4ee5\u76f8\u4e92\u6709 \u91cd\u53e0 \u90e8\u5206\u3002 \u90ae\u7968\u4e0d\u5141\u8bb8 \u65cb\u8f6c \u3002 \u90ae\u7968\u5fc5\u987b\u5b8c\u5168\u5728\u77e9\u9635 \u5185 \u3002 \u5982\u679c\u5728\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u7684\u524d\u63d0\u4e0b\uff0c\u53ef\u4ee5\u653e\u5165\u90ae\u7968\uff0c\u8bf7\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \u3002</p> <p>m == grid.length n == grid[r].length 1 &lt;= m, n &lt;= 10^5 1 &lt;= m * n &lt;= 2 * 10^5 grid[r][c] \u8981\u4e48\u662f 0 \uff0c\u8981\u4e48\u662f 1 \u3002 1 &lt;= stampHeight, stampWidth &lt;= 10^5</p> <p>\u521d\u6b65\u60f3\u6cd5\u662f\u904d\u5386\u6240\u6709\u90ae\u7968\u5927\u5c0f\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u68c0\u67e5\u662f\u5426\u6574\u4e2a\u7a97\u53e3\u90fd\u4e0d\u88ab\u5360\u636e\uff0c\u662f\u5219\u66f4\u65b0\u8fd9\u4e2a\u7a97\u53e3\u5185\u6240\u6709\u683c\u5b50\uff0c\u6700\u540e\u518d\u68c0\u67e5\u6240\u6709\u672a\u88ab\u5360\u636e\u7684\u683c\u5b50\u662f\u5426\u5747\u88ab\u66f4\u65b0\u8fc7\u3002\u8fd9\u4e24\u4e2a\u6838\u5fc3\u64cd\u4f5c\u90fd\u5fc5\u987b\u662f\u5728\\(O(1)\\)\u624d\u80fd\u907f\u514dTLE\u3002</p> <p>\u672c\u8d28\u662f\u4e8c\u7ef4\u533a\u95f4\u67e5\u8be2\u4e0e\u533a\u95f4\u66f4\u65b0\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u524d\u7f00\u548c\u3001\u5dee\u5206\u89e3\u51b3\u3002</p> <pre><code>class Solution {\npublic:\n    bool possibleToStamp(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int H, int W) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector&lt;vector&lt;int&gt;&gt; s(m + 1, vector&lt;int&gt;(n + 1, 0));\n        vector&lt;vector&lt;int&gt;&gt; d(m + 1, vector&lt;int&gt;(n + 1, 0));\n        // prefix sum\n        for (int i = 1; i &lt;= m; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                s[i][j] = grid[i - 1][j - 1] + s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1];\n            }\n        }\n        // loop window\n        for (int i = 0; i &lt;= m - H; i++) {\n            for (int j = 0; j &lt;= n - W; j++) {        \n                // query if occupied\n                if (s[i + H][j + W] - s[i][j + W] - s[i + H][j] + s[i][j] == 0) {\n                    // update difference\n                    d[i][j] += 1;\n                    d[i][j + W] -= 1;\n                    d[i + H][j] -= 1;\n                    d[i + H][j + W] += 1;\n                }\n            }\n        }\n        // query final value\n        vector&lt;vector&lt;int&gt;&gt; res(m + 1, vector&lt;int&gt;(n + 1, 0));\n        for (int i = 1; i &lt;= m; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                res[i][j] = res[i][j - 1] + res[i - 1][j] - res[i - 1][j - 1] + d[i - 1][j - 1];\n                if (res[i][j] == 0 &amp;&amp; grid[i - 1][j - 1] == 0) return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90hash%E3%80%91%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/","title":"\u3010hash\u3011\u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217","text":""},{"location":"algorithm/review/problem_series/%E3%80%90hash%E3%80%91%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/#_1","title":"\u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \u548c\u4e00\u4e2a\u6574\u6570 difference\uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de arr \u4e2d\u6700\u957f\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u8be5\u5b50\u5e8f\u5217\u4e2d\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u7b49\u4e8e difference \u3002</p> <p>\\(O(n)\\) \u54c8\u5e0c\u5373\u53ef\uff08\u4e5f\u53ef\u4ee5\u770b\u6210\u662f\u52a8\u6001\u89c4\u5212\uff09\u3002</p> <pre><code>class Solution {\npublic:\n    int longestSubsequence(vector&lt;int&gt;&amp; arr, int difference) {\n        unordered_map&lt;int, int&gt; m;\n        int ans = 1;\n        for (int i = 0; i &lt; arr.size(); i++) {\n            int x = arr[i];\n            int y = x - difference;\n            if (m.count(y)) m[x] = m[y] + 1;\n            else m[x] = 1;\n            //cout &lt;&lt; x &lt;&lt; \" = \" &lt;&lt; m[x] &lt;&lt; endl;\n            ans = max(ans, m[x]);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90math%E3%80%91joseph_loop/","title":"\u3010math\u3011joseph loop","text":""},{"location":"algorithm/review/problem_series/%E3%80%90math%E3%80%91joseph_loop/#joseph-loop","title":"Joseph Loop","text":"<p>0,1,\u00b7\u00b7\u00b7,n-1\u8fd9n\u4e2a\u6570\u5b57\u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u4ece\u6570\u5b570\u5f00\u59cb\uff0c\u6bcf\u6b21\u4ece\u8fd9\u4e2a\u5706\u5708\u91cc\u5220\u9664\u7b2cm\u4e2a\u6570\u5b57\uff08\u5220\u9664\u540e\u4ece\u4e0b\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\u8ba1\u6570\uff09\u3002\u6c42\u51fa\u8fd9\u4e2a\u5706\u5708\u91cc\u5269\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\uff0c0\u30011\u30012\u30013\u30014\u8fd95\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u4ece\u6570\u5b570\u5f00\u59cb\u6bcf\u6b21\u5220\u9664\u7b2c3\u4e2a\u6570\u5b57\uff0c\u5219\u5220\u9664\u7684\u524d4\u4e2a\u6570\u5b57\u4f9d\u6b21\u662f2\u30010\u30014\u30011\uff0c\u56e0\u6b64\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u662f3\u3002</p> <p>\u5e76\u4e0d\u7528\u6a21\u62df\uff0c\u662f\u6709\u9012\u63a8\u516c\u5f0f\u7684\u3002</p> <p>\\(f(n, m)\\) \u4ee3\u8868\u6b64\u95ee\u9898\u6700\u540e\u5269\u4e0b\u7684\u4eba\u7684\u7f16\u53f7\u3002</p> \\[ \\displaylines{ f(n, m) = f(n-1, m) + m \\mod n } \\] <pre><code>class Solution {\npublic:\n    int lastRemaining(int n, int m) {\n        if (n == 1) return 0;\n        int x = lastRemaining(n - 1, m);\n        return (m + x) % n;\n    }\n};\n</code></pre> <p>\u9012\u5f52\u8f6c\u6362\u4e3a\u8fed\u4ee3\uff1a</p> <pre><code>class Solution {\npublic:\n    int lastRemaining(int n, int m) {\n        int ans = 0;\n        for (int i = 2; i &lt;= n; i++) {\n            ans = (ans + m) % i;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90math%E3%80%91joseph_loop/#_1","title":"\u6d88\u9664\u6e38\u620f","text":"<p>\u5217\u8868 arr \u7531\u5728\u8303\u56f4 [1, n] \u4e2d\u7684\u6240\u6709\u6574\u6570\u7ec4\u6210\uff0c\u5e76\u6309\u4e25\u683c\u9012\u589e\u6392\u5e8f\u3002\u8bf7\u4f60\u5bf9 arr \u5e94\u7528\u4e0b\u8ff0\u7b97\u6cd5\uff1a</p> <p>\u4ece\u5de6\u5230\u53f3\uff0c\u5220\u9664\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u6bcf\u9694\u4e00\u4e2a\u6570\u5b57\u5220\u9664\u4e00\u4e2a\uff0c\u76f4\u5230\u5230\u8fbe\u5217\u8868\u672b\u5c3e\u3002 \u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\uff0c\u4f46\u8fd9\u6b21\u662f\u4ece\u53f3\u5230\u5de6\u3002\u4e5f\u5c31\u662f\uff0c\u5220\u9664\u6700\u53f3\u4fa7\u7684\u6570\u5b57\uff0c\u7136\u540e\u5269\u4e0b\u7684\u6570\u5b57\u6bcf\u9694\u4e00\u4e2a\u5220\u9664\u4e00\u4e2a\u3002 \u4e0d\u65ad\u91cd\u590d\u8fd9\u4e24\u6b65\uff0c\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u4ea4\u66ff\u8fdb\u884c\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002 \u7ed9\u4f60\u6574\u6570 n \uff0c\u8fd4\u56de arr \u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u3002</p> <p>\u7c7b\u4f3c\uff0c\u8bbe\u7ed3\u679c\u4e3a\\(f(n)\\)\uff0c\u5373\u5148\u4ece\u5de6\u5411\u53f3\u5220\u9664\uff0c\u518d\u4ece\u53f3\u5411\u5de6\uff0c...\uff0c\u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002</p> <p>\u8003\u8651\u5bf9\u79f0\u8fc7\u7a0b\\(f'(n)\\)\uff0c\u5373\u5148\u4ece\u53f3\u5411\u5de6\u5220\u9664\uff0c\u518d\u4ece\u5de6\u5411\u53f3\uff0c...\uff0c\u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002</p> <pre><code># f(n) \u8868\u793a\u4ece\u5de6\u5230\u53f3\u5269\u4e0b\u7684\u6570\u5b57\u7684\u7ed3\u679c, f'(n) \u8868\u793a\u4ece\u53f3\u5230\u5de6\u5220\u9664\u7684\u7ed3\u679c\n# \u5bf9\u79f0\u6027: f(n) + f'(n) = n + 1\n# \u9012\u5f52\u6027: f(n) = 2 * f'(n/2)\n# \u521d\u59cb\u6761\u4ef6: f(1) = f'(1) = 1\n\n# \u6839\u636e\u4ee5\u4e0a\u6761\u4ef6\u53ef\u5f97: f(2 * n)/2 + f(n) = n + 1\n# f(n)/2 + f(n/2) = n/2 + 1\n# f(n) = (n/2 + 1 - f(n/2)) * 2\n</code></pre> <p>\u9012\u5f52\u6c42\u89e3\uff1a</p> <pre><code>class Solution {\npublic:\n    int lastRemaining(int n) {\n        return n == 1 ? 1 : 2 * (n / 2 + 1 - lastRemaining(n / 2));\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90math%E3%80%91%E5%B0%8F%E7%8C%AA%E8%AF%95%E6%AF%92/","title":"\u3010math\u3011\u5c0f\u732a\u8bd5\u6bd2","text":""},{"location":"algorithm/review/problem_series/%E3%80%90math%E3%80%91%E5%B0%8F%E7%8C%AA%E8%AF%95%E6%AF%92/#poor-pigs","title":"poor pigs","text":"<p>\u6709 buckets \u6876\u6db2\u4f53\uff0c\u5176\u4e2d \u6b63\u597d \u6709\u4e00\u6876\u542b\u6709\u6bd2\u836f\uff0c\u5176\u4f59\u88c5\u7684\u90fd\u662f\u6c34\u3002\u5b83\u4eec\u4ece\u5916\u89c2\u770b\u8d77\u6765\u90fd\u4e00\u6837\u3002\u4e3a\u4e86\u5f04\u6e05\u695a\u54ea\u53ea\u6c34\u6876\u542b\u6709\u6bd2\u836f\uff0c\u4f60\u53ef\u4ee5\u5582\u4e00\u4e9b\u732a\u559d\uff0c\u901a\u8fc7\u89c2\u5bdf\u732a\u662f\u5426\u4f1a\u6b7b\u8fdb\u884c\u5224\u65ad\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u53ea\u6709 minutesToTest \u5206\u949f\u65f6\u95f4\u6765\u786e\u5b9a\u54ea\u6876\u6db2\u4f53\u662f\u6709\u6bd2\u7684\u3002</p> <p>\u5582\u732a\u7684\u89c4\u5219\u5982\u4e0b\uff1a</p> <ul> <li>\u9009\u62e9\u82e5\u5e72\u6d3b\u732a\u8fdb\u884c\u5582\u517b</li> </ul> <ul> <li>\u53ef\u4ee5\u5141\u8bb8\u5c0f\u732a\u540c\u65f6\u996e\u7528\u4efb\u610f\u6570\u91cf\u7684\u6876\u4e2d\u7684\u6c34\uff0c\u5e76\u4e14\u8be5\u8fc7\u7a0b\u4e0d\u9700\u8981\u65f6\u95f4\u3002</li> </ul> <ul> <li>\u5c0f\u732a\u559d\u5b8c\u6c34\u540e\uff0c\u5fc5\u987b\u6709 minutesToDie \u5206\u949f\u7684\u51b7\u5374\u65f6\u95f4\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u53ea\u80fd\u89c2\u5bdf\uff0c\u800c\u4e0d\u5141\u8bb8\u7ee7\u7eed\u5582\u732a\u3002</li> </ul> <ul> <li>\u8fc7\u4e86 minutesToDie \u5206\u949f\u540e\uff0c\u6240\u6709\u559d\u5230\u6bd2\u836f\u7684\u732a\u90fd\u4f1a\u6b7b\u53bb\uff0c\u5176\u4ed6\u6240\u6709\u732a\u90fd\u4f1a\u6d3b\u4e0b\u6765\u3002</li> </ul> <ul> <li>\u91cd\u590d\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u76f4\u5230\u65f6\u95f4\u7528\u5b8c\u3002</li> </ul> <p>\u7ed9\u4f60\u6876\u7684\u6570\u76ee buckets \uff0cminutesToDie \u548c minutesToTest \uff0c\u8fd4\u56de\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u5224\u65ad\u54ea\u4e2a\u6876\u6709\u6bd2\u6240\u9700\u7684 \u6700\u5c0f \u732a\u6570</p> <p>\u5148\u8003\u8651\u53ea\u6709\u4e00\u6b21\u673a\u4f1a\u65f6\uff0c\u6bcf\u53ea\u732a\u6709\u4e24\u79cd\u72b6\u6001\uff0c\u53ef\u4ee5\u7528\u6765\u7f16\u7801\u54ea\u4e00\u6876\u6709\u6bd2\uff0c\u9700\u8981\u7684\u732a\u6570\u91cf\u4e3a\\(ceil(log_2(N))\\)</p> <p>\\(T\\)\u6b21\u673a\u4f1a\u65f6\uff0c\u6bcf\u53ea\u732a\u6709\\(T+1\\)\u79cd\u72b6\u6001\uff0c\u5206\u522b\u5bf9\u5e94\u5728\u7b2c\u51e0\u8f6e\u6b7b\u53bb\uff0c\u56e0\u6b64\u9700\u8981\u7684\u6570\u91cf\u4e3a\\(ceil(log_{T+1}(N))\\)</p> <pre><code>class Solution {\npublic:\n    int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n        int states = minutesToTest / minutesToDie + 1;\n        int pigs = ceil(log(buckets) / log(states));\n        return pigs;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90math%E3%80%91%E7%81%AF%E6%B3%A1%E5%BC%80%E5%85%B3/","title":"\u3010math\u3011\u706f\u6ce1\u5f00\u5173","text":""},{"location":"algorithm/review/problem_series/%E3%80%90math%E3%80%91%E7%81%AF%E6%B3%A1%E5%BC%80%E5%85%B3/#bulb-switcher","title":"bulb switcher","text":"<p>\u521d\u59cb\u65f6\u6709 n \u4e2a\u706f\u6ce1\u5904\u4e8e\u5173\u95ed\u72b6\u6001\u3002\u7b2c\u4e00\u8f6e\uff0c\u4f60\u5c06\u4f1a\u6253\u5f00\u6240\u6709\u706f\u6ce1\u3002\u63a5\u4e0b\u6765\u7684\u7b2c\u4e8c\u8f6e\uff0c\u4f60\u5c06\u4f1a\u6bcf\u4e24\u4e2a\u706f\u6ce1\u5173\u95ed\u4e00\u4e2a\u3002</p> <p>\u7b2c\u4e09\u8f6e\uff0c\u4f60\u6bcf\u4e09\u4e2a\u706f\u6ce1\u5c31\u5207\u6362\u4e00\u4e2a\u706f\u6ce1\u7684\u5f00\u5173\uff08\u5373\uff0c\u6253\u5f00\u53d8\u5173\u95ed\uff0c\u5173\u95ed\u53d8\u6253\u5f00\uff09\u3002\u7b2c i \u8f6e\uff0c\u4f60\u6bcf i \u4e2a\u706f\u6ce1\u5c31\u5207\u6362\u4e00\u4e2a\u706f\u6ce1\u7684\u5f00\u5173\u3002\u76f4\u5230\u7b2c n \u8f6e\uff0c\u4f60\u53ea\u9700\u8981\u5207\u6362\u6700\u540e\u4e00\u4e2a\u706f\u6ce1\u7684\u5f00\u5173\u3002</p> <p>\u627e\u51fa\u5e76\u8fd4\u56de n \u8f6e\u540e\u6709\u591a\u5c11\u4e2a\u4eae\u7740\u7684\u706f\u6ce1\u3002 </p> <p>\u7b2c\\(i\\)\u4e2a\u706f\u6ce1\u4f1a\u88abswitch \\(i\\)\u7684\u56e0\u6570\u7684\u4e2a\u6570 \u6b21\u3002\u6700\u540e\u4eae\u7740\u5fc5\u987b\u6709\u5947\u6570\u4e2a\u56e0\u6570\uff0c\u53ea\u6709\u5b8c\u5168\u5e73\u65b9\u6570\u6ee1\u8db3\u8fd9\u4e2a\u8981\u6c42\u3002</p> <p>\u4ece\u800c\u9898\u76ee\u8f6c\u6362\u4e3a\\([1, n]\\)\u4e2d\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u4e2a\u6570\uff1a</p> <pre><code>class Solution {\npublic:\n    int bulbSwitch(int n) {\n        // square root count in [1, n]\n        return floor(sqrt(n));\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90toposort%E3%80%91%E3%80%90%E5%9F%BA%E7%8E%AF%E6%A0%91%E3%80%91%E5%8F%82%E4%B8%8E%E4%BC%9A%E8%AE%AE%E7%9A%84%E6%9C%80%E5%A4%9A%E5%91%98%E5%B7%A5%E6%95%B0/","title":"\u3010toposort\u3011\u3010\u57fa\u73af\u6811\u3011\u53c2\u4e0e\u4f1a\u8bae\u7684\u6700\u591a\u5458\u5de5\u6570","text":""},{"location":"algorithm/review/problem_series/%E3%80%90toposort%E3%80%91%E3%80%90%E5%9F%BA%E7%8E%AF%E6%A0%91%E3%80%91%E5%8F%82%E4%B8%8E%E4%BC%9A%E8%AE%AE%E7%9A%84%E6%9C%80%E5%A4%9A%E5%91%98%E5%B7%A5%E6%95%B0/#_1","title":"\u53c2\u4e0e\u4f1a\u8bae\u7684\u6700\u591a\u5458\u5de5\u6570","text":"<p>\u4e00\u4e2a\u516c\u53f8\u51c6\u5907\u7ec4\u7ec7\u4e00\u573a\u4f1a\u8bae\uff0c\u9080\u8bf7\u540d\u5355\u4e0a\u6709 n \u4f4d\u5458\u5de5\u3002\u516c\u53f8\u51c6\u5907\u4e86\u4e00\u5f20 \u5706\u5f62 \u7684\u684c\u5b50\uff0c\u53ef\u4ee5\u5750\u4e0b \u4efb\u610f\u6570\u76ee \u7684\u5458\u5de5\u3002</p> <p>\u5458\u5de5\u7f16\u53f7\u4e3a 0 \u5230 n - 1 \u3002\u6bcf\u4f4d\u5458\u5de5\u90fd\u6709\u4e00\u4f4d \u559c\u6b22 \u7684\u5458\u5de5\uff0c\u6bcf\u4f4d\u5458\u5de5 \u5f53\u4e14\u4ec5\u5f53 \u4ed6\u88ab\u5b89\u6392\u5728\u559c\u6b22\u5458\u5de5\u7684\u65c1\u8fb9\uff0c\u4ed6\u624d\u4f1a\u53c2\u52a0\u4f1a\u8bae\u3002\u6bcf\u4f4d\u5458\u5de5\u559c\u6b22\u7684\u5458\u5de5 \u4e0d\u4f1a \u662f\u4ed6\u81ea\u5df1\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 favorite \uff0c\u5176\u4e2d favorite[i] \u8868\u793a\u7b2c i \u4f4d\u5458\u5de5\u559c\u6b22\u7684\u5458\u5de5\u3002\u8bf7\u4f60\u8fd4\u56de\u53c2\u52a0\u4f1a\u8bae\u7684 \u6700\u591a\u5458\u5de5\u6570\u76ee \u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90toposort%E3%80%91%E3%80%90%E5%9F%BA%E7%8E%AF%E6%A0%91%E3%80%91%E5%8F%82%E4%B8%8E%E4%BC%9A%E8%AE%AE%E7%9A%84%E6%9C%80%E5%A4%9A%E5%91%98%E5%B7%A5%E6%95%B0/#_2","title":"\u601d\u8def","text":"<p>\u6839\u636e\u9898\u610f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u51fa\u5ea6\uff0c\u6240\u4ee5\u5fc5\u7136\u6210\u73af\u3002</p> <p>\u6210\u73af\u5206\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ul> <li> <p>\u4e8c\u4eba\u6210\u73af\uff1a\u8fd9\u79cd\u73af\u53ef\u4ee5\u5728\u4e00\u4e2a\u684c\u5b50\u4e0a\u6709\u4efb\u610f\u591a\u4e2a\uff0c\u5e76\u4e14\u5141\u8bb8\u6709\u652f\u94fe\u8fde\u63a5\u5230\u73af\u4e0a\uff08\u94fe\u72b6\uff09\u3002</p> <pre><code>... --&gt; 1 &lt;--&gt; 2 &lt;-- ...\n          table\n... --&gt; 3 &lt;--&gt; 4 &lt;-- ...\n</code></pre> </li> </ul> <ul> <li> <p>\u4e09\u53ca\u4ee5\u4e0a\u4eba\u6210\u73af\uff1a\u8fd9\u79cd\u73af\u5728\u4e00\u4e2a\u684c\u5b50\u4e0a\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u4e14\u4e0d\u5141\u8bb8\u4efb\u4f55\u73af\u5916\u652f\u94fe\u3002</p> <pre><code>1 --&gt; 2 --&gt; 3\n^   table   \u2502\n\u2514-----------\u2518\n</code></pre> </li> </ul> <p>\u6240\u4ee5\u95ee\u9898\u5173\u952e\u662f\uff1a\u5148\u68c0\u6d4b\u6240\u6709\u73af\uff0c\u6839\u636e\u73af\u957f\u5206\u7c7b\u8ba8\u8bba\u3002\u4e09\u4eba\u4ee5\u4e0a\u73af\u53ea\u9700\u8981\u7edf\u8ba1\u73af\u957f\uff0c\u53d6\u6700\u5927\u503c\u5373\u53ef\uff0c\u53ef\u4ee5\u901a\u8fc7DFS\u89e3\u51b3\u3002\u4e8c\u4eba\u6210\u73af\u5219\u8fd8\u9700\u8981\u7edf\u8ba1\u8fde\u63a5\u5230\u73af\u4e0a\u7684\u652f\u94fe\u957f\u5ea6\uff0c\u901a\u8fc7DFS\u4e0d\u597d\u89e3\u51b3\uff08\u56e0\u4e3a\u9700\u8981\u63d0\u524d\u77e5\u9053\u73af\u7ed3\u6784\uff09\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u89e3\u51b3\uff0c\u7edf\u8ba1\u6240\u6709\u4e8c\u4eba\u73af\u52a0\u4e0a\u6700\u957f\u652f\u94fe\u7684\u603b\u548c\u3002\u6700\u540e\uff0c\u53d6\u8fd9\u4e24\u4e2a\u7684\u6781\u5927\u503c\u5373\u53ef\u3002</p> <p>\u53cd\u601d\uff1a\u9996\u5148\u5c31\u6ca1\u80fd\u6b63\u786e\u5206\u7c7b\u8ba8\u8bba\uff0cWA\u4e86\u51e0\u6b21\u624d\u6ce8\u610f\u5230\u4e09\u4eba\u73af\u662f\u4e0d\u517c\u5bb9\u7684\uff08\u53ea\u80fd\u53d6\u4e00\u4e2a\u6700\u5927\u4e09\u4eba\u73af\uff0c\u6216\u662f\u53d6\u5168\u90e8\u4e8c\u4eba\u73af\uff09\u3002\u5176\u6b21\u6ca1\u6709\u60f3\u5230\u62d3\u6251\u6392\u5e8f\uff0c\u4e3a\u4e86\u80fd\u591f\u6b63\u786e\u7684\u8ba1\u7b97\u6700\u957f\u652f\u94fe\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8d85\u8fc7\u4e86O(n)\uff0c\u88abTLE\u5236\u88c1\u3002\u7136\u540e\u4f01\u56fe\u7528\u5e76\u67e5\u96c6\uff0c\u4f46\u7ed3\u679c\u65e0\u6cd5\u4fdd\u8bc1\u6b63\u786e\u3002</p> <p>\u4e0d\u8981\u60f3\u7740\u80fd\u591f\u628a\u95ee\u9898\u5168\u90fd\u585e\u5230\u4e00\u4e2a\u7b97\u6cd5\u91cc\uff0c\u5982\u679c\u80fd\u591f\u653e\u5f03\u7528DFS\u7edf\u8ba1\u4e8c\u4eba\u73af\uff0c\u518d\u5199\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f\uff0c\u5c31\u80fd\u8fc7\u4e86...</p> <p>\u522b\u4eba\u7684\u4f18\u79c0\u89e3\u7b54\uff1a</p> <pre><code>class Solution {\npublic:\n    int maximumInvitations(vector&lt;int&gt;&amp; p) {\n        int n = p.size();\n        // detect largest loop\n        int size3 = 0;\n        vector&lt;int&gt; vis(n, -1), steps(n, 0);\n        function&lt;void(int, int, int)&gt; dfs = [&amp;](int x, int id, int step) {\n            steps[x] = step;\n            int y = p[x];\n            if (vis[y] == -1) {\n                vis[y] = id;\n                dfs(y, id, step + 1);\n            } else if (vis[y] == id) {\n                // found loop, update max size\n                size3 = max(size3, step - steps[y] + 1);\n            }\n        };\n        for (int i = 0; i &lt; n; i++) if (vis[i] == -1) {\n            vis[i] = i;\n            dfs(i, i, 1);\n        }\n        // toposort\n        vector&lt;int&gt; ind(n), subchain(n, 1); // in degree, max subchain length\n        queue&lt;int&gt; q;\n        for (int i = 0; i &lt; n; i++) ind[p[i]] += 1;\n        for (int i = 0; i &lt; n; i++) if (ind[i] == 0) q.push(i);\n        while (!q.empty()) {\n            int u = q.front(); q.pop();\n            subchain[p[u]] = max(subchain[p[u]], subchain[u] + 1);\n            if (--ind[p[u]] == 0) q.push(p[u]);\n        }\n        int size2 = 0;\n        for (int i = 0; i &lt; n; i++) \n            // assures it's a 2-loop, update subchain length\n            if (p[p[i]] == i &amp;&amp; p[i] &gt; i) size2 += subchain[i] + subchain[p[i]];\n        return max(size3, size2);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90toposort%E3%80%91%E3%80%90%E5%9F%BA%E7%8E%AF%E6%A0%91%E3%80%91%E5%8F%82%E4%B8%8E%E4%BC%9A%E8%AE%AE%E7%9A%84%E6%9C%80%E5%A4%9A%E5%91%98%E5%B7%A5%E6%95%B0/#_3","title":"\u62d3\u5c55","text":"<p>\u57fa\u73af\u6811/\u73af\u5957\u6811(pseudo-tree)\uff1a\u5177\u6709N\u4e2a\u8282\u70b9\uff0cN\u6761\u8fb9\u7684\u8fde\u901a\u56fe\u3002\u82e5\u4e0d\u8fde\u901a\uff0c\u5219\u6210\u4e3a\u57fa\u73af\u6811\u68ee\u6797(pseudo-forest)\u3002</p> <p>\u57fa\u73af\u6811\u901a\u5e38\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff0c\u5373\u73af\u4e0e\u73af\u4e0a\u7684\u6811\u679d\uff0c\u6545\u53c8\u79f0\u73af\u5957\u6811\u3002</p> <p>\u57fa\u73af\u5185\u5411\u6811\uff1a\u6bcf\u4e2a\u70b9\u53ea\u6709\u4e00\u6761\u51fa\u8fb9\u3002</p> <p>\u57fa\u73af\u5916\u5411\u6811\uff1a\u6bcf\u4e2a\u70b9\u53ea\u6709\u4e00\u6761\u5165\u8fb9\u3002</p> <p>\u6b64\u9898\u5c5e\u4e8e\u57fa\u73af\u5185\u5411\u6811\u68ee\u6797\u3002</p> <p>\u57fa\u672c\u5904\u7406\u601d\u8def\u4e3a\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u5206\u79bb\u6811\u679d\u4e0e\u73af\u3002</p> <p>\u672c\u9898\u7684\u53e6\u4e00\u79cd\u601d\u8def\u5373\u5148\u62d3\u6251\u6392\u5e8f\uff0c\u518d\u5bf9\u73af\u957f\u5206\u7c7b\u8ba8\u8bba\uff0c\u957f\u5ea63\u53ca\u4ee5\u4e0a\u7684\u73af\u53ea\u9700\u8981\u7edf\u8ba1\u6700\u5927\u73af\u957f\uff0c\u957f\u5ea62\u7684\u73af\u5219\u53ef\u4ee5\u901a\u8fc7\u53cd\u56fe\u8ba1\u7b97\u6700\u957f\u6811\u679d\u3002</p> <pre><code>class Solution {\npublic:\n    int maximumInvitations(vector&lt;int&gt; &amp;favorite) {\n        int n = favorite.size();\n        vector&lt;vector&lt;int&gt;&gt; g(n), rg(n); // rg \u4e3a\u56fe g \u7684\u53cd\u56fe\n        vector&lt;int&gt; deg(n); // \u56fe g \u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\n        for (int v = 0; v &lt; n; ++v) {\n            int w = favorite[v];\n            g[v].emplace_back(w);\n            rg[w].emplace_back(v);\n            ++deg[w];\n        }\n\n        // \u62d3\u6251\u6392\u5e8f\uff0c\u526a\u6389\u56fe g \u4e0a\u7684\u6240\u6709\u6811\u679d\n        queue&lt;int&gt; q;\n        for (int i = 0; i &lt; n; ++i) {\n            if (deg[i] == 0) {\n                q.emplace(i);\n            }\n        }\n        while (!q.empty()) {\n            int v = q.front();\n            q.pop();\n            for (int w : g[v]) {\n                if (--deg[w] == 0) {\n                    q.emplace(w);\n                }\n            }\n        }\n\n        // \u5bfb\u627e\u56fe g \u4e0a\u7684\u57fa\u73af\n        vector&lt;int&gt; ring;\n        vector&lt;int&gt; vis(n);\n        function&lt;void(int)&gt; dfs = [&amp;](int v) {\n            vis[v] = true;\n            ring.emplace_back(v);\n            for (int w: g[v]) {\n                if (!vis[w]) {\n                    dfs(w);\n                }\n            }\n        };\n\n        // \u901a\u8fc7\u53cd\u56fe rg \u5bfb\u627e\u6811\u679d\u4e0a\u6700\u6df1\u7684\u94fe\n        int max_depth = 0;\n        function&lt;void(int, int, int)&gt; rdfs = [&amp;](int v, int fa, int depth) {\n            max_depth = max(max_depth, depth);\n            for (int w: rg[v]) {\n                if (w != fa) {\n                    rdfs(w, v, depth + 1);\n                }\n            }\n        };\n\n        int max_ring_size = 0, sum_list_size = 0;\n        for (int i = 0; i &lt; n; ++i) {\n            if (!vis[i] &amp;&amp; deg[i]) { // \u904d\u5386\u57fa\u73af\u4e0a\u7684\u70b9\uff08\u62d3\u6251\u6392\u5e8f\u540e\u5165\u5ea6\u4e0d\u4e3a 0\uff09\n                ring.resize(0);\n                dfs(i);\n                int sz = ring.size();\n                if (sz == 2) { // \u57fa\u73af\u5927\u5c0f\u4e3a 2\n                    int v = ring[0], w = ring[1];\n                    max_depth = 0;\n                    rdfs(v, w, 1);\n                    sum_list_size += max_depth; // \u7d2f\u52a0 v \u8fd9\u4e00\u4fa7\u7684\u6700\u957f\u94fe\u7684\u957f\u5ea6\n                    max_depth = 0;\n                    rdfs(w, v, 1);\n                    sum_list_size += max_depth; // \u7d2f\u52a0 w \u8fd9\u4e00\u4fa7\u7684\u6700\u957f\u94fe\u7684\u957f\u5ea6\n                } else {\n                    max_ring_size = max(max_ring_size, sz); // \u53d6\u6240\u6709\u57fa\u73af\u7684\u6700\u5927\u503c\n                }\n            }\n        }\n        return max(max_ring_size, sum_list_size);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E3%80%91%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E5%85%83%E7%B4%A0/","title":"\u3010\u4e2d\u5e8f\u904d\u5386\u3011\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2ck\u5c0f\u5143\u7d20","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E3%80%91%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E5%85%83%E7%B4%A0/#k","title":"\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2ck\u5c0f\u5143\u7d20","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u548c\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u67e5\u627e\u5176\u4e2d\u7b2c <code>k</code> \u4e2a\u6700\u5c0f\u5143\u7d20\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u6570\uff09\u3002</p> <p>\u4e2d\u5e8f\u904d\u5386\u7684\u51e0\u79cd\u5199\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\n    int ans;\n    int infix(TreeNode* n, int K) {\n        if (n == nullptr) return 0;\n        int l = infix(n-&gt;left, K);\n        if (ans != -1) return -1;\n        if (l == K - 1) {\n            ans = n-&gt;val;\n            return -1;\n        }\n        int r = infix(n-&gt;right, K - l - 1);\n        if (ans != -1) return -1;\n        return l + r + 1;\n    }\n    int kthSmallest(TreeNode* root, int k) {\n        ans = -1;\n        infix(root, k);\n        return ans;\n    }\n};\n</code></pre> <p>\u53ef\u4ee5\u7528\u9012\u51cf\u4ee3\u66ff\u8ba1\u6570\uff1a</p> <pre><code>class Solution {\npublic:\n    int ans, K;\n    void infix(TreeNode* n) {\n        if (n == nullptr) return;\n        infix(n-&gt;left);\n        if (ans != -1) return;\n        if (--K == 0) {\n            ans = n-&gt;val;\n            return;\n        }\n        infix(n-&gt;right);\n        if (ans != -1) return;\n    }\n    int kthSmallest(TreeNode* root, int k) {\n        K = k;\n        ans = -1;\n        infix(root);\n        return ans;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u5199\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        stack&lt;TreeNode*&gt; s;\n        while (root != nullptr || !s.empty()) {\n            while (root != nullptr) {\n                s.push(root);\n                root = root-&gt;left;\n            }\n            root = s.top(); s.pop();\n            if (--k == 0) return root-&gt;val;\n            root = root-&gt;right;\n        }\n\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E4%BE%9B%E6%9A%96%E5%99%A8%E5%8D%8A%E5%BE%84/","title":"\u3010\u4e8c\u5206\u3011\u4f9b\u6696\u5668\u534a\u5f84","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E4%BE%9B%E6%9A%96%E5%99%A8%E5%8D%8A%E5%BE%84/#_1","title":"\u4f9b\u6696\u5668","text":"<p>\u51ac\u5b63\u5df2\u7ecf\u6765\u4e34\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u8bbe\u8ba1\u4e00\u4e2a\u6709\u56fa\u5b9a\u52a0\u70ed\u534a\u5f84\u7684\u4f9b\u6696\u5668\u5411\u6240\u6709\u623f\u5c4b\u4f9b\u6696\u3002</p> <p>\u5728\u52a0\u70ed\u5668\u7684\u52a0\u70ed\u534a\u5f84\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u623f\u5c4b\u90fd\u53ef\u4ee5\u83b7\u5f97\u4f9b\u6696\u3002</p> <p>\u73b0\u5728\uff0c\u7ed9\u51fa\u4f4d\u4e8e\u4e00\u6761\u6c34\u5e73\u7ebf\u4e0a\u7684\u623f\u5c4b houses \u548c\u4f9b\u6696\u5668 heaters \u7684\u4f4d\u7f6e\uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u53ef\u4ee5\u8986\u76d6\u6240\u6709\u623f\u5c4b\u7684\u6700\u5c0f\u52a0\u70ed\u534a\u5f84\u3002</p> <p>\u8bf4\u660e\uff1a\u6240\u6709\u4f9b\u6696\u5668\u90fd\u9075\u5faa\u4f60\u7684\u534a\u5f84\u6807\u51c6\uff0c\u52a0\u70ed\u7684\u534a\u5f84\u4e5f\u4e00\u6837\u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E4%BE%9B%E6%9A%96%E5%99%A8%E5%8D%8A%E5%BE%84/#_2","title":"\u4e8c\u5206\u641c\u7d22\u534a\u5f84","text":"<p>\u6700\u5f00\u59cb\u7684\u60f3\u6cd5\uff0c\u80fd\u5426\u8986\u76d6\u968f\u534a\u5f84\u662f\u5355\u8c03\u7684\uff0c\u4f46\u8fd9\u6837\u5728\u6bcf\u6b21\u5faa\u73af\u4e2d\u4ecd\u9700\u8981\u641c\u7d22\u4e0b\u4e00\u4e2a\u6ca1\u88ab\u8986\u76d6\u7684\u623f\u5b50\uff0c\u6240\u4ee5\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(n\\log^2n)\\)\u3002</p> <p>\u6240\u4ee5\u5e76\u4e0d\u662f\u80fd\u4e8c\u5206\u5c31\u4e00\u5b9a\u4e8c\u5206...\u4e0b\u9762\u7684\u8d2a\u5fc3\u66f4\u7b80\u5355\u3002</p> <pre><code>class Solution {\npublic:\n    int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) {\n        sort(houses.begin(), houses.end());\n        sort(heaters.begin(), heaters.end());\n        // O(nlogn)\n        auto check = [&amp;](int m) {\n            int next = 0;\n            for (int i = 0; i &lt; heaters.size(); i++) {\n                int h = heaters[i];\n                if (h - m &gt; houses[next]) return false;\n                next = upper_bound(houses.begin(), houses.end(), h + m) - houses.begin();\n                if (next == houses.size()) return true;\n            }\n            return false;\n        };\n        // O(nlog^2n)\n        int l = 0, r = max(houses.back(), heaters.back()) - houses[0] + 1;\n        while (l &lt;= r) {\n            int m = (l + r) / 2;\n            if (check(m)) r = m - 1;\n            else l = m + 1;\n        }\n        return l;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E4%BE%9B%E6%9A%96%E5%99%A8%E5%8D%8A%E5%BE%84/#_3","title":"\u8d2a\u5fc3\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u623f\u5b50\u7684\u6700\u8fd1\u4f9b\u6696\u5668","text":"<p>\u66f4\u76f4\u63a5\u7684\u505a\u6cd5\uff0c\u76f4\u63a5\u904d\u5386\u623f\u5b50\uff0c\u540c\u65f6\u8bb0\u5f55\u6700\u8fd1\u7684\u4f9b\u6696\u5668\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n\\log n)\\)\uff08\u6392\u5e8f\uff09</p> <pre><code>class Solution {\npublic:\n    int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) {\n        sort(houses.begin(),houses.end());\n        sort(heaters.begin(),heaters.end());\n        int ans = 0;\n        int h = 0;\n        // O(n)\n        for (int i=0;i&lt;houses.size();i++){\n            while (h + 1 &lt; heaters.size() &amp;&amp; \n                   abs(houses[i] - heaters[h]) &gt;= abs(houses[i] - heaters[h + 1])) h++;\n            ans = max(ans,abs(houses[i]-heaters[h]));\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%BA%E4%B8%80%E7%9A%84%E6%95%B0%E5%AD%97/","title":"\u3010\u4f4d\u8fd0\u7b97\u3011\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e3a\u4e00\u7684\u6570\u5b57","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%BA%E4%B8%80%E7%9A%84%E6%95%B0%E5%AD%97/#_1","title":"\u6709\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21","text":"<p>\u5176\u4f59\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u627e\u5230\u8fd9\u4e2a\u6570\uff0c\u8981\u6c42\\(O(1)\\)\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u5168\u90e8\u5f02\u6216\u4e00\u904d\u5373\u53ef\u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%BA%E4%B8%80%E7%9A%84%E6%95%B0%E5%AD%97/#_2","title":"\u6709\u4e24\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21","text":"<p>\u5176\u4f59\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u627e\u5230\u8fd9\u4e2a\u6570\uff0c\u8981\u6c42\\(O(1)\\)\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u5206\u7ec4\u5f02\u6216\u3002\u8003\u8651\u8fd9\u4e24\u4e2a\u6570\u4e3a<code>a, b</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230<code>a ^ b</code>\uff0c\u7136\u540e\u4efb\u9009\u4e00\u4e2a\u4e3a\u4e00bit\u4f5c\u4e3a\u5206\u7ec4\u4f9d\u636e\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; singleNumbers(vector&lt;int&gt;&amp; nums) {\n        int a = 0, b = 0, i = 0;\n        for (int x: nums) a ^= x;\n        while ((a &amp; (1&lt;&lt;i)) == 0) i++;\n        a = 0;\n        for (int x: nums) {\n            if (x &amp; (1&lt;&lt;i)) a ^= x;\n            else b ^= x;\n        }\n        return {a, b};\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%BA%E4%B8%80%E7%9A%84%E6%95%B0%E5%AD%97/#_3","title":"\u6709\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4f59\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e09\u6b21","text":"<p>\u8981\u6c42\\(O(1)\\)\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u8ba1\u7b97\u6bcf\u4e2abit\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u53d6\u6a21\u5373\u53ef\u3002</p> <pre><code>class Solution {\npublic:\n    int singleNumber(vector&lt;int&gt;&amp; nums) {\n        int v[32] = {0};\n        for (int x: nums) {\n            for (int i = 0; i &lt; 32; i++) {\n                if (x &amp; (1 &lt;&lt; i)) v[i] = (v[i] + 1) % 3;\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i &lt; 32; i++) {\n            if (v[i]) ans |=(1 &lt;&lt; i);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u9ad8\u7ea7\u505a\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\n    int singleNumber(vector&lt;int&gt;&amp; nums) {\n        int c1 = 0, c2 = 0;\n        for (int x: nums) {\n            c1 = c1 ^ x &amp; ~c2;\n            c2 = c2 ^ x &amp; ~c1;\n        }\n        return c1;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E4%B8%BA%E4%B8%80%E7%9A%84%E6%95%B0%E5%AD%97/#m","title":"\u6709\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4f59\u6570\u5b57\u90fd\u51fa\u73b0\u4e86m\u6b21","text":"<p>\u8981\u6c42\\(O(1)\\)\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u901a\u89e3\u3002</p> <pre><code>class Solution {\npublic:\n    int singleNumber(vector&lt;int&gt;&amp; nums, int m) {\n        int v[32] = {0};\n        for (int x: nums) {\n            for (int i = 0; i &lt; 32; i++) {\n                if (x &amp; (1 &lt;&lt; i)) v[i] = (v[i] + 1) % m;\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i &lt; 32; i++) {\n            if (v[i]) ans |=(1 &lt;&lt; i);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E3%80%81%E7%A7%AF/","title":"\u3010\u52a8\u89c4\u3011\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3001\u79ef","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E3%80%81%E7%A7%AF/#_1","title":"\u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<p>\u7ecf\u51781D\u52a8\u6001\u89c4\u5212\u3002</p> <p>Kadane algorithm, time = \\(O(n)\\):</p> <pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        int ans = nums[0];\n        int dp = nums[0]; // space optimization\n        for (int i = 1; i &lt; nums.size(); i++) {\n            dp = max(dp + nums[i], nums[i]);\n            ans = max(ans, dp);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E3%80%81%E7%A7%AF/#_2","title":"\u6700\u5927\u5b50\u77e9\u9635","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u3001\u8d1f\u6574\u6570\u548c 0 \u7ec4\u6210\u7684 N \u00d7 M \u77e9\u9635\uff0c\u7f16\u5199\u4ee3\u7801\u627e\u51fa\u5143\u7d20\u603b\u548c\u6700\u5927\u7684\u5b50\u77e9\u9635\u3002</p> <p>\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 [r1, c1, r2, c2]\uff0c\u5176\u4e2d r1, c1 \u5206\u522b\u4ee3\u8868\u5b50\u77e9\u9635\u5de6\u4e0a\u89d2\u7684\u884c\u53f7\u548c\u5217\u53f7\uff0cr2, c2 \u5206\u522b\u4ee3\u8868\u53f3\u4e0b\u89d2\u7684\u884c\u53f7\u548c\u5217\u53f7\u3002\u82e5\u6709\u591a\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u77e9\u9635\uff0c\u8fd4\u56de\u4efb\u610f\u4e00\u4e2a\u5747\u53ef\u3002 </p> <p>2D\u62d3\u5c55\u3002</p> <p>\u4f46\u5e76\u4e0d\u662f\u75282D\u524d\u7f00\u548c\uff0c\u53cd\u800c\u662f1D\u5217\u524d\u7f00\u548c\uff0c\u518d\u679a\u4e3e\u5217\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u518d\u5bf9\u884c\u505a1D Kadane\u3002\u8fd9\u6837\u80fd\u591f\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n^2m)\\)\u3002</p> <p>\u53e6\u5916\u4e0d\u53ea\u8981\u6c42\u8fd4\u56de\u548c\uff0c\u8fd8\u8981\u8fd4\u56de\u5750\u6807\uff0c\u9700\u8981\u989d\u5916\u7684\u8bb0\u5f55\u548c\u5224\u65ad\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; getMaxMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt; s(m + 1, vector&lt;int&gt;(n, 0)); // column-wise prefix sum\n        for (int i = 1; i &lt;= m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                s[i][j] = s[i-1][j] + matrix[i - 1][j];\n            }\n        }\n        int mx = matrix[0][0];\n        vector&lt;int&gt; ans(4, 0);\n        // row start/end, O(n^2)\n        for (int r1 = 0; r1 &lt; m; r1++) {\n            for (int r2 = r1 + 1; r2 &lt;= m; r2++) {\n                // kadane on each row, O(m)\n                int dp = s[r2][0] - s[r1][0];\n                int start = 0; // start index of max-sum-subarray\n                if (dp &gt; mx) mx = dp, ans = {r1, 0, r2 - 1, 0};\n                for (int c = 1; c &lt; n; c++) {\n                    int v = s[r2][c] - s[r1][c];\n                    if (dp + v &gt; v) {\n                        dp = dp + v;\n                    } else {\n                        dp = v;\n                        start = c;\n                    }\n                    if (dp &gt; mx) mx = dp, ans = {r1, start, r2 - 1, c};\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E3%80%81%E7%A7%AF/#_3","title":"\u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u8be5\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u4e58\u79ef\u3002</p> <p>\u6d4b\u8bd5\u7528\u4f8b\u7684\u7b54\u6848\u662f\u4e00\u4e2a 32-\u4f4d \u6574\u6570\u3002</p> <p>\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u3002</p> <p>\u4e58\u6cd5\u62d3\u5c55\uff0c\u5982\u679c\u6240\u6709\u6570\u90fd\u662f\u6b63\u6570\uff0c\u4e58\u6cd5\u4ecd\u7136\u4fdd\u6301Kadane\u7684\u52a8\u6001\u89c4\u5212\u6761\u4ef6\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u3002</p> <p>\u7136\u800c\u5982\u679c\u6709\u8d1f\u6570\uff0c\u5c31\u5f97\u518d\u8bb0\u5f55\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u5b50\u6570\u7ec4\u5305\u542b\u5076\u6570\u4e2a\u8d1f\u6570\uff0c\u79ef\u4ecd\u4e3a\u6b63\u6570\u3002</p> <p>Variant of Kadane, time = \\(O(n)\\):</p> <pre><code>class Solution {\npublic:\n    int maxProduct(vector&lt;int&gt;&amp; nums) {\n        int ans = nums[0];\n        int mx = nums[0], mn = nums[0];\n        for (int i = 1; i &lt; nums.size(); i++) {\n            int old_mx = mx;\n            mx = max(mx * nums[i], max(mn * nums[i], nums[i]));\n            mn = min(mn * nums[i], min(old_mx * nums[i], nums[i]));\n            ans = max(ans, mx);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F2/","title":"\u3010\u52a8\u89c4\u3011\u731c\u6570\u5b57\u5927\u5c0f2","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F2/#guess-number-2","title":"guess number 2","text":"<p>\u6211\u4eec\u6b63\u5728\u73a9\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u6e38\u620f\u89c4\u5219\u5982\u4e0b\uff1a</p> <p>\u6211\u4ece 1 \u5230 n \u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\u3002 \u4f60\u6765\u731c\u6211\u9009\u4e86\u54ea\u4e2a\u6570\u5b57\u3002 \u5982\u679c\u4f60\u731c\u5230\u6b63\u786e\u7684\u6570\u5b57\uff0c\u5c31\u4f1a \u8d62\u5f97\u6e38\u620f \u3002 \u5982\u679c\u4f60\u731c\u9519\u4e86\uff0c\u90a3\u4e48\u6211\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u9009\u7684\u6570\u5b57\u6bd4\u4f60\u7684 \u66f4\u5927\u6216\u8005\u66f4\u5c0f \uff0c\u5e76\u4e14\u4f60\u9700\u8981\u7ee7\u7eed\u731c\u6570\u3002 \u6bcf\u5f53\u4f60\u731c\u4e86\u6570\u5b57 x \u5e76\u4e14\u731c\u9519\u4e86\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u652f\u4ed8\u91d1\u989d\u4e3a x \u7684\u73b0\u91d1\u3002\u5982\u679c\u4f60\u82b1\u5149\u4e86\u94b1\uff0c\u5c31\u4f1a \u8f93\u6389\u6e38\u620f \u3002 \u7ed9\u4f60\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u5b57 n \uff0c\u8fd4\u56de\u80fd\u591f \u786e\u4fdd\u4f60\u83b7\u80dc \u7684\u6700\u5c0f\u73b0\u91d1\u6570\uff0c\u4e0d\u7ba1\u6211\u9009\u62e9\u90a3\u4e2a\u6570\u5b57 \u3002</p> <p>\u9012\u5f52\u7ed3\u6784\u662f\u663e\u7136\u7684\uff0c\u4f46\u662f\u9012\u5f52\u7684\u5206\u5272\u70b9\u5e76\u4e0d\u80fd\u901a\u8fc7\u8d2a\u5fc3\u6cd5\uff08\u5de6\u53f3\u6c42\u548c\u4e4b\u5dee\u6700\u5c0f\uff09\u786e\u5b9a\u3002\u4e8e\u662f\u53ea\u80fd\u904d\u5386\u5206\u5272\u70b9\uff0c\u5e76\u4e14\u5229\u7528\u52a8\u89c4\u52a0\u901f\u3002</p> <p><code>dp[i][j]</code>\uff1a\u731c\u6570\u5b57\u7684\u8303\u56f4\u4e3a<code>[i, j]</code>\u65f6\u83b7\u80dc\u6240\u9700\u6700\u5c0f\u91d1\u989d\u3002</p> <pre><code>class Solution {\nprivate:\n    int dp[201][201];\npublic:\n    int dfs(int start, int end) {\n        if (dp[start][end] != 0) return dp[start][end];\n        if (start == end) return dp[start][end] = 0;\n        if (start + 1 == end) return dp[start][end] = start;\n        int ans = 0x7fffffff;\n        for (int k = end - 1; k &gt; start; k -= 2) {\n            int cur = max(dfs(start, k - 1), dfs(k + 1, end)) + k;\n            ans = min(ans, cur);\n        }\n        return dp[start][end] = ans;\n    }\n\n    int getMoneyAmount(int n) {\n        memset(dp, 0, sizeof(dp));\n        return dfs(1, n);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E8%A7%A3%E5%86%B3%E6%99%BA%E5%8A%9B%E9%97%AE%E9%A2%98/","title":"\u3010\u52a8\u89c4\u3011\u89e3\u51b3\u667a\u529b\u95ee\u9898","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E8%A7%A3%E5%86%B3%E6%99%BA%E5%8A%9B%E9%97%AE%E9%A2%98/#_1","title":"\u89e3\u51b3\u667a\u529b\u95ee\u9898","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 questions \uff0c\u5176\u4e2d questions[i] = [pointsi, brainpoweri] \u3002</p> <p>\u8fd9\u4e2a\u6570\u7ec4\u8868\u793a\u4e00\u573a\u8003\u8bd5\u91cc\u7684\u4e00\u7cfb\u5217\u9898\u76ee\uff0c\u4f60\u9700\u8981 \u6309\u987a\u5e8f \uff08\u4e5f\u5c31\u662f\u4ece\u95ee\u9898 0 \u5f00\u59cb\u4f9d\u6b21\u89e3\u51b3\uff09\uff0c\u9488\u5bf9\u6bcf\u4e2a\u95ee\u9898\u9009\u62e9 \u89e3\u51b3 \u6216\u8005 \u8df3\u8fc7 \u64cd\u4f5c\u3002\u89e3\u51b3\u95ee\u9898 i \u5c06\u8ba9\u4f60 \u83b7\u5f97  pointsi \u7684\u5206\u6570\uff0c\u4f46\u662f\u4f60\u5c06 \u65e0\u6cd5 \u89e3\u51b3\u63a5\u4e0b\u6765\u7684 brainpoweri \u4e2a\u95ee\u9898\uff08\u5373\u53ea\u80fd\u8df3\u8fc7\u63a5\u4e0b\u6765\u7684 brainpoweri \u4e2a\u95ee\u9898\uff09\u3002\u5982\u679c\u4f60\u8df3\u8fc7\u95ee\u9898 i \uff0c\u4f60\u53ef\u4ee5\u5bf9\u4e0b\u4e00\u4e2a\u95ee\u9898\u51b3\u5b9a\u4f7f\u7528\u54ea\u79cd\u64cd\u4f5c\u3002</p> <p>\u6bd4\u65b9\u8bf4\uff0c\u7ed9\u4f60 questions = [[3, 2], [4, 3], [4, 4], [2, 5]] \uff1a \u5982\u679c\u95ee\u9898 0 \u88ab\u89e3\u51b3\u4e86\uff0c \u90a3\u4e48\u4f60\u53ef\u4ee5\u83b7\u5f97 3 \u5206\uff0c\u4f46\u4f60\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898 1 \u548c 2 \u3002 \u5982\u679c\u4f60\u8df3\u8fc7\u95ee\u9898 0 \uff0c\u4e14\u89e3\u51b3\u95ee\u9898 1 \uff0c\u4f60\u5c06\u83b7\u5f97 4 \u5206\u4f46\u662f\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898 2 \u548c 3 \u3002 \u8bf7\u4f60\u8fd4\u56de\u8fd9\u573a\u8003\u8bd5\u91cc\u4f60\u80fd\u83b7\u5f97\u7684 \u6700\u9ad8 \u5206\u6570\u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E8%A7%A3%E5%86%B3%E6%99%BA%E5%8A%9B%E9%97%AE%E9%A2%98/#_2","title":"\u8bb0\u5fc6\u5316\u641c\u7d22","text":"<p>\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u505a\u6cd5\u3002</p> <pre><code>class Solution {\npublic:\n    long long mostPoints(vector&lt;vector&lt;int&gt;&gt;&amp; questions) {\n        map&lt;int, long long&gt; m;\n        function&lt;long long(int)&gt; solve = [&amp;](int x) {\n            if (m.count(x)) return m[x];\n            if (x &gt;= questions.size()) return (long long)0;\n            long long a = solve(x + 1);\n            long long b = questions[x][0] + solve(x + 1 + questions[x][1]);\n            m[x] = max(a, b);\n            return m[x];\n        };\n        return solve(0);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E8%A7%A3%E5%86%B3%E6%99%BA%E5%8A%9B%E9%97%AE%E9%A2%98/#dp","title":"\u5012\u5e8fDP","text":"<p>\\(f(i)\\)\u4e3a\u4ece\u7b2c\\(i\\)\u9898\u5f00\u59cb\u505a\u7684\u6700\u9ad8\u5f97\u5206\u3002\u7531\u4e8e\u7528\u5230\u4e4b\u540e\u7684\u4fe1\u606f\uff0c\u9700\u8981\u5012\u5e8f\u8ba1\u7b97\u3002</p> \\[ \\displaylines{ f(i) = \\max\\{f(i+1), \\text{points}(i)+f(i+1+\\text{brainpower}(i))\\} } \\] <pre><code>class Solution {\npublic:\n    long long mostPoints(vector&lt;vector&lt;int&gt;&gt;&amp; questions) {\n        int n = questions.size();\n        vector&lt;long long&gt; dp(n + 1, 0);\n        for (int i = n - 1; i &gt;= 0; --i) {\n            dp[i] = max(dp[i + 1], questions[i][0] + dp[min(n, i + questions[i][1] + 1)]);\n        }\n        return dp[0];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E8%A7%A3%E5%86%B3%E6%99%BA%E5%8A%9B%E9%97%AE%E9%A2%98/#dp_1","title":"\u6b63\u5e8fDP","text":"<p>\\(f(i)\\)\u4e3a\u524d\\(i\\)\u9898\u7684\u6700\u9ad8\u5f97\u5206\u3002\u6bcf\u6b21\u5faa\u73af\u4e0d\u53ea\u66f4\u65b0\u5f53\u524d\u4e0b\u6807\uff0c\u8fd8\u8981\u66f4\u65b0\u672a\u6765\u7684\u4e0b\u6807\u3002</p> <pre><code>class Solution {\npublic:\n    long long mostPoints(vector&lt;vector&lt;int&gt;&gt; &amp;questions) {\n        int n = questions.size();\n        vector&lt;long long&gt; dp(n + 1);\n        for (int i = 0; i &lt; n; ++i) {\n            dp[i + 1] = max(dp[i + 1], dp[i]);\n            int j = min(n, i + questions[i][1] + 1);\n            dp[j] = max(dp[j], dp[i] + questions[i][0]);\n        }\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%BAk%E7%9A%84%E6%8E%92%E5%88%97%E4%B8%AA%E6%95%B0/","title":"\u3010\u52a8\u89c4\u3011\u9006\u5e8f\u5bf9\u4e3ak\u7684\u6392\u5217\u4e2a\u6570","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8A%A8%E8%A7%84%E3%80%91%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%BAk%E7%9A%84%E6%8E%92%E5%88%97%E4%B8%AA%E6%95%B0/#k-inverse-pairs-array","title":"k inverse pairs array","text":"<p>\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 <code>n</code> \u548c <code>k</code>\uff0c\u627e\u51fa\u6240\u6709\u5305\u542b\u4ece <code>1</code> \u5230 <code>n</code> \u7684\u6570\u5b57\uff0c\u4e14\u6070\u597d\u62e5\u6709 <code>k</code> \u4e2a\u9006\u5e8f\u5bf9\u7684\u4e0d\u540c\u7684\u6570\u7ec4\u7684\u4e2a\u6570\u3002</p> <p>\u4ee4\\(f(i, j)\\)\u4ee3\u8868\u524d\\(i\\)\u4e2a\u6570\u7ec4\u6210\u7684\u5e8f\u5217\u4e2d\u542b\u6709\\(j\\)\u4e2a\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u77e5\u9053\\(f(i-1, *)\\), \u8003\u8651\u5c06\\(i\\)\u63d2\u5165\u5230\\(k=0 \\rightarrow i-1\\)\u7684\u4f4d\u7f6e\u5904\u65b0\u5f97\u5230\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u4e3a\\(i-1-k\\)\uff0c\u4ece\u800c\uff1a</p> \\[ \\displaylines{ f(i, j) = \\sum_{k=0}^{i-1}f(i-1, j-(i-1-k))=\\sum_{k=0}^{i-1}f(i-1, j-k) } \\] <p>\u5c55\u5f00\u53ef\u53d1\u73b0\uff1a</p> \\[ \\displaylines{ \\begin{align} f(i,j)    &amp;= f(i-1,j) + &amp;f(i-1, j-1) + \\cdots + &amp;f(i-1, j-i+1) \\\\ f(i, j-1) &amp;=            &amp;f(i-1, j-1) + \\cdots + &amp;f(i-1, j-i+1) + f(i-1, j-i) \\\\ \\end{align} } \\] <p>\u4ece\u800c\uff1a</p> \\[ \\displaylines{ f(i,j) = f(i-1,j) + f(i, j-1)-f(i-1,j-i) } \\] <p>\u8fb9\u754c\u6761\u4ef6\uff1a</p> \\[ \\displaylines{ f(*, 0) = 1 \\quad \\text{specifically, } f(1, 0) = 1\\\\ f(1, j) = 0 \\quad \\text{if} ~ j &gt; 0\\\\ f(*, j) = 0 \\quad \\text{if} ~ j &lt; 0 \\\\ } \\] <p>\u52a8\u6001\u89c4\u5212\uff1a</p> <pre><code>class Solution {\npublic:\n    const static int M = 1e9 + 7;\n    int kInversePairs(int n, int k) {\n        vector&lt;vector&lt;long long&gt;&gt; dp(n+1, vector&lt;long long&gt;(k+1, 0));\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 0; j &lt;= k; j++) {\n                if (j == 0) dp[i][j] = 1;\n                else if (i == 1) dp[i][j] = 0;\n                else {\n                    dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % M;\n                    if (j - i &gt;= 0) dp[i][j] = (dp[i][j] - dp[i-1][j-i] + M) % M;\n                }\n\n            }\n        }\n        return dp[n][k];\n    }\n};\n</code></pre> <p>\u7a7a\u95f4\u4f18\u5316\uff1a</p> <pre><code>class Solution {\npublic:\n    static const int mod = 1000000007;\n    int kInversePairs(int n, int k) {\n        int f[2][k + 1];\n        memset(f, 0, sizeof(f));\n\n        f[1][0] = 1;\n        for (int i = 2; i &lt;= n; ++i) {\n            int flip = i &amp; 1;\n            int sum = 0;\n            for (int j = 0; j &lt;= k; ++j) {\n                sum += f[1 - flip][j];\n                if (j &gt;= i) sum -= f[1 - flip][j - i];\n                if (sum &lt; 0) sum += mod;\n                if (sum &gt;= mod) sum -= mod;\n                f[flip][j] = sum;\n            }\n        }\n        return f[n &amp; 1][k];\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%91%E9%80%82%E9%BE%84%E6%9C%8B%E5%8F%8B/","title":"\u3010\u53cc\u6307\u9488\u3011\u9002\u9f84\u670b\u53cb","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%91%E9%80%82%E9%BE%84%E6%9C%8B%E5%8F%8B/#_1","title":"\u9002\u9f84\u670b\u53cb","text":"<p>\u5728\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\u4e0a\u6709 n \u4e2a\u7528\u6237\u3002\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ages \uff0c\u5176\u4e2d ages[i] \u662f\u7b2c i \u4e2a\u7528\u6237\u7684\u5e74\u9f84\u3002</p> <p>\u5982\u679c\u4e0b\u8ff0\u4efb\u610f\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\uff0c\u90a3\u4e48\u7528\u6237 x \u5c06\u4e0d\u4f1a\u5411\u7528\u6237 y\uff08x != y\uff09\u53d1\u9001\u597d\u53cb\u8bf7\u6c42\uff1a</p> <ul> <li>age[y] &lt;= 0.5 * age[x] + 7</li> </ul> <ul> <li>age[y] &gt; age[x]</li> </ul> <ul> <li>age[y] &gt; 100 &amp;&amp; age[x] &lt; 100</li> </ul> <p>\u5426\u5219\uff0cx \u5c06\u4f1a\u5411 y \u53d1\u9001\u4e00\u6761\u597d\u53cb\u8bf7\u6c42\u3002</p> <p>\u6ce8\u610f\uff0c\u5982\u679c x \u5411 y \u53d1\u9001\u4e00\u6761\u597d\u53cb\u8bf7\u6c42\uff0cy \u4e0d\u5fc5\u4e5f\u5411 x \u53d1\u9001\u4e00\u6761\u597d\u53cb\u8bf7\u6c42\u3002\u53e6\u5916\uff0c\u7528\u6237\u4e0d\u4f1a\u5411\u81ea\u5df1\u53d1\u9001\u597d\u53cb\u8bf7\u6c42\u3002</p> <p>\u8fd4\u56de\u5728\u8be5\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\u4e0a\u4ea7\u751f\u7684\u597d\u53cb\u8bf7\u6c42\u603b\u6570\u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%91%E9%80%82%E9%BE%84%E6%9C%8B%E5%8F%8B/#_2","title":"\u4e8c\u5206","text":"<p>\u6700\u521d\u7684\u60f3\u6cd5\u3002\u6761\u4ef6\u4e09\u662f\u6761\u4ef6\u4e8c\u7684\u5145\u5206\u6761\u4ef6\uff0c\u6240\u4ee5\u53ea\u7528\u5224\u65ad\u4e24\u79cd\u8fb9\u754c\u3002</p> <p>\u4f46\u5b9e\u9645\u4e0a\u5faa\u73af\u4e4b\u4e2d\u591a\u6b21\u4e8c\u5206\u901a\u5e38\u53ef\u4ee5\u4f18\u5316\u6210\u53cc\u6307\u9488\uff0c\u56e0\u4e3a\u5faa\u73af\u4e2d\u4e24\u4e2a\u8fb9\u754c\u503c\u90fd\u662f\u9012\u589e\u7684\u3002</p> <p>\\(O(n\\log n)\\)\u3002</p> <pre><code>class Solution {\npublic:\n    int numFriendRequests(vector&lt;int&gt;&amp; ages) {\n        sort(ages.begin(), ages.end());\n        int ans = 0;\n        for (int i = 0; i &lt; ages.size(); i++) {\n            int x = ages[i];\n            int lo = upper_bound(ages.begin(), ages.end(), floor(0.5 * x + 7)) - ages.begin();\n            // rule 3 --&gt; rule 2\n            int hi = upper_bound(ages.begin(), ages.end(), x) - ages.begin();\n            ans += hi - lo - 1 &gt; 0 ? hi - lo - 1 : 0; // must be positive\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%91%E9%80%82%E9%BE%84%E6%9C%8B%E5%8F%8B/#_3","title":"\u53cc\u6307\u9488","text":"<p>\\(O(n\\log n)\\)\uff0c\u5e38\u6570\u66f4\u4f4e\u3002</p> <pre><code>class Solution {\npublic:\n    int numFriendRequests(vector&lt;int&gt;&amp; ages) {\n        int n = ages.size();\n        sort(ages.begin(), ages.end());\n        int left = 0, right = 0, ans = 0;\n        for (int age: ages) {\n            if (age &lt; 15) continue;\n            while (ages[left] &lt;= 0.5 * age + 7) ++left;\n            while (right + 1 &lt; n &amp;&amp; ages[right + 1] &lt;= age) ++right;\n            ans += right - left;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%91%E9%80%82%E9%BE%84%E6%9C%8B%E5%8F%8B/#_4","title":"\u524d\u7f00\u548c","text":"<p>\u7531\u4e8e\u5e74\u9f84\u9650\u5236\u5728120\u4ee5\u5185\uff0c\u66f4\u5feb\u7684\u505a\u6cd5\u662f\u66b4\u529b\u7edf\u8ba1\u3002</p> <p>\\(O(n)\\)\u3002</p> <pre><code>class Solution {\npublic:\n    int numFriendRequests(vector&lt;int&gt;&amp; ages) {\n        vector&lt;int&gt; cnt(121);\n        for (int age: ages) ++cnt[age];\n        vector&lt;int&gt; pre(121);\n        for (int i = 1; i &lt;= 120; ++i) pre[i] = pre[i - 1] + cnt[i];\n        int ans = 0;\n        for (int i = 15; i &lt;= 120; ++i) {\n            if (cnt[i]) {\n                int bound = i * 0.5 + 8;\n                ans += cnt[i] * (pre[i] - pre[bound - 1] - 1);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%9B%9E%E6%BA%AF%E3%80%91%E5%85%AC%E5%B9%B3%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/","title":"\u3010\u56de\u6eaf\u3011\u516c\u5e73\u5206\u53d1\u997c\u5e72","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E5%9B%9E%E6%BA%AF%E3%80%91%E5%85%AC%E5%B9%B3%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/#_1","title":"\u516c\u5e73\u5206\u53d1\u997c\u5e72","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cookies \uff0c\u5176\u4e2d cookies[i] \u8868\u793a\u5728\u7b2c i \u4e2a\u96f6\u98df\u5305\u4e2d\u7684\u997c\u5e72\u6570\u91cf\u3002\u53e6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 k \u8868\u793a\u7b49\u5f85\u5206\u53d1\u96f6\u98df\u5305\u7684\u5b69\u5b50\u6570\u91cf\uff0c\u6240\u6709 \u96f6\u98df\u5305\u90fd\u9700\u8981\u5206\u53d1\u3002\u5728\u540c\u4e00\u4e2a\u96f6\u98df\u5305\u4e2d\u7684\u6240\u6709\u997c\u5e72\u90fd\u5fc5\u987b\u5206\u53d1\u7ed9\u540c\u4e00\u4e2a\u5b69\u5b50\uff0c\u4e0d\u80fd\u5206\u5f00\u3002</p> <p>\u5206\u53d1\u7684 \u4e0d\u516c\u5e73\u7a0b\u5ea6 \u5b9a\u4e49\u4e3a\u5355\u4e2a\u5b69\u5b50\u5728\u5206\u53d1\u8fc7\u7a0b\u4e2d\u80fd\u591f\u83b7\u5f97\u997c\u5e72\u7684\u6700\u5927\u603b\u6570\u3002</p> <p>\u8fd4\u56de\u6240\u6709\u5206\u53d1\u7684\u6700\u5c0f\u4e0d\u516c\u5e73\u7a0b\u5ea6\u3002</p> <ul> <li><code>2 &lt;= cookies.length &lt;= 8</code></li> <li><code>1 &lt;= cookies[i] &lt;= 105</code></li> <li><code>2 &lt;= k &lt;= cookies.length</code></li> </ul>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%9B%9E%E6%BA%AF%E3%80%91%E5%85%AC%E5%B9%B3%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/#_2","title":"\u56de\u6eaf","text":"<p>\u201c\u628a\u4e00\u4e2a\u96c6\u5408\u5212\u5206\u6210\uff2b\u7ec4\uff0c\u4f7f\u5f97\u6bcf\u7ec4\u7684\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u201d\u5e94\u8be5\u53ea\u80fd\u7528\u56de\u6eaf\u624d\u80fd\u5f97\u5230\u6b63\u786e\u7b54\u6848\uff01\u8d2a\u5fc3\u4e00\u5b9a\u662f\u9519\u7684\uff01</p> <p>\u56de\u6eaf\u7684\u5199\u6cd5\u5e76\u4e0d\u96be\uff0c\u8bb0\u5f55\u5f53\u524d\u8def\u5f84\u7684\u6700\u5927\u503c\u5373\u53ef\uff0c\u62b5\u8fbe\u53f6\u8282\u70b9\u65f6\u518d\u53d6\u6781\u5c0f\u3002</p> <pre><code>class Solution {\npublic:\n    int distributeCookies(vector&lt;int&gt;&amp; cookies, int k) {\n        int n = cookies.size();\n        sort(cookies.begin(), cookies.end(), greater&lt;int&gt;());\n        // n^k\n        int ans = INT_MAX;\n        vector&lt;int&gt; v(k, 0);\n        function&lt;void(int, int)&gt; dfs = [&amp;](int i, int mx) {\n            // exit dfs\n            if (i &gt;= n) {\n                ans = min(ans, mx);\n                return;\n            }\n            // choose each group\n            for (int j = 0; j &lt; k; j++) {\n                v[j] += cookies[i];\n                dfs(i + 1, max(mx, v[j]));\n                v[j] -= cookies[i];\n            }\n        };\n        dfs(0, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%9B%9E%E6%BA%AF%E3%80%91%E5%85%AC%E5%B9%B3%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/#_3","title":"\u4e8c\u5206\u52a0\u901f\u56de\u6eaf","text":"<p>\u6ce8\u610f\u5230\u8fd9\u4e2a\u9898\u76ee\u7684\u7b54\u6848\u4e5f\u5177\u6709\u5355\u8c03\u6027\uff0c\u6545\u53ef\u4ee5\u7528\u4e8c\u5206\u6cd5\u5bfb\u627e\u8fb9\u754c\u3002\u7136\u800c\u5224\u65ad\u51fd\u6570\u8fd8\u662f\u9700\u8981\u56de\u6eaf\u624d\u80fd\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002</p> <pre><code>class Solution {\npublic:\n\n    int distributeCookies(vector&lt;int&gt;&amp; cookies, int k) {\n        // binary search, n^k logC\n        int n = cookies.size();\n        sort(cookies.begin(), cookies.end(), greater&lt;int&gt;());\n        // n^k\n        auto test = [&amp;](int m) {\n            vector&lt;int&gt; v(k, 0);\n            bool flag = false;\n            function&lt;void(int)&gt; dfs = [&amp;](int i) {\n                if (flag) return;\n                if (i &gt;= n) {\n                    for (int j = 0; j &lt; k; j++) {\n                        if (v[j] &gt; m) {\n                            flag = false;\n                            return;\n                        }\n                    }\n                    flag = true;\n                    return;\n                }\n                for (int j = 0; j &lt; k; j++) {\n                    // important pruning!\n                    if (v[j] + cookies[i] &gt; m) continue;\n                    v[j] += cookies[i];\n                    dfs(i + 1);\n                    v[j] -= cookies[i];\n                }\n            };\n            dfs(0);\n            return flag;\n        };\n        // search for the left border\n        int l = 1, r = 1e9 + 1;\n        while (l &lt;= r) {\n            int m = (l + r) / 2;\n            if (test(m)) r = m - 1;\n            else l = m + 1;\n        }\n        return l;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%A0%86%E3%80%91%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E7%AC%AC%20K%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/","title":"\u3010\u5806\u3011\u3010\u4e8c\u5206\u3011\u7b2c K \u4e2a\u6700\u5c0f\u7684\u7d20\u6570\u5206\u6570","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E5%A0%86%E3%80%91%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E7%AC%AC%20K%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/#k","title":"\u7b2c K \u4e2a\u6700\u5c0f\u7684\u7d20\u6570\u5206\u6570","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6309\u9012\u589e\u987a\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4 arr \u548c\u4e00\u4e2a\u6574\u6570 k \u3002\u6570\u7ec4 arr \u7531 1 \u548c\u82e5\u5e72 \u7d20\u6570  \u7ec4\u6210\uff0c\u4e14\u5176\u4e2d\u6240\u6709\u6574\u6570\u4e92\u4e0d\u76f8\u540c\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u5bf9\u6ee1\u8db3 0 &lt; i &lt; j &lt; arr.length \u7684 i \u548c j \uff0c\u53ef\u4ee5\u5f97\u5230\u5206\u6570 arr[i] / arr[j] \u3002</p> <p>\u90a3\u4e48\u7b2c k \u4e2a\u6700\u5c0f\u7684\u5206\u6570\u662f\u591a\u5c11\u5462?  \u4ee5\u957f\u5ea6\u4e3a 2 \u7684\u6574\u6570\u6570\u7ec4\u8fd4\u56de\u4f60\u7684\u7b54\u6848, \u8fd9\u91cc answer[0] == arr[i] \u4e14 answer[1] == arr[j] \u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%A0%86%E3%80%91%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E7%AC%AC%20K%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/#_1","title":"\u66b4\u529b","text":"<p>\u626b\u63cfk\u6b21\uff0c\u624b\u52a8\u7ba1\u7406\u5927\u5c0f\u5173\u7cfb\u53ea\u80fd\u505a\u5230\u6bcf\u6b21\\(O(N)\\)\u3002</p> <p>\\(O(kN)=O(N^3)\\)\uff0cTLE\u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%A0%86%E3%80%91%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E7%AC%AC%20K%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/#_2","title":"\u5806","text":"<p>\u7c7b\u4f3c\u7684\u60f3\u6cd5\uff0c\u626b\u63cfk\u6b21\uff0c\u4f46\u901a\u8fc7\u5806\u7ba1\u7406\u6392\u5e8f\u3002\u672c\u8d28\u662f\u591a\u8def\u5f52\u5e76\u95ee\u9898\u3002</p> <p>\\(O(k\\log N)\\)\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; kthSmallestPrimeFraction(vector&lt;int&gt;&amp; arr, int k) {\n        int n = arr.size();\n        auto cmp = [&amp;](const pair&lt;int, int&gt;&amp; x, const pair&lt;int, int&gt;&amp; y) {\n            return arr[x.first] * arr[y.second] &gt; arr[x.second] * arr[y.first];\n        };\n        priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, decltype(cmp)&gt; q(cmp);\n        for (int j = 1; j &lt; n; ++j) {\n            q.emplace(0, j);\n        }\n        for (int _ = 1; _ &lt; k; ++_) {\n            auto [i, j] = q.top();\n            q.pop();\n            if (i + 1 &lt; j) {\n                q.emplace(i + 1, j);\n            }\n        }\n        return {arr[q.top().first], arr[q.top().second]};\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%A0%86%E3%80%91%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E7%AC%AC%20K%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/#_3","title":"\u4e8c\u5206","text":"<p>\u5c0f\u4e8e\\(x\\)\u7684\u5206\u6570\u6570\u91cf\u5173\u4e8e\\(x\\)\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\\(x\\)\uff0c\u8ba1\u6570\u5c0f\u4e8e\\(x\\)\u7684\u5206\u6570\u6570\u91cf\u6765\u6c42\u89e3\u3002</p> <p>\\(O(N\\log C)\\), \\(C = \\max_{v\\in arr}v\\)\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; kthSmallestPrimeFraction(vector&lt;int&gt;&amp; arr, int k) {\n        int n = arr.size();\n        double left = 0.0, right = 1.0;\n        while (true) {\n            double mid = (left + right) / 2;\n\n            int i = -1, count = 0;\n            int x = 0, y = 1;\n\n            // count how many elements are smaller than mid.\n            for (int j = 1; j &lt; n; ++j) {\n                while ((double)arr[i + 1] / arr[j] &lt; mid) {\n                    ++i;\n                    if (arr[i] * y &gt; arr[j] * x) {\n                        x = arr[i];\n                        y = arr[j];\n                    }\n                }\n                count += i + 1;\n            }\n\n            if (count == k) {\n                return {x, y};\n            }\n            if (count &lt; k) {\n                left = mid;\n            }\n            else {\n                right = mid;\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%A0%86%E3%80%91%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E7%AC%AC%20K%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/#k_1","title":"\u7c7b\u4f3c\u9898\u76ee\uff1a\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 , \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 k \u3002</p> <p>\u5b9a\u4e49\u4e00\u5bf9\u503c (u,v)\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea nums1\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea nums2 \u3002</p> <p>\u8bf7\u627e\u5230\u548c\u6700\u5c0f\u7684 k \u4e2a\u6570\u5bf9 (u1,v1),  (u2,v2)  ...  (uk,vk) \u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%A0%86%E3%80%91%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91%E7%AC%AC%20K%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/#_4","title":"\u5806","text":"<p>\u7c7b\u4f3c\u7684\uff0c\u867d\u7136\u4e24\u7ec4\u6570\u53ef\u590d\u7528\u65f6\u6ca1\u6709\u660e\u663e\u7684\u5355\u8c03\u6027\uff0c\u4f46\u5982\u679c\u56fa\u5b9a\u5176\u4e2d\u4e00\u4e2a\u6570\uff0c\u6c42\u548c\u5bf9\u53e6\u4e00\u4e2a\u6570\u4e00\u5b9a\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528\u5806\u89e3\u51b3\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; kSmallestPairs(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2, int k) {\n        auto cmp = [&amp;](const pair&lt;int, int&gt;&amp;x, const pair&lt;int, int&gt;&amp;y) {\n            return nums1[x.first] + nums2[x.second] &gt; nums1[y.first] + nums2[y.second];\n        };\n        priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, decltype(cmp)&gt; q(cmp);\n        for (int i = 0; i &lt; nums2.size(); i++) {\n            q.emplace(0, i);\n        }\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        for (int i = 0; i &lt; k; i++) {\n            if (q.empty()) break; // when k &gt; nums1.size() * nums2.size()\n            auto [m, n] = q.top(); q.pop();\n            ans.push_back({nums1[m], nums2[n]});\n            if (m + 1 &lt; nums1.size()) {\n                q.emplace(m + 1, n);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%BE%AA%E7%8E%AFKMP%E3%80%91%E9%87%8D%E5%8F%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/","title":"\u3010\u5faa\u73afKMP\u3011\u91cd\u53e0\u5b57\u7b26\u4e32\u5339\u914d","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E5%BE%AA%E7%8E%AFKMP%E3%80%91%E9%87%8D%E5%8F%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#_1","title":"\u5faa\u73af\u5b57\u7b26\u4e32\u5339\u914d","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 a \u548c b\uff0c\u5bfb\u627e\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32 a \u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32 b \u6210\u4e3a\u53e0\u52a0\u540e\u7684\u5b57\u7b26\u4e32 a \u7684\u5b50\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de -1\u3002</p> <p>\u6ce8\u610f\uff1a\u5b57\u7b26\u4e32 \"abc\" \u91cd\u590d\u53e0\u52a0 0 \u6b21\u662f \"\"\uff0c\u91cd\u590d\u53e0\u52a0 1 \u6b21\u662f \"abc\"\uff0c\u91cd\u590d\u53e0\u52a0 2 \u6b21\u662f \"abcabc\"\u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%BE%AA%E7%8E%AFKMP%E3%80%91%E9%87%8D%E5%8F%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#find","title":"\u4e8c\u5206 + find","text":"<p>\u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c\u4f46\u4ed4\u7ec6\u60f3\u60f3\u5c31\u77e5\u9053\u8fd9\u662f\u5f88\u50bb\u7684\u505a\u6cd5\u4e86\u3002\\(O(2n\\log\\frac{n}{m} )\\)\u3002</p> <pre><code>class Solution {\npublic:\n    int repeatedStringMatch(string a, string b) {\n        // binary search\n        auto check = [&amp;](int m) {\n            string aa;\n            while (m--) aa += a;\n            if (aa.find(b) != -1) return true;\n            else return false;\n        };\n        int l = 0, r = b.size() / a.size() + 1;\n        while (l &lt;= r) {\n            int m = (l + r) &gt;&gt; 1;\n            if (check(m)) r = m - 1;\n            else l = m + 1;\n        }\n        if (check(l)) return l;\n        else return -1;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%BE%AA%E7%8E%AFKMP%E3%80%91%E9%87%8D%E5%8F%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#find_1","title":"find","text":"<p>\u56e0\u4e3a\u5176\u5b9e\u4e00\u6b21find\u52a0\u8d2a\u5fc3\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\uff1a\\(O(2n)\\)</p> <pre><code>class Solution {\npublic:\n    int repeatedStringMatch(string a, string b) {\n        int an = a.size(), bn = b.size();\n        string aa;\n        while (aa.size() &lt;= bn + an) aa += a; // important!\n        int index = aa.find(b);\n        if (index == -1) return -1;\n        if (an - index &gt;= bn) return 1;\n        return (bn + index - an - 1) / an + 2;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%BE%AA%E7%8E%AFKMP%E3%80%91%E9%87%8D%E5%8F%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#kmp","title":"\u5faa\u73afKMP","text":"<p>\u624b\u5199KMP\u5e76\u4fee\u6539\uff0c\u4f7f\u5176\u53ef\u4ee5\u5faa\u73af\u5339\u914d\u6bcd\u4e32\u3002\\(O(n+m)\\)</p> <pre><code>class Solution {\npublic:\n    int strStr(string&amp; t, string&amp; p) {\n        int n = t.size(), m = p.size();\n        if (m == 0) return 0;\n        // get next\n        vector&lt;int&gt; next(m);\n        for (int i = 1, j = 0; i &lt; m; i++) {\n            while (j &gt; 0 &amp;&amp; p[i] != p[j]) j = next[j - 1];\n            if (p[i] == p[j]) j++;\n            next[i] = j;\n        }\n        // match\n        for (int i = 0, j = 0; i - j &lt; n; i++) { \n            // note the `i % n`, since we want a cyclic t.\n            while (j &gt; 0 &amp;&amp; t[i % n] != p[j]) j = next[j - 1];\n            if (t[i % n] == p[j]) j++;\n            if (j == m) return i - m + 1;\n        }\n        return -1;\n    }\n\n    int repeatedStringMatch(string a, string b) {\n        int an = a.size(), bn = b.size();\n        int index = strStr(a, b);\n        if (index == -1) return -1;\n        if (an - index &gt;= bn) return 1;\n        return (bn + index - an - 1) / an + 2;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E5%BE%AA%E7%8E%AFKMP%E3%80%91%E9%87%8D%E5%8F%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#rabin-karp","title":"\u5faa\u73afRabin-Karp","text":"<p>\u6eda\u52a8\u54c8\u5e0c\u3002\\(O(n+m)\\)</p> <pre><code>class Solution {\npublic:\n    constexpr int kMod1 = 1e9 + 7;\n    constexpr int kMod2 = 1337;\n    int strStr(string haystack, string needle) {\n        int n = haystack.size(), m = needle.size();\n        if (m == 0) {\n            return 0;\n        }\n        long long hash_needle = 0;\n        for (auto c : needle) {\n            hash_needle = (hash_needle * kMod2 + c) % kMod1;\n        }\n        long long hash_haystack = 0, extra = 1;\n        for (int i = 0; i &lt; m - 1; i++) {\n            hash_haystack = (hash_haystack * kMod2 + haystack[i % n]) % kMod1;\n            extra = (extra * kMod2) % kMod1;\n        }\n        for (int i = m - 1; (i - m + 1) &lt; n; i++) {\n            hash_haystack = (hash_haystack * kMod2 + haystack[i % n]) % kMod1;\n            if (hash_haystack == hash_needle) {\n                return i - m + 1;\n            }\n            hash_haystack = (hash_haystack - extra * haystack[(i - m + 1) % n]) % kMod1;\n            hash_haystack = (hash_haystack + kMod1) % kMod1;\n        }\n        return -1;\n    }\n\n    int repeatedStringMatch(string a, string b) {\n        int an = a.size(), bn = b.size();\n        int index = strStr(a, b);\n        if (index == -1) {\n            return -1;\n        }\n        if (an - index &gt;= bn) {\n            return 1;\n        }\n        return (bn + index - an - 1) / an + 2;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E3%80%91%E5%AF%8C%E6%9C%89%E4%B8%8E%E5%90%B5%E9%97%B9/","title":"\u3010\u62d3\u6251\u6392\u5e8f\u3011\u5bcc\u6709\u4e0e\u5435\u95f9","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E3%80%91%E5%AF%8C%E6%9C%89%E4%B8%8E%E5%90%B5%E9%97%B9/#_1","title":"\u55a7\u95f9\u4e0e\u5bcc\u6709","text":"<p>\u6709\u4e00\u7ec4 n \u4e2a\u4eba\u4f5c\u4e3a\u5b9e\u9a8c\u5bf9\u8c61\uff0c\u4ece 0 \u5230 n - 1 \u7f16\u53f7\uff0c\u5176\u4e2d\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e0d\u540c\u6570\u76ee\u7684\u94b1\uff0c\u4ee5\u53ca\u4e0d\u540c\u7a0b\u5ea6\u7684\u5b89\u9759\u503c\uff08quietness\uff09\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u7f16\u53f7\u4e3a x \u7684\u4eba\u7b80\u79f0\u4e3a \"person x \"\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 richer \uff0c\u5176\u4e2d richer[i] = [ai, bi] \u8868\u793a person ai \u6bd4 person bi \u66f4\u6709\u94b1\u3002\u53e6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 quiet \uff0c\u5176\u4e2d quiet[i] \u662f person i \u7684\u5b89\u9759\u503c\u3002richer \u4e2d\u6240\u7ed9\u51fa\u7684\u6570\u636e \u903b\u8f91\u81ea\u6070\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 person x \u6bd4 person y \u66f4\u6709\u94b1\u7684\u540c\u65f6\uff0c\u4e0d\u4f1a\u51fa\u73b0 person y \u6bd4 person x \u66f4\u6709\u94b1\u7684\u60c5\u51b5 \uff09\u3002</p> <p>\u73b0\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 answer \u4f5c\u4e3a\u7b54\u6848\uff0c\u5176\u4e2d answer[x] = y \u7684\u524d\u63d0\u662f\uff0c\u5728\u6240\u6709\u62e5\u6709\u7684\u94b1\u80af\u5b9a\u4e0d\u5c11\u4e8e person x \u7684\u4eba\u4e2d\uff0cperson y \u662f\u6700\u5b89\u9759\u7684\u4eba\uff08\u4e5f\u5c31\u662f\u5b89\u9759\u503c quiet[y] \u6700\u5c0f\u7684\u4eba\uff09\u3002</p> <p>\u867d\u7136\u60f3\u5230\u4e86DFS\u6765\u5bfb\u627e\u66f4\u5bcc\u6709\u7684\u6240\u6709\u4eba\uff0c\u4f46\u5982\u679c\u6bcf\u4e2a\u4eba\u5355\u72ec\u5904\u7406\u7684\u8bdd\u4f1a\u8d85\u65f6\uff0c\u8981\u7528\u8bb0\u5fc6\u5316\u907f\u514d\u91cd\u590d\u7684\u641c\u7d22...</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E3%80%91%E5%AF%8C%E6%9C%89%E4%B8%8E%E5%90%B5%E9%97%B9/#dfs","title":"DFS + \u8bb0\u5fc6\u5316","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; loudAndRich(vector&lt;vector&lt;int&gt;&gt; &amp;richer, vector&lt;int&gt; &amp;quiet) {\n        int n = quiet.size();\n        vector&lt;vector&lt;int&gt;&gt; g(n);\n        for (auto &amp;r : richer) {\n            g[r[1]].emplace_back(r[0]);\n        }\n\n        vector&lt;int&gt; ans(n, -1);\n        function&lt;void(int)&gt; dfs = [&amp;](int x) {\n            if (ans[x] != -1) {\n                return;\n            }\n            ans[x] = x;\n            for (int y : g[x]) {\n                dfs(y);\n                if (quiet[ans[y]] &lt; quiet[ans[x]]) {\n                    ans[x] = ans[y];\n                }\n            }\n        };\n        for (int i = 0; i &lt; n; ++i) {\n            dfs(i);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E3%80%91%E5%AF%8C%E6%9C%89%E4%B8%8E%E5%90%B5%E9%97%B9/#_2","title":"\u62d3\u6251\u6392\u5e8f","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; loudAndRich(vector&lt;vector&lt;int&gt;&gt; &amp;richer, vector&lt;int&gt; &amp;quiet) {\n        int n = quiet.size();\n        vector&lt;vector&lt;int&gt;&gt; g(n);\n        vector&lt;int&gt; inDeg(n);\n        for (auto &amp;r : richer) {\n            g[r[0]].emplace_back(r[1]);\n            ++inDeg[r[1]];\n        }\n\n        vector&lt;int&gt; ans(n);\n        iota(ans.begin(), ans.end(), 0);\n        queue&lt;int&gt; q;\n        for (int i = 0; i &lt; n; ++i) {\n            if (inDeg[i] == 0) {\n                q.emplace(i);\n            }\n        }\n        while (!q.empty()) {\n            int x = q.front();\n            q.pop();\n            for (int y : g[x]) {\n                if (quiet[ans[x]] &lt; quiet[ans[y]]) {\n                    ans[y] = ans[x]; // \u66f4\u65b0 x \u7684\u90bb\u5c45\u7684\u7b54\u6848\n                }\n                if (--inDeg[y] == 0) {\n                    q.emplace(y);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%8C%89%E5%80%BC%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AD%97%E5%85%B8%E3%80%91%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%93%88%E5%B8%8C/","title":"\u3010\u6309\u503c\u6392\u5e8f\u7684\u5b57\u5178\u3011\u53cc\u5411\u94fe\u8868\u54c8\u5e0c","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E6%8C%89%E5%80%BC%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AD%97%E5%85%B8%E3%80%91%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%93%88%E5%B8%8C/#o1","title":"\u5168 O(1) \u7684\u6570\u636e\u7ed3\u6784","text":"<p>\u8bbe\u8ba1\u4e00\u79cd\u5b57\u5178\uff0c\u7528\u6765\u7edf\u8ba1\u952e\u51fa\u73b0\u7684\u6b21\u6570\uff08\u5141\u8bb8\u63d2\u5165\uff0c\u5220\u9664\uff09\uff0c\u540c\u65f6\u53ef\u4ee5\\(O(1)\\)\u8fd4\u56de\u6b21\u6570\u6700\u591a\u548c\u6700\u5c11\u7684\u952e\u3002</p> <ul> <li> <p>\u5982\u679c\u6b21\u6570\u53ef\u4ee5\u662f0\u6216\u8d1f\u6570\uff1a</p> <p>\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u5b57\u5178\u7684\u57fa\u7840\u4e0a\uff0c\u8bb0\u5f55\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u952e\u5373\u53ef\u3002\u6bcf\u6b21\u63d2\u5165\u3001\u5220\u9664\u65f6\u540c\u65f6\u66f4\u65b0\u4e24\u4e2a\u6700\u503c\u5373\u53ef\u3002</p> </li> </ul> <ul> <li> <p>\u5982\u679c\u6b21\u6570\u4e3a0\u65f6\u9700\u8981\u5c06\u952e\u5220\u9664\uff1a</p> <p>\u5220\u9664\u540e\u9700\u8981\\(O(1)\\)\u5bfb\u56de\u6b21\u5c0f\u7684\u5143\u7d20\uff08\u6700\u574f\u9700\u8981\u8fde\u7eed\u5220\u9664\u6240\u6709\u5143\u7d20\uff09\uff0c\u8fd9\u5bfc\u81f4\u6211\u4eec\u5fc5\u987b\u7ef4\u62a4\u5168\u90e8\u952e\u7684\u987a\u5e8f\u5173\u7cfb\uff0c\u800c\u4e0d\u662f\u53ea\u7ef4\u62a4\u4e24\u4e2a\u6700\u503c\u3002</p> <p>\u5408\u9002\u7684\u65b9\u6cd5\u662f\uff0c\u5728\u5b57\u5178\u7684\u57fa\u7840\u4e0a\uff0c\u7528\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7ef4\u62a4\u6240\u6709\u952e\u7684\u987a\u5e8f\uff0c\u5e76\u4e14\u5b57\u5178\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u952e\u5bf9\u5e94\u7684\u8282\u70b9\u7684\u6307\u9488\u3002\u6bcf\u6b21\u63d2\u5165\u3001\u5220\u9664\u65f6\uff0c\u5bf9\u5e94\u4fee\u6539\u94fe\u8868\u7684\u987a\u5e8f\u3002</p> <p>\u66f4\u8fdb\u4e00\u6b65\uff0c\u6bcf\u4e2a\u94fe\u8868\u53ef\u4ee5\u8bb0\u5f55\u6240\u6709\u6b21\u6570\u76f8\u540c\u7684\u952e\uff08\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u4e25\u683c\u8fbe\u5230\\(O(1)\\)\u3002</p> <pre><code>class AllOne {\n    list&lt;pair&lt;unordered_set&lt;string&gt;, int&gt;&gt; lst;\n    unordered_map&lt;string, list&lt;pair&lt;unordered_set&lt;string&gt;, int&gt;&gt;::iterator&gt; nodes;\n\npublic:\n    AllOne() {}\n\n    void inc(string key) {\n        if (nodes.count(key)) {\n            auto cur = nodes[key], nxt = next(cur);\n            if (nxt == lst.end() || nxt-&gt;second &gt; cur-&gt;second + 1) {\n                unordered_set&lt;string&gt; s({key});\n                nodes[key] = lst.emplace(nxt, s, cur-&gt;second + 1);\n            } else {\n                nxt-&gt;first.emplace(key);\n                nodes[key] = nxt;\n            }\n            cur-&gt;first.erase(key);\n            if (cur-&gt;first.empty()) {\n                lst.erase(cur);\n            }\n        } else { // key \u4e0d\u5728\u94fe\u8868\u4e2d\n            if (lst.empty() || lst.begin()-&gt;second &gt; 1) {\n                unordered_set&lt;string&gt; s({key});\n                lst.emplace_front(s, 1);\n            } else {\n                lst.begin()-&gt;first.emplace(key);\n            }\n            nodes[key] = lst.begin();\n        }\n    }\n\n    void dec(string key) {\n        auto cur = nodes[key];\n        if (cur-&gt;second == 1) { // key \u4ec5\u51fa\u73b0\u4e00\u6b21\uff0c\u5c06\u5176\u79fb\u51fa nodes\n            nodes.erase(key);\n        } else {\n            auto pre = prev(cur);\n            if (cur == lst.begin() || pre-&gt;second &lt; cur-&gt;second - 1) {\n                unordered_set&lt;string&gt; s({key});\n                nodes[key] = lst.emplace(cur, s, cur-&gt;second - 1);\n            } else {\n                pre-&gt;first.emplace(key);\n                nodes[key] = pre;\n            }\n        }\n        cur-&gt;first.erase(key);\n        if (cur-&gt;first.empty()) {\n            lst.erase(cur);\n        }\n    }\n\n    string getMaxKey() {\n        return lst.empty() ? \"\" : *lst.rbegin()-&gt;first.begin();\n    }\n\n    string getMinKey() {\n        return lst.empty() ? \"\" : *lst.begin()-&gt;first.begin();\n    }\n};\n</code></pre> </li> </ul>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%A0%88%E3%80%91%E3%80%90trick%E3%80%91%E6%9C%89%E6%95%88%E5%9C%B0%E6%8B%AC%E5%8F%B7%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"\u3010\u6808\u3011\u3010trick\u3011\u6709\u6548\u5730\u62ec\u53f7\u5b57\u7b26\u4e32","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E6%A0%88%E3%80%91%E3%80%90trick%E3%80%91%E6%9C%89%E6%95%88%E5%9C%B0%E6%8B%AC%E5%8F%B7%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","title":"\u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u4e09\u79cd\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff1a\uff08 \uff0c\uff09 \u548c *\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6709\u6548\u5b57\u7b26\u4e32\u3002\u6709\u6548\u5b57\u7b26\u4e32\u5177\u6709\u5982\u4e0b\u89c4\u5219\uff1a</p> <ul> <li>\u4efb\u4f55\u5de6\u62ec\u53f7 ( \u5fc5\u987b\u6709\u76f8\u5e94\u7684\u53f3\u62ec\u53f7 )\u3002</li> </ul> <ul> <li>\u4efb\u4f55\u53f3\u62ec\u53f7 ) \u5fc5\u987b\u6709\u76f8\u5e94\u7684\u5de6\u62ec\u53f7 ( \u3002</li> <li>\u5de6\u62ec\u53f7 ( \u5fc5\u987b\u5728\u5bf9\u5e94\u7684\u53f3\u62ec\u53f7\u4e4b\u524d )\u3002</li> </ul> <ul> <li>*\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5355\u4e2a\u53f3\u62ec\u53f7 ) \uff0c\u6216\u5355\u4e2a\u5de6\u62ec\u53f7 ( \uff0c\u6216\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u3002</li> <li>\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u4e5f\u88ab\u89c6\u4e3a\u6709\u6548\u5b57\u7b26\u4e32\u3002</li> </ul> <p>\u4ec5\u4ec5\u7edf\u8ba1\u5de6\u62ec\u53f7\u4e0e\u661f\u53f7\u7684\u6570\u91cf\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a\u5fc5\u987b\u8bb0\u5f55\u5de6\u62ec\u53f7\u4e0e\u661f\u53f7\u7684\u4f4d\u7f6e\u5173\u7cfb\u3002</p> <p>\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7528\u4e24\u4e2a\u6808\u5206\u522b\u8bb0\u5f55\u5de6\u62ec\u53f7\u4e0e\u661f\u53f7\u7684\u5165\u6808\u65f6\u95f4\u3002</p> <pre><code>class Solution {\npublic:\n    bool checkValidString(string s) {\n        if (s.empty()) return true;\n        stack&lt;int&gt; l, a;\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (s[i] == '(') l.push(i);\n            else if (s[i] == '*') a.push(i);\n            else {\n                if (!l.empty()) l.pop();\n                else if (!a.empty()) a.pop();\n                else return false;\n            }\n        }\n        while (!l.empty()) {\n            int t = l.top(); l.pop();\n            if (a.empty()) return false;\n            else {\n                int ta = a.top(); a.pop();\n                if (ta &lt; t) return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre> <p>\u66f4\u597d\u7684\u505a\u6cd5\u662f\u603b\u7ed3\u89c4\u5f8b\uff1a</p> <p>\u7ef4\u62a4\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\u6570\u91cf\u53ef\u80fd\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002</p> <pre><code>class Solution {\npublic:\n    bool checkValidString(string s) {\n        if (s.empty()) return true;\n        int l = 0, r = 0;\n        for (int i = 0; i &lt; s.size(); i++) {\n            if (s[i] == '(') l++, r++;\n            else if (s[i] == '*') l--, r++;\n            else {\n                l--, r--;\n                if (r &lt; 0) return false;\n            };\n            l = max(l, 0); // should not be neg.\n        }\n        return l == 0;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%A0%91%E4%B8%AD%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84%E3%80%91%E6%9C%80%E5%B0%8F%E9%AB%98%E5%BA%A6%E6%A0%91/","title":"\u3010\u6811\u4e2d\u6700\u957f\u8def\u5f84\u3011\u6700\u5c0f\u9ad8\u5ea6\u6811","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E6%A0%91%E4%B8%AD%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84%E3%80%91%E6%9C%80%E5%B0%8F%E9%AB%98%E5%BA%A6%E6%A0%91/#_1","title":"\u6700\u5c0f\u9ad8\u5ea6\u6811","text":"<p>\u6811\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5176\u4e2d\u4efb\u4f55\u4e24\u4e2a\u9876\u70b9\u53ea\u901a\u8fc7\u4e00\u6761\u8def\u5f84\u8fde\u63a5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u4efb\u4f55\u6ca1\u6709\u7b80\u5355\u73af\u8def\u7684\u8fde\u901a\u56fe\u90fd\u662f\u4e00\u68f5\u6811\u3002</p> <p>\u7ed9\u4f60\u4e00\u68f5\u5305\u542b n \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6807\u8bb0\u4e3a 0 \u5230 n - 1 \u3002\u7ed9\u5b9a\u6570\u5b57 n \u548c\u4e00\u4e2a\u6709 n - 1 \u6761\u65e0\u5411\u8fb9\u7684 edges \u5217\u8868\uff08\u6bcf\u4e00\u4e2a\u8fb9\u90fd\u662f\u4e00\u5bf9\u6807\u7b7e\uff09\uff0c\u5176\u4e2d edges[i] = [ai, bi] \u8868\u793a\u6811\u4e2d\u8282\u70b9 ai \u548c bi \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u65e0\u5411\u8fb9\u3002</p> <p>\u53ef\u9009\u62e9\u6811\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u3002\u5f53\u9009\u62e9\u8282\u70b9 x \u4f5c\u4e3a\u6839\u8282\u70b9\u65f6\uff0c\u8bbe\u7ed3\u679c\u6811\u7684\u9ad8\u5ea6\u4e3a h \u3002\u5728\u6240\u6709\u53ef\u80fd\u7684\u6811\u4e2d\uff0c\u5177\u6709\u6700\u5c0f\u9ad8\u5ea6\u7684\u6811\uff08\u5373\uff0cmin(h)\uff09\u88ab\u79f0\u4e3a \u6700\u5c0f\u9ad8\u5ea6\u6811 \u3002</p> <p>\u8bf7\u4f60\u627e\u5230\u6240\u6709\u7684 \u6700\u5c0f\u9ad8\u5ea6\u6811 \u5e76\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u5b83\u4eec\u7684\u6839\u8282\u70b9\u6807\u7b7e\u5217\u8868\u3002</p> <p>\u6811\u7684 \u9ad8\u5ea6 \u662f\u6307\u6839\u8282\u70b9\u548c\u53f6\u5b50\u8282\u70b9\u4e4b\u95f4\u6700\u957f\u5411\u4e0b\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u91cf\u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%A0%91%E4%B8%AD%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84%E3%80%91%E6%9C%80%E5%B0%8F%E9%AB%98%E5%BA%A6%E6%A0%91/#_2","title":"\u641c\u7d22\u6811\u4e2d\u6700\u957f\u8def\u5f84\uff0c\u8fd4\u56de\u4e2d\u70b9\u5373\u53ef","text":"<p>\u4f46\u641c\u7d22\u6700\u957f\u8def\u5f84\u662f\u6709\u6280\u5de7\u7684\uff1a\u53ea\u9700\u8981\u5148\u4ee5\u4efb\u610f\u8282\u70b9\u4e3a\u6839\uff0c\u641c\u7d22\u6700\u8fdc\u7684\u70b9x\uff0c\u518d\u4ee5x\u4e3a\u6839\uff0c\u641c\u7d22\u6700\u8fdc\u7684\u70b9y\uff0c\u6700\u957f\u8def\u5f84\u5373x-y\u3002\u641c\u7d22\u8fc7\u7a0b\u4e2d\u8bb0\u5f55parent\u6570\u7ec4\uff0c\u5373\u53ef\u627e\u56de\u8fd9\u6761\u8def\u5f84\u7684\u4e2d\u70b9\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findMinHeightTrees(int n, vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n        // convert to G\n        vector&lt;vector&lt;int&gt;&gt; G(n, vector&lt;int&gt;());\n        for (auto&amp; e: edges) {\n            G[e[0]].push_back(e[1]);\n            G[e[1]].push_back(e[0]);\n        }\n        // bfs\n        vector&lt;int&gt; p(n); // parent\n        auto bfs = [&amp;] (int r) {\n            for (int i = 0; i &lt; n; i++) p[i] = -1; // -1 means not visited\n            queue&lt;pair&lt;int, int&gt;&gt; q;\n            q.emplace(r, 0);\n            p[r] = -2; // just a number to d from -1 and non-neg node id.\n            int mxd = 0;\n            int mxi = r;\n            while (!q.empty()) {\n                auto [x, d] = q.front(); q.pop();\n                if (d &gt; mxd) {\n                    mxd = d;\n                    mxi = x;\n                }\n                for (int y: G[x]) {\n                    if (p[y] == -1) {\n                        p[y] = x;\n                        q.emplace(y, d + 1);\n                    }\n                }\n            }\n            return mxi;\n        };\n        // find longest path\n        int x = bfs(0);\n        int y = bfs(x);\n        // retrieve middle node\n        vector&lt;int&gt; path;\n        while (y != -2) {\n            path.push_back(y);\n            y = p[y];\n        }\n        int l = path.size();\n        if (l % 2 == 0) return {path[l/2 - 1], path[l/2]};\n        else return {path[l/2]};\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E3%80%91%E5%8F%AF%E4%BF%AE%E6%94%B9k%E6%AC%A1%E7%9A%84%E6%9C%80%E9%95%BF%E5%90%8C%E5%AD%97%E7%AC%A6%E5%AD%90%E4%B8%B2/","title":"\u3010\u6ed1\u52a8\u7a97\u53e3\u3011\u53ef\u4fee\u6539k\u6b21\u7684\u6700\u957f\u540c\u5b57\u7b26\u5b50\u4e32","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E3%80%91%E5%8F%AF%E4%BF%AE%E6%94%B9k%E6%AC%A1%E7%9A%84%E6%9C%80%E9%95%BF%E5%90%8C%E5%AD%97%E7%AC%A6%E5%AD%90%E4%B8%B2/#_1","title":"\u8003\u8bd5\u7684\u6700\u5927\u56f0\u6270\u5ea6","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 answerKey \uff0c\u5176\u4e2d answerKey[i] \u662f\u7b2c i \u4e2a\u95ee\u9898\u7684\u6b63\u786e\u7ed3\u679c\u3002\u9664\u6b64\u4ee5\u5916\uff0c\u8fd8\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 k \uff0c\u8868\u793a\u4f60\u80fd\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6700\u591a\u6b21\u6570\uff1a</p> <p>\u6bcf\u6b21\u64cd\u4f5c\u4e2d\uff0c\u5c06\u95ee\u9898\u7684\u6b63\u786e\u7b54\u6848\u6539\u4e3a 'T' \u6216\u8005 'F' \uff08\u4e5f\u5c31\u662f\u5c06 answerKey[i] \u6539\u4e3a 'T' \u6216\u8005 'F' \uff09\u3002 \u8bf7\u4f60\u8fd4\u56de\u5728\u4e0d\u8d85\u8fc7 k \u6b21\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927 \u8fde\u7eed 'T' \u6216\u8005 'F' \u7684\u6570\u76ee\u3002</p> <p>\u8d2a\u5fc3\uff0c\u53ea\u9700\u8981\u63a7\u5236\u6ed1\u52a8\u7a97\u53e3\u5185\u7684\u76f8\u5f02\u5b57\u7b26\u6570\u91cf\u4e0d\u8d85\u8fc7k\u5373\u53ef\u3002</p> <pre><code>class Solution {\npublic:\n    int maxConsecutiveAnswers(string answerKey, int k) {\n        auto solve = [&amp;] (char c) {\n            int l = 0, r = 0, cnt = 0, ans = 0;\n            queue&lt;int&gt; pos;\n            while (r &lt; answerKey.size()) {\n                if (answerKey[r] != c) {\n                    pos.push(r);\n                    cnt++;\n                    if (cnt &gt; k) {\n                        l = pos.front() + 1;\n                        pos.pop();\n                        cnt--;\n                    }\n                }\n                ans = max(ans, r - l + 1);\n                r++;\n            }\n            return ans;\n        };\n        return max(solve('F'), solve('T'));\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%BB%91%E7%AA%97%E5%93%88%E5%B8%8C%E3%80%91%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/","title":"\u3010\u6ed1\u7a97\u54c8\u5e0c\u3011\u91cd\u590d\u5b50\u4e32","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E6%BB%91%E7%AA%97%E5%93%88%E5%B8%8C%E3%80%91%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/#repeated-substring","title":"repeated substring","text":"<p>\u6240\u6709 DNA \u90fd\u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a 'A'\uff0c'C'\uff0c'G' \u548c 'T' \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\"ACGAATTCCG\"\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002</p> <p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u627e\u51fa\u6240\u6709\u76ee\u6807\u5b50\u4e32\uff0c\u76ee\u6807\u5b50\u4e32\u7684\u957f\u5ea6\u4e3a 10\uff0c\u4e14\u5728 DNA \u5b57\u7b26\u4e32 s \u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u6b21\u3002 </p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%BB%91%E7%AA%97%E5%93%88%E5%B8%8C%E3%80%91%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/#_1","title":"\u6ed1\u52a8\u7a97\u53e3\u54c8\u5e0c","text":"<p>\\(O(NL)\\)\u65f6\u95f4&amp;\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>class Solution {\n    const int L = 10;\npublic:\n    vector&lt;string&gt; findRepeatedDnaSequences(string s) {\n        vector&lt;string&gt; ans;\n        unordered_map&lt;string, int&gt; cnt;\n        int n = s.length();\n        for (int i = 0; i &lt;= n - L; ++i) {\n            string sub = s.substr(i, L);\n            if (++cnt[sub] == 2) {\n                ans.push_back(sub);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%BB%91%E7%AA%97%E5%93%88%E5%B8%8C%E3%80%91%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/#_2","title":"\u4f4d\u8fd0\u7b97\u4f18\u5316","text":"<p>\u6ce8\u610f\u5230\u53ea\u6709\u56db\u4e2a\u5b57\u6bcd\uff0c\u56e0\u6b64\u53ef\u4ee5\u75282bit\u8868\u793a\u3002\u53c8\u6ce8\u610f\u5230\u56fa\u5b9a\u4e32\u957f\u4e3a10\uff0c\u6bcf\u4e2a\u5b50\u4e32\u53ef\u752820bit\u8868\u793a\uff0c\u5c0f\u4e8e\u4e00\u4e2aint\u7684\u957f\u5ea6\u3002\u56e0\u6b64\u53ef\u4ee5\u9884\u5904\u7406\u6bcf\u4e2a\u6ed1\u52a8\u7a97\u53e3\u4e3a\u4e00\u4e2aint\u3002</p> <p>\\(O(N)\\)\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>class Solution {\n    const int L = 10;\n    unordered_map&lt;char, int&gt; bin = {{'A', 0}, {'C', 1}, {'G', 2}, {'T', 3}};\npublic:\n    vector&lt;string&gt; findRepeatedDnaSequences(string s) {\n        vector&lt;string&gt; ans;\n        int n = s.length();\n        if (n &lt;= L) {\n            return ans;\n        }\n        int x = 0;\n        for (int i = 0; i &lt; L - 1; ++i) {\n            x = (x &lt;&lt; 2) | bin[s[i]];\n        }\n        unordered_map&lt;int, int&gt; cnt;\n        for (int i = 0; i &lt;= n - L; ++i) {\n            x = ((x &lt;&lt; 2) | bin[s[i + L - 1]]) &amp; ((1 &lt;&lt; (L * 2)) - 1);\n            if (++cnt[x] == 2) {\n                ans.push_back(s.substr(i, L));\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E6%BB%91%E7%AA%97%E5%93%88%E5%B8%8C%E3%80%91%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/#polynomial-rolling-hash","title":"Polynomial rolling Hash + \u524d\u7f00\u548c","text":"<p>polynomial rolling hash:</p> \\[ \\displaylines{ hash(s) = \\sum_{i = 0}^Ns[L-i-1]\\cdot P^i \\mod M } \\] <p>where:</p> <ul> <li>\\(L\\) is the length of \\(s\\).</li> </ul> <ul> <li>\\(P\\) is a prime roughly larger than number of distinct characters used.</li> <li>\\(M\\) is a large prime like \\(1e9+7\\).</li> </ul> <p>properties:</p> <ul> <li>since it is in the form of a prefix-sum, it is easy to calculate the hash of substrings.</li> </ul> \\[ \\displaylines{   hash(s[i:j+1]) = hash(s[:j]) - hash(s[:i-1])\\cdot P^{j-i+1} } \\] <p>implements:</p> <pre><code>// init\nconst static int P = 13; // a large prime, try-and-error\nh[0] = 0;\np[0] = 1;\n// calculate hash\nfor (int i = 1; i &lt;= s.size(); i++) {\n    h[i] = h[i-1] * P + s[i-1]\n    p[i] = p[i-1] * P;    \n}\n// query hash of s[i:j+1]\nint hash = h[j] - h[i-1] * p[j-i+1];\n</code></pre> <p>the answer (faster):</p> <pre><code>class Solution {\n    const static int P = 5;\n    const static int M = 1e9+7;\n    map&lt;char, int&gt; m{{'A', 0}, {'C', 1}, {'G', 2}, {'T', 3}};\npublic:\n    vector&lt;string&gt; findRepeatedDnaSequences(string s) {\n        vector&lt;string&gt; ans;\n        if (s.size() &lt;= 10) return ans;\n        vector&lt;long long&gt; h(s.size() + 1, 0);\n        vector&lt;long long&gt; p(s.size() + 1, 1);       \n        for (int i = 1; i &lt;= s.size(); i++) {\n            h[i] = ((h[i-1] * P) % M + m[s[i-1]]) % M;\n            p[i] = (p[i-1] * P) % M;\n        }\n        map&lt;long long, int&gt; cnt;\n        for (int i = 1; i &lt;= s.size() - 9; i++) {\n            int j = i + 9;\n            long long hash = h[j] - (h[i-1] * p[j-i+1]) % M;\n            if (++cnt[hash] == 2) {\n                ans.push_back(s.substr(i-1, 10));\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u7136\u800c\u5e76\u4e0d\u63a8\u8350\uff0cP\u8981\u8bd5\u8bd5\u624d\u77e5\u9053\u80fd\u4e0d\u80fd\u8fc7\uff1f7\u5c31\u8fc7\u4e0d\u4e86...\u611f\u89c9\u5f88\u968f\u673a\uff08</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E3%80%91%E6%9C%80%E5%A4%A7%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E4%B9%98%E7%A7%AF/","title":"\u3010\u72b6\u6001\u538b\u7f29\u3011\u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E3%80%91%E6%9C%80%E5%A4%A7%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E4%B9%98%E7%A7%AF/#max-product-of-word-lengths","title":"max product of  word lengths","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 words\uff0c\u627e\u5230 length(word[i]) * length(word[j]) \u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e0d\u542b\u6709\u516c\u5171\u5b57\u6bcd\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8fd4\u56de 0\u3002</p> <p>\u5e78\u597d\u53ea\u670926\u4e2a\u82f1\u6587\u5b57\u6bcd\uff08</p> <p>\u9700\u8981\u9ad8\u6548\u7387\u5224\u65ad\u6bcf\u4e24\u4e2a\u5355\u8bcd\u662f\u5426\u542b\u6709\u76f8\u540c\u5b57\u6bcd\uff0c\u5c31\u7528\u72b6\u6001\u538b\u7f29\u3002</p> <pre><code>class Solution {\npublic:\n    int maxProduct(vector&lt;string&gt;&amp; words) {\n        unordered_map&lt;int,int&gt; map;\n        int length = words.size();\n        for (int i = 0; i &lt; length; i++) {\n            int mask = 0;\n            string word = words[i];\n            int wordLength = word.size();\n            for (int j = 0; j &lt; wordLength; j++) {\n                mask |= 1 &lt;&lt; (word[j] - 'a');\n            }\n            if(map.count(mask)) {\n                if (wordLength &gt; map[mask]) {\n                    map[mask] = wordLength;\n                }\n            } else {\n                map[mask] = wordLength;\n            }\n\n        }\n        int maxProd = 0;\n        for (auto [mask1, _] : map) {\n            int wordLength1 = map[mask1];\n            for (auto [mask2, _] : map) {\n                if ((mask1 &amp; mask2) == 0) {\n                    int wordLength2 = map[mask2];\n                    maxProd = max(maxProd, wordLength1 * wordLength2);\n                }\n            }\n        }\n        return maxProd;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E8%AE%A1%E6%95%B0%E3%80%91%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%89%8D%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0/","title":"\u3010\u8ba1\u6570\u3011\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u524d\u4e24\u4e2a\u5143\u7d20","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E8%AE%A1%E6%95%B0%E3%80%91%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%89%8D%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0/#_1","title":"\u4f7f\u6570\u7ec4\u53d8\u6210\u4ea4\u66ff\u6570\u7ec4\u7684\u6700\u5c11\u64cd\u4f5c\u6570","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6570\u7ec4 nums \uff0c\u8be5\u6570\u7ec4\u7531 n \u4e2a\u6b63\u6574\u6570\u7ec4\u6210\u3002</p> <p>\u5982\u679c\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\uff0c\u5219\u6570\u7ec4 nums \u662f\u4e00\u4e2a \u4ea4\u66ff\u6570\u7ec4 \uff1a</p> <p>nums[i - 2] == nums[i] \uff0c\u5176\u4e2d 2 &lt;= i &lt;= n - 1 \u3002 nums[i - 1] != nums[i] \uff0c\u5176\u4e2d 1 &lt;= i &lt;= n - 1 \u3002 \u5728\u4e00\u6b65 \u64cd\u4f5c \u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e0b\u6807 i \u5e76\u5c06 nums[i] \u66f4\u6539 \u4e3a \u4efb\u4e00 \u6b63\u6574\u6570\u3002</p> <p>\u8fd4\u56de\u4f7f\u6570\u7ec4\u53d8\u6210\u4ea4\u66ff\u6570\u7ec4\u7684 \u6700\u5c11\u64cd\u4f5c\u6570 \u3002</p> <p>\u6838\u5fc3\u5728\u4e8e\u624b\u5199\u8ba1\u6570\u7edf\u8ba1\uff0c\u627e\u5230\u6570\u91cf\u6700\u591a\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u3002</p> <p>\u5728c++\u5408\u9002\u7684\u505a\u6cd5\u5c31\u662f\u9700\u8981\u5148map\u8ba1\u6570\u518d\u5b58\u5165vector&gt;\u6839\u636e\u6570\u91cf\u6392\u5e8f\uff08map\u672c\u8eab\u662f\u6839\u636ekey\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u6ca1\u6cd5\u76f4\u63a5\u7528\uff09\uff0c\u975e\u5e38\u7e41\u7410... <pre><code>class Solution {\npublic:\n    int minimumOperations(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        unordered_map&lt;int, int&gt; mp0, mp1;\n        for (int i = 0; i &lt; n; i++) {\n            if (i % 2 == 0) mp0[nums[i]]++;\n            else mp1[nums[i]]++;\n        }\n        vector&lt;pair&lt;int, int&gt;&gt; v0, v1;\n        for (auto &amp;[num, cnt] : mp0) v0.emplace_back(cnt, num);\n        for (auto &amp;[num, cnt] : mp1) v1.emplace_back(cnt, num);\n\n        v0.emplace_back(0, 0); /* \u5b58\u5165[0,0]\u4fdd\u8bc1\u6570\u7ec4\u6700\u5c11\u6709\u4e24\u4e2a\u5143\u7d20 */\n        v1.emplace_back(0, 0);\n\n        sort(v0.begin(), v0.end(), greater&lt;pair&lt;int, int&gt;&gt;());\n        sort(v1.begin(), v1.end(), greater&lt;pair&lt;int, int&gt;&gt;());\n\n        /* \u5224\u65ad\u6700\u5927\u6b21\u6570\u7684\u6570\u503c\u662f\u5426\u76f8\u7b49, \u5982\u679c\u4e0d\u76f8\u7b49, \u53d6\u4e24\u4e2a\u6700\u5927\u503c\u76f8\u52a0; \u5426\u5219\u53d6\u6700\u5927\u548c\u6b21\u5927\u76f8\u52a0 */\n        if (v0[0].second != v1[0].second) return n - v0[0].first - v1[0].first;\n        return n - max(v0[0].first + v1[1].first, v0[1].first + v1[0].first);\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E8%B4%AA%E5%BF%83%E3%80%91%E9%80%92%E5%A2%9E%E4%B8%89%E5%85%83%E7%BB%84/","title":"\u3010\u8d2a\u5fc3\u3011\u9012\u589e\u4e09\u5143\u7ec4","text":""},{"location":"algorithm/review/problem_series/%E3%80%90%E8%B4%AA%E5%BF%83%E3%80%91%E9%80%92%E5%A2%9E%E4%B8%89%E5%85%83%E7%BB%84/#_1","title":"\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5224\u65ad\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a 3 \u7684\u9012\u589e\u5b50\u5e8f\u5217\u3002</p> <p>\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u4e09\u5143\u7ec4\u4e0b\u6807 (i, j, k) \u4e14\u6ee1\u8db3 i &lt; j &lt; k \uff0c\u4f7f\u5f97 nums[i] &lt; nums[j] &lt; nums[k] \uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p>"},{"location":"algorithm/review/problem_series/%E3%80%90%E8%B4%AA%E5%BF%83%E3%80%91%E9%80%92%E5%A2%9E%E4%B8%89%E5%85%83%E7%BB%84/#_2","title":"\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u5b50\u95ee\u9898","text":"<p>\u53ea\u9700\u627e\u5230LIS\uff0c\u5728\u5224\u65ad\u662f\u5426\u957f\u4e8e3\u5373\u53ef\u3002</p> <p>\u52a8\u89c4\\(O(n^2)\\)\uff0c\u8d2a\u5fc3\\(O(n\\log n)\\)\u3002</p> <pre><code>class Solution {\npublic:\n    bool increasingTriplet(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; v;\n        for (int i = 0; i &lt; n; i++) {\n            int idx = lower_bound(v.begin(), v.end(), nums[i]) - v.begin();\n            if (idx == v.size()) v.push_back(nums[i]); \n            else v[idx] = nums[i];\n        }\n        return v.size() &gt;= 3;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E3%80%90%E8%B4%AA%E5%BF%83%E3%80%91%E9%80%92%E5%A2%9E%E4%B8%89%E5%85%83%E7%BB%84/#_3","title":"\u66f4\u7b80\u5355\u7684\u60f3\u6cd5","text":"<p>\u548c\u4e0a\u9762\u7684\u8d2a\u5fc3\u505a\u6cd5\u601d\u8def\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u53ea\u8bb0\u5f55\u7b2c\u4e00\u5c0f\u548c\u7b2c\u4e8c\u5c0f\u7684\u503c\uff0c\u8fd9\u6837\u4e00\u65e6\u51fa\u73b0\u66f4\u5927\u7684\u503c\uff0c\u5c31\u8bf4\u660e\u6709\u4e09\u5143\u7ec4\u4e86\u3002</p> <pre><code>class Solution {\npublic:\n    bool increasingTriplet(vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        if (len &lt; 3) return false;\n        int small = INT_MAX, mid = INT_MAX;\n        for (auto num : nums) {\n            if (num &lt;= small) small = num;\n            else if (num &lt;= mid) mid = num;\n            else if (num &gt; mid) return true;\n        }\n        return false;    \n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD%E4%B8%80%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0/","title":"\u4e0d\u542b\u8fde\u7eed\u4e00\u7684\u975e\u8d1f\u6574\u6570","text":""},{"location":"algorithm/review/problem_series/%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD%E4%B8%80%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0/#_1","title":"\u4e0d\u542b\u8fde\u7eed\u4e00\u7684\u975e\u8d1f\u6574\u6570","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u627e\u51fa\u5c0f\u4e8e\u6216\u7b49\u4e8e n \u7684\u975e\u8d1f\u6574\u6570\u4e2d\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e0d\u5305\u542b \u8fde\u7eed\u76841 \u7684\u4e2a\u6570\u3002</p> <p>\u5148\u8003\u8651\\(n=2^k\\)\uff0c\u5728\u6392\u96640\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7ed3\u679c\u5c31\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002</p> \\[ \\displaylines{ f(2^k) = f(2^{k-1}) + f(2^{k-2}) \\\\ f(1) = 1;f(2) = 2. } \\] <p>\u5728\u8003\u8651\u4efb\u610f\\(n\\)\uff0c\u4ece\u7b2c\u4e00\u4e2abit\u5f00\u59cb\u5faa\u73af\uff0c\u5982\u679c\u9047\u5230\u8fde\u7eed\u7684\u4e00\uff0c\u5219\u53ef\u4ee5\u7ec8\u6b62\u5faa\u73af\u3002</p> \\[ \\displaylines{ f(b1100100) = f(b1011111)=f(b1010101) \\\\ = f(b1000000) + f(b10000) + f(b100) + f(b1)\\\\ = f(b1000000) + f(b100000) - 1 } \\] <p>\uff08\u96be\u4e5f\u4e0d\u96be\uff0c\u4f46\u901a\u7528\u6027\u5f88\u5dee\uff0c\u8fd9\u4e24\u4e2a\u89c4\u5f8b\u90fd\u8981\u81ea\u5df1\u53d1\u73b0...\u5c31\u5f88\u6d6a\u8d39\u65f6\u95f4\uff09</p> <pre><code>class Solution {\npublic:\n    int findIntegers(int n) {\n        // fibonacci\n        vector&lt;int&gt; f, b;\n        f.push_back(1);\n        while (n) {\n            if (n &amp; 1) b.push_back(1);\n            else b.push_back(0);\n            if (f.size() &gt;= 2) f.push_back(f[f.size() - 1] + f[f.size() - 2]);\n            else f.push_back(1);\n            n /= 2;\n        }\n        bool flag = false;\n        int ans = 1; // 0 also counts\n        for (int i = b.size() - 1; i &gt;= 0; i--) {\n            if (b[i]) {\n                if (!flag) {\n                    flag = true;\n                    ans += f[i+1];\n                } else {\n                    ans += f[i+1] - 1; // self do not count, so -1.\n                    break;\n                }\n            } else {\n                flag = false;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%86%E5%B1%82/","title":"\u4e8c\u53c9\u6811\u5206\u5c42","text":""},{"location":"algorithm/review/problem_series/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%86%E5%B1%82/#_1","title":"\u5206\u5c42\u6253\u5370\u4e8c\u53c9\u6811","text":"<p>\u4e00\u4e2a\u4e0d\u7528\u663e\u793a\u8bb0\u5f55\u8282\u70b9\u5c42\u6570\uff0c\u6216\u8005\u7528\u4e24\u4e2a\u961f\u5217\u8f6e\u6362\u7684\u5c0f\u6280\u5de7\uff1a</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        vector&lt;int&gt; tmp;\n        if (root == NULL) return ans;\n        queue&lt;TreeNode*&gt; q;\n        q.push(root);\n        while (!q.empty()) {\n            // must fix the current queue size ! `for (;i&lt;q.size();)` is wrong.\n            int s = q.size();\n            for (int i = 0; i &lt; s; i++) {\n                TreeNode* p = q.front(); q.pop();\n                tmp.push_back(p-&gt;val);\n                if (p-&gt;left) q.push(p-&gt;left);\n                if (p-&gt;right) q.push(p-&gt;right);\n            }\n            ans.push_back(tmp);\n            tmp.clear();\n        }\n        return ans;        \n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E5%A4%8D%E5%88%B6%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8/","title":"\u590d\u5236\u590d\u6742\u94fe\u8868","text":""},{"location":"algorithm/review/problem_series/%E5%A4%8D%E5%88%B6%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8/#deep-copy-a-complicated-linked-list","title":"Deep Copy a complicated linked list","text":"<p>\u54c8\u5e0c\u8868+\u9012\u5f52\u5b9e\u73b0\u6700\u4e3a\u7b80\u6d01\uff0c\u53ef\u4ee5\u7edf\u4e00copy\u7684\u4e24\u79cd\u60c5\u51b5\u3002</p> <pre><code>/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n\n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    unordered_map&lt;Node*, Node*&gt; m;\n    Node* copyRandomList(Node* head) {\n        if (head == nullptr) return nullptr;\n        if (m.count(head)) return m[head];\n        else {\n            Node* tmp = new Node(head-&gt;val);\n            m[head] = tmp;\n            tmp-&gt;next = copyRandomList(head-&gt;next);\n            tmp-&gt;random = copyRandomList(head-&gt;random);\n            return tmp;\n        }\n    }\n};\n</code></pre> <p>\u904d\u5386\u4e24\u8fb9\u4e0d\u592a\u806a\u660e\u7684\u6837\u5b50\uff1a</p> <pre><code>class Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if (head == NULL) return NULL;\n        Node *head2 = new Node(head-&gt;val);\n        Node *cur = head, *cur2 = head2;\n        // first round\n        map&lt;Node*, Node*&gt; m;\n        m[NULL] = NULL;\n        m[cur] = cur2;\n        while (cur-&gt;next) {\n            cur = cur-&gt;next;\n            Node *tmp = new Node(cur-&gt;val);\n            cur2-&gt;next = tmp;\n            cur2 = tmp;\n            m[cur] = cur2;\n        }\n        // second round\n        cur = head; cur2 = head2;\n        cur2-&gt;random = m[cur-&gt;random];\n        while (cur-&gt;next) {\n            cur = cur-&gt;next;\n            cur2 = cur2-&gt;next;\n            cur2-&gt;random = m[cur-&gt;random];\n        }\n        return head2;\n    }\n};\n</code></pre> <p>\u8111\u5185\u5b87\u5b99\u5927\u7206\u70b8\u7684\u7a7a\u95f4\u4f18\u5316\u505a\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if (head == nullptr) {\n            return nullptr;\n        }\n        for (Node* node = head; node != nullptr; node = node-&gt;next-&gt;next) {\n            Node* nodeNew = new Node(node-&gt;val);\n            nodeNew-&gt;next = node-&gt;next;\n            node-&gt;next = nodeNew;\n        }\n        for (Node* node = head; node != nullptr; node = node-&gt;next-&gt;next) {\n            Node* nodeNew = node-&gt;next;\n            nodeNew-&gt;random = (node-&gt;random != nullptr) ? node-&gt;random-&gt;next : nullptr;\n        }\n        Node* headNew = head-&gt;next;\n        for (Node* node = head; node != nullptr; node = node-&gt;next) {\n            Node* nodeNew = node-&gt;next;\n            node-&gt;next = node-&gt;next-&gt;next;\n            nodeNew-&gt;next = (nodeNew-&gt;next != nullptr) ? nodeNew-&gt;next-&gt;next : nullptr;\n        }\n        return headNew;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/","title":"\u591a\u6570\u5143\u7d20","text":""},{"location":"algorithm/review/problem_series/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/#_1","title":"\u591a\u6570\u5143\u7d20","text":"<p>\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u591a\u6570\u5143\u7d20\u3002</p> <p>\u7ecf\u5178\u6808\u9b54\u6cd5\u3002</p> <pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        stack&lt;int&gt; s;\n        for (int x: nums) {\n            if (s.empty() || s.top() == x) s.push(x);\n            else s.pop();\n        }\n        return s.top();\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/","title":"\u6469\u5c14\u6295\u7968","text":""},{"location":"algorithm/review/problem_series/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/#_1","title":"\u6469\u5c14\u6295\u7968","text":"<p>\u5bfb\u627e\u6570\u7ec4\u4e2d\u7684\u591a\u6570\u5143\u7d20\u7684\\(O(1)\\)\u7a7a\u95f4\u590d\u6742\u5ea6\u505a\u6cd5\u3002\u6838\u5fc3\u601d\u60f3\u4e3a\u4e0d\u540c\u5143\u7d20\u4e92\u76f8\u62b5\u6d88\u3002</p> <p>\u5f53\u7136\u73b0\u5728\u5b58\u50a8\u7a7a\u95f4\u5f80\u5f80\u4e0d\u662f\u5e73\u9759\uff0cHash\u7b97\u6cd5\u7684\u65f6\u95f4\u5e38\u6570\u66f4\u4f4e\u3002</p>"},{"location":"algorithm/review/problem_series/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/#12","title":"\u5bfb\u627e\u6570\u7ec4\u4e2d\u51fa\u73b0\u6982\u7387\u8d85\u8fc71/2\u7684\u6570","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        int candi = nums[0];\n        int cnt = 0;\n        for (int num: nums) {\n            if (candi == num) cnt++;\n            else if (cnt == 0) candi = num, cnt++;\n            else cnt--;\n        }\n        // problem asserts there always exist a majority number.\n        return candi;\n        // else we need to check by re-counting:\n        // cnt = 0;\n        // int th = nums.size() / 2;\n        // for(int num: nums) if (candi == num) cnt++;\n        // return cnt &gt; th ? candi : -1;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/#13","title":"\u5bfb\u627e\u6570\u7ec4\u4e2d\u51fa\u73b0\u6982\u7387\u8d85\u8fc71/3\u7684\u6570","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; majorityElement(vector&lt;int&gt;&amp; nums) {\n        int cnt1 = 0, cnt2 = 0;\n        int candi1 = nums[0], candi2 = nums[0];\n        for (int num: nums) {\n            if (candi1 == num) cnt1++;\n            else if (candi2 == num) cnt2++;\n            else if (cnt1 == 0) candi1 = num, cnt1++;\n            else if (cnt2 == 0) candi2 = num, cnt2++;\n            else cnt1--, cnt2--;\n        }\n        int th = nums.size() / 3;\n        vector&lt;int&gt; ans;\n        // recounting\n        cnt1 = cnt2 = 0;\n        for (int num: nums) {\n            if (num == candi1) cnt1++;\n            else if (num == candi2) cnt2++;\n        }\n        if (cnt1 &gt; th) ans.push_back(candi1);\n        if (cnt2 &gt; th) ans.push_back(candi2);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E6%A0%91%E4%B8%8A%E5%89%8D%E7%BC%80%E5%92%8C/","title":"\u6811\u4e0a\u524d\u7f00\u548c","text":""},{"location":"algorithm/review/problem_series/%E6%A0%91%E4%B8%8A%E5%89%8D%E7%BC%80%E5%92%8C/#prefix-sum-in-a-tree","title":"Prefix sum in a tree","text":"<p>\u7528\u5b57\u5178\u6765\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u524d\u7f00\u548c\u4eec\u3002</p> <pre><code>class Solution {\npublic:\n    int pathSum(TreeNode* root, int targetSum) {\n        // dfs\n        int ans = 0;\n        unordered_map&lt;int, int&gt; m;\n        m[0] = 1;\n\n        function&lt;void(TreeNode*, int)&gt; find = [&amp;](TreeNode* r, int s) {\n            if (r == nullptr) return;\n            int ss = s + r-&gt;val;\n            ans += m[ss - targetSum];\n            m[ss]++;\n            find(r-&gt;left, ss);\n            find(r-&gt;right, ss);\n            m[ss]--;\n        };\n\n        find(root, 0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B7%BB%E5%8A%A0%E8%BF%90%E7%AE%97%E7%AC%A6/","title":"\u8868\u8fbe\u5f0f\u6dfb\u52a0\u8fd0\u7b97\u7b26","text":""},{"location":"algorithm/review/problem_series/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B7%BB%E5%8A%A0%E8%BF%90%E7%AE%97%E7%AC%A6/#_1","title":"\u8868\u8fbe\u5f0f\u6dfb\u52a0\u8fd0\u7b97\u7b26","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 0-9 \u7684\u5b57\u7b26\u4e32 num \u548c\u4e00\u4e2a\u76ee\u6807\u503c\u6574\u6570 target \uff0c\u5728 num \u7684\u6570\u5b57\u4e4b\u95f4\u6dfb\u52a0 \u4e8c\u5143 \u8fd0\u7b97\u7b26\uff08\u4e0d\u662f\u4e00\u5143\uff09+\u3001- \u6216 * \uff0c\u8fd4\u56de\u6240\u6709\u80fd\u591f\u5f97\u5230\u76ee\u6807\u503c\u7684\u8868\u8fbe\u5f0f\u3002 </p> <p>DFS\u5e94\u7528\uff1a</p> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; addOperators(string num, int target) {\n        if (num.empty()) return result;\n        for (int i = 0; i &lt; num.size(); i++) num_after.emplace_back(stoll(num.substr(i)));\n        exp.resize(num.size() * 2);\n        dfs(num, target, 0, 0, 0, 1);\n        return result;\n    }\nprivate:\n    string exp;\n    vector&lt;string&gt; result;\n    vector&lt;long long&gt; num_after;\n\n    int dfs(string&amp; num, long long target, int exp_p, int pos, long long now, long long last) {\n        now = now * 10 + num[pos] - '0';\n        exp[exp_p++] = num[pos];\n        long long cur_val = now * last;\n        if (pos == num.size() - 1) {\n            if (target == cur_val) result.emplace_back(exp.substr(0, exp_p));\n            return 0;\n        }\n        exp[exp_p] = '*';\n        dfs(num, target, exp_p + 1, pos + 1, 0, cur_val);\n        if (num_after[pos + 1] &gt;= abs(target - cur_val)) {\n            exp[exp_p] = '+';\n            dfs(num, target - cur_val, exp_p + 1, pos + 1, 0, 1);\n            exp[exp_p] = '-';\n            dfs(num, target - cur_val, exp_p + 1, pos + 1, 0, -1);\n        }\n        if (now) dfs(num, target, exp_p, pos + 1, now, last);\n        return 0;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E9%87%8D%E6%8E%92%E4%B8%BA2%E7%9A%84%E5%B9%82/","title":"\u91cd\u6392\u4e3a2\u7684\u5e42","text":""},{"location":"algorithm/review/problem_series/%E9%87%8D%E6%8E%92%E4%B8%BA2%E7%9A%84%E5%B9%82/#reordered-power-of-2","title":"reordered power of 2","text":""},{"location":"algorithm/review/problem_series/%E9%87%8D%E6%8E%92%E4%B8%BA2%E7%9A%84%E5%B9%82/#_1","title":"\u8bcd\u9891\u7edf\u8ba1","text":"<p>\u7edf\u8ba1\u5341\u8fdb\u5236\u4e0b\u6bcf\u4e2a\u6570\u5b57\uff0c\u5224\u65ad\u662f\u5426\u4e0e\u67d0\u4e002\u7684\u5e42\u6b21\u4e00\u6837\u5373\u53ef\u3002</p> <pre><code>class Solution {\npublic:\n    bool check(vector&lt;int&gt; &amp;num, long n) {\n        vector&lt;int&gt; v(10);\n        while(n &gt; 0) {\n            v[n % 10]++;\n            n /= 10;\n        }\n        for(int i = 0; i &lt; 10; i++) {\n            if(v[i] != num[i]) return false;\n        }\n        return true;\n    }\n\n    bool reorderedPowerOf2(int n) {\n        vector&lt;int&gt; num(10);\n        while(n &gt; 0) {\n            num[n % 10]++;\n            n /= 10;\n        }\n        for(int i = 0; i &lt; 30; i++) {\n            if(check(num, (1l &lt;&lt; i))) return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"algorithm/review/problem_series/%E9%87%8D%E6%8E%92%E4%B8%BA2%E7%9A%84%E5%B9%82/#_2","title":"\u6392\u5217\u7ec4\u5408","text":"<p>\u6309\u7167\u9898\u610f\u5bf9\u6240\u6709\u6392\u5217\u4f9d\u6b21\u68c0\u67e5\u3002</p> <ul> <li>c++\u98ce\u683c\u7684\u6392\u5217\uff1aremain\u6570\u7ec4\u4e0d\u8981\u7528<code>substr</code>\u7b49\uff0c\u53ef\u4ee5\u7528<code>vis</code>\u6570\u7ec4\u3002</li> <li>\u662f\u5426\u4e3a\u4e8c\u7684\u5e42\u6b21\uff0c\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u53ea\u6709\u4e00\u4e2a1\uff1a<code>(n &amp; (n-1)) == 0</code></li> </ul> <pre><code>class Solution {\npublic:\n    bool check(int n) {\n        return (n &amp; (n - 1)) == 0;\n    }\n\n    bool reorderedPowerOf2(int n) {\n        string s = to_string(n);\n        vector&lt;int&gt; v(s.size(), 0);\n        bool flag = false;\n        function&lt;void(int, int)&gt; perm = [&amp;](int i, int x){\n            if (flag) return;\n            else if (i == s.size()) {\n                flag = check(x);\n            } else {\n                for (int j = 0; j &lt; s.size(); j++) {\n                    if (v[j] == 0) {\n                        if (x == 0 &amp;&amp; s[j] == '0') continue;\n                        v[j] = 1;\n                        perm(i + 1, x * 10 + s[j] - '0');\n                        v[j] = 0;\n                    }\n                }\n            }\n        };\n        perm(0, 0);\n        return flag;\n    }\n};\n</code></pre>"},{"location":"blender/blender_script/","title":"blender script","text":""},{"location":"blender/blender_script/#install-blender-on-ubuntu","title":"Install blender on ubuntu","text":""},{"location":"blender/blender_script/#install-blender","title":"Install blender","text":"<pre><code>sudo snap install blender --classic\n</code></pre> <p>This will install the blender binary and all environments.</p>"},{"location":"blender/blender_script/#install-blender-as-python-modules","title":"Install blender as python modules","text":"<pre><code>pip install bpy mathutils\n</code></pre> <p>This allow you to directly run blender scripts with python.</p> <p>To enable GPU, go <code>Edit --&gt; Preferences --&gt; System --&gt; Cycles Engine --&gt; Choose CUDA or Optix</code>.</p> <p>logs are printed to the terminal console, use <code>window --&gt; toggle system console</code> to open it.</p>"},{"location":"blender/blender_script/#auto-import-many-objects","title":"auto import many objects","text":"<p>assume you have a folder with lots of obj models (each in a sub-folder):</p> <pre><code>import bpy\nimport os\n\ncontext = bpy.context\ndir = r\"C:\\Users\\hawke\\Downloads\\bear\"\n\nobj_dirs = os.listdir(dir)\n\nfor i, name in enumerate(obj_dirs):\n    obj_dir = os.path.join(dir, name)\n    files = os.listdir(obj_dir)\n    for file in files:\n        if not file.endswith('.obj'): continue\n        path = os.path.join(obj_dir, file)\n\n        print(f'[INFO] {i} process {file}')\n\n        bpy.ops.import_scene.obj(filepath=path, filter_glob=\"*.obj;*.mtl;*.png\") # also load png textures\n        obj = context.selected_objects[0]\n\n        # location (10 in a row)\n        h, w = i % 10 - 5, i // 10 - 5\n        obj.location = (h, w, 0)\n</code></pre>"},{"location":"blender/blender_script/#locate-objects-in-current-scene","title":"locate objects in current scene","text":"<pre><code>import bpy\n\n# all objects \nbpy.data.objects\n\n# access by index\nbpy.data.objects[0]\n\n# access by name\nbpy.data.objects['Light']\n\n# modify property\nbpy.data.objects['Light'].location = (0, 0, 0)\n</code></pre>"},{"location":"blender/blender_script/#complete-render-script","title":"Complete render script","text":"<pre><code>import os\nimport sys\nimport tqdm\nimport math\nimport argparse\nimport numpy as np\n\nfrom contextlib import contextmanager\n\n@contextmanager\ndef stdout_redirected(to=os.devnull):\n    '''\n    import os\n\n    with stdout_redirected(to=filename):\n        print(\"from Python\")\n        os.system(\"echo non-Python applications are also supported\")\n    '''\n    fd = sys.stdout.fileno()\n\n    ##### assert that Python and C stdio write using the same file descriptor\n    ####assert libc.fileno(ctypes.c_void_p.in_dll(libc, \"stdout\")) == fd == 1\n\n    def _redirect_stdout(to):\n        sys.stdout.close() # + implicit flush()\n        os.dup2(to.fileno(), fd) # fd writes to 'to' file\n        sys.stdout = os.fdopen(fd, 'w') # Python writes to fd\n\n    with os.fdopen(os.dup(fd), 'w') as old_stdout:\n        with open(to, 'w') as file:\n            _redirect_stdout(to=file)\n        try:\n            yield # allow code to be run with the redirected stdout\n        finally:\n            _redirect_stdout(to=old_stdout) # restore stdout.\n                                            # buffering and flags such as\n                                            # CLOEXEC may be different\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--mesh\", type=str, required=True)\nparser.add_argument(\"--outdir\", type=str, required=True)\nparser.add_argument(\"--camera_type\", type=str, default='fixed')\nparser.add_argument(\"--engine\", type=str, default='CYCLES', choices=['BLENDER_EEVEE', 'CYCLES'])\nparser.add_argument(\"--gpu\", type=int, default=0)\nparser.add_argument(\"--resolution\", type=int, default=256)\nparser.add_argument(\"--num_images\", type=int, default=16)\n\nparser.add_argument(\"--radius\", type=float, default=2.0)\nparser.add_argument(\"--fovy\", type=float, default=49.1)\nparser.add_argument(\"--bound\", type=float, default=0.8)\n\nparser.add_argument(\"--elevation\", type=float, default=0) # +z to -z: -90 to 90\nparser.add_argument(\"--elevation_start\", type=float, default=-40)\nparser.add_argument(\"--elevation_end\", type=float, default=10)\n\n# argv = sys.argv[sys.argv.index(\"--\") + 1 :]\nargs = parser.parse_args()\n\n# start blender env \nimport bpy\nfrom mathutils import Vector, Matrix\n\n# render parameters\nbpy.context.scene.render.engine = args.engine\n\nbpy.context.scene.render.resolution_x = args.resolution\nbpy.context.scene.render.resolution_y = args.resolution\nbpy.context.scene.render.resolution_percentage = 100\n\nbpy.context.scene.render.film_transparent = True\nbpy.context.scene.render.image_settings.file_format = \"PNG\"\nbpy.context.scene.render.image_settings.color_mode = \"RGBA\"\n\n# use nodes system\nbpy.context.scene.use_nodes = True\nnodes = bpy.context.scene.node_tree.nodes\nlinks = bpy.context.scene.node_tree.links\nfor n in nodes:\n    nodes.remove(n)\nrender_layers = nodes.new(\"CompositorNodeRLayers\")\n\n# depth\n# bpy.context.view_layer.use_pass_z = True\n# depth_file_output = nodes.new(type=\"CompositorNodeOutputFile\")\n# depth_file_output.label = \"Depth Output\"\n# depth_file_output.base_path = \"\"\n# depth_file_output.file_slots[0].use_node_format = True\n# depth_file_output.format.file_format = \"OPEN_EXR\"\n# depth_file_output.format.color_depth = \"16\"\n# links.new(render_layers.outputs[\"Depth\"], depth_file_output.inputs[0])\n\n# normal \nbpy.context.view_layer.use_pass_normal = True\nscale_node = nodes.new(type=\"CompositorNodeMixRGB\")\nscale_node.blend_type = \"MULTIPLY\"\nscale_node.inputs[2].default_value = (0.5, 0.5, 0.5, 1)\nlinks.new(render_layers.outputs[\"Normal\"], scale_node.inputs[1])\nbias_node = nodes.new(type=\"CompositorNodeMixRGB\")\nbias_node.blend_type = \"ADD\"\nbias_node.inputs[2].default_value = (0.5, 0.5, 0.5, 0)\nlinks.new(scale_node.outputs[0], bias_node.inputs[1])\n\nnormal_file_output = nodes.new(type=\"CompositorNodeOutputFile\")\nnormal_file_output.label = \"Normal Output\"\nnormal_file_output.base_path = \"\"\nnormal_file_output.file_slots[0].use_node_format = True\nnormal_file_output.format.file_format = \"PNG\"\nnormal_file_output.format.color_mode = \"RGBA\"\nlinks.new(bias_node.outputs[0], normal_file_output.inputs[0])\n\n# albedo\nbpy.context.view_layer.use_pass_diffuse_color = True\nalpha_albedo = nodes.new(type=\"CompositorNodeSetAlpha\")\nlinks.new(render_layers.outputs[\"DiffCol\"], alpha_albedo.inputs[\"Image\"])\nlinks.new(render_layers.outputs[\"Alpha\"], alpha_albedo.inputs[\"Alpha\"])\n\nalbedo_file_output = nodes.new(type=\"CompositorNodeOutputFile\")\nalbedo_file_output.label = \"Albedo Output\"\nalbedo_file_output.base_path = \"\"\nalbedo_file_output.file_slots[0].use_node_format = True\nalbedo_file_output.format.file_format = \"PNG\"\nalbedo_file_output.format.color_mode = \"RGBA\"\nlinks.new(alpha_albedo.outputs[\"Image\"], albedo_file_output.inputs[0])\n\n# NOTE: shamely, blender cannot render metallic and roughness as image...\n\n# EEVEE will use OpenGL, CYCLES will use GPU + CUDA\nif bpy.context.scene.render.engine == 'CYCLES':\n    bpy.context.scene.cycles.device = \"GPU\"\n    bpy.context.scene.cycles.samples = 64 # 128\n    bpy.context.scene.cycles.diffuse_bounces = 1\n    bpy.context.scene.cycles.glossy_bounces = 1\n    bpy.context.scene.cycles.transparent_max_bounces = 3\n    bpy.context.scene.cycles.transmission_bounces = 3\n    bpy.context.scene.cycles.filter_width = 0.01\n    bpy.context.scene.cycles.use_denoising = True\n    bpy.context.scene.cycles.tile_size = 8192\n\n    bpy.context.preferences.addons[\"cycles\"].preferences.get_devices()\n\n    # set which GPU to use\n    for i, device in enumerate(bpy.context.preferences.addons[\"cycles\"].preferences.devices):\n        if i == args.gpu:\n            device.use = True\n            print(f'[INFO] using device {i}: {device}')\n        else:\n            device.use = False\n\n\n    bpy.context.preferences.addons[\"cycles\"].preferences.compute_device_type = \"CUDA\" # or \"OPENCL\"\n\n# set camera\ncam = bpy.context.scene.objects[\"Camera\"]\ncam.data.angle = np.deg2rad(args.fovy)\n\n# make orbit camera\ncam_constraint = cam.constraints.new(type=\"TRACK_TO\")\ncam_constraint.track_axis = \"TRACK_NEGATIVE_Z\"\ncam_constraint.up_axis = \"UP_Y\"\n\n\ndef get_calibration_matrix_K_from_blender(camera):\n    f_in_mm = camera.data.lens\n    resolution_x_in_px = bpy.context.scene.render.resolution_x\n    resolution_y_in_px = bpy.context.scene.render.resolution_y\n    scale = bpy.context.scene.render.resolution_percentage / 100\n    sensor_width_in_mm = camera.data.sensor_width\n    sensor_height_in_mm = camera.data.sensor_height\n    pixel_aspect_ratio = bpy.context.scene.render.pixel_aspect_x / bpy.context.scene.render.pixel_aspect_y\n\n    if camera.data.sensor_fit == 'VERTICAL':\n        # the sensor height is fixed (sensor fit is horizontal),\n        # the sensor width is effectively changed with the pixel aspect ratio\n        s_u = resolution_x_in_px * scale / sensor_width_in_mm / pixel_aspect_ratio\n        s_v = resolution_y_in_px * scale / sensor_height_in_mm\n    else:  # 'HORIZONTAL' and 'AUTO'\n        # the sensor width is fixed (sensor fit is horizontal),\n        # the sensor height is effectively changed with the pixel aspect ratio\n        s_u = resolution_x_in_px * scale / sensor_width_in_mm\n        s_v = resolution_y_in_px * scale * pixel_aspect_ratio / sensor_height_in_mm\n\n    # Parameters of intrinsic calibration matrix K\n    alpha_u = f_in_mm * s_u\n    alpha_v = f_in_mm * s_u\n    u_0 = resolution_x_in_px * scale / 2\n    v_0 = resolution_y_in_px * scale / 2\n    skew = 0  # only use rectangular pixels\n\n    K = np.asarray(((alpha_u, skew, u_0),\n                    (0, alpha_v, v_0),\n                    (0, 0, 1)),np.float32)\n    return K\n\n\ndef reset_scene():\n    \"\"\"Resets the scene to a clean state.\"\"\"\n    # delete everything that isn't part of a camera or a light\n    for obj in bpy.data.objects:\n        if obj.type not in {\"CAMERA\", \"LIGHT\"}:\n            bpy.data.objects.remove(obj, do_unlink=True)\n    # delete all the materials\n    for material in bpy.data.materials:\n        bpy.data.materials.remove(material, do_unlink=True)\n    # delete all the textures\n    for texture in bpy.data.textures:\n        bpy.data.textures.remove(texture, do_unlink=True)\n    # delete all the images\n    for image in bpy.data.images:\n        bpy.data.images.remove(image, do_unlink=True)\n\n\n# load the glb model\ndef load_object(mesh):\n    \"\"\"Loads a glb model into the scene.\"\"\"\n    if mesh.endswith(\".glb\"):\n        bpy.ops.import_scene.gltf(filepath=mesh, merge_vertices=True)\n    elif mesh.endswith(\".fbx\"):\n        bpy.ops.import_scene.fbx(filepath=mesh)\n    else:\n        raise ValueError(f\"Unsupported file type: {mesh}\")\n\n\ndef get_scene_meshes():\n    for obj in bpy.context.scene.objects.values():\n        if isinstance(obj.data, (bpy.types.Mesh)):\n            yield obj\n\ndef get_scene_bbox(single_obj=None, ignore_matrix=False):\n    bbox_min = (math.inf,) * 3\n    bbox_max = (-math.inf,) * 3\n    found = False\n    for obj in get_scene_meshes() if single_obj is None else [single_obj]:\n        found = True\n        for coord in obj.bound_box:\n            coord = Vector(coord)\n            if not ignore_matrix:\n                coord = obj.matrix_world @ coord\n            bbox_min = tuple(min(x, y) for x, y in zip(bbox_min, coord))\n            bbox_max = tuple(max(x, y) for x, y in zip(bbox_max, coord))\n    if not found:\n        raise RuntimeError(\"no objects in scene to compute bounding box for\")\n    return Vector(bbox_min), Vector(bbox_max)\n\ndef get_scene_root_objects():\n    for obj in bpy.context.scene.objects.values():\n        if not obj.parent:\n            yield obj\n\ndef normalize_scene(bound=0.9):\n    # bound: normalize to [-bound, bound]\n\n    bbox_min, bbox_max = get_scene_bbox()\n    scale = 2 * bound / max(bbox_max - bbox_min)\n    for obj in get_scene_root_objects():\n        obj.scale = obj.scale * scale\n    # Apply scale to matrix_world.\n    bpy.context.view_layer.update()\n    bbox_min, bbox_max = get_scene_bbox()\n    offset = - (bbox_min + bbox_max) / 2\n    for obj in get_scene_root_objects():\n        obj.matrix_world.translation += offset\n    bpy.ops.object.select_all(action=\"DESELECT\")\n\n\ndef save_images(object_file: str) -&gt; None:\n\n    object_uid = os.path.basename(object_file).split(\".\")[0]\n    os.makedirs(os.path.join(args.outdir, object_uid), exist_ok=True)\n\n    # clean scene\n    reset_scene()\n    # load the object\n    load_object(object_file)\n    # normalize objects to [-b, b]^3\n    normalize_scene(bound=args.bound)\n\n    # create orbit camera target\n    empty = bpy.data.objects.new(\"Empty\", None)\n    bpy.context.scene.collection.objects.link(empty)\n    cam_constraint.target = empty\n\n    # place cameras\n    if args.camera_type == 'fixed':\n        azimuths = (np.arange(args.num_images)/args.num_images*np.pi*2).astype(np.float32)\n        elevations = np.deg2rad(np.asarray([args.elevation] * args.num_images).astype(np.float32))\n    elif args.camera_type == 'random':\n        azimuths = (np.arange(args.num_images) / args.num_images * np.pi * 2).astype(np.float32)\n        elevations = np.random.uniform(args.elevation_start, args.elevation_end, args.num_images)\n        elevations = np.deg2rad(elevations)\n    else:\n        raise NotImplementedError\n\n    # get camera positions in blender coordinates\n    # NOTE: assume +x axis is the object front view (azimuth = 0) \n    x = args.radius * np.cos(azimuths) * np.cos(elevations)\n    y = args.radius * np.sin(azimuths) * np.cos(elevations)\n    z = - args.radius * np.sin(elevations)\n    cam_pos = np.stack([x,y,z], axis=-1)\n\n    cam_poses = []\n\n    for i in tqdm.trange(args.num_images):\n        # set camera\n        cam.location = cam_pos[i]\n        bpy.context.view_layer.update()\n\n        # pose matrix (c2w)\n        c2w = np.eye(4)\n        t, R = cam.matrix_world.decompose()[0:2]\n        c2w[:3, :3] = np.asarray(R.to_matrix()) # [3, 3]\n        c2w[:3, 3] = np.asarray(t)\n\n        # blender to opengl\n        c2w_opengl = c2w.copy()\n        c2w_opengl[1] *= -1\n        c2w_opengl[[1, 2]] = c2w_opengl[[2, 1]]\n\n        cam_poses.append(c2w_opengl)\n\n        # render image\n        render_file_path = os.path.join(args.outdir, object_uid, f\"{i:03d}\")\n        bpy.context.scene.render.filepath = render_file_path\n        # depth_file_output.file_slots[0].path = render_file_path + \"_depth\"\n        normal_file_output.file_slots[0].path = render_file_path + \"_normal\"\n        albedo_file_output.file_slots[0].path = render_file_path + \"_albedo\"\n\n        # if os.path.exists(render_file_path): \n        #     continue\n\n        with stdout_redirected(): # suppress rendering logs\n            bpy.ops.render.render(write_still=True)\n\n    # write camera\n    K = get_calibration_matrix_K_from_blender(cam)\n    cam_poses = np.stack(cam_poses, 0)\n    np.savez(os.path.join(args.outdir, object_uid, 'cameras.npz'), K=K, poses=cam_poses)\n\nif __name__ == \"__main__\":\n    save_images(args.mesh)\n</code></pre>"},{"location":"blender/blender_tutorial/","title":"blender tutorial","text":""},{"location":"blender/blender_tutorial/#pure-white-background","title":"Pure white background","text":"<p>First set transparent rendering:</p> <p></p> <p>Then Change color view transform to standard (the same tab, just below <code>Film</code>):</p> <p></p> <p>Then open compositing window, and set use nodes, then add an \"alpha over\" layer like this:</p> <p></p>"},{"location":"blender/blender_tutorial/#add-on","title":"Add-on","text":"<p><code>Edit --&gt; Preferences --&gt; Add-ons</code> Download the released zip file, and choose it from <code>install...</code> to install. (seems you need to manually enable add-ons every time when you start blender?)</p>"},{"location":"blender/blender_tutorial/#obj-sequence-animation-stop-motion-obj","title":"obj sequence animation (Stop-motion-OBJ)","text":"<p>To animate a sequence of obj files. After enabling the add-on, choose <code>file --&gt; import --&gt; mesh sequence</code>. The files need to be organized as: <pre><code>name_000.obj\nname_001.obj\nname_002.obj\n</code></pre> in the same folder, and a name keyword is necessary.</p>"},{"location":"blender/blender_tutorial/#rigging-and-deforming","title":"Rigging and deforming","text":"<ul> <li>load your ready-to-rig humanoid model.</li> </ul> <ul> <li> <p>Add (Shift-A) --&gt; Armature --&gt; Single Bone</p> <ul> <li>Change to wireframe mode for easy visualization of bone-model position.</li> <li>you may change the visibility to \"always in front\" so you can click your bone easily.</li> </ul> <p></p> </li> </ul> <ul> <li>Adjust the bone's size, rotation, make it as the main spine of your model.</li> </ul> <ul> <li> <p>Go to edit mode:</p> <p></p> </li> </ul> <ul> <li> <p>click on the rotation ball, use E = extrude to create other connected bones:</p> <p></p> </li> </ul> <ul> <li> <p>After creating all bones, go to object mode, first click model, then shift-click bone, then Ctrl + P, choose automatic weights:</p> <p></p> </li> </ul> <ul> <li>Then go to pose mode, and you can move your bones to visualize the deformed poses!</li> </ul>"},{"location":"blender/blender_tutorial/#how-to-render-transparent-background","title":"How to render transparent background","text":""},{"location":"blender/blender_tutorial/#how-to-rotate-cameralight-by-parenting","title":"How to rotate camera/light by parenting","text":"<ul> <li>Add (<code>Shift + A</code>) a new empty object (plain axis), set its location to (0, 0, 0).</li> <li>In 3D viewport, first select camera/light (child), then select the empty object (parent).</li> <li><code>Ctrl + P</code>, set parent to object.</li> <li>You could see in Outlier, the camera/light now belongs to the empty object.</li> <li>Rotate the empty object, and the child will rotate too!</li> </ul>"},{"location":"blender/blender_tutorial/#animation-interpolation","title":"animation interpolation","text":"<p>default is some smoothing bezier curve.</p> <p>In Animation pannel, choose <code>channel --&gt; extrapolation mode --&gt; linear extrapolation</code>.</p>"},{"location":"blender/blender_tutorial/#render","title":"Render","text":"<p><code>0</code> to toggle camera view. </p> <p><code>F12</code> to render current image.</p> <p><code>Ctrl + F12</code> to render animation.</p> <p>Use <code>ffmpeg</code> to concat to video:</p> <pre><code># -pix_fmt yuv420p is neccessary to be compatible to powerpoint\nffmpeg.exe -framerate 30 -i %04d.png -vcodec libx264 -pix_fmt yuv420p out.mp4\n</code></pre> <p>Set output path:</p> <p></p> <p>Set resolution &amp; aspect:</p> <p></p>"},{"location":"blender/blender_tutorial/#animation","title":"Animation","text":"<p>In animation tab, set keyframe by clicking:</p> <p></p>"},{"location":"blender/blender_tutorial/#camera-follow-path-animation","title":"Camera follow path animation","text":""},{"location":"blender/blender_tutorial/#ambient-lighting","title":"Ambient lighting","text":"<p>In the world properties:</p> <p></p>"},{"location":"blender/blender_tutorial/#move-object-origin-to-mesh-center-instead-of-global-center-000","title":"Move object origin to mesh center (instead of global center 0,0,0)","text":""},{"location":"blender/blender_tutorial/#ui-and-shortcut-key","title":"UI and shortcut key","text":"<ul> <li>Middle Button (view control)<ul> <li><code>Middle Button + Drag</code>: rotate</li> <li><code>Alt + Middle Button + Drag</code>: rotate to nearest axis</li> <li><code>Ctrl + Middle Button + Drag (Vertical)</code> == <code>Middle Button Scroll</code>: zoom</li> <li><code>Shift + Middle Button + Drag</code>: pan</li> </ul> </li> </ul> <ul> <li> <p>Numpad (view control)</p> <ul> <li><code>2 / 4 / 6 / 8</code>: rotate </li> <li><code>1 / 3 / 7 / 9</code>: rotate to axis</li> <li><code>5</code>: toggle perspective / orthogonal</li> <li><code>0</code>: toggle camera view</li> </ul> </li> </ul> <ul> <li>Shift + A: add new objects</li> </ul> <ul> <li>Shift + Z: toggle wireframe</li> </ul> <ul> <li>Ctrl + Space: toggle maximize area with the current application window.</li> </ul> <ul> <li>Ctrl + Dragging: discrete steps</li> </ul> <ul> <li>Shift + Dragging: precise steps</li> </ul> <ul> <li>Ctrl + Z: undo</li> </ul> <ul> <li>Ctrl + Shift + Z: redo</li> </ul> <ul> <li>Ctrl + Alt + 0: move camera to current view (very useful!)</li> </ul>"},{"location":"blender/blender_tutorial/#convert-trigs-back-to-quads","title":"Convert Trigs back to Quads","text":"<ul> <li>Left-top: change Object Mode to Edit Mode</li> <li>Press <code>A</code> to select all faces.</li> <li>top bar: <code>Face &gt; Tris to Quads</code></li> </ul> <p>Although this is not a perfect solution.</p>"},{"location":"blender/blender_tutorial/#modeling-select-connected-component-from-a-vertex","title":"Modeling: select connected component from a vertex","text":"<p>Click one vertex, and <code>Ctrl+L</code>, then all vertices belonging to the same CC is selected.</p>"},{"location":"c/basic_compile/","title":"Compile","text":""},{"location":"c/basic_compile/#header-hhpp-vs-implementation-ccpp","title":"Header <code>(.h/hpp)</code> vs Implementation <code>(.c/cpp)</code>","text":""},{"location":"c/basic_compile/#concepts","title":"Concepts","text":"<ul> <li>Header(interface): only class and function declarations .</li> <li>Implementation: all the detailed definition.</li> </ul>"},{"location":"c/basic_compile/#how-c-compiles","title":"How c++ compiles ?","text":"<ul> <li> <p>compile <code>cpp</code> implementation into <code>objects</code>. </p> <p>This only uses the <code>cpp</code> and the included <code>cpps/libs</code> files.</p> </li> </ul> <ul> <li>linking all the <code>objects</code> to create the final binary executable / library.</li> </ul>"},{"location":"c/basic_compile/#what-does-include-do","title":"what does #include do ?","text":"<p>Copy and paste code from the library to the current <code>cpp</code> file.</p>"},{"location":"c/basic_compile/#why","title":"WHY ?","text":"<ul> <li>Historical Reason. <ul> <li>the final executable code does not carry any symbol information.</li> <li>compiler is unable to search for symbol declarations alone.</li> <li>So we have to use header (interface) and <code>#include</code>.</li> <li>Java's <code>import</code> can automatically recognize identifiers from implementation and dynamic library symbols.</li> </ul> </li> </ul> <ul> <li> <p>Reduce compilation time: </p> <ul> <li>avoid re-compilation.</li> </ul> </li> </ul>"},{"location":"c/basic_compile/#libraries","title":"Libraries","text":"<p>A collection of resources to provide re-usable code.</p> <p>Generally, any code you include can be viewed as a library.</p>"},{"location":"c/basic_compile/#using-at-compiling","title":"Using at Compiling","text":"<p>This is the case when you have the source code of the library.</p> <p>You have both <code>libxxx.cpp</code> and <code>libxxx.h</code>.</p> <pre><code># the simplest example\n# all files are assumed to be in the current dir.\ng++ main.cpp libxxx.cpp\n</code></pre> <ul> <li> <p>Header-only library </p> <p>the full definitions and classes are visible to the compiler in a header file. (just <code>hpp</code>, no <code>cpp</code>)</p> <p>Do not need to create a binary library file, and do not need to copy the implementation here.</p> <ul> <li>[+] don't need to be compiled. Just include it.</li> <li>[+] thus, compiler can better optimize it with the source code available.</li> <li>[-] changes to the library will cause re-compilation.</li> <li>[-] longer compilation time.</li> </ul> <p>To compile:</p> <pre><code>g++ main.cpp -I /path/to/include/ \n# -I: directory that contains the header file.\n</code></pre> </li> </ul>"},{"location":"c/basic_compile/#using-at-linking","title":"Using at Linking","text":"<p>This is the case when the library is pre-compiled.</p> <p>You only have <code>libxxx.h</code> , and a compiled library file. (static or dynamic)</p> <ul> <li> <p>Static Library</p> <p>When you include a static library, all the used library code are copied to your executable .</p> <ul> <li>[+] faster.</li> </ul> <ul> <li>[-] make the executable large.</li> <li>[-] changes to the code need re-linking and re-compiling.</li> </ul> <p>Created by simply archive the object files.</p> <pre><code># Create the object files (only one here)\ng++ -c unuseful.cpp # --&gt; unuseful.o\n# Create the archive (insert the lib prefix)\nar rcs libunuseful.a unuseful.o # --&gt; libunuseful.a\n</code></pre> </li> </ul> <ul> <li> <p>Dynamic Library</p> <p>When you include a dynamic library, your executable will load the used library code only at run time.</p> <ul> <li>[+] won't make executable large.</li> <li>[+] don't need re-compilation if your code is changed.</li> <li>[-] slower.</li> <li>[-] may fail to execute if the library is not found / corrupt.</li> </ul> <p>Created by using <code>-shared</code> flag.</p> <pre><code># Create the object file with Position Independent Code [PIC]\ng++ -fPIC -c unuseful.cpp # --&gt; unuseful.o\n# Crate the shared library (insert the lib prefix)\ng++ -shared -o libunuseful.so unuseful.o # --&gt; libunuseful.so\n</code></pre> </li> </ul> <p>Both kind of library should be compiled &amp; linked by:</p> <pre><code>g++ main.cpp -I /path/to/include -L /path/to/lib -lunuseful\n\n# -I tells where to find the header (.h)\n# -L tells where to search the library (.so/.a)\n\n# -lunuseful tells the name of the libraries to be used.\n# -l:foo = foo.so\n# -lfoo = libfoo.so\n</code></pre>"},{"location":"c/basic_compile/#usepkg-config-to-auto-find-llibname","title":"use<code>pkg-config</code> to auto-find <code>-l&lt;libname&gt;</code>","text":"<pre><code>g++ main.cpp `pkg-config &lt;libname&gt; --cflags --libs`\n</code></pre> <p><code>pkg-config --libs &lt;library&gt;</code> outputs the link arguments for library.</p> <p><code>pkg-config --cflags &lt;library&gt;</code> outputs the include arguments and any other needed compile flags.</p>"},{"location":"c/basic_compile/#gcc-g","title":"gcc / g++","text":"<p>Used to compile Single source code.</p> <p>However, it is tedious to compile multiple source files with gcc one-by-one.</p> <pre><code>gcc main.c # default output is a.out\n\n### 4 step:\n# preprocess: main.i \n# compile: main.s (assembly code)\n# assemble: main.o (binary)\n# link: a.out\n\n# generate objects\ngcc -c main.c # main.o\n\n# generate asm\ngcc -S main.c\n\n# specify output file name\ngcc main.c -o main\n\n# include file\ngcc main.c -include ./include/head.h \n# this is the same to add #include &lt;include/head.h&gt; in main.c\n\n# include dir\ngcc main.c -I ./include/\n# this makes it work for #include &lt;head.h&gt;\n#include \"file\"\uff1a \u4f1a\u5148\u5728\u5f53\u524d\u76ee\u5f55\u67e5\u627e\u4f60\u6240\u5236\u5b9a\u7684\u5934\u6587\u4ef6, \u5982\u679c\u6ca1\u6709, \u56de\u5230\u9ed8\u8ba4\u7684\u5934\u6587\u4ef6\u76ee\u5f55\u627e\u3002\u5982\u679c\u4f7f\u7528-I\u5236\u5b9a\u4e86\u76ee\u5f55\uff0c\u4f1a\u5148\u5728\u6b64\u76ee\u5f55\u67e5\u627e, \u7136\u540e\u518d\u6309\u5e38\u89c4\u7684\u987a\u5e8f\u53bb\u627e\u3002\n#include &lt;file&gt;\uff1a \u4f1a\u5230-I\u5236\u5b9a\u7684\u76ee\u5f55\u67e5\u627e, \u67e5\u627e\u4e0d\u5230, \u7136\u540e\u5c06\u5230\u7cfb\u7edf\u7684\u9ed8\u8ba4\u7684\u5934\u6587\u4ef6\u76ee\u5f55\u67e5\u627e \u3002\n# the equivalent ENV: C_INCLUDE_PATH, CPP_INCLUDE_PATH\n\n# library dir\ngcc main.c -L ./lib/ -l&lt;libname&gt;\n# the equivalent ENV: LD_LIBRARY_PATH\n\n# optimize\ngcc main.c -O3 # O0 / O1(default) / O2 / O3\n\n# warning\ngcc main.c -w # no warning\ngcc main.c -Wall # sall warning\n\n# gdb debug information\ngcc main.c -g\n</code></pre> <p>And <code>g++</code> is for c++.</p> <pre><code># specify standard\ng++ -std=c++11 main.cpp\n</code></pre>"},{"location":"c/basic_compile/#make","title":"make","text":"<p>Batch-compile for multiple source files.</p> <p>The behavior is determined by a <code>makefile</code>.</p> <p>However, it is still tedious to write <code>makefile</code> for large projects.</p> <pre><code>make # find makefile in current dir, and run g++\nmake clean # remove intermediate files\nmake install # install to where ?\n</code></pre>"},{"location":"c/basic_compile/#makefile","title":"makefile","text":""},{"location":"c/basic_compile/#example","title":"example","text":"<pre><code>### grammar (use Tab for all indent !!!)\n# target ... : pre-requisites ...\n#       command\n#       ...\n\n# declare variable\nobjects = main.o kbd.o command.o display.o insert.o search.o files.o utils.o\n# the first target is the final output !\n# make will find dependencies automatically, so this order is OK.\nedit : $(objects)\n    gcc -o edit $(objects)\n\n### this is short for\n# edit : main.o kbd.o command.o display.o \\\n#        insert.o search.o files.o utils.o\n#    gcc -o edit main.o kbd.o command.o display.o \\\n#       insert.o search.o files.o utils.o\n\nmain.o : defs.h\n### this is short for\n# main.o : main.c defs.h\n#   gcc -c main.c\n\nkbd.o : defs.h command.h\ncommand.o : defs.h command.h\ndisplay.o : defs.h buffer.h\ninsert.o : defs.h buffer.h\nsearch.o : defs.h buffer.h\nfiles.o : defs.h buffer.h command.h\nutils.o : defs.h\n\n.PHONY : clean\nclean :\n    rm edit $(objects)\n</code></pre> <p><code>.PHONY</code> \u8868\u793a <code>clean</code> \u662f\u4e00\u4e2a\u201c\u4f2a\u76ee\u6807\u201d\u3002\u800c\u5728 <code>rm</code> \u547d\u4ee4\u524d\u9762\u52a0\u4e86\u4e00\u4e2a\u5c0f\u51cf\u53f7\u7684\u610f\u601d\u5c31\u662f\uff0c\u4e5f\u8bb8\u67d0\u4e9b\u6587\u4ef6\u51fa\u73b0\u95ee\u9898\uff0c\u4f46\u4e0d\u8981\u7ba1\uff0c\u7ee7\u7eed\u505a\u540e\u9762\u7684\u4e8b\u3002</p> <p>even simpler</p> <pre><code>objects = main.o kbd.o command.o display.o \\\n    insert.o search.o files.o utils.o\n\nedit : $(objects)\n    cc -o edit $(objects)\n\n# all needs defs.h\n$(objects) : defs.h\n# else:\nkbd.o command.o files.o : command.h\ndisplay.o insert.o search.o files.o : buffer.h\n\n.PHONY : clean\nclean :\n    rm edit $(objects)\n</code></pre>"},{"location":"c/basic_compile/#compilers","title":"compilers","text":"<ul> <li>Visual C++: GUI compiler, mainly used in Windows.</li> </ul> <ul> <li> <p>gcc/g++: GNU Compiler Collection.</p> <p>Standard compiler for Linux C/C++/Fortran/..., with a long history from 1987.</p> </li> </ul> <ul> <li> <p>clang/clang++: or Low Level Virtual Machine (LLVM). </p> <p>More modern general compiler, first released in 2003.</p> <p>Mainly used to provide (slightly?) better performance than gcc.</p> <p>LLVM is also used as the compilation framework for many new languages (Julia, Rust, Swift...).</p> <p>Clang is developed by Apple Inc. to replace GCC for better support of LLVM and other new features.</p> </li> </ul>"},{"location":"c/c/","title":"C","text":""},{"location":"c/c/#concepts","title":"Concepts","text":"<ul> <li> <p>ANSI C  / ISO C / Standard C</p> <p>eg. C99, C11, C17</p> <p>supported by GCC, MSCV.</p> <p><code>gcc -std=c11 program.c</code></p> </li> </ul> <ul> <li> <p>GNU C</p> <p>non-standard setup that GCC uses.</p> <p><code>gcc program.c</code></p> </li> </ul>"},{"location":"c/c/#example","title":"Example","text":""},{"location":"c/c/#simple-program","title":"Simple program","text":"<pre><code>// hello.c\n#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n</code></pre> <p>compile it with <code>gcc</code>:</p> <pre><code>gcc -o hello.out hello.c\n./hello.out\n</code></pre>"},{"location":"c/c/#tutorial","title":"Tutorial","text":""},{"location":"c/c/#operator-precedence","title":"Operator Precedence","text":"Precedence Operator Description Associativity 1 <code>++</code> <code>--</code> Suffix/postfix increment and decrement Left-to-right <code>()</code> Function call <code>[]</code> Array subscripting <code>.</code> Structure and union member access <code>-&gt;</code> Structure and union member access through pointer <code>(*type*){*list*}</code> Compound literal(C99) 2 <code>++</code> <code>--</code> Prefix increment and decrement[note 1] Right-to-left <code>+</code> <code>-</code> Unary plus and minus <code>!</code> <code>~</code> Logical NOT and bitwise NOT <code>(*type*)</code> Cast <code>*</code> Indirection (dereference) <code>&amp;</code> Address-of <code>sizeof</code> Size-of[note 2] <code>_Alignof</code> Alignment requirement(C11) 3 <code>*</code> <code>/</code> <code>%</code> Multiplication, division, and remainder Left-to-right 4 <code>+</code> <code>-</code> Addition and subtraction 5 <code>&lt;&lt;</code> <code>&gt;&gt;</code> Bitwise left shift and right shift 6 <code>&lt;</code> <code>&lt;=</code> For relational operators &lt; and \u2264 respectively <code>&gt;</code> <code>&gt;=</code> For relational operators &gt; and \u2265 respectively 7 <code>==</code> <code>!=</code> For relational = and \u2260 respectively 8 <code>&amp;</code> Bitwise AND 9 <code>^</code> Bitwise XOR (exclusive or) 10 <code>|</code> Bitwise OR (inclusive or) 11 <code>&amp;&amp;</code> Logical AND 12 <code>||</code> Logical OR 13 <code>?:</code> Ternary conditional[note 3] Right-to-left 14[note 4] <code>=</code> Simple assignment <code>+=</code> <code>-=</code> Assignment by sum and difference <code>*=</code> <code>/=</code> <code>%=</code> Assignment by product, quotient, and remainder <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> Assignment by bitwise left shift and right shift <code>&amp;=</code> <code>^=</code> <code>|=</code> Assignment by bitwise AND, XOR, and OR 15 <code>,</code> Comma Left-to-right <ul> <li> <p><code>%</code> in c keeps the sign:</p> <pre><code>-1 % 3 = -1\n-2 % 3 = -2\n</code></pre> <p>(different from python, which always return a positive integer)</p> </li> </ul> <ul> <li> <p>bit operators are even slower than compare operator !</p> <pre><code>a|b == c; // a | (b == c)\n(a|b) == c; // (a|b) == c    \n</code></pre> </li> </ul>"},{"location":"c/c/#implicit-type-conversion","title":"Implicit type conversion","text":"<pre><code>bool -&gt; char -&gt; short int -&gt; int -&gt; \nunsigned int -&gt; long -&gt; unsigned -&gt; \nlong long -&gt; float -&gt; double -&gt; long double\n</code></pre>"},{"location":"c/c/#pointer","title":"Pointer","text":"<pre><code>int x = 0;\nint * ptr = &amp;x;\nint y = *ptr;\nptr = NULL;\n\nint **pptr = &amp;ptr;\n</code></pre> <p>Some concepts:</p> <ul> <li>null pointer: pointing to NULL. <code>int *p = NULL; static int* p;</code></li> <li>wild pointer: uninitialized pointer, may point to a random address or even not valid. <code>int *p;</code></li> <li>dangling pointer (\u60ac\u5782\u6307\u9488): pointint to a deleted address.</li> </ul>"},{"location":"c/c/#array","title":"Array","text":"<pre><code>int a[5]; // a is a ptr to the first element in this array.\nint* pa = &amp;a[0]; // *pa == *a == a[0]\n\nint b[3][3]; // b is a ptr to ptr\nint** pb = &amp;b[0][0]; // **pb == **b == b[0]\n\n// initalize\nint x[] = {1,2,3};  // x has type int[3] and holds 1,2,3\nint y[5] = {1,2,3}; // y has type int[5] and holds 1,2,3,0,0\nint z[3] = {0};     // z has type int[3] and holds all zeroes\n\nint z[2][2] = {0, 1, 2, 3}; // {{0, 1}, {2, 3}}\n\nint y[4][3] = { // array of 4 arrays of 3 ints each (4x3 matrix)\n    { 1 },      // row 0 initialized to {1, 0, 0}\n    { 0, 1 },   // row 1 initialized to {0, 1, 0}\n    { [2]=1 },  // row 2 initialized to {0, 0, 1}\n};              // row 3 initialized to {0, 0, 0}\n</code></pre>"},{"location":"c/c/#size-of-c-arrays","title":"Size of c arrays:","text":"<pre><code>// pitfall: sizeof\n// sizeof only works if the array is on the stack (declared in the same namespace)\n// if the array is passed to a function, it will be recognized as a pointer, thus losing size information.\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid printSizeOf(int intArray[]);\nvoid printLength(int intArray[]);\n\nint main(int argc, char* argv[])\n{\n    int array[] = { 0, 1, 2, 3, 4, 5, 6 };\n\n    printf(\"sizeof of array: %d\\n\", (int) sizeof(array)); \n    // sizeof of array: 28\n    printSizeOf(array); \n    // sizeof of parameter: 8\n\n    printf(\"Length of array: %d\\n\", (int)( sizeof(array) / sizeof(array[0]) )); \n    // Length of array: 7\n    printLength(array); \n    // Length of parameter: 2\n}\n\nvoid printSizeOf(int intArray[])\n{\n    printf(\"sizeof of parameter: %d\\n\", (int) sizeof(intArray));\n}\n\nvoid printLength(int intArray[])\n{\n    printf(\"Length of parameter: %d\\n\", (int)( sizeof(intArray) / sizeof(intArray[0]) ));\n}\n</code></pre>"},{"location":"c/c/#pass-return-array-in-c-function","title":"Pass &amp; Return array in c function:","text":"<ul> <li>pass: pointer + size is the most recommended way.</li> </ul> <ul> <li> <p>return: can only return dynamically allocated array's pointer.</p> <p>instead of return a pointer, it's better to pass the return value as parameter and return void.</p> </li> </ul> <ul> <li>2d array can be folded as 1d, and fix index liike <code>i * N + j</code></li> </ul> <pre><code>const int M = 3;\nconst int N = 3;\n\n// pass 1d\nvoid f(int* arr, int size) {} // dynamic, recommended\nvoid f(int arr[], int size) {} // same\nvoid f(int arr[2]) {} // must be a const size\n\n// return 1d\nint* f(int size) {\n    // malloc 1d array\n    int* res = (int*)malloc(size * sizeof(int)); // don't forget free(res)\n    return res; \n}\n\n// wrong! never declare stack variable in function\nint* f(int size) {\n    int res[size];\n    return res; // buggy, res is only valid inside the function!\n}\n\n// pass 2d\nvoid f(int** arr, int m, int n) { // dynamic, recommended.\n    // ...\n}\n\nconst int M = 10;\nconst int N = 10;\nvoid f(int arr[M][N]) { // must use two consts\n    for (int i = 0; i &lt; M; i++) {\n        for (int j = 0; j &lt; N; j++) {\n            // ...\n        }\n    }\n}\n\nconst int N = 10;\nvoid f(int arr[][N], int m) { // the second dim is necessary!\n    // ...    \n} \n\n// return 2d\nint** f(int h, int w) {\n    // ...\n}\n\n\nint main() {\n    // declare 2d array in stack\n    int a[M][N];\n\n    // malloc 2d array in heap\n    int** b;\n    b = (int**)malloc(M * sizeof(int*));\n    for (int i = 0; i &lt; M; i++) \n        b[i] = (int*)malloc(N * sizeof(int));\n\n}\n</code></pre>"},{"location":"c/c/#chars","title":"Chars","text":"<pre><code>char* s;\ns = \"string\"; \n\nchar s[] = \"string\";\n\n// char to int\nchar c = '1';\nint ic = c; // 49, ascii code of '1'\nint i = c - '0'; // 1\n\n// int to char\nint i = 1;\nchar c = i + '0'; // '1'\n\n// chars to int, do not recommend, use c++ string.\nchar s[] = \"12\";\nint i = atoi(s); // 12\n</code></pre>"},{"location":"c/c/#pass-by-reference-in-function-args","title":"pass-by-reference in function args","text":"<pre><code>// this doesn't work, because calls in C are pass-by-value.\nvoid inc(int x) { x += 1; }\n// this works, by pass-by-reference\nvoid inc(int &amp;x) { x += 1; }\n// this also works, by pointer, but need to pass in ptr.\nvoid int(int *px) { *px += 1; }\n</code></pre>"},{"location":"c/c/#cmd-args","title":"CMD args","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char **argv)\n{\n    while(argc--) printf(\"%s\\n\", *argv++);\n    return 0;\n}\n</code></pre>"},{"location":"c/c/#struct","title":"Struct","text":"<pre><code>// basic\nstruct mystr {\n    int len;\n    char * s;\n};\nstruct mystr s1;\n\n// typedef\ntypedef struct mystr {\n    int len;\n} mystr;\nmystr s1;\n\nint len = s1.len;\n\nmystr* ps1 = &amp;s1;\nint len = ps1-&gt;len;\n\n\n// annonymous\nstruct {\n    int len;\n} s1;\n</code></pre>"},{"location":"c/c/#typedef","title":"typedef","text":"<pre><code>typedef unsigned char BYTE;\nBYTE b;\n</code></pre>"},{"location":"c/c/#macro","title":"Macro","text":"<pre><code>#define ONE 1\n#undef ONE\n\n#ifdef \n#ifndef\n#endif\n\n#pragma\n</code></pre>"},{"location":"c/c/#io","title":"IO","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int x = 0;\n    printf(\"%d\", x);\n    char* s = \"string\";\n    printf(\"%s\", s);\n\n    char str[100];\n    int i;\n    scanf(\"%s %d\", str, &amp;i);\n    printf( \"\\nYou entered: %s %d \\n\", str, i);\n}\n</code></pre>"},{"location":"c/c/#c-library","title":"C Library","text":""},{"location":"c/c/#include","title":"#include  <pre><code>typedef long long unsigned int size_t // x64\n\nFILE *stdin = (FILE *) &amp;_IO_2_1_stdin_;\nFILE *stdout = (FILE *) &amp;_IO_2_1_stdout_;\nFILE *stderr = (FILE *) &amp;_IO_2_1_stderr_;\n\nFILE *fopen(const char* filename, const char* mode);\nint getchar(void);\nint putchar(int char);\nint printf(const char *format, ...);\nint scanf(const char *format, ...);\n</code></pre>","text":""},{"location":"c/c/#include_1","title":"#include  <pre><code>double exp(double x);\ndouble log(double x); // log_e \ndouble log2(double x);\ndouble log10(double x);\ndouble pow(double x, double y);\ndouble sqrt(double x);\ndouble fabs(double x);\ndouble floor(double x);\ndouble ceil(double x);\n</code></pre>","text":""},{"location":"c/c/#include_2","title":"#include  <pre><code>double atof(const char *str);\nint atoi(const char *str);\n\ndouble strtod(const char *str, char **endptr);\nlong int strtol(const char *str, char **endptr, int base);\n\nvoid *calloc(size_t nitems, size_t size);\nvoid *malloc(size_t size);\nvoid free(void *ptr);\n\nvoid exit(int status);\n\nint abs(int x);\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*));\n\nint rand(void);\nvoid srand(unsigned int seed);\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n   char *str;\n\n   str = (char *) malloc(15 * sizeof(char));\n   strcpy(str, \"runoob\");\n   printf(\"String = %s,  Address = %u\\n\", str, str);\n   free(str);\n\n   return 0;\n}\n</code></pre>","text":""},{"location":"c/c/#include_3","title":"#include  <pre><code>void *memcpy(void *dest, const void *src, size_t n);\nvoid *memset(void *str, int c, size_t n);\nint memcmp(const void *str1, const void *str2, size_t n);\n\nchar *strcat(char *dest, const char *src);\nint strcmp(const char *str1, const char *str2);\nchar *strcpy(char *dest, const char *src);\nsize_t strlen(const char *str);\nchar *strstr(const char *haystack, const char *needle);\n</code></pre>","text":""},{"location":"c/c_pitfalls/","title":"c pitfalls","text":"<ul> <li> <p>NEVER call <code>top()/front()</code> when a  (priority) queue is empty, it is an undefined behavior, and will not cause runtime error:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\nint main() {\n    priority_queue&lt;int&gt; q;\n    //cout &lt;&lt; q.empty() &lt;&lt; \" \" &lt;&lt; q.top() &lt;&lt; endl; // undefined, will destroy the priority queue and nothing is printed...\n    q.push(1);\n    cout &lt;&lt; q.empty() &lt;&lt; \" \" &lt;&lt; q.top() &lt;&lt; endl; // 0 1\n    q.pop();\n    cout &lt;&lt; q.empty() &lt;&lt; \" \" &lt;&lt; q.top() &lt;&lt; endl; // 1 1 (undefined behavior, seems still the last top element.)\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\nint main() {\n    queue&lt;int&gt; q;\n    cout &lt;&lt; q.empty() &lt;&lt; \" \" &lt;&lt; q.front() &lt;&lt; endl; // 1 0 (undefined behavior, seems default to 0)\n    q.push(1);\n    cout &lt;&lt; q.empty() &lt;&lt; \" \" &lt;&lt; q.front() &lt;&lt; endl; // 0 1\n    q.pop();\n    cout &lt;&lt; q.empty() &lt;&lt; \" \" &lt;&lt; q.front() &lt;&lt; endl; // 1 0 (undefined behavior)\n}\n</code></pre> </li> </ul> <ul> <li> <p><code>unordered_map&lt;pair&lt;int, int&gt;, int&gt;</code> throws error like <code>deleted implicit constructor</code>:</p> <p>this is because there is no built in <code>hash</code> function for <code>pair&lt;&gt;</code>. see here.</p> <p>Unfortunately there is no perfect solution:</p> <ul> <li>custom hash, like <code>p.first * MAX_SECOND + p.second</code>.</li> <li>use <code>map&lt;pair&lt;int,int&gt;, int&gt;</code>.</li> </ul> </li> </ul> <ul> <li> <p><code>std::map::operator[]</code> will initialize the value if key doesn't exist. (instead of throw an error like <code>at()</code>)</p> <pre><code>cout &lt;&lt; m[-1] &lt;&lt; endl; // if not exist, will insert &amp; initialize it ! (here int --&gt; 0)\ncout &lt;&lt; m.at(-1) &lt;&lt; endl; // check if exist first, throw an error\n</code></pre> </li> </ul> <ul> <li> <p><code>string::operator[] &amp; string::at</code> behaves similarly.</p> <pre><code>string s = \"a\";\n\n// [] won't check out of range!\ncout &lt;&lt; \"s[1] = \" &lt;&lt; s[1] &lt;&lt; endl; // \\0\ncout &lt;&lt; \"s[2] = \" &lt;&lt; s[2] &lt;&lt; endl; // undefined char\ncout &lt;&lt; \"s = \" &lt;&lt; s &lt;&lt; endl; // a\ncout &lt;&lt; \"s.size() = \" &lt;&lt; s.size() &lt;&lt; endl; // 1\n\n// even if you modify it, it still won't throw an error.\ns[1] = 'b'; // dangerous!\ns[2] = 'c';\ncout &lt;&lt; \"s[1] = \" &lt;&lt; s[1] &lt;&lt; endl; // b \ncout &lt;&lt; \"s[2] = \" &lt;&lt; s[2] &lt;&lt; endl; // c\n// but s is not changed.\ncout &lt;&lt; \"s = \" &lt;&lt; s &lt;&lt; endl; // a\ncout &lt;&lt; \"s.size() = \" &lt;&lt; s.size() &lt;&lt; endl; // 1\n\n// at() checks out of range!\ncout &lt;&lt; \"s.at(1) = \" &lt;&lt; s.at(1) &lt;&lt; endl; // error\n</code></pre> </li> </ul> <ul> <li> <p><code>%</code> modulo operator will return signed value</p> <pre><code>cout &lt;&lt; -1 % 3 &lt;&lt; endl; // -1\n\n// to get a positive modulo (like % in python), we need:\ncout &lt;&lt; (x % N + N) % N &lt;&lt; endl;\n</code></pre> </li> </ul> <ul> <li><code>.0f</code> for <code>float 0</code>, not <code>0f</code></li> </ul> <ul> <li> <p><code>0x80000000</code> default type is <code>unsigned (int)</code>, while <code>0x7fffffff</code> is <code>int</code>.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nusing namespace std;\n\nauto x = 0x80000000;\ncout &lt;&lt; typeid(x).name() &lt;&lt; \" = \" &lt;&lt; x &lt;&lt; endl; // j (unsigned) = 2147483648 \n\nint x = 0x80000000;\ncout &lt;&lt; typeid(x).name() &lt;&lt; \" = \" &lt;&lt; x &lt;&lt; endl; // i (int) = -2147483648\n\nlong long x = 0x80000000; // unsigned -&gt; long long\ncout &lt;&lt; typeid(x).name() &lt;&lt; \" = \" &lt;&lt; x &lt;&lt; endl; // x (long long) = 2147483648\n\nauto x = 0x7fffffff;\ncout &lt;&lt; typeid(x).name() &lt;&lt; \" = \" &lt;&lt; x &lt;&lt; endl; // i (int) = 2147483647\n</code></pre> <p>So if you want to get a number smaller than <code>INT_MIN</code>, you should do this:</p> <pre><code>long long x = (long long)(int)0x80000000 - 1;\n\n// equals\nlong long x = -2147483649;\n</code></pre> </li> </ul> <ul> <li> <p><code>str.erase</code></p> <pre><code>string s = \"abc\";\n\n// str.erase(int pos, int len = npos);\ns.erase(1); // a\ns.erase(1, 1); // ac\n\n// str.erase(str::iterator it);\ns.erase(s.begin() + 1); // ac\n\n// str.erase(str::iterator begin, str::iterator end);\ns.erase(s.begin() + 1, s.end()); // a\n</code></pre> </li> </ul> <ul> <li> <p>alternative operators</p> <p>though amazing, you can use <code>and</code> , <code>or</code> in c++.</p> <pre><code>// can be directly used in c++\n// to use in c, need to include &lt;iso646.h&gt;\n&amp;&amp;    and\n&amp;=    and_eq\n&amp; bitand\n| bitor\n~ compl\n! not\n!=    not_eq\n||    or\n|=    or_eq\n^ xor\n^=    xor_eq\n{ &lt;%\n} %&gt;\n[ &lt;:\n] :&gt;\n# %:\n##    %:%:\n</code></pre> </li> </ul> <ul> <li>Structure binding of <code>tuple</code> cannot be used to assign value!<pre><code>// structure binding\ntuple&lt;int, int&gt; t = {1, 2};\nauto [a, b] = t; // will CREATE and assign a, b to 1, 2\n\n// however, if you already have a, b, you cannot assign value to them.\nint a = 0, b = 0;\nauto [a, b] = t; // error: conflicting declaration!\n\n// in certain cases, it will not give error but silently go wrong...\nint a = 0, b = 0;\n{ // any new scope\n    auto [a, b] = t; // a, b are local variables, not the a, b outside.\n}\ncout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl; // 0 0\n</code></pre> </li> </ul> <ul> <li>Sorting vector of pointers should use actual object's comparator:<pre><code>struct Node {\n    int val;\n    Node(int val): val(val) {}\n    // define the comparator\n    bool operator&lt;(const Node&amp; other) const {\n        return val &lt; other.val;\n    }\n};\n\n\nint main() {\n    vector&lt;Node*&gt; v;\n    v.push_back(new Node(3));\n    v.push_back(new Node(1));\n    v.push_back(new Node(2));\n\n    // direct sort will compare **pointer values**, which is totally wrong!\n    sort(v.begin(), v.end());\n\n    // use the actual object's comparatorff\n    sort(v.begin(), v.end(), [](Node* a, Node* b) { return *a &lt; *b; });\n}\n</code></pre> </li> </ul> <ul> <li>For loop of container.size() will reflect the change of container size:<pre><code>vector&lt;int&gt; v = {1, 2, 3};\nfor (int i = 0; i &lt; v.size(); i++) { // at each iter, v.size() will be recalculated (different from python)\n    cout &lt;&lt; v[i] &lt;&lt; \" \";\n    if (i &lt; 3) v.push_back(i); // will change v.size()\n}\n// 1 2 3 0 1 2\n</code></pre> </li> </ul>"},{"location":"c/c_tricks/","title":"C tricks","text":""},{"location":"c/c_tricks/#c-tricks","title":"c tricks","text":""},{"location":"c/c_tricks/#do-while-0","title":"do ... while (0)","text":"<p>A trick (idiom) used to correctly define macros with multiple lines / containing <code>if</code>.</p> <pre><code>// wrong\n#define FOO statement1; statement2; \n\n// we want both statements are controlled by if, but this will left statement2 always be run.\nif (cond) FOO; // if (cond) statement1; statement2;\n\n// correct way with do...while(0)\n#define FOO do {statement1; statement2;} while(0);\n</code></pre> <p>Just using <code>{...}</code> is also wrong, but <code>({...})</code> is OK.</p> <pre><code>// another wrong way\n#define FOO {statement1; statement2;}\n\n// note the last ;, it breaks the if-else and will throw compile error!\nif (cond) FOO; // if (cind) {statement1; statement2;};\nelse ...;\n\n// another correct way (recommended!)\n#define FOO ({statement1; statement2;})\n</code></pre>"},{"location":"c/c_tricks/#playing-with-define","title":"Playing with #define","text":"<pre><code>// variable\n#define X 100\n\n// func\n#define ADD(x, y) (x + y)\n\n// stringfy: #\n#define PQSR(x) printf(\"square of\" #x \"is %d\\n\", (x) * (x))\nint y = 2;\nPQSR(y); // \"square of y is 4\"\n\n// concat: ##\n#define XN(n) x##n\n#define PXN(n) printf(\"x\"#n\" = %d\\n\", x##n)\n\nint XN(1) = 1; // int x1 = 1;\nPXN(1); // printf(\"x1 = %d\\n\", x1);\n\n// multi-line: do while(0)\n#define M(x, y) do { /\nstmt1; /\nstmt2; /\n} while(0)\n\n// example\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n#define _REG_FUNC(funname) m.def(#funname, &amp;funname)\n  _REG_FUNC(sample_grid);\n  _REG_FUNC(sample_grid_backward);\n#undef _REG_FUNC\n}\n</code></pre>"},{"location":"c/c_tricks/#static","title":"static","text":"<p>General meaning: only initialized once.</p> <ul> <li> <p>Static global variable / function:</p> <p>Only visible inside the file it is declared in.</p> </li> </ul> <ul> <li> <p>Static class variable / function:</p> <p>The member belongs to the class itself, instead of its instantiations.</p> <pre><code>class A {\npublic:\n    static int x = 0;\n}\n\nint main() {\n    A a, b;\n    a.x = 1;\n    cout &lt;&lt; b.x &lt;&lt; endl; // 1\n}\n</code></pre> </li> </ul> <ul> <li> <p>Static local variable inside function:</p> <p>Retains value between function calls.</p> <pre><code>int foo() {\n    static int x = 0; // preserved in all function calls\n    cout &lt;&lt; x &lt;&lt; endl;\n}\n\nint main() {\n    for(int i = 0; i &lt; 3; i++) foo(); // 0, 1, 2\n}\n</code></pre> </li> </ul>"},{"location":"c/cmake/","title":"Cmake","text":""},{"location":"c/cmake/#cmake","title":"cmake","text":"<p>To make cross-platform compilation less painful (or maybe more painful ?)</p> <p>CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice.</p> <pre><code># check version\ncmake --version\n</code></pre>"},{"location":"c/cmake/#cmakeliststxt","title":"<code>CMakeLists.txt</code>","text":"<p>The rules to generate makefile. * commands are not case-sensitive (e.g., <code>project()</code> or <code>PROJECT()</code>) for historical reason. * variables are case-sensitive! (e.g., must be <code>PROJECT_NAME</code>) * paths can be string or raw (e.g., <code>include</code> or <code>\"include\"</code>) * command parameters are separated by spaces or line breaks.</p>"},{"location":"c/cmake/#project-structure","title":"Project structure","text":"<p>A regular C/C++/CUDA project layout: <pre><code>Readme.md\nCMakeLists.txt\n./include\n    mylib.h\n./src\n    mylib.cpp\n    main.cpp # it #include \"mylib.h\"\n</code></pre></p>"},{"location":"c/cmake/#build-with-cmake","title":"Build with cmake","text":"<p>Traditional way: <pre><code>mkdir build\ncd build\ncmake ..\nmake -j8\n./binary\n</code></pre></p> <p>More modern way: <pre><code>cmake -B build . # mkdir build &amp;&amp; cd build &amp;&amp; cmake ..\ncmake --build build -j 8 # invoke make\n./build/binary\n\ncmake --build build --config Release -j 8 # set build type\n</code></pre></p>"},{"location":"c/cmake/#built-in-variables","title":"Built in variables","text":"<p>Like shell variables, use with <code>${CAPITAL_NAME}</code> <pre><code>PROJECT_NAME # project name defined in project()\nPROJECT_SOURCE_DIR # the source dir, usually ./\nPROJECT_BINARY_DIR # the target dir, usually ./build/\n\n# define your variables\nset(SOURCES\n    src/main.cpp\n    src/test.cpp\n)\n</code></pre></p>"},{"location":"c/cmake/#basic-example","title":"Basic example","text":"<p>To include  <code>mylib</code>, we can use <code>target_include_directories</code> for our target: <pre><code>cmake_minimum_required(VERSION 3.5)\nproject(test_example) # project name\n\nadd_executable(test # output binary name\n    # all the sources\n    src/main.cpp\n    src/mylib.cpp\n)\n\ntarget_include_directories(test PUBLIC # target + qualifier (use public as default)\n    include # dir to include\n)\n</code></pre></p> <p>what is a <code>target</code> in <code>target_*()</code>: (1) executable by <code>add_executable()</code> (2) library by <code>add_library()</code>, sometimes we need to link library to library.</p> <p>We can also use global <code>include_directories</code> if these headers are globally needed: <pre><code>cmake_minimum_required(VERSION 3.5)\nproject(test_example) # project name\n\ninclude_directories(include)\n\nadd_executable(test # output binary name\n    # all the sources\n    src/main.cpp\n    src/mylib.cpp\n)\n</code></pre></p> <p><code>include_directories()</code> equals to the <code>-I</code> option in <code>gcc</code>, denoting the folders to search for headers.  It supports nested folders, e.g., the following file structure will still work:  <pre><code>./include\n    ./mylib\n        mylib.h\n./src\n    main.cpp # change to #include \"mylib/mylib.h\"\n</code></pre></p> <p>We can also (1) create a static library (2) link it to the executable: <pre><code>cmake_minimum_required(VERSION 3.5)\nproject(test_example) # project name\n\ninclude_directories(include)\n\nadd_library(mylib STATIC # build a static lib, called libmylib.a on linux, or libmylib.lib on windows\n    # move all the sources here\n    src/mylib.cpp\n)\n\nadd_executable(test src/main.cpp) # only add the main.cpp\n\ntarget_link_libraries(test PUBLIC mylib) # link mylib to the executable\n</code></pre></p> <p>We can also build a dynamic/shared library by: <pre><code>add_library(mylib SHARED # named libmylib.so on linux , or libmylib.dll on windows\n    src/mylib.cpp\n)\n</code></pre></p> <p>Difference between static and dynamic libraries: (1) static lib will be copied to the binary, leading to a much larger binary size (both in storage and memory cost), but no runtime external dependency. (2) dynamic lib is only referenced by the binary, and called in runtime as an external dependency (the dynamic loading from OS will lead to a small additional time cost too). (3) In most cases, dynamic lib is preferred. </p> <p>For Windows MSVC, we need to add additional things for shared lib to work: <pre><code>if (MSVC)\n\u00a0 \u00a0 set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)\n\u00a0 \u00a0 set(BUILD_SHARED_LIBS TRUE)\nendif()\n</code></pre></p>"},{"location":"c/cmake/#configurations","title":"Configurations","text":""},{"location":"c/cmake/#build-types","title":"Build types","text":"<p>Built-in build types and their equal command: * Release: <code>-O3 -DNDEBUG</code> * Debug: <code>-g</code> * RelWithDebInfo: <code>-O2 -g -DNDEBUG</code>, </p> <p>Explicitly use it by <code>cmake .. -DCMAKE_BUILD_TYPE=Release</code>. We can also detect and set default build type: <pre><code># Set a default configuration if none was specified\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    message(STATUS \"No release type specified. Setting to 'Release'.\")\n    set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"RelWithDebInfo\")\nendif()\n</code></pre></p>"},{"location":"c/cmake/#compile-flags","title":"Compile flags","text":"<p>Set default (global) c++ flags: <pre><code># set c++ compile flags\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC\") # usually this is enough\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC\" CACHE STRING \"doc string\" FORCE) # force set in CMakeCache.txt... seems not very needed.\n\n# set c++ standard\nset(CMAKE_CXX_STANDARD 14)\n</code></pre> We can also set it with command line: <pre><code>cmake .. -DCMAKE_CXX_FLAGS=\"-fPIC\"\n</code></pre></p> <p>Set per-target c++ flags: <pre><code>target_compile_definitions(test PUBLIC\n    fPIC\n)\n</code></pre></p>"},{"location":"c/cmake/#thrid-party-dependency","title":"Thrid party dependency","text":"<p><code>find_package()</code> can handle about 142 common third party libraries, to automatically handle it for your project. <pre><code># find and include boost 1.46.1; error out if not found; only find the following components\nfind_package(Boost 1.46.1 REQUIRED COMPONENTS filesystem system)\n\n# check if the package is found\nif(Boost_FOUND)\n    message (\"Boost found\")\n    include_directories(${Boost_INCLUDE_DIRS}) # include headers.\nelse()\n    message (FATAL_ERROR \"Cannot find Boost\")\nendif()\n\n# your binary\nadd_executable(test src/main.cpp)\n\n# link library\ntarget_link_libraries(test PRIVATE Boost::filesystem) # alias target, equals to ${Boost_FILESYSTEM_LIBRARY}\n</code></pre></p>"},{"location":"c/cmake/#build-with-ninja","title":"Build with ninja","text":"<p>what is <code>ninja</code>? A small build system (i.e., alternative to <code>make</code>) focusing on speed.</p> <p>Cmake can generate ninja config too: <pre><code>cmake -B build -G Ninja . # generate ./build/build.ninja\nninja -C build # build in ./build\n</code></pre></p>"},{"location":"c/cmake/#sub-projects","title":"Sub-projects","text":"<p>Let say your projects include some sub-projects that contain individual <code>CMakeLists.txt</code>: <pre><code>Readme.md\nCMakeLists.txt\n# these dependencies are sub-projedts\n./dependencies\n    ./package1 # a normal package\n        CMakeLists.txt\n        ./include\n            lib1.h\n        ./src\n            lib1.cpp\n    ./package2 # a header-only package\n        CMakeLists.txt\n        ./include\n            lib2.h\n    ...\n./include\n    mylib.h\n./src\n    mylib.cpp\n    main.cpp # it #include \"mylib.h\", #include \"package1/lib1.h\"\n</code></pre></p> <p>To use these packages in your binary, use: <pre><code>cmake_minimum_required(VERSION 3.5)\nproject(test_example) # project name\n\ninclude_directories(include)\n\n# regular dependency: first process their CMakeLists.txt\nadd_subdirectory(dependencies/package1)\n\n# header-only dependency: just include it\ninclude_directories(dependencies/package2)\n\nadd_library(mylib STATIC # build a static lib, called libmylib.a on linux, or libmylib.lib on windows\n    # move all the sources here\n    src/mylib.cpp\n)\n\nadd_executable(test src/main.cpp) # only add the main.cpp\n\ntarget_link_libraries(test PUBLIC \n    package1 # link package1\n    mylib \n)\n</code></pre></p>"},{"location":"c/cmake/#misc","title":"Misc","text":"<ul> <li>Should I use <code>#include &lt;mylib/mylib.h&gt;</code> or <code>#include \"mylib/mylib.h\"</code>?     * If you use CMakelists.txt to manage the include directories, <code>&lt;&gt;</code> is the only thing you need.     * <code>&lt;&gt;</code> only searches the include dirs, while <code>\"\"</code> searches the current directory first (e.g., when <code>.h</code> are in the same dir as <code>.cpp</code>), then the include dirs.</li> </ul>"},{"location":"c/cpp/","title":"C++","text":"<p>old name is C with Classes.</p> <p>Contains 4 parts, each designed with different philosophy.</p> <ul> <li>C</li> </ul> <ul> <li>Object-oriented programming</li> </ul> <ul> <li>Template (generic programming)</li> </ul> <ul> <li>STL (standard library)</li> </ul>"},{"location":"c/cpp/#tutorial","title":"Tutorial","text":""},{"location":"c/cpp/#c-library","title":"C Library","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt; // memset\n#include &lt;cmath&gt;\n</code></pre>"},{"location":"c/cpp/#c-library_1","title":"C++ Library","text":""},{"location":"c/cpp/#include-iostream","title":"#include \\&lt;iostream&gt;","text":"<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n    char name[50];\n\n    cin &gt;&gt; name;\n    cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; endl;\n\n}\n</code></pre>"},{"location":"c/cpp/#include-string","title":"#include \\&lt;string&gt;","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main ()\n{\n    string str1 = \"Hello\";\n    string str2 = \"World\";\n    string str3;\n\n    str3 = str1 + str2;\n    s = s + 'c';\n\n    int len = str3.size(); // or str3.length()\n\n    int idx = str3.find(\"pattern\"); // -1 (string::npos) if not found\n\n    char* cstr3 = str3.c_str();\n\n    // erase\n    s.erase(s.begin() + i); // erase one char\n    s.erase(start, num); // erase from start for num chars\n\n    // string to int\n    // int stoi(string&amp; s, size_t* idx=0, int base=10)\n    string s = \"123\";\n    int i = stoi(s); // 123\n\n    string s = \"123 xyz\";\n    size_t sz;\n    int i = stoi(s, &amp;sz); // 123, sz = 3\n\n    string s = \"-10010110001\";\n    int b = stoi(s, nullptr, 2); // -1201, binary.\n\n    // string to float\n    string s = \"12.34\";\n    float f = stof(s); // 12.34\n\n    // similarly, we have `stol, stoll, stod, stold, stoul, stoull`\n\n    // int/float/double to string\n    string s = to_string(42); // \"42\"\n    string s = to_string(12.23); // \"12.23\"\n    string s = to_string(1e40); // \"10000000000000000303786028427003666890752.000000\"\n}\n</code></pre>"},{"location":"c/cpp/#include-vector","title":"#include \\&lt;vector&gt;","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n    // init\n    vector&lt;int&gt; vec; \n    vector&lt;int&gt; vec = {1, 2, 3};\n    vector&lt;int&gt; vec(size[, init_value]);\n\n    // 2d init: [N, M], -inf\n    vector&lt;vector&lt;int&gt;&gt; dp(N, vector&lt;int&gt;(M, -0x3f3f3f3f));\n\n    // reserve v.s. resize\n    vec.reserve(10); // only increase capacity, will not push empty elements! vec.size() == 0\n    vec.resize(10); // push 10 empty elements into vec. vec.size() == 10\n\n    // push_back\n    for(int i = 0; i &lt; 5; i++){\n       vec.push_back(i);\n    }\n\n    // clear\n    v.clear();\n\n    // size\n    cout &lt;&lt; vec.size() &lt;&lt; endl;\n\n    // access by index\n    for(i = 0; i &lt; 5; i++){\n       cout &lt;&lt; i &lt;&lt; \" = \" &lt;&lt; vec[i] &lt;&lt; endl;\n    }\n\n    // iterator\n    vector&lt;int&gt;::iterator v = vec.begin();\n    while(v != vec.end()) {\n       cout &lt;&lt; *v &lt;&lt; endl; // same as a pointer\n       v++;\n    }\n\n    // loop and reversed loop\n    for (auto it = v.begin(); it != v.end(); it++) {...}\n    for (auto it = v.rbegin(); it != v.rend(); it++) {...} // also use ++!\n\n    // erase i-th element\n    v.erase(v.begin() + i);\n\n    // copy another vector\n    vector&lt;int&gt; v2(v1);\n\n    // insert x at i-th position\n    v.insert(v.begin() + i, x);\n\n    // extend another vector (also by insert)\n    v1.insert(v1.end(), v2.begin(), v2.end());\n\n    // emplace_back: in-place push_back  (cpp11, but not supported in msvc10)\n    // use condition: push a complicated object to a vector, but don't want to create a temporary object and then copy it to the vector.\n    // assume we have a Complicated class initialized by Complicated(x, y, z)\n    vec&lt;Complicated&gt; v;\n    v.push_back(Complicated(x, y, z)); // create temporary then copy, slow.\n    v.emplace_back(x, y, z); // no temporary, fast.\n\n    // emplace: in-place insert.\n    v.emplace(v.end(), x, y, z);\n\n    // slice subvector\n    vector&lt;int&gt; v2(v.begin(), v.begin() + 5); // select and copy [0, 5)\n    v.resize(5); // inplace trick, keep first 5 elements\n\n    // iterator\n    auto it = v.begin();\n    auto next = it + 1;\n    auto nnnnext = it + 4; // vector is sequence container, so we can add an int to it.\n    int x = *it; \n    v.erase(next);\n    v.insert(next, 0);\n\n\n    return 0;\n}\n</code></pre> <p>Note: <code>vector&lt;bool&gt;</code> is not a STL container! It optimizes space and use bit to save each bool variable, so many STL operations are not supported. Use <code>bitset</code> or <code>deque&lt;bool&gt;</code> instead.</p>"},{"location":"c/cpp/#include-set","title":"#include \\&lt;set&gt;","text":"<p>set implements a binary search tree, so querying existence and order is in <code>O(log n)</code></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nint main() {\n    set&lt;int&gt; s;\n\n    // insert element\n    s.insert(1);\n\n    // count element, can check if an element is in the set.\n    cout &lt;&lt; s.count(1) &lt;&lt; endl;\n    bool is_in = s.count(1);\n\n    // find the first element, another way to check is in. (faster than count!)\n    bool is_in2 = s.find(1) != s.end();\n    auto it = s.find(1); // return iterator to the first found element.\n\n    // [c++20] contains\n    bool is_in3 = s.contains(1);\n\n    // delete by value\n    s.erase(2); // erase(value)\n\n    // size\n    cout &lt;&lt; s.size() &lt;&lt; endl;\n\n    // clear\n    s.clear();\n\n    // is empty\n    if (s.empty()) {\n        //...\n    }\n\n    // loop all elements (increasing order)\n    for (auto it = s.begin(); it != s.end(); it++) {\n        cout &lt;&lt; *it &lt;&lt; endl;\n    }\n    // loop with index (enumerate)\n    for (auto [it, i] = tuple{s.begin(), 0}; it != s.end(); it++, i++) m[*it] = i;\n\n    // get the smallest (first) or largest (last) element\n    int mn = *s.begin();\n    int mx = *s.end();\n\n    // get the k-th smallest element\n    auto i = s.begin();\n    cout &lt;&lt; *i &lt;&lt; endl; // s[0]\n    auto next = ++i; // s[1], DO NOT USE i++, then next is still s[0]\n\n    advance(i, k); // in-place modification of i (since set is an associative container, i + k will not work)\n\n    auto i = s.begin();\n    auto i2 = next(i, 1); // not in-place ver\n    auto i3 = prev(i2, 1);\n\n    int mmn = *next(s.begin(), 1);\n}\n</code></pre>"},{"location":"c/cpp/#include-map","title":"#include \\&lt;map&gt;","text":"<p>map implements binary search tree to store keys.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\nusing namespace std;\n\nint main() {\n    // init\n    map&lt;int, string&gt; m;\n    map&lt;int, int&gt; n = {{0:1}, {1:2}};\n    // insert\n    m[0] = \"zero\"; // m[key] = val\n    m.insert(pair&lt;int, string&gt;(1, \"one\")); // m.insert(pair)\n\n    // get\n    cout &lt;&lt; m[-1] &lt;&lt; endl; // if not exist, will insert &amp; initialize it ! (here int --&gt; 0)\n    cout &lt;&lt; m.at(-1) &lt;&lt; endl; // check if exist first, throw an error\n\n    // size\n    m.size();\n    m.empty();\n    m.clear();\n\n    // iterator\n    // auto == std::map&lt;int,string&gt;::iterator == pair&lt;int,string&gt;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        cout &lt;&lt; it-&gt;first &lt;&lt; \": \" &lt;&lt; it-&gt;second &lt;&lt; endl;\n    }\n    for (auto&amp; it : m) {\n        cout &lt;&lt; it.first &lt;&lt; \": \" &lt;&lt; it.second &lt;&lt; endl;\n    }\n    for (auto&amp; [k, v]: m) { // c++17\n        cout &lt;&lt; k &lt;&lt; \": \" &lt;&lt; v &lt;&lt; endl;\n    }\n\n    // delete\n    m.erase(0); // erase(key)\n\n    // find\n    auto it = m.find(2);\n    if (it != m.end()) {\n        m.erase(it);\n    }\n\n    // check if a key is in map\n    bool is_in = m.find(0) != m.end();\n    bool is_in2 = m.count(0); // also work in map\n\n    // binary search keys\n    // assume the keys are {0,1,3,5,7}\n    auto it = m.lower_bound(3); // will get iterator to 3\n    auto it = m.lower_bound(2); // will get iterator to 3\n    auto it = m.lower_bound(-1); // will get iterator to 0\n    auto it = m.lower_bound(8); // will get map.end(), which has `it-&gt;first = map.size(); it-&gt;second = 0` (\u6ce8\u610f\u4e0d\u8981\u7528key\u6765\u5224\u65ad\u662f\u5426\u8fbe\u5230\u4e86map.end()!\u8fd9\u91cckey\u7b49\u4e8emap\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002\u8981\u7528it == map.end()\u3002)\n\n    auto it = m.upper_bound(3); // will get iterator to 5\n    auto it = m.upper_bound(7); // will get map.end()\n\n\n}\n</code></pre>"},{"location":"c/cpp/#include-unordered_set","title":"#include \\&lt;unordered_set&gt;","text":"<p>unordered_set implements a hash table, thus faster than ordered set.</p> <p>API is the same with set.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_set&gt;\nusing namespace std;\n\nint main() {\n    unordered_set&lt;int&gt; s;\n    s.insert(1);\n    s.erase(1);\n    s.empty();\n    s.clear();\n    s.find(1);\n    s.count(1);\n\n    // regular use to check duplicate\n    unordered_set&lt;int&gt; vis;\n    while(...) {\n        if (vis.count(x)) return true;\n        else vis.insert(x);\n    }\n    return false;\n}\n</code></pre>"},{"location":"c/cpp/#include-unordered_map","title":"#include \\&lt;unordered_map&gt;","text":"<p>unordered_map implements a hash table. </p> <p>API is the same with map.</p>"},{"location":"c/cpp/#include-queue","title":"#include \\&lt;queue&gt;","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint main() {\n    queue&lt;int&gt; q;\n    q.push(1); // not push_back\n    while (!q.empty()) {\n        int a = q.front(); \n        int b = q.back(); \n        q.pop(); // return void\n        cout &lt;&lt; q.size() &lt;&lt; endl;\n    }\n}\n\n// a trick in BFS to get each layer of a tree (only use one queue!)\nbool BFS_leveling(TreeNode* root) {\n    // bfs leveling\n    queue&lt;TreeNode*&gt; q;\n    q.push(root);\n    int layer = 0;\n    while (!q.empty()) {\n        // record current size\n        int cur_size = q.size();\n        // lnodes in current layer\n        for (int i = 0; i &lt; cur_size; i++) {\n            TreeNode* p = q.front(); q.pop();\n            // do something...\n            if (p-&gt;left) q.push(p-&gt;left);\n            if (p-&gt;right) q.push(p-&gt;right);\n        }\n        layer++;\n    }\n}\n</code></pre>"},{"location":"c/cpp/#include-stack","title":"#include \\&lt;stack&gt;","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\nint main() {\n    stack&lt;int&gt; s;\n    s.push(2); // not push_back\n    int x = s.top();\n    s.pop(); // return void\n    s.empty();\n}\n</code></pre>"},{"location":"c/cpp/#include-priority_queue","title":"#include \\&lt;priority_queue&gt;","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt; // priority_queue is define\nusing namespace std;\n\n// &lt; means larger-first\nstruct cmp {\n    bool operator()(int a, int b) {\n        return a &lt; b;\n    }\n};\n\nint main() {\n    // heap, default is larger-first\n    priority_queue&lt;int&gt; pq;\n    pq.push(1);\n    pq.push(2);\n    pq.push(0);\n    p.top(); // 2, yes it's top, not front.\n\n    // smaller-first\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;\n\n\n    // custom cmp function by struct\n    set&lt;int, cmp&gt; s;\n    priority_queue&lt;int, vector&lt;int&gt;, cmp&gt; pq;\n\n    // custom cmp function by lambda\n    auto cmp = [&amp;](const pair&lt;int, int&gt;&amp; x, const pair&lt;int, int&gt;&amp; y) {\n        return arr[x.first] * arr[y.second] &gt; arr[x.second] * arr[y.first];\n    };\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, decltype(cmp)&gt; q(cmp);\n}\n\n// you may need to store a pair in priority queue and sort by a key:\ntypedef pair&lt;int,int&gt; pii;\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq; // smaller first\n// unfortunately, you cannot update the pq in-place, if you would like to modify it, you have to pop and re-push.\nauto [k, v] = pq.top(); pq.pop();\npq.push(pii(k))\n</code></pre>"},{"location":"c/cpp/#include-algorithm","title":"#include \\&lt;algorithm&gt;","text":"<pre><code>//// quick sort\nvector&lt;int&gt; v = {0, 2, 1, 3};\nsort(v.begin(), v.end()); // small -&gt; large\n\n// reverse sort\nsort(v.begin(), v.end(), greater&lt;int&gt;());  // large -&gt; small, c++14\n// or in two steps\nsort(v.begin(), v.end());\nreverse(v.begin(), v.end()); // large -&gt; small\n\nint v[4] = {4, 2, 3, 1};\nsort(v, v + 4);\n\n// sort with custom funciton / object.\nbool cmp(int i, int j) {return i &lt; j;} // True -&gt; [i, j]\nstruct cmp {\n    bool operator &lt; (int i, int j) {\n        return i &lt; j;\n    }\n}\nsort(v, v + 4, cmp); // same as default, small -&gt; large\nsort(v, v + 4, [](int i, int j) { return i &lt; j; }) // lambda version\n\n//// merge sort O(nlogn)\nstable_sort(v, v + 4);\n\n//// partial sort / topk, in O(klogn)\npartial_sort(v, v + 2, v + 4); // only sort the first two elements\n\n//// swap\nswap(x, y);\n\n//// is_sorted\nbool flag = is_sorted(v, v+4);\n\n//// min/max_element\ncout &lt;&lt; *min_element(v, v+4) &lt;&lt; \" ~ \" &lt;&lt; *max_element(v, v+4) &lt;&lt; endl; // return pointer/iterator\n\n//// nth_element, O(n) quick sort\nnth_element(v, v+2, v+4); // rearrange v[2] as the second element if ordered.\ncout &lt;&lt; v[2] &lt;&lt; endl;\n\n//// prev/next_permutation\nint xs[3] = {1, 2, 3};\ndo {\n    for (int i=0; i&lt;3; i++) cout &lt;&lt; xs[i] &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n} while (next_permutation(xs, xs+3));\n\n//// unique\nauto end = unique(v.begin(), v.end());\nv.erase(end, v.end());\nint new_size = v.size();\n\nint new_size = unique(v, v+4) - v;\n\n//// lower/upper_bound\n// check out of bound conditions!\n// lower_bound(begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002\n// upper_bound(begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002\n// lower/upper_bound([1,2,3], 4) --&gt; 3\n// lower/upper_bound([1,2,3], 0) --&gt; 0\n\n// the first position &gt;= target\nint l = lower_bound(v.begin(), v.end(), target) - v.begin();\n// the first position &gt; target\nint r = upper_bound(v.begin(), v.end(), target) - v.begin();\n\n// border condition \nif (l == v.size()) {\n    // v[l-1] &lt; target, non-exist case\n} else {\n    // v[l] &gt;= target\n    if (v[l] == target) {}\n    else {}\n}\n\n// find the last position &lt;= target\nif (l == v.size()) return l-1;\nelse if (l == 0) {\n    if (v[l] == target) return l;\n    else return -1; // non-exist case\n}\nelse {\n    if (v[l] == target) return l;\n    else return l-1;\n}\n\n\n//// reverse\nstring s = \"string\";\nreverse(s.begin(), s.end()); // inplace\n\n//// argsort (has to use another vector of pair)\nvector&lt;pair&lt;int, int&gt;&gt; v2;\nfor (int i = 0; i &lt; v.size(); i++) {\n    v2.push_back({v[i], i}); // pair value with index\n}\nsort(v2.begin(), v2.end()); // can use default sorting of pair&lt;int, int&gt;, lower to higher\nvector&lt;int&gt; idx;\nfor (int i = 0; i &lt; v2.size(); i++) {\n    idx.push_back(v2[i].second);\n}\n</code></pre>"},{"location":"c/cpp/#include-bitset","title":"#include \\&lt;bitset&gt;","text":"<pre><code>#include &lt;bitset&gt;\n\nbitset&lt;1000&gt; bs; // 1000 bits\n\nbitset&lt;32&gt; bs{10}; // binary form of x (only support unsigned int/long long)\nbitset&lt;8&gt; bs{0b00001111}; // just 00001111\nbitset&lt;6&gt; bs{\"010101\"}; // just 010101\n\ncout &lt;&lt; bs &lt;&lt; endl; // bit format\n\n// access pos bit, NOTE: the order is reversed! e.g., bs[0] = 1 for \"010101\"\n// out-of-bound is undefined!\nbool x = bs[pos]; \n\nbs.all();\nbs.any();\nbs.none();\n\nint cnt = bs.count(); // count number of 1\nint l = bs.size();\n\nbs.set(); // set all to 1\nbs.set(pos, val=true); // set pos to 1 or 0\nbs.reset(); // set all to 0\nbs.reset(pos); // set pos to 0, equals bs.set(pos, false);\nbs.flip(); // flip all\nbs.flip(pos); // flip pos\n\n// count bit function\nint countBit(int x) { // assume positive!\n    return bitset&lt;32&gt;(x).count();\n}\n</code></pre>"},{"location":"c/cpp/#class","title":"Class","text":"<pre><code>class A {\n// access modifier (default is private)\nprivate:\n    int p; // private variable\npublic:\n    // constructor\n    A() {} // default\n    A(int _a) { a = _a; } \n    A(int _a): a(_a) {} // init-list\n\n    A(const A&amp; other) { if (this != &amp;other) *this = other; } // default copy constructor\n\n    // operator overload\n    A&amp; operator=(const A&amp; other) {\n        a = other.a;\n        return *this;\n    }\n\n    // destructor\n    ~ A() {}\n\n    // member\n    int a;\n\n    // method\n    void setA(int _a) { a = _a; }\n};\n\nA a;\nA a(0);\nA a = A(0);\nA* pa = new A;\nA* pa = new A(0);\n\nprintf(\"%d\", a.a);\na.setA(1);\n</code></pre> <p>Struct is like an default-to-public Class:</p> <pre><code>struct A {\n    int a; // everything is public\n    void setA(int _a) { a = _a; }\n};\n</code></pre>"},{"location":"c/cpp/#inheritance","title":"Inheritance","text":"<pre><code>class B: public A {\npublic:\n    void printA() { printf(\"%d\", a); } // member a is inherited from class A\n};\n</code></pre>"},{"location":"c/cpp/#operator-overload","title":"operator overload","text":"<pre><code>class A {\npublic:\n    int x;\n    // constructor \n    A (int x):x(x) {}\n\n    // A = 1\n    void operator= (int rhs) {\n        x = rhs;\n    }\n\n    // ++A\n    A&amp; operator++ () {\n        x++;\n        return this;\n    }\n    // A++, use a fake parameter\n    A operator++ (int) {\n        A tmp(*this);\n        x++;\n        return tmp;\n    }\n\n    // -A\n    A operator- () {\n        return A(-x);\n    }\n\n    // A + A\n    A operator+ (const A&amp; rhs) {\n        return A(x + rhs.x);\n    }\n    // A + 1\n    A operator+ (const int rhs) {\n        return A(x + rhs);\n    }\n    // 1 + A\n    friend A operator+ (const int lhs, const A&amp; rhs) {\n        return A(lhs + rhs.x);\n    }\n\n    // A &lt; 1\n    bool operator&lt; (const int rhs) {\n        return x &lt; rhs;\n    }\n\n    // A[i]\n    int&amp; operator[] (int i) {\n        return arr[i];\n    }\n\n    // A(a)\n    void operator() (int a) {\n        return a + x;\n    }\n\n    // cout &lt;&lt; A;\n    friend ostream &amp;operator &lt;&lt; (ostream&amp; output, const A&amp; a) {\n        output &lt;&lt; a.x;\n        return output;\n    }\n\n    // cin &gt;&gt; A;\n    friend istream &amp;operator &gt;&gt; (istream&amp; input, A&amp; a) {\n        input &gt;&gt; a.x;\n        return input;\n    }\n\n};\n</code></pre>"},{"location":"c/cpp/#polymorphism","title":"polymorphism","text":""},{"location":"c/cpp/#template","title":"Template","text":""},{"location":"c/cpp/#function","title":"Function","text":"<pre><code>template &lt;typename T&gt;\nT const&amp; max(T const&amp; a, T const&amp; b) {\n    return a &lt; b ? b : a;\n}\n</code></pre>"},{"location":"c/cpp/#class_1","title":"Class","text":"<pre><code>template &lt;typename T&gt;\nclass A {\npublic:\n    vector&lt;T&gt; a;\n    void push(T const&amp; x) { a.push_back(x); }\n    T top() const { return a.back(); }\n}\n</code></pre>"},{"location":"c/cpp/#new-delete","title":"new &amp; delete","text":"<pre><code>char* p = new double;\ndelete p;\n\nchar* s = NULL;\ns = new char[20];\ndelete [] s;\n</code></pre>"},{"location":"c/cpp/#shared_ptr","title":"shared_ptr","text":"<p>a smart pointer class, that manages reference count of the object and automatically deconstruct the object if reference count is 0.</p> <pre><code>#include &lt;memory&gt;\n\nstd::shared_ptr&lt;ClassName&gt; p(new ClassName());\nstd::shared_ptr&lt;ClassName&gt; p = std::make_shared&lt;ClassName&gt;();\n\np.reset(new ClassName()); // the first object is deconstructed.\n</code></pre>"},{"location":"c/cpp/#reference","title":"Reference","text":"<p>less powerful but safer than pointer. it works like an alias.</p> <ul> <li>reference must be initialized as soon as created.</li> </ul> <ul> <li>reference cannot be made to refer to another object once created. (cannot be re-initialized)</li> </ul> <ul> <li>reference cannot be null. (thus there is no container of references.)</li> </ul>"},{"location":"c/cpp/#ref-as-an-alias","title":"ref as an alias:","text":"<pre><code>int i = 0;\nint &amp; j = i; // j is an alias of i\nj = 1; // i == 1 is true\n\nint &amp; k; // error, not initialized !\n\nint f() { return 42 ; };\nint (&amp; rf)() = f; // reference to a func\n</code></pre>"},{"location":"c/cpp/#ref-as-function-return-value","title":"ref as function return value:","text":"<pre><code>double vals[] = {10.1, 12.6, 33.1, 24.1, 50.0};\ndouble&amp; setValues(int i) { return vals[i]; }\nsetValues(0) = 0; // okay\n</code></pre>"},{"location":"c/cpp/#ref-as-function-args","title":"ref as function args:","text":"<pre><code>void swap(int&amp; x, int&amp; y) {\n    int tmp = x; x = y; y = tmp;\n}\n</code></pre>"},{"location":"c/cpp/#memory-layout","title":"Memory Layout","text":"<ul> <li>Text Segment: the executable program itself. often read-only.</li> <li>Initialized Data Segment (DS, data segment): initialized global variables, static variables.</li> <li>Uninitialized Data Segment (BSS, block started by symbol): uninitialized global variables, static variables.</li> <li>Stack: for normal memory allocation (mostly int x[size]), also contains the program stack, to enable recursive functions.</li> <li>Heap: for dynamic memory allocation.</li> </ul> <pre><code>// C++ code -- non-vector parts are also true for C \n\nchar* s = \"hello world!\"; // DS, read-write\nconst int debug = 1; // DS, read-only\n\nint arr1[100000]; // BSS \nint N; // BSS\nvector&lt;int&gt; arr2; // HEAP \n\nstruct DumbStruct { \n    int someArr[10000]; \n}; \n\nint main () { \n    int arr3[100000]; // STACK\n    static int arr7[100000]; // BSS \n\n    vector&lt;int&gt; arr4; // HEAP \n\n    int* arr5 = new int[100000]; // HEAP \n    int* arr6 = (int*) malloc(100000 * sizeof(int)); // HEAP \n\n    DumbStruct struct; // STACK \n\n    DumbStruct* struct2 = new DumbStruct(); // HEAP \n    vector&lt;DumbStruct&gt; structarr; // HEAP \n\n    int n; \n    scanf(\"%d\", &amp;n); \n    int arr8[n]; // STACK (assuming C99 -- this does not compile in C++) \n}\n</code></pre>"},{"location":"c/modern_cpp/","title":"modern c++","text":""},{"location":"c/modern_cpp/#nullptr-c11","title":"nullptr (c++11)","text":"<p>To replace <code>NULL</code>'s use as a pointer.</p> <p><code>NULL</code> is interpreted as <code>0</code> or <code>(void*) 0</code>, which will lead to confusion in overloaded functions:</p> <pre><code>void f(char*);\nvoid f(int);\nf(NULL) // here NULL is expected as a NULL pointer, but will call f(int)\n</code></pre> <p><code>nullptr</code> has the type of <code>std::nullptr_t</code> and can be safely casted to any pointer type:</p> <pre><code>f(0); // f(int)\nf(nullptr); // f(char*)\n</code></pre>"},{"location":"c/modern_cpp/#value-initialization-c11","title":"value initialization (c++11)","text":"<pre><code>int x{}; // default initialization, equals to `int x = 0;`\n</code></pre>"},{"location":"c/modern_cpp/#string_view-c17","title":"string_view (c++17)","text":"<p>make a view of a string without copying it.</p> <p>Prefer <code>std::string_view</code> over <code>std::string</code> for read-only strings, unless you already have a <code>std::string</code>.</p> <pre><code>// create a view\nstring s = \"test\";\nstring_view sv{s};\n\n// view to string\nstring_view sv{\"test\"};\nstring str{sv};\nstatic_cast&lt;string&gt;(sv);\n</code></pre>"},{"location":"c/modern_cpp/#cast","title":"cast","text":"<ul> <li> <p>Implicit (Automatic) conversion</p> <pre><code>int a = 1;\nfloat b = a;\n</code></pre> </li> </ul> <ul> <li> <p>Explicit conversion (C-style)</p> <pre><code>int a = (int) 1.0;\n\nfloat* p;\nmalloc((void*)p, sizeof(float) * 10);\n</code></pre> </li> </ul> <ul> <li> <p><code>static_cast</code></p> <p>attempt to convert between two different data types</p> <pre><code>int a = 1;\nfloat b = static_cast&lt;float&gt;(a);\n\n// wont compile! pointer types not related (int* --&gt; float*).\nfloat* b = static_cast&lt;float*&gt;(&amp;a);\n</code></pre> </li> </ul> <ul> <li> <p><code>const_cast</code></p> <p>[do not use!] change the <code>const</code>-ness of the pointer.</p> <pre><code>int a = 1;\n// not-const to const\nint* p = &amp;a;\nconst int* cp = const_cast&lt;int*&gt;(p);\n\n// const to not-const\nconst int* cp = &amp;a;\nint* p = const_cast&lt;int*&gt;(cp);\n</code></pre> </li> </ul> <ul> <li> <p><code>reinterpret_cast</code></p> <p>Converts between types by reinterpreting the underlying bit pattern. powerful but use with care.</p> <pre><code>struct S1 { int a; } s1;\nstruct S2 { int a; private: int b; } s2; // not standard-layout\nunion U { int a; double b; } u = {0};\nint arr[2];\n\nint* p1 = reinterpret_cast&lt;int*&gt;(&amp;s1); // value of p1 is \"pointer to s1.a\" because s1.a\n                                       // and s1 are pointer-interconvertible\n\nint* p2 = reinterpret_cast&lt;int*&gt;(&amp;s2); // value of p2 is unchanged by reinterpret_cast and\n                                       // is \"pointer to s2\". \n\nint* p3 = reinterpret_cast&lt;int*&gt;(&amp;u);  // value of p3 is \"pointer to u.a\": u.a and u are\n                                       // pointer-interconvertible\n\ndouble* p4 = reinterpret_cast&lt;double*&gt;(p3); // value of p4 is \"pointer to u.b\": u.a and u.b\n                                            // are pointer-interconvertible because both\n                                            // are pointer-interconvertible with u\n\nint* p5 = reinterpret_cast&lt;int*&gt;(&amp;arr); // value of p5 is unchanged by reinterpret_cast and\n                                        // is \"pointer to arr\"\n</code></pre> </li> </ul> <ul> <li> <p><code>dynamic_cast</code></p> <p>to convert classes up, down along the inheritance hierarchy.</p> <pre><code>struct V {\n    virtual void f() {}  // must be polymorphic to use runtime-checked dynamic_cast\n};\nstruct A : virtual V {};\nstruct B : A {};\n\nB b;\nA&amp; a = b; // upcast (automatic)\nB&amp; bb = a; // wont compile! \n\nB&amp; bb = (B&amp;)a; // c-style downcast\nB&amp; bb = dynamic_cast&lt;B&amp;&gt;(a); // or use dynamic_cast to downcast\n</code></pre> </li> </ul>"},{"location":"c/modern_cpp/#constexpr","title":"constexpr","text":"<p>constant expression is different from constant value. </p> <p>Length of an array must be a constant expression.</p> <pre><code>const int l = 10;\nchar a[l]; // Error, though reasonable\n\nconstexpr int l2 = l;\nchar a[l2]; // OK.\n\n// it even supports recursion (though useless)\nconstexpr int fibonacci(const int n) {\n    return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2);\n}\nchar a[fibonacci(5)]; // OK\n</code></pre>"},{"location":"c/modern_cpp/#declare-variable-inside-if-c17","title":"declare variable inside if (c++17)","text":"<pre><code>if (size_t n = v.size(); n &gt; 10) {\n    // n is only visible inside this block.\n}\n\n// like in go, and also in python 3.8:\nif (n := len(v)) &gt; 10:\n    pass // but n will be visible since this block!\n</code></pre>"},{"location":"c/modern_cpp/#initializer-list","title":"initializer list","text":"<pre><code>class A {\npublic:\n    std::vector&lt;int&gt; v;\n    A(std::initializer_list&lt;int&gt; l) {\n        for (int x: l) v.push_basck(x);\n    }\n};\n\nA a{1,2,3,4,5};\nA f() { return {1,2,3}; }\n</code></pre>"},{"location":"c/modern_cpp/#tuple-c17","title":"tuple (c++17)","text":"<pre><code>#include &lt;tuple&gt;\n\n// instanciate a tuple\nstd::tuple&lt;int, int&gt; foo_tuple()  {\n  return {1, -1};  // Error until c++11:N4387\n  return std::tuple&lt;int, int&gt;{1, -1}; // Always works\n  return std::make_tuple(1, -1); // Always works\n}\n\n// access values\nstd::tuple&lt;double, char, std::string&gt; get_student(int id)\n{\n    if (id == 0) return std::make_tuple(3.8, 'A', \"Lisa Simpson\");\n    if (id == 1) return std::make_tuple(2.9, 'C', \"Milhouse Van Houten\");\n    if (id == 2) return std::make_tuple(1.7, 'D', \"Ralph Wiggum\");\n    throw std::invalid_argument(\"id\");\n}\n\nint main()\n{\n    // via get&lt;i&gt;(tuple)\n    auto student0 = get_student(0);\n    std::cout &lt;&lt; \"ID: 0, \"\n              &lt;&lt; \"GPA: \" &lt;&lt; std::get&lt;0&gt;(student0) &lt;&lt; \", \"\n              &lt;&lt; \"grade: \" &lt;&lt; std::get&lt;1&gt;(student0) &lt;&lt; \", \"\n              &lt;&lt; \"name: \" &lt;&lt; std::get&lt;2&gt;(student0) &lt;&lt; '\\n';\n\n    // via tie\n    double gpa1;\n    char grade1;\n    std::string name1;\n    std::tie(gpa1, grade1, name1) = get_student(1);\n    std::cout &lt;&lt; \"ID: 1, \"\n              &lt;&lt; \"GPA: \" &lt;&lt; gpa1 &lt;&lt; \", \"\n              &lt;&lt; \"grade: \" &lt;&lt; grade1 &lt;&lt; \", \"\n              &lt;&lt; \"name: \" &lt;&lt; name1 &lt;&lt; '\\n';\n\n    // via C++17 structured binding: (recommend!)\n    auto [gpa2, grade2, name2] = get_student(2);\n    std::cout &lt;&lt; \"ID: 2, \"\n              &lt;&lt; \"GPA: \" &lt;&lt; gpa2 &lt;&lt; \", \"\n              &lt;&lt; \"grade: \" &lt;&lt; grade2 &lt;&lt; \", \"\n              &lt;&lt; \"name: \" &lt;&lt; name2 &lt;&lt; '\\n';\n}\n</code></pre> <p>Tricks: <code>struct</code> as a tuple.</p> <pre><code>struct S { int a, b, c; };\n\nS func(int _a, int _b, int c_) {\n    return (S) {_a, _b, _c}; // c++11 list initialization (https://en.cppreference.com/w/cpp/language/list_initialization)\n}\n\nS s = func(0, 1, 2);\n\ncout &lt;&lt; s.a &lt;&lt; endl;\n</code></pre>"},{"location":"c/modern_cpp/#stdoptional-c17","title":"std::optional (c++17)","text":"<p>Any instance of <code>optional&lt;T&gt;</code> at any given point in time either contains a value or does not contain a value.</p> <pre><code>#include &lt;string&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;optional&gt;\n\n// optional can be used as the return type of a factory that may fail\nstd::optional&lt;std::string&gt; create(bool b) {\n    if (b)\n        return \"Godzilla\";\n    return {};\n}\n\n// std::nullopt can be used to create any (empty) std::optional\nauto create2(bool b) {\n    return b ? std::optional&lt;std::string&gt;{\"Godzilla\"} : std::nullopt;\n}\n\n// std::reference_wrapper may be used to return a reference\nauto create_ref(bool b) {\n    static std::string value = \"Godzilla\";\n    return b ? std::optional&lt;std::reference_wrapper&lt;std::string&gt;&gt;{value}\n             : std::nullopt;\n}\n\nint main()\n{\n    std::cout &lt;&lt; \"create(false) returned \"\n              &lt;&lt; create(false).value_or(\"empty\") &lt;&lt; '\\n';\n\n    // optional-returning factory functions are usable as conditions of while and if\n    if (auto str = create2(true)) {\n        std::cout &lt;&lt; \"create2(true) returned \" &lt;&lt; *str &lt;&lt; '\\n';\n    }\n\n    if (auto str = create_ref(true)) {\n        // using get() to access the reference_wrapper's value\n        std::cout &lt;&lt; \"create_ref(true) returned \" &lt;&lt; str-&gt;get() &lt;&lt; '\\n';\n        str-&gt;get() = \"Mothra\";\n        std::cout &lt;&lt; \"modifying it changed it to \" &lt;&lt; str-&gt;get() &lt;&lt; '\\n';\n    }\n}\n\n/*\ncreate(false) returned empty\ncreate2(true) returned Godzilla\ncreate_ref(true) returned Godzilla\nmodifying it changed it to Mothra\n*/\n</code></pre>"},{"location":"c/modern_cpp/#lambda-function-c11","title":"lambda function (c++11)","text":"<p>Lambdas can be used as an anonymous in-place function, or a nested function.</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\n// value catching\nint main() {\n    int a = 0;\n\n    // do not catch any local variables\n    auto foo = []() { cout &lt;&lt; a &lt;&lt; endl; }; // error, a not defined.\n\n    // catch all local variables, pass by value\n    auto foo = [=]() { a = 1; cout &lt;&lt; a &lt;&lt; endl; }; // 1\n    cout &lt;&lt; a &lt;&lt; endl; // still 0\n\n    // catch all local variables, pass by reference\n    auto foo = [&amp;]() { a = 1; cout &lt;&lt; a &lt;&lt; endl; }; // 1\n    cout &lt;&lt; a &lt;&lt; endl; // also 1\n\n    // catch spesific variables\n    auto foo = [&amp;a]() {}; // only catch a\n}\n</code></pre> <p>Recursive lambdas: must define the type explicitly!</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt; // to use std::function\n\nusing namespace std;\n\nint main() {\n\n    // examples to use function\n    function&lt;void()&gt; foo = []() {};\n    function&lt;bool(int, int)&gt; foo = [](int a, int b) {};\n\n    // recursive lambda (cannot use auto)\n    function&lt;bool(int)&gt; dfs = [&amp;](int x) {\n        for (int y: graph[x]) {\n            dfs(y);\n        }\n    }\n\n    dfs(0);\n\n    // trick to avoid using explicit type for recursive lambda function: add another layer of abstraction\n    auto dfs = [&amp;](int x) {\n        auto dfs_impl = [&amp;](int x, auto&amp; dfs_ref) {\n            for (int y: graph[x]) {\n                dfs_ref(y);\n            }\n        }\n        dfs_impl(x, dfs_impl);\n    }\n\n}\n</code></pre>"},{"location":"c/template/","title":"template tutorial","text":""},{"location":"c/template/#basics","title":"basics","text":"<ul> <li> <p>\u8f93\u5165\u53d8\u91cf\u7684\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;typename T&gt; T abs(T x) { return x &gt;= 0 ? x : -x; }\n\nint main() {\n  int a = -1;\n  cout &lt;&lt; abs&lt;int&gt;(a) &lt;&lt; endl; // standard call, OK.\n  cout &lt;&lt; abs(a) &lt;&lt; endl; // auto deduce, also OK.\n}\n</code></pre> <ul> <li> <p>\u8fd4\u56de\u503c\u4e0d\u80fd\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc\uff01</p> <pre><code>template &lt;typename T&gt; T cast(int x) { return static_cast&lt;T&gt;(x); }\n\nfloat x = cast(1); // cannot compile (no matching function to call)\nfloat x = cast&lt;float&gt;(1); // OK, must be explicit\n</code></pre> </li> </ul> <ul> <li> <p>\u90e8\u5206\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc\uff1a\u5fc5\u987b\u624b\u52a8\u6307\u5b9a\u7684\u5728\u5de6\uff0c\u53ef\u81ea\u52a8\u63a8\u5bfc\u7684\u5728\u53f3\uff08\u7c7b\u4f3c\u4e8e\u9ed8\u8ba4\u53c2\u6570\u5728\u53f3\uff09</p> <pre><code>int x = 1;\n\n// wrong\ntemplate &lt;typename F, typename T&gt; T cast(F x) { return static_cast&lt;T&gt;(x); }\nfloat x = cast&lt;int&gt;(x); // cannot compile\nfloat x = cast&lt;int, float&gt;(x); // standard, OK\n\n// correct\ntemplate &lt;typename T, typename F&gt; T cast(F x) { return static_cast&lt;T&gt;(x); }\nfloat x = cast&lt;float&gt;(x); // OK, F = int is deduced from input.\nfloat x = cast&lt;float, int&gt;(x); // standard, OK\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>\u6574\u578b\u6a21\u677f\u53c2\u6570</p> <p>\u6cdb\u6574\u578b\uff08int, unsigned int, long long, unsigned long long, short, unsigned short, bool\uff09\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570\uff0c\u901a\u5e38\u7528\u4f5c\u5e38\u6570\u3002</p> <pre><code>template &lt;typename T, int size&gt; struct A {\n    T data[size];\n};\n\nA&lt;int, 10&gt; a;\n</code></pre> </li> </ul>"},{"location":"c/template/#metageneric-programming","title":"meta/generic programming","text":"<p>\u529f\u80fd\u7c7b\u4f3c\u4e8eC\u4e2d\u7684MACRO\uff0c\u5404\u79cd\u52a8\u6001\u8bed\u8a00\u7684duck typing\uff0c\u5176\u76ee\u7684\u662f\u5b9e\u73b0\u9759\u6001\u7c7b\u578b\u7684\u62bd\u8c61\u3002</p> <ul> <li> <p>\u7279\u5316\u4e0e\u504f\u7279\u5316\uff08Specialization &amp; Partial Specialization\uff09</p> <p>\u7528\u4e8e\u5b9e\u73b0\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u8f93\u5165\u8c03\u7528\u4e0d\u540c\u65b9\u6cd5\uff1a</p> <pre><code>def f(x):\n    if isinstance(i, int): return -x;\n    else if isinstance(i, float): return 1/x;\n    else: return x;\n</code></pre> <p>\u6ce8\u610fc++\u6ca1\u6709\u5224\u65ad\u7c7b\u578b\u7684\u673a\u5236\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u91cd\u8f7d\u5b9e\u73b0\u8fd9\u79cd\u529f\u80fd\u3002\u7279\u5316\u5728\u7f16\u8bd1\u5668\u5b9e\u73b0\u7c7b\u578b\u5224\u65ad\u5e76\u5206\u6d41\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// the generic template\ntemplate &lt;typename T&gt; T f(T x) { return x; }\n\n// specialization for int: negation\ntemplate &lt;&gt; int f&lt;int&gt;(int x) { return -x; }\n\n// specialization for float: reciprocal\ntemplate &lt;&gt; float f&lt;float&gt;(float x) { return 1/x; }\n\nint main() {\n    int x = 1;\n    float y = 2;\n    cout &lt;&lt; f(x) &lt;&lt; endl;\n    cout &lt;&lt; f(y) &lt;&lt; endl;\n}\n</code></pre> <p>Application: Recursively Remove Pointer type:</p> <pre><code>template &lt;typename T&gt;\nclass RemovePointer&lt;T*&gt; {\npublic:\n  // `typename A&lt;T&gt;::t` means `t` is a type, instead of a member of `A&lt;T&gt;`.\n    // ref: https://stackoverflow.com/questions/610245/where-and-why-do-i-have-to-put-the-template-and-typename-keywords\n    typedef typename RemovePointer&lt;T&gt;::Result Result;\n};\n</code></pre> </li> </ul> <ul> <li> <p>\u53cc\u9636\u6bb5\u540d\u79f0\u67e5\u627e\uff08Two phase name lookup\uff09</p> <p>\u95ee\u9898\uff1a\u7f16\u8bd1\u65f6\u7684\u6a21\u677f\u6709\u65f6\u5e76\u4e0d\u80fd\u786e\u5b9a\u4ee3\u7801\u662f\u5426\u6b63\u786e\uff0c\u53ea\u6709\u5b9e\u4f8b\u5316\u786e\u5b9a\u53c2\u6570\u7c7b\u578b\u4e4b\u540e\u624d\u80fd\u3002</p> <pre><code>// we don't know if x really has a member called `a`.\ntemplate &lt;typename T&gt; void f(T&amp; x) {\n    x.a = 1;\n}\n</code></pre> <p>\u56e0\u6b64\uff0c\u540d\u79f0\u67e5\u627e\u4f1a\u5728\u6a21\u677f\u5b9a\u4e49\uff08\u7f16\u8bd1\uff09\u548c\u5b9e\u4f8b\u5316\uff08\u8fd0\u884c\uff09\u65f6\u5404\u8fdb\u884c\u4e00\u6b21\u3002\u7f16\u8bd1\u9636\u6bb5\u65e0\u6cd5\u786e\u5b9a\u7684\u5730\u65b9\u4e5f\u4f1a\u5047\u8bbe\u662f\u6b63\u786e\u7684\u3002</p> <pre><code>template &lt;typename T&gt; struct X {};\ntemplate &lt;typename T&gt; struct Y {\n    typedef X&lt;T&gt; type1; // pass compilation, can find X.\n    typedef typename X&lt;T&gt;::noMember type2; // pass compilation, X&lt;T&gt; is dependent, leave it to runtime.\n    typedef noMember type3; // cannot pass compilation, cannot find noMember.\n};\n</code></pre> <p><code>typedef typename</code> \u7684\u5e94\u7528\u89c4\u5219\uff1a</p> <ul> <li>\u5982\u679c\u7f16\u8bd1\u5668\u80fd\u5728\u51fa\u73b0\u7684\u65f6\u5019\u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981<code>typename</code> \u3002</li> </ul> <ul> <li>\u5982\u679c\u5fc5\u987b\u8981\u5230\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u624d\u80fd\u77e5\u9053\u5b83\u662f\u4e0d\u662f\u5408\u6cd5\uff0c\u90a3\u4e48\u5b9a\u4e49\u7684\u65f6\u5019\u5c31\u628a\u8fd9\u4e2a\u540d\u79f0\u4f5c\u4e3a\u53d8\u91cf\u800c\u4e0d\u662f\u7c7b\u578b\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u7528<code>typename</code>\u663e\u5f0f\u58f0\u660e\u8fd9\u662f\u4e00\u4e2a\u7c7b\u578b\u3002</li> </ul> <pre><code>template &lt;typename T&gt; void meow() {\n  T::a * b; // will be explained as an expression!\n}\n</code></pre> <p>More use cases:</p> <pre><code>struct A;\ntemplate &lt;typename T&gt; struct B;\ntemplate &lt;typename T&gt; struct X {\n    typedef X&lt;T&gt; _A; // \u7f16\u8bd1\u5668\u5f53\u7136\u77e5\u9053 X&lt;T&gt; \u662f\u4e00\u4e2a\u7c7b\u578b\u3002\n    typedef X    _B; // X \u7b49\u4ef7\u4e8e X&lt;T&gt; \u7684\u7f29\u5199\n    typedef T    _C; // T \u4e0d\u662f\u4e00\u4e2a\u7c7b\u578b\u8fd8\u73a9\u6bdb\n\n    // \uff01\uff01\uff01\u6ce8\u610f\u6211\u8981\u53d8\u5f62\u4e86\uff01\uff01\uff01\n    class Y {\n        typedef X&lt;T&gt;     _D;          // X \u7684\u5185\u90e8\uff0c\u65e2\u7136\u5916\u90e8\u9ad8\u6795\u65e0\u5fe7\uff0c\u5185\u90e8\u66f4\u4e0d\u7528\u8bf4\u4e86\n        typedef X&lt;T&gt;::Y  _E;          // \u55ef\uff0c\u8fd9\u91cc\u4e5f\u6ca1\u95ee\u9898\uff0c\u7f16\u8bd1\u5668\u77e5\u9053Y\u5c31\u662f\u5f53\u524d\u7684\u7c7b\u578b\uff0c\n                                      // \u8fd9\u91cc\u5728VS2015\u4e0a\u4f1a\u6709\u9519\uff0c\u9700\u8981\u6dfb\u52a0 typename\uff0c\n                                      // Clang \u4e0a\u987a\u5229\u901a\u8fc7\u3002\n        typedef typename X&lt;T*&gt;::Y _F; // \u8fd9\u4e2a\u5c45\u7136\u8981\u52a0 typename\uff01\n                                      // \u56e0\u4e3a\uff0cX&lt;T*&gt;\u548cX&lt;T&gt;\u4e0d\u4e00\u6837\u54e6\uff0c\n                                      // \u5b83\u53ef\u80fd\u4f1a\u5728\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u88ab\u522b\u7684\u504f\u7279\u5316\u7ed9\u62a2\u8fc7\u53bb\u5b9e\u73b0\u4e86\u3002\n    };\n\n    typedef A _G;                   // \u55ef\uff0c\u6ca1\u95ee\u9898\uff0cA\u5728\u5916\u9762\u58f0\u660e\u5566\n    typedef B&lt;T&gt; _H;                // B&lt;T&gt;\u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\n    typedef typename B&lt;T&gt;::type _I; // \u55ef\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053B&lt;T&gt;::type\u7684\u4fe1\u606f\uff0c\n                                    // \u6240\u4ee5\u9700\u8981typename\n    typedef B&lt;int&gt;::type _J;        // B&lt;int&gt; \u4e0d\u4f9d\u8d56\u6a21\u677f\u53c2\u6570\uff0c\n                                    // \u6240\u4ee5\u7f16\u8bd1\u5668\u76f4\u63a5\u5c31\u5b9e\u4f8b\u5316\uff08instantiate\uff09\u4e86\n                                    // \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\uff0cB\u5e76\u6ca1\u6709\u88ab\u5b9e\u73b0\uff0c\u6240\u4ee5\u5c31\u51fa\u9519\u4e86\n};\n</code></pre> </li> </ul> <ul> <li> <p>\u91cd\u8f7d\u4e0e\u504f\u7279\u5316\u7684\u533a\u522b</p> <p>\u504f\u7279\u5316\u5fc5\u987b\u4e0e\u539f\u578b\u76f8\u5bb9\uff08\u6a21\u677f\u53c2\u6570\u7684\u6570\u91cf\u76f8\u540c\uff09\uff0c\u4f46\u51fd\u6570\u91cd\u8f7d\u53ef\u4ee5\u4efb\u610f\u6539\u53d8\u53c2\u6570\u5217\u8868\u3002</p> <p>\u5982\u679c\u4e00\u6b21\u8c03\u7528\u540c\u65f6\u5339\u914d\u591a\u4e2a\u7279\u5316\uff0c\u5219\u4f1a\u62a5\u9519\uff08ambiguous partial specialization\uff09\u3002</p> <pre><code>template &lt;typename T, typename U&gt; struct X            ;    // 0\uff0c\u539f\u578b\ntemplate &lt;typename T&gt;             struct X&lt;T,  T  &gt; {};    // 1\uff0c\u7279\u5316\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u76f8\u540c\uff0c\u4ecd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\ntemplate &lt;typename T&gt;             struct X&lt;T*, T  &gt; {};    // 2\ntemplate &lt;typename T&gt;             struct X&lt;T,  T* &gt; {};    // 3\ntemplate &lt;typename U&gt;             struct X&lt;U,  int&gt; {};    // 4\uff0c\u53ea\u7279\u5316\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4ecd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\ntemplate &lt;typename U&gt;             struct X&lt;U*, int&gt; {};    // 5\ntemplate &lt;typename U, typename T&gt; struct X&lt;U*, T* &gt; {};    // 6\uff0c\u4ecd\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4f46\u5747\u4f7f\u7528\u5176\u6307\u9488\u7c7b\u578b\ntemplate &lt;typename U, typename T&gt; struct X&lt;U,  T* &gt; {};    // 7\n\ntemplate &lt;typename T&gt;             struct X&lt;unique_ptr&lt;T&gt;, shared_ptr&lt;T&gt;&gt;; // 8\n\n// \u4ee5\u4e0b\u7279\u5316\uff0c\u5206\u522b\u5bf9\u5e94\u54ea\u4e2a\u504f\u7279\u5316\u7684\u5b9e\u4f8b\uff1f\n// \u6b64\u65f6\u504f\u7279\u5316\u4e2d\u7684T\u6216U\u5206\u522b\u662f\u4ec0\u4e48\u7c7b\u578b\uff1f\n\nX&lt;float*,  int&gt;      v0; // 5\nX&lt;double*, int&gt;      v1; // 5                  \nX&lt;double,  double&gt;   v2; // 1                     \nX&lt;float*,  double*&gt;  v3; // 6\nX&lt;float*,  float*&gt;   v4; // wont compile            \nX&lt;double,  float*&gt;   v5; // 7                     \nX&lt;int,     double*&gt;  v6; // 7                      \nX&lt;int*,    int&gt;      v7; // wont compile       \nX&lt;double*, double&gt;   v8; // 2\n</code></pre> </li> </ul> <ul> <li> <p>\u9ed8\u8ba4\u6a21\u677f\u53c2\u6570</p> <p>\u7c7b\u4f3c\u4e8e\u9ed8\u8ba4\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u4e8e\u6a21\u62df\u53d8\u957f\u6a21\u677f\u53c2\u6570\u5217\u8868\u3002</p> <pre><code>template &lt;typename T0, typename T1 = void&gt; struct X {\n    static void call(T0&amp; p0, T1&amp; p1); // 0\n};\n\ntemplate &lt;typename T0&gt; struct X&lt;T0&gt; {\n    static void call(T0&amp; p0); // 1\n};\n\ntemplate &lt;&gt; struct X&lt;double&gt; {...};\ntemplate &lt;&gt; struct X&lt;double, double&gt; {...};\n\nint main() {\n    X&lt;int&gt;::call(5); // 1\n    X&lt;int, float&gt;::call(5, 0.1f) // 0\n}\n</code></pre> <p>\u4f7f\u7528\u8868\u8fbe\u5f0f\u7684\u9ed8\u8ba4\u5b9e\u53c2\uff1a</p> <pre><code>#include &lt;complex&gt;\n#include &lt;type_traits&gt;\n\ntemplate &lt;typename T&gt; T CustomDiv(T lhs, T rhs) {\n    T v;\n    // Custom Div\u7684\u5b9e\u73b0\n    return v;\n}\n\n// \u539f\u578b\ntemplate &lt;typename T, typename Enabled = std::true_type&gt; struct SafeDivide {\n    static T Do(T lhs, T rhs) {\n        return CustomDiv(lhs, rhs);\n    }\n};\n\n// \u504f\u7279\u5316A\ntemplate &lt;typename T&gt; struct SafeDivide&lt;T, typename std::is_floating_point&lt;T&gt;::type&gt;{    \n    static T Do(T lhs, T rhs){\n        return lhs/rhs;\n    }\n};\n\n// \u504f\u7279\u5316B\ntemplate &lt;typename T&gt; struct SafeDivide&lt;T, typename std::is_integral&lt;T&gt;::type&gt;{   \n    static T Do(T lhs, T rhs){\n        return rhs == 0 ? 0 : lhs/rhs;\n    }\n};\n\nvoid foo(){\n    SafeDivide&lt;float&gt;::Do(1.0f, 2.0f);    // \u8c03\u7528\u504f\u7279\u5316A\n    // \u5148\u5339\u914d\u539f\u578b\uff0c\u5f97\u5230\u9ed8\u8ba4\u5b9e\u9645\u53c2\u6570&lt;float, true_type&gt;\uff1b\u518d\u5339\u914d\u7279\u5316\uff0cA\u4e3a&lt;float, true_type&gt;\uff0cB\u4e3a&lt;float, false_type&gt;\uff0c\u6545\u8fdb\u4e00\u6b65\u5339\u914dA\u3002\n    SafeDivide&lt;int&gt;::Do(1, 2);          // \u8c03\u7528\u504f\u7279\u5316B\n    SafeDivide&lt;std::complex&lt;float&gt;&gt;::Do({1.f, 2.f}, {1.f, -2.f}); // \u8c03\u7528\u539f\u578bCustomDiv\n}\n</code></pre> </li> </ul> <ul> <li> <p>\u53d8\u53c2\u6a21\u677f\uff08Variadic Template\uff09</p> <p>c++11\u5f15\u5165\u7684\u539f\u751f\u53d8\u957f\u6a21\u677f\u53c2\u6570\u652f\u6301\u3002</p> <p>\u7c7b\u4f3c\u4e8e\u51fd\u6570\u7684\u53d8\u957f\u53c2\u6570\uff0c\u53ea\u80fd\u653e\u5728\u53c2\u6570\u5217\u8868\u7684\u6700\u540e\u3002</p> <pre><code>template &lt;typename... Ts&gt; class X {}; // OK\ntemplate &lt;typename... Ts, typename U&gt; class X {}; // Wrong! Ts should be at last.\n\ntemplate &lt;typename... Ts, typename U&gt; class X&lt;U, Ts...&gt; {}; // OK, this is a specialization of X, the real parameter order is &lt;U, Ts, ...&gt;\ntemplate &lt;typename... Ts, typename U&gt; class X&lt;Ts..., U&gt; {}; // Wrong specialization.\n</code></pre> </li> </ul> <ul> <li> <p>SFINAE\uff1a\u66ff\u6362\u5931\u8d25\u4e0d\u662f\u9519\u8bef\uff08Substitution Failure Is Not An Error\uff09</p> <p>\u51fa\u73b0\u5728\u6a21\u677f\u53c2\u6570\u5957\u5a03\u7684\u60c5\u51b5\uff0c\u4f8b\u5982<code>typename T::T2</code>\u4f7f\u7528\u4e86\u672a\u77e5\u7684<code>T</code>\u5185\u5b9a\u4e49\u7684\u672a\u77e5\u7684<code>T2</code>\u3002</p> <p>\u66ff\u6362\u6307\u6a21\u677f\u5b9e\u4f8b\u5316\u65f6\uff0c\u5373<code>T</code>\u88ab\u6307\u5b9a\u65f6\uff0c\u4e0a\u8ff0\u5957\u5a03\u6a21\u677f<code>T::T2</code>\u88ab\u66ff\u6362\u4e3a\u5177\u4f53\u7c7b\u578b\u7684\u8fc7\u7a0b\u3002</p> <p>SFINAE\u63cf\u8ff0\u4e86\u53ea\u8981\u6709\u4efb\u610f\u4e00\u4e2a\u7279\u5316\u53ef\u4ee5\u6210\u529f\u5b8c\u6210\u66ff\u6362\uff0c\u4ee3\u7801\u5c31\u4e0d\u4f1a\u51fa\u9519\u7684\u884c\u4e3a\u3002</p> <p>SFINAE\u662fc++\u5bf9\u4e8e\u7f3a\u4e4fintrospection\u673a\u5236\uff08\u4ece\u5b9e\u4f8b\u83b7\u53d6\u7c7b\u4fe1\u606f\uff09\u7684\u8865\u4e01\u3002</p> <pre><code>struct X { typedef int type; };\nstruct Y { typedef int type2; };\n\ntemplate &lt;typename T&gt; void foo(typename T::type x); // 0\ntemplate &lt;typename T&gt; void foo(typename T::type2 x); // 1\ntemplate &lt;typename T&gt; void foo(T x); // 2\n\n// all can pass compilation!\nint main() {\n    foo&lt;X&gt;(5);   // 0 = OK,     1 = Failed, 2 = Failed\n    foo&lt;Y&gt;(5);   // 0 = Failed, 1 = OK,     2 = Failed\n    foo&lt;int&gt;(5); // 0 = Failed, 1 = Failed, 2 = OK\n}\n</code></pre> <p>Example: implement a type-transparent <code>inc_counter()</code>.</p> <pre><code>// boost enable_if\n#include &lt;type_traits&gt;\n#include &lt;utility&gt;\n#include &lt;cstdint&gt;\n\nstruct ICounter {}; // just a placeholder\nstruct Counter: public ICounter {\n    void increase() {\n        // impl\n    }\n};\n\ntemplate &lt;typename T&gt; void inc_counter(T&amp; counterObj, typename std::enable_if&lt;std::is_base_of&lt;ICounter, T&gt;::value&gt;::type* = nullptr ){\n    counterObj.increase();  \n}\n\ntemplate &lt;typename T&gt; void inc_counter(T&amp; counterInt, typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type* = nullptr ){\n    ++counterInt;\n}\n\nvoid doSomething() {\n    Counter cntObj;\n    uint32_t cntUI32;\n\n    // as expected\n    inc_counter(cntObj);\n    inc_counter(cntUI32);\n}\n</code></pre> <pre><code>// requires c++11\nstruct Counter {\n    void increase() {\n        // Implements\n    }\n};\n\ntemplate &lt;typename T&gt;\nvoid inc_counter(T&amp; counterInt, std::decay_t&lt;decltype(++counterInt)&gt;* = nullptr) {\n    ++counterInt;\n}\n\ntemplate &lt;typename T&gt;\nvoid inc_counter(T&amp; counterObj, std::decay_t&lt;decltype(counterObj.increase())&gt;* = nullptr) {\n    counterObj.increase();\n}\n\nvoid doSomething() {\n    Counter cntObj;\n    uint32_t cntUI32;\n\n    // as expected\n    inc_counter(cntObj);\n    inc_counter(cntUI32);\n}\n</code></pre> </li> </ul>"},{"location":"c/template/#_1","title":"\u5176\u4ed6","text":"<ul> <li> <p>\u53cd\u5c04\uff08Reflection\uff09\uff1a\u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u540d\u79f0\u6765\u8c03\u7528\u51fd\u6570\u3001\u7c7b\u7b49\u3002</p> <pre><code>class Foo:\n    def __init__(self):\n      self.x = 1\n\n      def call(self):\n        print('foo!', self.x)\n\n# reflection from class name\nfoo = globals()['Foo']() # foo = Foo()\n\n# reflection from method name\ngetattr(foo, 'call')() # foo.call()\n</code></pre> </li> </ul> <ul> <li> <p>\u81ea\u7701\uff08Introspection\uff09\uff1a\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\u83b7\u53d6\u5b83\u6240\u5c5e\u7684\u7c7b\u7684\u4efb\u610f\u65b9\u6cd5\u6216\u7279\u6027\u3002</p> <pre><code>for name in dir(foo):\n    print(name, getattr(foo, name))\n\n# or use inspect\nimport inspect\nfor name, val in inspect.getmembers(foo):\n    print(name, val) \n</code></pre> </li> </ul>"},{"location":"c/cmake_example/readme/","title":"Readme","text":""},{"location":"c/cmake_example/readme/#a-ccxx-project-example","title":"A C/CXX project example","text":""},{"location":"c/csapp/01_Roaming/","title":"Roaming in Computer System","text":""},{"location":"c/csapp/01_Roaming/#the-compilation-system","title":"The compilation system","text":"<pre><code># compile\ngcc -o hello hello.c\n</code></pre> <p>What happened:</p> <ul> <li>preprocessor (cpp): <code>hello.c --&gt; hello.i</code></li> <li>compiler (ccl): <code>hello.i --&gt; hello.s</code></li> <li>assembler (as): <code>hello.s --&gt; hello.o</code></li> <li>linker (ld): <code>hello.o, printf.o, ... --&gt; hello</code></li> </ul>"},{"location":"c/csapp/01_Roaming/#hardware-organization-of-a-system","title":"Hardware Organization of a System","text":"<p>Hardwares:</p> <ul> <li> <p>CPU</p> <ul> <li>PC (program counter): a word length (8 Byte for 64-bit system) pointer to the current command.</li> <li>Registers</li> <li>ALU (Algorithmic/Logic Unit)</li> </ul> </li> </ul> <ul> <li>Main Memory</li> </ul> <ul> <li>IO devices</li> </ul> <ul> <li>IO Bridge (system bus, memory bus, IO bus)</li> </ul> <p>Memory hierarchy: Balance between Access Speed and Storage Size!</p> <ul> <li>Register: 100~1000 B</li> <li>L1 Cache: 10~100 KB</li> </ul> <ul> <li>L2 Cache: 0.1~10 MB</li> <li>L3 Cache: 10~100 MB</li> <li>Main Memory: 1~100 GB</li> <li>Disk: 1~1000 TB</li> </ul> <p>Memory Organization:</p> <p></p>"},{"location":"c/csapp/01_Roaming/#concurrency-and-parallelism","title":"Concurrency and Parallelism","text":"<p>Amdahl's Law: How much can a program be accelerated.</p> <p></p> <p>Different methods:</p> <ul> <li>Thread-level Concurrency</li> <li>Instruction-level Parallelism</li> <li>SIMD (Single Instruction Multiple Data) Parallelism</li> </ul>"},{"location":"c/csapp/02_Information_Storage/","title":"02 Information Storage","text":""},{"location":"c/csapp/02_Information_Storage/#information-storage","title":"Information Storage","text":""},{"location":"c/csapp/02_Information_Storage/#integer","title":"Integer","text":"<p>Unsigned Encodings:</p> <p></p> <p>Signed Encodings (Two's complement):</p> <p></p> <p>Conversion between signed and unsigned:</p> <p></p> <p>WARNING: C implicitly cast signed to unsigned.</p> <pre><code>int a = -1;\nunsigned int b = 0;\nassert(a &gt; b); // true, signed -1 --&gt; unsigned 2^{32}-1 &gt; 0\n</code></pre>"},{"location":"c/csapp/02_Information_Storage/#integer-arithmetic","title":"Integer Arithmetic","text":"<p>Overflow:</p> <ul> <li> <p>unsigned:</p> <p></p> </li> </ul> <ul> <li> <p>signed</p> <p></p> </li> </ul>"},{"location":"c/csapp/02_Information_Storage/#floating-point","title":"Floating Point","text":"<ul> <li> <p>Normalized (most numbers):</p> <p></p> <p></p> </li> </ul> <ul> <li> <p>Denormalized (zero, and near-zero small numbers)</p> <p></p> </li> </ul> <ul> <li> <p>Special (Infinity and NaN)</p> <p></p> <p></p> </li> </ul> <p>\u200b   </p>"},{"location":"c/csapp/03_Machine_Language/","title":"03 Machine Language","text":""},{"location":"c/csapp/03_Machine_Language/#machine-language","title":"Machine Language","text":""},{"location":"c/csapp/03_Machine_Language/#compile","title":"Compile","text":"<pre><code># -Og: do not optimize, generate assembly code according to the program\n# -S: generate assembly\ngcc -Og -S test.c # test.s, assembly code\ngcc -Og -c test.c # test.o, binary machine code\n</code></pre>"},{"location":"c/csapp/03_Machine_Language/#registers","title":"Registers","text":"<ul> <li> <p>Caller-saved / Callee-saved Register: different strategies to save register context at calling functions.</p> <p></p> </li> </ul> <ul> <li> <p>Size of data type (remember the suffix!)</p> <p></p> <ul> <li>b: 1 byte</li> <li>w: word, 2 bytes (old machine convention, 1 word only equals 2 bytes. Now we usually have 8 bytes = 64 bits for a word.)</li> <li>l: long word, 4 bytes</li> <li>q: quad word, 8 bytes</li> </ul> </li> </ul> <ul> <li> <p>All 16 registers:</p> <p>Name convention for the 8 old registers at different bit length:</p> 64 bits rax rbx rcx rdx rsi rdi rbp rsp 32 bits eax ebx ecx edx esi edi ebp esp 16 bits ax bx cx dx si di bp sp 8 bits al bl cl dl sil dil bpl spl <p></p> <p>And there are 8 new registers:</p> <p></p> </li> </ul>"},{"location":"c/csapp/03_Machine_Language/#instructions","title":"Instructions","text":"<ul> <li>Operation Code: <code>movq, addq, subq, xorq, ret</code></li> </ul> <ul> <li> <p>Operands:</p> <ul> <li>Immediate: <code>$1, $8</code></li> </ul> <ul> <li>Register: <code>%rax, %rdi, %rsi</code></li> </ul> <ul> <li> <p>Memory Reference: <code>(%rbx)</code></p> <p></p> <p></p> </li> </ul> </li> </ul> <ul> <li> <p><code>mov S, D</code></p> <ul> <li>Source and Destination cannot be both memory address.</li> <li>32-bit operation will also set the higher 32 bits to 0, but other operation won't.<ul> <li><code>movb $-1 %al</code>: lower 8 bits changed to 0xFF.</li> <li><code>movl $-1 %eax</code>: lower 32 bits changed to 0xFFFFFFFF, but higher 32 bits of <code>%rax</code> also changed to 0x000000 !</li> </ul> </li> <li><code>movz</code>: zero-extending</li> <li><code>movs</code>: signed-extending</li> <li><code>cltq</code>: equals <code>movslq %eax, %rax</code>.</li> </ul> <ul> <li> <p>example:</p> <p></p> </li> </ul> </li> </ul> <ul> <li> <p>Stack related</p> <p><code>%rsp</code> records the stack pointer (stack grows from high address to low address).</p> <ul> <li><code>pushq %rax</code>: equals <code>subq $8, %rsp; movq %rax, (%rsp)</code></li> <li><code>popq %rbx</code>: equals <code>movq (%rsp), %rbx; addq $8, %rsp</code></li> </ul> </li> </ul> <ul> <li> <p><code>leaq S, D</code> : load effective address.</p> <p>Directly write the value of S into D (as an address).</p> <pre><code>movq (%rdx, %rdx, 2), %rax # write the value at memory location (3 * %rdx) to %rax\nleaq (%rdx, %rdx, 2), %rax # directly write (3 * %rdx) to %rax\n</code></pre> <p>Can be used to load address, or abused to perform simple multiplying &amp; adding...</p> </li> </ul> <ul> <li> <p>Unary</p> <ul> <li><code>inc D</code></li> <li><code>dec D</code></li> <li><code>neg D</code></li> <li><code>not D</code></li> </ul> </li> </ul> <ul> <li> <p>Binary</p> <ul> <li><code>add S, D</code></li> <li><code>sub S, D</code></li> <li><code>imul S, D</code></li> <li><code>xor S, D</code></li> <li><code>or S, D</code></li> <li><code>and S, D</code></li> </ul> </li> </ul> <ul> <li> <p>Shift</p> <p><code>k</code> can only be an immediate number, or the value in <code>%cl</code>.</p> <ul> <li><code>sal/shl k, D</code>: left shift</li> <li><code>sar k, D</code>: right shift, arithmetic</li> <li><code>shr k, D</code>: right shift, logical</li> </ul> <p>Example: use <code>leaq</code> and <code>sal</code> to perform multiplication.</p> <p></p> </li> </ul> <ul> <li> <p>Condition Code Register</p> <p>Controlled by ALU, the values are determined by the most recent operation's result.</p> <ul> <li>CF: Carry Flag, Set to 1 if overflow happened for unsigned operation.</li> <li>ZF: Zero Flag, Set to 1 if result is 0.</li> <li>SF: Sign Flag, Set to 1 if result is negative.</li> <li>OF: Overflow Flag, Set to 1 if overflow happened for signed operation.</li> </ul> <p>Two instructions for CCR:</p> <ul> <li><code>cmpq S, D</code>, equal to <code>subq</code>, but only set CCR.</li> <li><code>testq S, D</code>, equal to <code>addq</code>, but only set CCR.</li> <li><code>sete D</code>, set-equal, set D to 1 if last <code>cmpq</code> set <code>ZF</code> to 1 (i.e., <code>S == D for cmpq S, D</code>)</li> <li><code>setl D</code>, set-less, set D to 1 if last <code>cmpq</code> set <code>SF ^ OF</code> to 1 (i.e., <code>S &lt; D for cmpq S, D</code>, <code>OF</code> considers signed overflow condition)</li> <li><code>setle D</code>, set-less-equal, <code>(SF ^ OF) | ZF</code></li> <li><code>setg D</code>, set-greater, <code>~(SF ^ OF) &amp; ~ZF</code></li> <li><code>setge D</code>, set-greater-equal, <code>~(SF ^ OF)</code></li> <li><code>seta D</code>, set-above, <code>~CF &amp; ~ZF</code>, for unsigned greater.</li> <li><code>setae D</code>, set-above-equal, <code>~CF</code>, for unsigned greater-equal.</li> <li><code>setb D</code>, set-below, <code>CF</code>, for unsigned less.</li> <li><code>setbe D</code>, set-below-equal, <code>CF | ZF</code>, for unsigned less-equal.</li> </ul> </li> </ul> <ul> <li></li> </ul> <p>TODO: 3-6</p>"},{"location":"c/csapp/07_Linking/","title":"Linking","text":""},{"location":"c/csapp/07_Linking/#why","title":"Why","text":"<p>Separate source code (especially for large systems) into multiple smaller parts, so we can compile each part independently, which avoids re-building everything when we modify one part. </p> <p>These parts are linked together later.</p>"},{"location":"c/csapp/07_Linking/#the-compilation-system","title":"The Compilation System","text":"<ul> <li> <p>Preprocessor</p> <pre><code># main.c --&gt; main.i\ncpp -o main.i main.c\ncpp -o sum.i sum.c\n\n# or using gcc\ngcc -E -o main.i main.c\n</code></pre> </li> </ul> <ul> <li> <p>Compiler</p> <pre><code># main.i --&gt; main.s\ncc -S -o main.s main.i\ncc -S -o sum.s sum.i\n\n# or\ngcc -S -o main.s main.i\n</code></pre> </li> </ul> <ul> <li> <p>Assembler</p> <p>Generate Relocatable Object Files (*.o)</p> <pre><code># main.s --&gt; main.o\nas -o main.o main.s\nas -o sum.o sum.s\n\n# or (note that here we start directly from main.c)\ngcc -c main.c # default output is main.o\n</code></pre> </li> </ul> <ul> <li> <p>Linker</p> <pre><code># main.o, sum.o, .... --&gt; main\nld -static -o main main.o sum.o \\\n  /usr/lib/x86-644-linux-gnu/crt1.o \\ # c runtime\n  ......\n</code></pre> </li> </ul>"},{"location":"c/csapp/07_Linking/#relocatable-object-files","title":"Relocatable Object Files","text":"<ul> <li> <p>ELF (Executable and Linkable Format) header</p> <pre><code># show ELF header info\nreadelf -h main.o\n</code></pre> </li> </ul> <ul> <li> <p>Sections</p> <p>The compiled program, and data.</p> <p>It contains multiple \"section\", which is defined in the later Section header table.</p> <pre><code># check sections's data\nobjdump -s -d main.o\n</code></pre> <ul> <li><code>.text</code>: compiled machine code.</li> </ul> <ul> <li><code>.data</code>: data, initialized global/static variables</li> </ul> <ul> <li><code>.bss</code>: better-save-space, uninitialized/0-init global/static variables.</li> </ul> <ul> <li><code>.rodata</code>: read-only data (const variables), start from the same position with <code>.bss</code>.</li> </ul> <ul> <li><code>.comment</code>: compiler version</li> </ul> <ul> <li> <p><code>.symtab</code>: symbol table.</p> <pre><code># show symtab\nreadelf -s main.o\n</code></pre> <p></p> <ul> <li>Global Symbols: defined in this file and can be accessed by other files.</li> <li>External Symbols: defined in other files and referred by this file.</li> <li>Local Symbols: defined in this file, cannot be accessed by other files.</li> </ul> </li> </ul> <ul> <li><code>.rel.text</code>: relocation entries for code (e.g., functions).</li> </ul> <ul> <li><code>.rel.data</code>: relocation entries for variables.</li> </ul> </li> </ul> <ul> <li> <p>Section header table</p> <p>index for the Sections (name, type, address, offset).</p> <pre><code># show ELF section table\nreadelf -S main.o\n</code></pre> </li> </ul>"},{"location":"c/csapp/07_Linking/#handling-symbols","title":"Handling Symbols","text":""},{"location":"c/csapp/07_Linking/#undefined-symbols","title":"Undefined symbols","text":"<p>Compilation won't report error on undefined symbols (but must be declared!), they are assumed to be linked in.</p> <pre><code># main.c\nvoid foo(); // declared, but not defined\n\nint main() {\n    foo();\n}\n</code></pre> <pre><code># OK! main.c --&gt; main.o\ngcc -c main.c\n\nreadelf -s main.o\n# ... NOTYPE GLOBAL DEFAULT UND foo\n\n# ERROR! \ngcc -o main main.c\n# ... undefined reference to `foo'\n# ... error: ld returned 1 exit status\n</code></pre>"},{"location":"c/csapp/07_Linking/#duplicate-symbols","title":"Duplicate symbols","text":"<ul> <li>Strong symbols: functions, initialized global variables.</li> <li>Weak symbols: uninitialized global variables.</li> </ul> <p>Any duplicate strong symbols will cause linking error, but weak symbols can be overwritten by strong symbols (but this is still not dangerous, and duplication names should always be avoided!).</p> <p>E.g., linking these two files won't lead to error (only a warning is given). Use <code>-fno-common</code> or <code>-Werror</code> to turn it into error.</p> <pre><code># foo.c\nint x = 100; // strong symbol, x is only allocated 4 Bytes.\n\n# bar.c\ndouble x; // weak symbol\nvoid bar() {\n    x = 0; // dangerous! write 8 Bytes to x.\n}\n</code></pre>"},{"location":"c/csapp/07_Linking/#library-archive","title":"Library Archive","text":"<p>Linux saves static library into <code>*.a</code> archive files. Each archive file is a collection of many <code>*.o</code> files.</p> <pre><code># extract a static library\nar -t /usr/lib/x86_64-linux-gpu/libc.a # list all included *.o files\nar -x /usr/lib/x86_64-linux-gpu/libc.a # extract all *.o files (~1690)\n\n# make a static library\ngcc -c add.c mul.c # add.o, mul.o\nar rcs lib.a add.o mul.o # archive into lib.a\n\n# use our static library\ngcc -c main.c # main.c uses func in add.c &amp; mul.c\ngcc -static -o main main.o lib.a # append the lib archive\n</code></pre>"},{"location":"c/csapp/07_Linking/#static-linking","title":"Static Linking","text":"<pre><code># main.o uses add.o &amp; printf.o, but not uses mul.o\ngcc -static -o main main.o lib.a # libc.a is always appended at last\n</code></pre> <p>Maintain three sets: Executable, Undefined, Defined.</p> <ul> <li>E: only the necessary <code>*.o</code> files.</li> <li>U: currently undefined symbols.</li> <li>D: currently defined symbols (handle duplicated definitions).</li> </ul> <p>Order matters! The following will fail since <code>lib.a</code> is processed before<code>main.o</code>, so it cannot add <code>add.o</code> into E.</p> <pre><code>gcc -static -o main lib.a main.o # undefined reference to add\n</code></pre> <p>This means we need to sort libs by dependency relationship when appending them to gcc.</p> <pre><code># foo.c --&gt; libx.a\n# libx.a --&gt; liby.a\ngcc -static -o foo foo.c libx.a liby.a # liby is after libx\n\n# foo.c --&gt; libx.a\n# libx.a &lt;--&gt; liby.a (mutual dependence!)\ngcc -static -o foo foo.c libx.a liby.a libx.a # must duplicate libx.a twice here\n</code></pre>"},{"location":"c/csapp/07_Linking/#relocation","title":"Relocation","text":"<p>After determining the set Executable, linker performs relocation to merge all the <code>*.o</code> files into one.</p> <p>Two steps are performed:</p> <ul> <li> <p>Sections and Symbol Definitions.</p> <p>merge the <code>.text</code> and <code>.data</code> from all <code>*.o</code> files.</p> </li> </ul> <ul> <li> <p>Symbol References within Sections.</p> <p>resolve the undefined symbols based on the relocation entries defined in <code>.rel.text</code> and <code>.rel.data</code>.</p> <p>The structure for relocation entry:</p> <p></p> </li> </ul>"},{"location":"c/csapp/07_Linking/#executable-files","title":"Executable Files","text":"<p>Similar to ELF files:</p> <ul> <li>ELF header</li> <li>Segment header table</li> <li>Sections<ul> <li><code>.init</code>: the initialization program</li> <li><code>.text</code></li> <li><code>.rodata, .data, .bss</code></li> <li><code>.symtab</code></li> <li><code>.debug, .line, .strtab</code></li> </ul> </li> <li>Section header table</li> </ul> <p>Note that <code>.rel.text</code>  and <code>.rel.data</code> are no longer needed since all the code are after-relocation thus no undefined symbols.</p> <p>What happens when we run an executable file:</p> <p></p>"},{"location":"c/csapp/07_Linking/#dynamic-linking","title":"Dynamic Linking","text":"<p>Static linking (static libraries, <code>*.o</code>) has various disadvantages:</p> <ul> <li>Recompilation is needed if a static library is updated.</li> <li>Frequently used code (like the standard c library) are always copied to our program.</li> </ul> <p>Therefore, dynamic linking (dynamic/shared libraries, <code>*.so, *.dll</code>) is proposed.</p> <p>How to create a shared library:</p> <pre><code># -shared: shared library\n# -fpic: flag-positional-independent-code\ngcc -shared -fpic -o lib.so add.c mul.c\n\n# compile with dynamic linking\ngcc -o main main.c lib.so\n</code></pre> <p>In dynamic linking, the code in <code>lib.so</code> is NOT copied into <code>main</code>!</p> <p>Instead, only the relocation information and symbol table are copied. </p> <p>A dynamic linker (<code>ld-linux.so</code>) will resolve the undefined symbols at runtime.</p>"},{"location":"c/csapp/08_Exceptional_Control_Flow/","title":"Exceptional Control Flow","text":"<p>https://www.bilibili.com/video/BV1xF41147fB/?spm_id_from=pageDriver&amp;vd_source=5409eedef29d31e509c5d746564617c9</p>"},{"location":"c/magic/CRTP/","title":"CRTP","text":""},{"location":"c/magic/CRTP/#curiously-recurring-template-pattern","title":"Curiously Recurring Template Pattern","text":"<p>\u5f62\u5f0f\uff1a\u5c06\u5b50\u7c7b\u4f5c\u4e3a\u7236\u7c7b\u7684\u6a21\u677f\u53c2\u6570\u4f20\u5165\u3002</p> <pre><code>template&lt;typename T&gt;\nclass Base {\npublic:\n    // instead of using a virtual function, use: \n    void foo() const {\n        static_cast&lt;const T*&gt;(this)-&gt;foo();\n    }\n}\n\n// pass Derived as the T in Base!\nclass Derived: public Base&lt;Derived&gt; {\npublic:\n    void foo() const {\n        cout &lt;&lt; \"I'm derived.\" &lt;&lt; endl;\n    }\n}\n</code></pre> <p>\u76ee\u7684\uff1a\u4ee3\u66ff\u52a8\u6001\u7ed1\u5b9a\u7684\u865a\u51fd\u6570\uff0c\u52a0\u901f\u591a\u6001\u4e2d\u5b50\u7c7b\u51fd\u6570\u7684\u8c03\u7528\u3002\u540c\u65f6\u4e3a\u4e86\u4fdd\u7559\u591a\u6001\u6027\uff0c\u901a\u5e38\u4f7f\u7528\u5982\u4e0b\u5f62\u5f0f\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing std::cout; using std::endl;\nusing std::vector;\n\nclass Animal {\n public:\n    virtual void say () const = 0;\n    virtual ~Animal() {}\n};\n\ntemplate &lt;typename T&gt;\nclass Animal_CRTP: public Animal {\n public:\n    void say() const override {\n        static_cast&lt;const T*&gt;(this)-&gt;say();\n    }\n};\n\nclass Cat: public Animal_CRTP&lt;Cat&gt; {\n public:\n    void say() const {\n        cout &lt;&lt; \"Meow~ I'm a cat.\" &lt;&lt; endl;\n    }\n};\n\nclass Dog: public Animal_CRTP&lt;Dog&gt; {\n public:\n    void say() const {\n        cout &lt;&lt; \"Wang~ I'm a dog.\" &lt;&lt; endl;\n    }\n};\n\nint main () {\n    vector&lt;Animal*&gt; zoo;\n    zoo.push_back(new Cat());\n    zoo.push_back(new Dog());\n    for (vector&lt;Animal*&gt;::const_iterator iter{zoo.begin()}; iter != zoo.end(); ++iter) {\n        (*iter)-&gt;say();\n    }\n    for (vector&lt;Animal*&gt;::iterator iter{zoo.begin()}; iter != zoo.end(); ++iter) {\n        delete (*iter);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"c/magic/Pimpl/","title":"Pimpl","text":""},{"location":"c/magic/Pimpl/#pointer-to-implementation","title":"Pointer to implementation","text":"<p>reference: https://en.cppreference.com/w/cpp/language/pimpl</p> <p>A technique that put the implementation of a class in a separate class, to construct stable ABI and reduce compile-time dependencies. The form is: <pre><code>// interface (widget.h)\nclass widget {\nprivate:\n    struct impl;\n    std::experimental::propagate_const&lt;std::unique_ptr&lt;impl&gt;&gt; pImpl;\npublic:\n    //...\n};\n\n// implementation (widget.cpp)\nstruct widget::impl {\n    //...\n};\n</code></pre></p>"},{"location":"c/magic/Pimpl/#example","title":"example","text":"<pre><code>// ----------------------\n// interface (widget.hpp)\n#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;experimental/propagate_const&gt;\n\u00a0\nclass widget\n{\n    class impl;\n    [std::experimental::propagate_const](http://en.cppreference.com/w/cpp/experimental/propagate_const)&lt;[std::unique_ptr](http://en.cppreference.com/w/cpp/memory/unique_ptr)&lt;impl&gt;&gt; pImpl;\npublic:\n    void draw() const; // public API that will be forwarded to the implementation\n    void draw();\n    bool shown() const { return true; } // public API that implementation has to call\n\u00a0\n    widget(); // even the default ctor needs to be defined in the implementation file\n              // Note: calling draw() on default constructed object is UB\n    explicit widget(int);\n    ~widget(); // defined in the implementation file, where impl is a complete type\n    widget(widget&amp;&amp;); // defined in the implementation file\n                      // Note: calling draw() on moved-from object is UB\n    widget(const widget&amp;) = delete;\n    widget&amp; operator=(widget&amp;&amp;); // defined in the implementation file\n    widget&amp; operator=(const widget&amp;) = delete;\n};\n\u00a0\n// ---------------------------\n// implementation (widget.cpp)\n#include \"widget.hpp\"\n\u00a0\nclass widget::impl\n{\n    int n; // private data\npublic:\n    void draw(const widget&amp; w) const\n    {\n        if(w.shown()) // this call to public member function requires the back-reference \n            [std::cout](http://en.cppreference.com/w/cpp/io/cout) &lt;&lt; \"drawing a const widget \" &lt;&lt; n &lt;&lt; '\\n';\n    }\n\u00a0\n    void draw(const widget&amp; w)\n    {\n        if(w.shown())\n            [std::cout](http://en.cppreference.com/w/cpp/io/cout) &lt;&lt; \"drawing a non-const widget \" &lt;&lt; n &lt;&lt; '\\n';\n    }\n\u00a0\n    impl(int n) : n(n) {}\n};\n\u00a0\nvoid widget::draw() const { pImpl-&gt;draw(*this); }\nvoid widget::draw() { pImpl-&gt;draw(*this); }\nwidget::widget() = default;\nwidget::widget(int n) : pImpl{[std::make_unique](http://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique)&lt;impl&gt;(n)} {}\nwidget::widget(widget&amp;&amp;) = default;\nwidget::~widget() = default;\nwidget&amp; widget::operator=(widget&amp;&amp;) = default;\n\u00a0\n// ---------------\n// user (main.cpp)\n#include \"widget.hpp\"\n\u00a0\nint main()\n{\n    widget w(7);\n    const widget w2(8);\n    w.draw(); // drawing a non-const widget 7\n    w2.draw(); // drawing a const widget 8\n}\n</code></pre>"},{"location":"c/magic/rvalue_universal_ref/","title":"right-value reference","text":""},{"location":"c/magic/rvalue_universal_ref/#left-value-right-value","title":"left-value, right-value","text":"<ul> <li><code>lvalue</code>: have an address (can use <code>&amp;</code> operator)</li> <li><code>rvalue</code>: no address, a temporary value  (cannot use <code>&amp;</code> operator)</li> </ul> <pre><code>// a is left, 5 is right\nint a = 5;\n\nstruct A {};\n// a is left, A() is right\nA a = A();\n</code></pre>"},{"location":"c/magic/rvalue_universal_ref/#left-value-reference","title":"left-value reference","text":"<p>The most common reference we use.</p> <p>Mostly used in lieu of pointer to make code cleaner.</p> <pre><code>int a = 5;\nint&amp; r1 = a; // OK! left-value can be referenced.\nint&amp; r2 = 5; // Error! right-value cannot be referenced.\n\nconst int&amp; r2 = 5; // OK! right-value can be const referenced. This is necessary in cases such as vector::push_back(const T&amp; val), we want both v.push_back(complex_obj) and v.push_back(1) work.\n</code></pre>"},{"location":"c/magic/rvalue_universal_ref/#right-value-reference_1","title":"right-value reference","text":"<p><code>rvalue</code> can be further categorized:</p> <ul> <li><code>prvalue</code>, pure-right-value: the initial value, or expression, or function returns.</li> <li><code>xvalue</code>, expiring value: a temporary value instantiated from a <code>prvalue</code>.</li> </ul> <pre><code>int&amp;&amp; r1 = 5; // OK! standard right-value reference.\nr1 = 6; // can be modified (not a const).\n\nint a = 5;\nint&amp;&amp; r2 = a; // Error! left-value cannot be right-referenced.\nint&amp;&amp; r3 = std::move(a); // OK! std::move cast left value to right value.\nint&amp;&amp; r4 = static_cast&lt;int&amp;&amp;&gt;(a); // ditto.\n\n// note &amp;a == &amp;r2 == &amp;r3 == &amp;r4\n</code></pre> <p>In fact, right-value reference is just a wrapper of left-value reference with a temp variable.</p> <pre><code>int &amp;&amp;r = 5;\n// eqauls\nint tmp = 5;\nint &amp;&amp;r = std::move(tmp);\n</code></pre> <p>right-value can also be used to pass reference:</p> <pre><code>void f(int&amp; x) { x++; }\nvoid g(int&amp;&amp; x) { x++; } \n\nint main() {\n    int x = 1;\n    f(x); // x is now 2\n    g(std::move(x)); // x is now 3\n\n    // we prefer to use f(x) here, since this is not a useful application of rvalue reference.\n}\n</code></pre> <p>\u53f3\u503c\u5f15\u7528\u65e2\u53ef\u4ee5\u662f\u5de6\u503c\u4e5f\u53ef\u4ee5\u662f\u53f3\u503c\uff0c\u5982\u679c\u6709\u540d\u79f0\u5219\u4e3a\u5de6\u503c\uff0c\u5426\u5219\u662f\u53f3\u503c\u3002</p> <pre><code>int a = 5;\nstd::move(a); // no name, a right value.\nint&amp;&amp; r = std::move(a); // with name, so r is a left value.\n\nvoid f(int&amp;&amp; r) {}\nvoid g1(int&amp;&amp; r) { f(r); } // wont compile.\nvoid g2(int&amp;&amp; r) { f(std::move(r)); }\n\nf(r); // Error! r is a left value.\nf(std::move(r)); // OK! \nf(std::move(a)); // OK! equals last line.\n\n// Once passed in a function and got named, the right value is no longer a right value.\ng1(std::move(r)); // Error! (no matching function to call f) \ng2(std::move(r)); // OK!\n</code></pre> <p>More Examples:</p> <pre><code>// \u5f62\u53c2\u662f\u4e2a\u53f3\u503c\u5f15\u7528\nvoid change(int&amp;&amp; right_value) {\n    right_value = 8;\n}\n\nint main() {\n    int a = 5; // a\u662f\u4e2a\u5de6\u503c\n    int &amp;ref_a_left = a; // ref_a_left\u662f\u4e2a\u5de6\u503c\u5f15\u7528\uff0cref_a_left\u672c\u8eab\u4e5f\u662f\u5de6\u503c\n    int &amp;&amp;ref_a_right = std::move(a); // ref_a_right\u662f\u4e2a\u53f3\u503c\u5f15\u7528\uff0c\u4f46ref_a_right\u672c\u8eab\u4e5f\u662f\u5de6\u503c\n\n    change(a); // \u7f16\u8bd1\u4e0d\u8fc7\uff0ca\u662f\u5de6\u503c\uff0cchange\u53c2\u6570\u8981\u6c42\u53f3\u503c\n    change(ref_a_left); // \u7f16\u8bd1\u4e0d\u8fc7\uff0c\u5de6\u503c\u5f15\u7528ref_a_left\u672c\u8eab\u4e5f\u662f\u4e2a\u5de6\u503c\n    change(ref_a_right); // \u7f16\u8bd1\u4e0d\u8fc7\uff0c\u53f3\u503c\u5f15\u7528ref_a_right\u672c\u8eab\u4e5f\u662f\u4e2a\u5de6\u503c\n\n    change(std::move(a)); // \u7f16\u8bd1\u901a\u8fc7\n    change(std::move(ref_a_right)); // \u7f16\u8bd1\u901a\u8fc7\n    change(std::move(ref_a_left)); // \u7f16\u8bd1\u901a\u8fc7\n\n    change(5); // \u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u63a5\u53f3\u503c\uff0c\u7f16\u8bd1\u901a\u8fc7\n\n    cout &lt;&lt; &amp;a &lt;&lt; ' ';\n    cout &lt;&lt; &amp;ref_a_left &lt;&lt; ' ';\n    cout &lt;&lt; &amp;ref_a_right;\n    // \u6253\u5370\u8fd9\u4e09\u4e2a\u5de6\u503c\u7684\u5730\u5740\uff0c\u90fd\u662f\u4e00\u6837\u7684\n}\n</code></pre>"},{"location":"c/magic/rvalue_universal_ref/#applications","title":"Applications","text":"<p>\u53f3\u503c\u5f15\u7528\u4e3b\u8981\u5728\u51fd\u6570\u4f20\u53c2\u65f6\u7528\u79fb\u52a8\u4ee3\u66ff\u62f7\u8d1d\uff0c\u5373\u9700\u8981\u62f7\u8d1d\u4f46\u88ab\u62f7\u8d1d\u8005\u4e4b\u540e\u53c8\u4e0d\u518d\u9700\u8981\u7684\u573a\u666f\uff0c\u4f8b\u5982\u4e34\u65f6\u53d8\u91cf\u3002\u56e0\u4e3a<code>std::move</code>\u53ea\u6539\u53d8\u5730\u5740\u6307\u5411\uff0c\u800c\u4e0d\u4f1a\u7269\u7406\u4e0a\u7684\u79fb\u52a8\uff08\u5373\u62f7\u8d1d\uff09\u6570\u636e\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7c7b\u7684\u9ed8\u8ba4\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff08<code>A(A&amp;&amp; a){}</code>\uff09\u5c31\u662f\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08<code>A(A&amp; a){}</code>\uff09\u3002\u4e3a\u4e86\u4f7f\u5f97\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u80fd\u591f\u5229\u7528\u79fb\u52a8\u8bed\u4e49\uff0c\u6211\u4eec\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff1a</p> <pre><code>// ref: https://stackoverflow.com/questions/11572669/move-with-vectorpush-back\n// ref: https://stackoverflow.com/questions/3106110/what-is-move-semantics\n\nclass mystring {\n    char* data;\n// the big THREE to manage raw pointers: destructor, copy constructor, copy assignment operator.    \n// from c++11, we have the big FIVE, plus: move constructor, move assignment operator.\n// with the copy-and-swap idiom, we only need one assignment operator, so it's also called big 4.5\npublic: \n    // default constructor\n    mystring(const char* p) {\n        size_t s = std::strlen(p) + 1;\n        data = new char[s];\n        std::memcpy(data, p, s);\n    }\n    // destructor\n    ~mystring() {\n        delete[] data;\n    }\n    // copy constructor (deep copy)\n    mystring(const mystring&amp; that) {\n        size_t s = std::strlen(that.data) + 1;\n        data = new char[s];\n        std::memcpy(data, that.data, s);\n    }\n    // move constructor (no copy)\n    mystring(mystring&amp;&amp; that) {\n        data = that.data;\n        that.data = nullptr;\n    }\n    // (copy and move) assignment operator\n    // ref: https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom\n    // we can use copy-and-swap idiom to avoid duplicated code and self-assignment test.\n    // this handles both copy and move, based on whether that is lvalue(copy) or rvalue(move).\n    // e.g., assume x, y are both mystring.\n    // mystring s = x; // copy, since x is lvalue. the copy constructor is called.\n    // mystring s = x + y; // move, since x + y is rvalue (assume we overload operator+). first create a temp object, then the move constructor is called.\n    mystring&amp; operator=(mystring that) {\n        std::swap(data, that.data);\n        return *this;\n    }\n}\n</code></pre> <p>STL\u5bb9\u5668\u5927\u591a\u5b9e\u73b0\u4e86\u5404\u79cd\u65b9\u6cd5\u7684\u79fb\u52a8\u8bed\u4e49\uff0c\u4f8b\u5982</p> <pre><code>// just an illustration\nvector(vector&amp;&amp; tmp_vector) {\n    data = tmp_vector.data;\n    tmp_vector.data = nullptr;\n}\n\nvoid push_back(const T&amp; x) {/* copy semantic */}\nvoid push_back(T&amp;&amp; x) {/* move semantic */}\n</code></pre> <p>Use case:</p> <pre><code>vector&lt;mystring&gt; v;\nmystring s(\"a_long_string\");\nv.push_back(s); // copied\nv.push_back(move(s)); // moved\nv.push_back(mystring(\"blahblah\")); // moved\n\nstruct A {\n    /* naive flat class, no raw pointer, no move constructor */\n    int x;\n    A(int _x) : x(_x) {}\n};\n\nvector&lt;A&gt; v;\nA a(1);\nv.push_back(a); // traditional. a is copied. slow!\nv.push_back(move(a)); // a is still copied, no difference from the last line.\nv.push_back(A(1)); // A(1) is still copied.\n</code></pre> <p>\u5176\u5b83\u8bed\u8a00\u4e2d\u7684\u7c7b\u4f3c\u60c5\u51b5\uff1a</p> <p>c++\u9ed8\u8ba4\u7684\u5bf9\u8c61\u4f20\u503c\u65b9\u5f0f\u662f\u62f7\u8d1d\uff0c\u4f8b\u5982<code>vec.push_back(obj); auto vec2 = vec1;</code>\u7b49\u90fd\u4f1a\u89e6\u53d1\u62f7\u8d1d\u884c\u4e3a\u3002\u5f15\u7528\u4f20\u503c\u5fc5\u987b\u901a\u8fc7<code>&amp;</code>\u663e\u5f0f\u663e\u5f0f\u5b9e\u73b0\uff0c\u4f8b\u5982<code>vec.push_back(move(obj)); auto vec2 = &amp;vec1;</code></p> <p>python\u9ed8\u8ba4\u7684\u5bf9\u8c61\u4f20\u503c\u65b9\u5f0f\u5c31\u662f\u5f15\u7528\uff0c\u4f8b\u5982<code>l.append(obj), obj2 = obj1</code>\u5747\u4e3a\u5f15\u7528\u3002\u76f8\u53cd\uff0c\u5982\u679c\u9700\u8981\u62f7\u8d1d\uff0c\u5219\u8981\u901a\u8fc7<code>deepcopy</code>\u663e\u5f0f\u5b9e\u73b0\u3002</p>"},{"location":"c/magic/rvalue_universal_ref/#universal-reference","title":"\u901a\u7528\u5f15\u7528 Universal Reference","text":"<p>\u8868\u73b0\u5f62\u5f0f\u4e3aT &amp;&amp; (\u6a21\u677f+\u53f3\u503c\u5f15\u7528)\uff0c\u5229\u7528\u7f16\u8bd1\u5668\u5bf9\u6a21\u677f\u7684\u63a8\u5bfc\u591a\u4e49\u6027\uff0c\u53ef\u4ee5\u540c\u65f6\u7ed1\u5b9a\u5de6\u503c\u4e0e\u53f3\u503c\u3002</p> <p>\u5f15\u7528\u6298\u53e0\uff1a\u7f16\u8bd1\u5668\u7279\u6027\uff0c\u5b9e\u9645\u8bed\u6cd5\u4e0d\u5b58\u5728\u5f15\u7528\u7684\u5f15\u7528<code>int&amp; &amp;</code>\uff0c\u4f46\u6a21\u677f\u7c7b\u578b\u63a8\u5bfc\u652f\u6301\u5bf9\u5f15\u7528\u7684\u5f15\u7528\u8fdb\u884c\u6298\u53e0\uff0c\u5177\u4f53\u89c4\u5219\u4e3a\uff1a</p> <ul> <li><code>T&amp; &amp;, T&amp; &amp;&amp;, T&amp;&amp; &amp; --&gt; T&amp;</code></li> <li><code>T&amp;&amp; &amp;&amp; --&gt; T&amp;&amp;</code></li> </ul> <p>\u5229\u7528\u6b64\u7279\u6027\uff0c\u901a\u7528\u5f15\u7528\u5f97\u4ee5\u5b9e\u73b0\uff1a</p> <pre><code>template &lt;typename T&gt; void f(T&amp;&amp; x) {}\n\nint x = 1;\nf(x); // x is lvalue, T = int won't match, so try T = int&amp;, and use f(int&amp; x) which matches!\nf(1); // 1 is rvalue, T = int matches, so use f(int&amp;&amp; x).\n</code></pre> <p>\u4e8b\u5b9e\u4e0a\uff0c<code>move</code>\u7684\u5b9e\u73b0\u5c31\u5229\u7528\u4e86\u901a\u7528\u5f15\u7528\uff1a</p> <pre><code>template &lt;typename T&gt; \ntypename remove_reference&lt;T&gt;::type&amp;&amp; move(T&amp;&amp; t) {\n    return static_cast&lt;typename remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t);\n}\n</code></pre>"},{"location":"c/magic/rvalue_universal_ref/#_1","title":"\u5b8c\u7f8e\u8f6c\u53d1\u95ee\u9898","text":"<p>\u5b8c\u7f8e\u8f6c\u53d1\u6307\u7684\u662f\u5728\u51fd\u6570\u5185\u90e8\u5c06\u53c2\u6570\u5305\u62ec\u7c7b\u578b\u539f\u5c01\u4e0d\u52a8\u7684\u4f20\u9012\u7ed9\u5185\u90e8\u7684\u53e6\u4e00\u51fd\u6570\u3002\u4f46\u7531\u4e8e\u53f3\u503c\u5f15\u7528\u4f20\u5165\u51fd\u6570\u540e\u4f1a\u53d8\u6210\u5de6\u503c\uff0c\u7b80\u5355\u7684\u53c2\u6570\u8f6c\u53d1\u662f\u9519\u8bef\u7684\uff01</p> <pre><code>// inner function\nvoid f(int&amp; x) { x++; }\nvoid g(int&amp;&amp; x) { x++; }\n\n// sender\ntemplate&lt;typename F, typename T&gt;\nvoid sender(F f, T t) { f(t); }\n\nint x = 1;\nf(x); // x is now 2.\nsender(f, x); // not work, x is still 2.\nsender(g, x); // wont compile, T = int, t is a lvalue\nsender(g, move(x)); // wont compile, T = int&amp;&amp;, but t is a lvalue\n</code></pre> <p>\u901a\u7528\u5f15\u7528\u53ea\u80fd\u89e3\u51b3<code>f(int&amp; x)</code>\u7684\u95ee\u9898\uff1a</p> <pre><code>// inner function\nvoid f(int&amp; x) { x++; }\nvoid g(int&amp;&amp; x) { x++; }\n\n// sender\ntemplate&lt;typename F, typename T&gt;\nvoid sender(F f, T&amp;&amp; t) { f(t); }\n\nint x = 1;\nf(x); // x is now 2.\nsender(f, x); // x is now 3. T = int&amp;\nsender(g, x); // wont compile, T = int&amp;, but t is still a lvalue\nsender(g, move(x)); // wont compile, T = int, but t is still a lvalue\n</code></pre> <p>\u4ece\u800c\uff0c\u6211\u4eec\u9700\u8981\u52a8\u6001\u5224\u65ad\u5e94\u8be5\u8f6c\u53d1\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u3002\u4ec5\u4ec5\u901a\u8fc7move\u662f\u4e0d\u591f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4f7f\u7528<code>std::forward&lt;T&gt;(u)</code>\u5b9e\u73b0\u5de6\u53f3\u503c\u8f6c\u5316\uff1a</p> <pre><code>// impl for lvalue\ntemplate &lt;typename T&gt; \nT&amp;&amp; forward(typename remove_reference&lt;T&gt;::type&amp; t) noexept {\n    return static_cast&lt;T&amp;&amp;&gt;(t);\n}\n// impl for rvalue\ntemplate &lt;typename T&gt; \nT&amp;&amp; forward(typename remove_reference&lt;T&gt;::type&amp;&amp; t) noexept {\n    return static_cast&lt;T&amp;&amp;&gt;(t);\n}\n\n// examples\nstd::forward&lt;int&gt;(x); // cast to right-value, equals `std::move(x)`\nstd::forward&lt;int&amp;&amp;&gt;(x); // also cast to right-value, equals `std::move(x)`\n\nstd::forward&lt;int&amp;&gt;(x); // cast to left-value\n</code></pre> <p>More Examples\uff1a</p> <pre><code>#include &lt;iostream&gt;\n\nvoid change2(int&amp;&amp; ref_r) {}\n\nvoid change3(int&amp; ref_l) {}\n\nvoid change4(const int&amp; ref) {}\n\nvoid change(int&amp;&amp; ref_r) {\n\n    change2(5);\n    // change2(ref_r);\n    change2(std::move(ref_r)); \n    change2(std::forward&lt;int&gt;(ref_r));\n    change2(std::forward&lt;int &amp;&amp;&gt;(ref_r));  \n\n    // change3(5);\n    change3(ref_r); \n    change3(std::forward&lt;int &amp;&gt;(ref_r)); \n\n    change4(5);\n    change4(ref_r); \n    change4(std::forward&lt;int &amp;&gt;(ref_r)); \n}\n\nint main() {\n    int a = 5;\n    change(std::move(a));\n}\n</code></pre> <p>\u5b8c\u7f8e\u8f6c\u53d1\u7684\u5b9e\u73b0\uff08\u7ed3\u5408forward\u4e0e\u901a\u7528\u5f15\u7528\uff09\uff1a</p> <pre><code>// inner function\nvoid f(int&amp; x) { x++; }\nvoid g(int&amp;&amp; x) { x++; }\n\n// sender\ntemplate&lt;typename F, typename T&gt;\nvoid sender(F f, T&amp;&amp; t) { f(forward&lt;T&gt;(t)); }\n\nint x = 1;\nf(x); // x is now 2.\nsender(f, x); // x is now 3. T = int&amp;, forward cast t to lvalue.\nsender(g, move(x)); // x is now 4, T = int, forward cast t to rvalue.\n\nsender(g, x); // wont compile, T = int&amp;, forward cast t to lvalue.\n</code></pre>"},{"location":"cooking/home/","title":"\u505a\u996d","text":""},{"location":"cooking/home/#_2","title":"\u716e\u7389\u7c73\u2b50","text":"<ul> <li>\u5c06\u7389\u7c73\u5916\u76ae\u5265\u6389\uff0c\u4fdd\u7559\u6700\u91cc\u9762\u7684\u4e00\u4e24\u5c42\u5ae9\u76ae\uff08\u4e5f\u53ef\u4ee5\u5168\u90e8\u53bb\u6389\uff09\uff0c\u51b2\u6d17\u5e72\u51c0\u3002</li> <li>\u5c06\u7389\u7c73\u653e\u5165\u9505\u4e2d\uff0c\u52a0\u5165\u6ca1\u8fc7\u7389\u7c73\u7684\u6e05\u6c34\uff08\u7a0d\u5fae\u6d6e\u51fa\u6c34\u9762\u4e5f\u53ef\uff0c\u901a\u8fc7\u84b8\u6c7d\u7116\u719f\uff09\u3002</li> <li>\u5927\u706b\u716e\u6cb8\u540e\u8f6c\u4e2d\u706b\u7ee7\u7eed\u716e10\uff5e15\u5206\u949f\uff08\u751c\u7389\u7c73\u7ea610\u5206\u949f\uff0c\u7cef\u7389\u7c7315\u5206\u949f\u4ee5\u4e0a\uff09\u3002</li> <li>\u5173\u706b\u540e\u71165\u5206\u949f\uff0c\u7389\u7c73\u66f4\u8f6f\u7cef\u5165\u5473\u3002</li> </ul> <p>\u716e\u5b8c\u53ef\u4ee5\u51b7\u85cf\uff0c\uff08\u7528\u53a8\u623f\u7eb8\u5dfe\u6cbe\u6c34\u5305\u88f9\uff09\u653e\u5165\u5fae\u6ce2\u70892\u5206\u949f\u5373\u53ef\u91cd\u65b0\u52a0\u70ed\u3002</p>"},{"location":"cooking/home/#_3","title":"\u84b8\u7c73\u996d","text":"<ul> <li>\u53d6\u9002\u91cf\u5927\u7c73\uff08230g\u5de6\u53f3\uff0c\u4e09\u987f\u996d\u91cf\uff09\uff0c\u53ef\u9009\u6e05\u6c34\u6dd8\u6d172-3\u6b21\uff08\u53bb\u9664\u6dc0\u7c89\uff0c\u66f4\u677e\u8f6f\uff09\u3002</li> <li>\u52a0\u6c34\u6ca1\u8fc7\u5927\u7c73\uff08300g\u6c34\u5de6\u53f3\uff09\u3002</li> <li>\u653e\u5165\u7535\u996d\u7172\u6309\u4e0b\u716e\u996d\u952e\u7b49\u5f8520-30\u5206\u949f\uff0c\u5f00\u76d6\u89c2\u5bdf\u6c34\u5168\u90e8\u6d88\u5931\u5373\u53ef\u3002</li> <li>\u5173\u673a\u540e\u7ee7\u7eed\u76d6\u76d6\u71165\u5206\u949f\u4fdd\u8bc1\u719f\u900f\u3002</li> <li>\u5403\u4e0d\u5b8c\u653e\u51b0\u7bb1\u51b7\u85cf\u4fdd\u5b58\u3002</li> </ul>"},{"location":"cooking/home/#_4","title":"\u86cb\u7092\u996d\u2b50\u2b50\u2b50","text":"<ul> <li>\u51c6\u5907\u51b7\u85cf\u7c73\u996d\uff0c\u5c0f\u767d\u83dc\u5207\u788e\uff0c\u5e72\u6d77\u5e26\u4e1d\uff08\u6625\u660e\u4f1f\u4e1a\uff09\u5207\u788e\uff0c\u706b\u817f\u80a0\u4e01\uff0c\u9e21\u86cb</li> <li>\u6cb9\u714e\u706b\u817f\u80a0\uff0c\u7092\u788e\u9e21\u86cb\uff0c\u7092\u788e\u7c73\u996d\uff0c\u52a0\u5165\u5c0f\u767d\u83dc\u548c\u6d77\u5e26\u4e1d\u7ffb\u7092\u81f3\u8f7b\u5fae\u6f6e\u6e7f\u3002</li> </ul>"},{"location":"cooking/home/#_5","title":"\u716e\u5c0f\u7c73\u7ca5","text":"<ul> <li>30g\u5c0f\u7c73\uff0c300g\u6c34\uff08\u4e00\u987f\u996d\u91cf\uff09\u3002</li> <li>\u7535\u996d\u7172\u7172\u7ca5\u6a21\u5f0f30\u5206\u949f\u3002</li> </ul>"},{"location":"cooking/home/#_6","title":"\u716e\u7cbd\u5b50","text":"<ul> <li>\u771f\u7a7a\u5305\u88c5\u719f\u7cbd\u5b50\uff0c\u52a0\u6c34\u6ca1\u8fc7\u3002</li> <li>\u716e20\u5206\u949f\uff0c\u7b77\u5b50\u53ef\u8f7b\u677e\u63d2\u5165\u5373\u53ef\u3002</li> </ul>"},{"location":"cooking/home/#_7","title":"\u716e\u9762\u6761","text":"<ul> <li>\u716e\u6cb8\u6c34\u3002</li> <li>\u52a0\u5165\u9762\u6761\uff0c\u7ee7\u7eed\u716e\u6cb8\u5f85\u9762\u6761\u53d8\u8f6f\u5373\u53ef\u3002</li> </ul>"},{"location":"cooking/home/#_8","title":"\u716e\u51bb\u6c34\u997a","text":"<ul> <li>\u716e\u6cb8\u6e05\u6c34</li> <li>\u5c06\u51bb\u6c34\u997a\u52a0\u5165\u6c34\u4e2d\uff08\u4f1a\u505c\u6b62\u6cb8\u817e\uff09\uff0c\u8f7b\u8f7b\u6405\u52a8\u9632\u6b62\u7c98\u9505</li> <li>\u5f85\u91cd\u65b0\u6cb8\u817e\u6c34\u997a\u6d6e\u8d77\u540e\uff0c\u518d\u52a0\u5165\u9002\u91cf\u51b7\u6c34\uff0c\u91cd\u590d\u6cb8\u817e2\u6b21\u3002</li> </ul>"},{"location":"cooking/home/#_9","title":"\u714e\u51bb\u6c34\u997a\u2b50","text":"<ul> <li>\u5e73\u5e95\u9505\u6cb9\u70ed\u540e\u653e\u5165\u51bb\u6c34\u997a\u3002</li> </ul> <ul> <li>\u4e2d\u5c0f\u706b\u714e\u81f3\u5e95\u90e8\u91d1\u9ec4\uff08\u5168\u7a0b\u4e0d\u7528\u7ffb\u9762\uff09\u3002</li> </ul> <ul> <li>\u52a0\u5165\u6ca1\u8fc7\u6c34\u997a1/3\u9ad8\u5ea6\u7684\u6c34\u5e76\u4e14\u52a0\u76d6\uff0c\u5c0f\u706b\u84b8\u719f\uff086-8\u5206\u949f\uff09\u3002</li> </ul> <ul> <li>\u6c34\u6536\u5e72\u540e\uff0c\u6253\u5f00\u76d6\u5b50\u4e2d\u706b\u7ee7\u7eed\u714e1\u5206\u949f\u3002</li> </ul> <ul> <li>\u8fd9\u6837\u6700\u540e\u4e00\u5b9a\u4f1a\u7c98\u5728\u9505\u5e95\uff0c\u9700\u8981\u7528\u529b\u53d6\u4e0b \u3002</li> </ul>"},{"location":"cooking/home/#_10","title":"\u7a7a\u6c14\u70b8\u9505\uff1a\u70b8\u51bb\u6c34\u997a","text":"<ul> <li>\u51c6\u5907\u51bb\u6c34\u997a\uff0c\u8868\u9762\u6cbe\u6c34</li> </ul> <ul> <li>\u5e73\u94fa\u5728\u7845\u6cb9\u7eb8\u4e0a\u653e\u5165\u7a7a\u6c14\u70b8\u9505\uff0c180\u5ea620\u5206\u949f\u3002</li> </ul> <ul> <li>\u901a\u5e38\u8868\u9762\u5fae\u7126\u4e14\u8f83\u786c\uff0c\u4f46\u5185\u90e8\u6c41\u6c34\u5145\u8db3\u3002</li> </ul>"},{"location":"cooking/home/#_11","title":"\u9178\u8fa3\u5305\u83dc","text":"<ul> <li>\u534a\u4e2a\u5305\u83dc\u6e05\u6d17\u540e\u6324\u5e72\u6c34\u5206\uff0c\u5207\u6210\u5c0f\u5757</li> <li>\u6599\u6c41\uff1a\u4e00\u52fa10g\u751f\u62bd\uff0c\u4e24\u52fa40g\u869d\u6cb9\uff0c5g\u9648\u918b\uff0c2g\u767d\u7cd6\u62cc\u5300</li> <li>\u4e2d\u5c0f\u706b\u52a0\u70ed\u5230\u5192\u70df\uff0c\u52a0\u6cb9\uff0c\u5173\u706b</li> <li>\u653e\u5165\u5c11\u8bb8\u82b1\u6912\uff0c\u7092\u9999\u540e\u635e\u51fa</li> <li>\u653e\u5165\u5e72\u8fa3\u6912\u6bb5\u3001\u849c\u5757\uff0c\u7528\u4f59\u70ed\u7092\u9999</li> <li>\u653e\u5165\u5305\u83dc\uff0c\u5f00\u5927\u706b\u5feb\u901f\u7ffb\u70922\u5206\u949f</li> <li>\u8f6f\u5316\u540e\u52a0\u5165\u6599\u6c41\uff0c\u7ffb\u7092\u5747\u5300\u5373\u53ef\u51fa\u9505</li> </ul>"},{"location":"cooking/home/#_12","title":"\u54b8\u86cb\u9ec4\u9e21\u7fc5","text":"<p>https://www.bilibili.com/video/BV1Uu411776v</p> <p>\u5927\u5931\u8d25\u3002</p>"},{"location":"cooking/home/#_13","title":"\u751c\u54c1\uff1a\u9e21\u86cb\u5e03\u4e01","text":"<ul> <li>\u4e24\u4e2a\u9e21\u86cb\u6253\u5165\u7897\u4e2d\u62cc\u5300</li> <li>250ML\u725b\u5976+30g\u767d\u7cd6\uff0c\u4e2d\u706b\u8f7b\u5fae\u716e\u6cb8</li> <li>\u5c06\u725b\u5976\u7f13\u6162\u6ce8\u5165\u86cb\u6db2\u4e2d\uff0c\u5e76\u4e0d\u505c\u5feb\u901f\u6405\u62cc\uff0c\u5f97\u5230\u5747\u5300\u7684\u6d45\u9ec4\u8272\u6db2\u4f53</li> <li>\u6db2\u4f53\u8fc7\u7ec6\u7b5b\u5b503\u6b21\uff0c\u9664\u53bb\u7ed3\u5757\u548c\u6ce1\u6cab</li> <li>\u5012\u5165\u76d8\u4e2d\uff0c\u8986\u76d6\u4fdd\u9c9c\u819c\u3010\u662f\u5426\u5fc5\u8981\uff1f\u3011</li> <li>\u4e2d\u706b\u84b815\u5206\u949f\u5de6\u53f3</li> <li>\u653e\u51c9\u6216\u51b7\u85cf</li> </ul>"},{"location":"cooking/home/#_14","title":"\u751c\u54c1\uff1a\u5409\u5229\u4e01\u5e03\u4e01","text":"<ul> <li>10g\u5409\u5229\u4e01\u7247\u52a0\u5165200ML\u51b7\u6c34\u6ce1\u8f6f\uff08\u4e0d\u4f1a\u878d\u5316\uff01\uff09\uff0c\u53d6\u51fa\u6324\u5e72\u6c34\u5206\u5907\u7528</li> </ul> <ul> <li>250ML\u725b\u5976+30g\u767d\u7cd6\uff0c\u4e2d\u706b\u8f7b\u5fae\u716e\u6cb8<ul> <li>\u53ef\u9009\uff1a\u52a0\u5165\u62b9\u8336\u7c895g</li> </ul> </li> <li>\u5c06\u8f6f\u5316\u7684\u5409\u5229\u4e01\u52a0\u5165\u725b\u5976\u4e2d\uff0c\u7528\u4f59\u6e29\u6405\u62cc\u81f3\u878d\u5316</li> <li>\u6db2\u4f53\u8fc7\u7ec6\u7b5b\u5b503\u6b21\uff0c\u9664\u53bb\u7ed3\u5757\u548c\u6ce1\u6cab</li> <li>\u5012\u5165\u76d8\u4e2d\uff0c\u653e\u5165\u51b0\u7bb1\u51b7\u85cf4\u5c0f\u65f6\u4ee5\u4e0a\u81f3\u51dd\u56fa</li> </ul>"},{"location":"cooking/home/#_15","title":"\u9762\u98df\uff1a\u5343\u5c42\u6cb9\u997c","text":""},{"location":"crypto/asymmetric_cryptography/","title":"hashing algorithms","text":"<p>A function that maps data of arbitrary size to a hash of a fixed size.</p> <ul> <li>fast to compute for any size and kind of data.</li> </ul> <ul> <li>infeasible to invert (generate data from a given hash).</li> </ul> <ul> <li> <p>infeasible to find two data with the same hash (No collision).</p> <p>note: there does exist collisions for any hash algorithm that outputs a fixed length hash (see the pigeonhole principle), but here we only require it is probably impossible to find another data of the same hash with a given data/hash in limited time/future.</p> </li> </ul> <ul> <li>even smallest changes to the data should change the hash completely (Avalanche effect).</li> </ul>"},{"location":"crypto/asymmetric_cryptography/#md5","title":"MD5","text":"<p>the most usual algorithm for checking if two files are exactly the same.</p> <p>We generate checksum/digest/signature of a file, and send the file with the checksum to the others. So the others can compute MD5 of the received file and compare it with the checksum to check if the received file is exactly the same as the sent file.</p> <p>This is feasible because MD5 only has 128 bits, so it can be assumed to be invariant during the transmission.</p> <p>MD5 is compromised and unsafe for cryptography! Now we can easily find collisions of MD5.</p>"},{"location":"crypto/asymmetric_cryptography/#sha-family","title":"SHA family","text":"<p>Secure Hash Algorithms. A large series of well known hash functions.</p> <p>e.g., SHA-256</p>"},{"location":"crypto/asymmetric_cryptography/#asymmetric-cryptography","title":"asymmetric cryptography","text":"<p>also called public-key cryptography.</p> <ul> <li>public key: shared with others, to encrypt messages sent to me.</li> <li>private key: kept by myself, to decrypt messages encrypted by my public key.</li> </ul> <p>asymmetric cryptosystem guarantees a secure message sending:</p> <pre><code>* A shares A's public key with B.\n* B uses A's public key to encrypt the message.\n* A uses A's private key to decrypt the message.\n</code></pre>"},{"location":"crypto/asymmetric_cryptography/#_1","title":"hashing algorithms","text":"<p>Some widely used asymmetric cryptosystem:</p> <ul> <li>RSA</li> <li>DSA</li> <li>ECDSA (Elliptic Curve Digital Signature Algorithm)</li> </ul>"},{"location":"crypto/asymmetric_cryptography/#digital-signature","title":"digital signature","text":"<p>asymmetric cryptosystem guarantees that only you can read the messages sent to you. \uff08\u52a0\u5bc6\uff09</p> <p>but there is still problems: </p> <ul> <li>how to verify the message is sent by a specific person? \uff08\u4f2a\u9020\uff09</li> <li>how to verify the message is not modified after sent? \uff08\u7be1\u6539\uff09</li> </ul> <p>We can use bi-direction encryption &amp; hash signature:</p> <pre><code>* A shares A's public key with B.\n  B shares B's puclic key with A.\n* B uses A's public key to encrypt the message.\n  B uses B's private key to encrypt hash of the message [signature].\n  B sends the encrypted message and the signature to A. \n* A uses A's private key to decrypt the message. (get message)\n  A uses B's public key to decrypt the signature. (verify it is sent by B)\n  A compares the hash of the received message with the signature. (verify the message is not modified after sent)\n</code></pre> <p>However, there is an even more severe problem:</p> <ul> <li>How to verify the public key really belongs to a specific person?</li> </ul> <p>We have to include a 100% trusty third-person: the certificate authority (CA).</p> <p>It is a server like DNS server, to make clear each public key's owner by generating a Digital Certificate.</p> <p>The DC is yet another encrypted message: it is the specific person's public key encrypted by CA's private key! So now we can use CA's public key to decrypt the DC and get the real public key of the specific person.</p> <pre><code>* A &amp; B apply for DC of their public keys from CA.\n* B uses A's DC to encrypt the message.\n  B uses B's private key to encrypt the hash of the message [signature].\n  B sends the encrypted message, the signature and B's DC to A.\n* A uses A's private key to decrypt the message. (get message)\n  A uses CA's public key to decrpyt B's DC. (get B's public key)\n  A checks if B is the owner of this public key. (verify the public key belongs to B)\n  A uses B's public key to decrypt the signature. (verify it is sent by B)\n  A compares the hash of the received message with the signature. (verify the message is not modified after sent)\n</code></pre> <p>HTTPS: an example.</p> <p>CA will record each website's public key. </p> <p>(to enable https, the website should apply a pair of keys from CA.)</p> <pre><code>* C requests a https connection to S.\n* S sends encrpyted message with the S's DC to C.\n* C uses CA's public key to decrypt S's DC. (get S's public key)\n* C checks if S is the owner of this public key from CA. (verify if this website is fake/pretended)\n* C uses S's public key to decrypt the message. (get message)\n</code></pre>"},{"location":"crypto/base64/","title":"base64","text":"<p>A method that uses 64 printable characters (base64) to encode binary message to make it printable.</p> <pre><code>characters(url_safe): A-Z, a-z, 0-9, +(-), /(_)\npadding character: =\n</code></pre> <p>It encodes every 3 byte binary string to 4 byte base64 string.</p> <pre><code>chars = {i:c for i,c in enumerate(['A', ..., '/'])}\nrev_chars = {v,k for k,v in chars.items()}\n\ndef base64_encode(b):\n    # b is a binary string (by byte, so divisible by 8 bits)\n    s = ''\n    # pad 0 to make it divisible by 6 bits \n    # (some method also pads = to result s)\n    if len(b) % 24 == 8:\n        b += '0000'\n    elif len(b) % 24 == 16:\n        b += '00'\n    # encode every 6 bits\n    for i in range(0, len(b), 6):\n        c = binary_to_int(b[i:i+6])\n        s += chars[c]\n    return s\n\ndef base64_decode(s):\n    b = ''\n    for c in s:\n        b += int_to_binary(c)\n    return b  \n</code></pre>"},{"location":"crypto/base64/#python-api","title":"python API","text":"<pre><code>import base64\n\nbs = b'abinarystring'\nbs64 = base64.b64encode(bs) # b'YWJpbmFyeXN0cmluZw=='\n\nbs == base64.b64decode(bs64) # True\n</code></pre> <p>Note the difference between bytes and strings.</p> <pre><code># Bytes vs String\n\ns = 'test'\nbs = b'test'\n\nstr.encode(s) == s.encode() == bs # True\nbs.decode() == s # True\n</code></pre>"},{"location":"crypto/blockchain/","title":"blockchain","text":"<p>blockchain is a center-less distributed database.</p> <ul> <li>every server can join the blockchain as a node.</li> <li>every node should save the full database by synchronization. (bitcoin database is around 100G now)</li> <li>once the data are written into the database, they cannot be modified (unless one has control over more than 51% nodes).</li> </ul>"},{"location":"crypto/blockchain/#algorithm","title":"Algorithm","text":"<p>blockchain is a single-direction linked list (chain) of blocks. </p> <p>each block contains header and body. </p> <ul> <li>header: <ul> <li>Timestamp: when is this block generated.</li> <li>Prev hash: block hash of the previous block.</li> <li>Merkle hash: hash of the data.</li> <li>...</li> </ul> </li> <li>body: the data.</li> </ul> <p>blockchain usually uses SHA-256 as the hash algorithm.</p> <p>There are three hashes used here:</p> <ul> <li>Merkle hash: the hash of the body, by treating all records as leaf nodes of a binary tree, and finally generating the hash of the root node as the Merkle hash (Merkle tree). This hash is used to assure the body is not modified once generated.</li> </ul> <ul> <li>Block hash: the hash of the header, not written in the block, but computed dynamically.</li> </ul> <ul> <li>Prev hash: the block hash of the previous block, work as a pointer.</li> </ul> <p>We first assume we can synchronize the new block for all nodes, then once a block is generated, the content of this block cannot be changed, since:</p> <ul> <li>if the body's data are changed, the Merkle hash of this specific block also changes.</li> <li>then the header is changed, and the Block hash of this specific block also changes.</li> <li>one have to change all the blocks after this specific block to keep the blockchain connected, while this is impossible for a center-less database (unless he controls 51% computation resources among all the nodes).</li> </ul> <p>But how to make the synchronization for all nodes?</p> <p>We have to slowdown the speed of block generation.</p> <p>Blockchain is designed to be updated every 10 minutes, by making the computation of new block's hash extremely difficult.</p> <p>And this computation progress is called mining.</p> <p>Mining is the procedure that writes data into a blockchain.</p> <p>In fact, it is very expensive to maintain a blockchain, and maybe the only practical application of blockchain is bitcoin.</p>"},{"location":"crypto/blockchain/#bitcoin","title":"Bitcoin","text":"<p>Bitcoin protocol requires each block to be at most 1MB. (around 2000 transactions)</p> <p>All the transaction records are sent to miners, and the miners choose which records to be written to blockchain, so the Merkle hash is determined.</p> <p>Then it is time to mine, with some extra information in the header:</p> <ul> <li> <p>difficulty: a parameter to control the speed of block generation (to make block is generated every 10 minutes in average). </p> <p>Only if the block hash is smaller than the target (<code>TARGET_MAX / difficulty</code>), the block can be accepted as a new block by the blockchain.</p> <p>This parameter is dynamically generated for the next block by the protocol. </p> </li> </ul> <ul> <li>Nonce: A random value to guess/mine, to make the block hash smaller than target.  </li> </ul> <p>Miners start to guess the nonce, and once the block hash is smaller than the target, this block is accepted to the blockchain, and starts to be synchronized to all nodes.</p> <p>If two block are generated nearly the same time so both are accepted, the blockchain will check which fork first reaches 6 length, and only the longer one is kept. (so each transaction is confirmed in at least 10 minutes, at most 1 hour)</p> <p>So why do they mine?</p> <p>Mining is very expensive, and is in fact meaningless.</p> <p>But blockchain needs miners to write data.</p> <p>There are 2 ways for miners to get profits:</p> <ul> <li> <p>Bitcoin protocol rewards miners who successfully write a block, by giving them bitcoins.</p> <p>this amount is 50 in 2008, and halves every 4 years. (and it becomes 0 in 2140, since bitcoins' precision is .8f)</p> <p>All of the bitcoins are generated by this mining reward, so the total amount of bitcoins will be fixed at 2140.</p> </li> </ul> <ul> <li> <p>Service charge of transaction. </p> <p>Each transaction can set an amount of bitcoins to reward the miners that write it. </p> <p>Of course, miners will choose transactions of high service charge in priority.</p> </li> </ul> <p>How to make a valid transaction?</p> <p>Digital Signature technology is used here.</p>"},{"location":"crypto/blockchain/#problems-of-cryptocurrency","title":"Problems of cryptocurrency","text":"<ul> <li>Not real time. (10~60 minutes)</li> <li>Slow. only 2000 transactions in 10 minutes.</li> </ul>"},{"location":"cuda/atomic_utils/","title":"Atomic utils","text":""},{"location":"cuda/atomic_utils/#coalesced-atomics","title":"coalesced atomics","text":"<p>From <code>nvdiffrast common.h</code></p> <p>TODO: how much will it improve performance???</p> <pre><code>//------------------------------------------------------------------------\n// Coalesced atomics. These are all done via macros.\n\n#if __CUDA_ARCH__ &gt;= 700 // Warp match instruction __match_any_sync() is only available on compute capability 7.x and higher\n\n#define CA_TEMP       _ca_temp\n#define CA_TEMP_PARAM float* CA_TEMP\n#define CA_DECLARE_TEMP(threads_per_block) \\\n    __shared__ float CA_TEMP[(threads_per_block)]\n\n#define CA_SET_GROUP_MASK(group, thread_mask)                   \\\n    bool   _ca_leader;                                          \\\n    float* _ca_ptr;                                             \\\n    do {                                                        \\\n        int tidx   = threadIdx.x + blockDim.x * threadIdx.y;    \\\n        int lane   = tidx &amp; 31;                                 \\\n        int warp   = tidx &gt;&gt; 5;                                 \\\n        int tmask  = __match_any_sync((thread_mask), (group));  \\\n        int leader = __ffs(tmask) - 1;                          \\\n        _ca_leader = (leader == lane);                          \\\n        _ca_ptr    = &amp;_ca_temp[((warp &lt;&lt; 5) + leader)];         \\\n    } while(0)\n\n#define CA_SET_GROUP(group) \\\n    CA_SET_GROUP_MASK((group), 0xffffffffu)\n\n#define caAtomicAdd(ptr, value)         \\\n    do {                                \\\n        if (_ca_leader)                 \\\n            *_ca_ptr = 0.f;             \\\n        atomicAdd(_ca_ptr, (value));    \\\n        if (_ca_leader)                 \\\n            atomicAdd((ptr), *_ca_ptr); \\\n    } while(0)\n\n#define caAtomicAddTexture(ptr, level, idx, value)  \\\n    do {                                            \\\n        CA_SET_GROUP((idx) ^ ((level) &lt;&lt; 27));      \\\n        caAtomicAdd((ptr)+(idx), (value));          \\\n    } while(0)\n\n//------------------------------------------------------------------------\n// Disable atomic coalescing for compute capability lower than 7.x\n\n#else // __CUDA_ARCH__ &gt;= 700\n#define CA_TEMP _ca_temp\n#define CA_TEMP_PARAM float CA_TEMP\n#define CA_DECLARE_TEMP(threads_per_block) CA_TEMP_PARAM\n#define CA_SET_GROUP_MASK(group, thread_mask)\n#define CA_SET_GROUP(group)\n#define caAtomicAdd(ptr, value) atomicAdd((ptr), (value))\n#define caAtomicAddTexture(ptr, level, idx, value) atomicAdd((ptr)+(idx), (value))\n#endif // __CUDA_ARCH__ &gt;= 700\n\n//------------------------------------------------------------------------\n</code></pre>"},{"location":"cuda/atomic_utils/#atomicadd-for-athalf","title":"<code>atomicAdd</code> for <code>at::Half</code>","text":"<pre><code>// at::Half atomicAdd, requires CUDA &gt;= 10 &amp;&amp; arch &gt;= 7.x\n// ref: https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCAtomics.cuh#L184\n// caveat: extremely slow, never use!\nstatic inline  __device__ at::Half atomicAdd(at::Half *address, at::Half val) {\n  return atomicAdd(reinterpret_cast&lt;__half*&gt;(address), val);\n}\n</code></pre>"},{"location":"cuda/atomic_utils/#atomicmax-for-athalf-float-double","title":"<code>atomicMax</code> for <code>at::Half, float, double</code>","text":"<pre><code>// atomicMax for __half, float, double (requires arch &gt; 7.0 for ushort ver of atomicCAS)\n// ref: https://github.com/treecode/Bonsai/blob/master/runtime/profiling/derived_atomic_functions.h\n// ref: https://github.com/NVIDIA-developer-blog/code-samples/blob/master/posts/cuda-aware-mpi-example/src/Device.cu\nstatic inline __device__ double atomicMax(double* address, double val)\n{\n  unsigned long long* address_as_ll = reinterpret_cast&lt;unsigned long long*&gt;(address);\n  unsigned long long old = *address_as_ll, assumed;\n  do {\n    assumed = old;\n    old = atomicCAS(address_as_ll, assumed, __double_as_longlong(fmax(val, __longlong_as_double(assumed))));\n  } while (assumed != old);\n  return __longlong_as_double(old);\n}\n\nstatic inline __device__ float atomicMax(float* address, float val)\n{\n  int* address_as_i = reinterpret_cast&lt;int*&gt;(address);\n  int old = *address_as_i, assumed;\n  do {\n    assumed = old;\n    old = atomicCAS(address_as_i, assumed, __float_as_int(fmaxf(val, __int_as_float(assumed))));\n  } while (assumed != old);\n  return __int_as_float(old);\n}\n\nstatic inline __device__ __half atomicMax(__half *address, __half val) {\n  unsigned short* address_as_ushort = reinterpret_cast&lt;unsigned short*&gt;(address);\n  unsigned short old = *address_as_ushort, assumed;\n  do {\n    assumed = old;\n    // ref: https://github.com/NVIDIA/TensorRT/issues/1003\n    // __hmax is only available at arch &gt;= 800 ? even the doc says it should be available from arch &gt;= 520.\n    //old = atomicCAS(address_as_ushort, assumed, __half_as_ushort(__hmax(val, __ushort_as_half(assumed))));\n    old = atomicCAS(address_as_ushort, assumed, __half_as_ushort(__float2half(fmaxf(__half2float(val), __half2float(__ushort_as_half(assumed))))));\n  } while (assumed != old);\n  return __ushort_as_half(old);\n}\n\nstatic inline __device__ at::Half atomicMax(at::Half *address, at::Half val) {\n  return atomicMax(reinterpret_cast&lt;__half*&gt;(address), val);\n}\n</code></pre>"},{"location":"cuda/basics/","title":"CUDA","text":"<p>https://nanohub.org/resources/7225/share?sharewith=pinterest</p>"},{"location":"cuda/basics/#examples","title":"Examples","text":""},{"location":"cuda/basics/#compile","title":"Compile","text":"<pre><code>nvcc hello.cu -o hello.out\n</code></pre>"},{"location":"cuda/basics/#profile","title":"Profile","text":"<pre><code>nvprof ./hello.out\n</code></pre>"},{"location":"cuda/basics/#tutorials","title":"Tutorials","text":""},{"location":"cuda/basics/#compute-capability-sm-version","title":"Compute Capability (SM version)","text":"<p>indicates the features supported by the GPU hardware (not to be confused with CUDA software version).</p> <p>6 = Pascal</p> <p>7 = Volta, 7.5 = Turing</p> <p>8 = Ampere</p>"},{"location":"cuda/basics/#call-kernel-with","title":"Call kernel with &lt;&lt;&gt; <p>(num_blocks, num_threads can be 1d/2d/3d)</p> <p>CUDA will launch a grid:</p> <ul> <li>a grid contains <code>num_blocks</code> blocks.</li> <li>each block contains <code>num_threads</code> threads.</li> </ul> <pre><code>Thread // concurrent code and associated state executed on the CUDA device (in parallel with other threads)\nWarp // a group of threads executed physically in parallel\nBlock // a group of threads that are executed together and form the unit of resource assignment\nGrid // a group of thread blocks that must all complete before the next kernel call of the program can take effect\n</code></pre> <p>The full Execution Configuration: &lt;&lt;&gt;&gt; <ul> <li>Ns: (size_t, default = 0) that specifies the number of bytes in shared memory that id dynamically allocated per block in addition to the statically allocated memory.</li> </ul> <ul> <li>S: (cudaStream_t, default = 0) the associated stream.</li> </ul> <p></p> <p>About how to decide the <code>N_THREAD</code> or <code>block_size</code> here:</p> <ul> <li>hardware limits: We can launch at most 4294967295=65536*65536 (x/y/z: 4294967295/65536/65536) blocks,    with each block contains at most 1024 (x/y/z: 1024/1024/64) threads !</li> <li>usually, tune it from <code>[128, 1024]</code> with a stride of 32.</li> </ul>","text":""},{"location":"cuda/basics/#built-ins","title":"Built-ins <pre><code>void __syncthreads(); // sync all threads in a block.\n\n// build vector \nint2 make_int2(int x, int y);\nint3 make_int3(int x, int y, int z);\n\n// special uint3 type\ndim3 Dim3(x=1, y=1, z=1);\n</code></pre>","text":""},{"location":"cuda/basics/#one-dimensional-example","title":"One-dimensional example <pre><code>/*   \n\n  BlockIdx, ThreadIdx\n&lt;&lt;&lt;GridDim, BlockDim&gt;&gt;&gt;\n\n*/\n\n\nthreadIdx.x  // ranges from 0 to num_threads - 1\nblockDim.x   // = num_threads\nblockIdx.x   // ranges from 0 to num_blocks - 1\ngridDim.x    // = num_blocks\n\ntid = blockIdx.x * blockDim.x + threadIdx.x; // unique id for each kernel call.\n</code></pre> <pre><code>__global__ void vector_add(float *out, float *a, float *b, int n) {\n    for(int i = 0; i &lt; n; i += 1){\n        out[i] = a[i] + b[i];\n    }\n}\n\nvector_add&lt;&lt;&lt;1,1&gt;&gt;&gt;(d_out, d_a, d_b, N);\n// NO parallel, just use one thread to process N elements.\n</code></pre> <pre><code>__global__ void vector_add(float *out, float *a, float *b, int n) {\n    int index = threadIdx.x; // ranges from 0 to num_threads.\n    int stride = blockDim.x; // = num_threads\n\n    for(int i = index; i &lt; n; i += stride){\n        out[i] = a[i] + b[i];\n    }\n}\n\nvector_add&lt;&lt;&lt;1,256&gt;&gt;&gt;(d_out, d_a, d_b, N);\n// only use 256 threads to process, each thread process N / 256 elements in a strided way.\n</code></pre> <pre><code>__global__ void vector_add(float *out, float *a, float *b, int n) {\n    int tid = blockIdx.x * blockDim.x + threadIdx.x;\n\n    if (tid &lt; n) { out[tid] = a[tid] + b[tid]; }\n}\n\nint block_size = 256;\nint grid_size = ((N + block_size - 1) / block_size); // at most 4294967295, enough for most cases\nvector_add&lt;&lt;&lt;grid_size, block_size&gt;&gt;&gt;(d_out, d_a, d_b, N);\n// allocate enough blocks, each with 256 threads to process. Each thread only process 1 element!\n</code></pre>","text":""},{"location":"cuda/basics/#two-dimensional-example","title":"Two-dimensional example <pre><code>__global__ void matrix_add(float A[N][N], float B[N][N], float C[N][N]) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx.y * blockDim.y + threadIdx.y;\n\n    if (i &lt; N &amp;&amp; j &lt; N) C[i][j] = A[i][j] + B[i][j];\n}\n\n\ndim3 threadsPerBlock(16, 16);\ndim3 numBlocks(N / threadsPerBlock.x, N / threadsPerBlock.y);\n\nMatAdd&lt;&lt;&lt;numBlocks, threadsPerBlock&gt;&gt;&gt;(A, B, C);\n</code></pre>","text":""},{"location":"cuda/basics/#function-prefix","title":"Function prefix <p>Concepts: host (cpu), device (gpu, ...)</p> <pre><code>__global__ // called by host (&lt;&lt;&lt;,&gt;&gt;&gt;),                  run on device. (kernels, must return void)\n__device__ // called by device (__global__ or __device__),  run on device.\n__host__   // called by host,                               run on host.\n</code></pre> <p>global &amp; device function cannot:</p> <ul> <li>recursion</li> <li>static variable declaration </li> <li>variable number of arguments.</li> </ul>","text":""},{"location":"cuda/basics/#memory-location","title":"Memory Location <pre><code>__device__                 int GlobalVar; // global memory\n[__device__] __local__     int LocalVar;  // thread local memory\n[__device__] __shared__    int SharedVar; // block shared memory\n[__device__] __constant__  int ConstVar;  // constant memory\n\nint RegVar;     // register (local)\nint RegArr[10]; // local memory\n</code></pre>  <pre><code>\u2013 R/Only                   // constant memory (very fast if in cache)\n\u2013 R/W shared within Block  // shared memory (very fast)\n\u2013 R/W within each thread   // registers (very fast)\n\u2013 R/W inputs/results       // global memory (very slow)\n</code></pre>","text":""},{"location":"cuda/basics/#matmul-example-with-shared-memory","title":"MatMul Example with shared memory <pre><code>// Thread block size\n#define BLOCK_SIZE 16\n\n// Matrices are stored in row-major order:\n// M(row, col) = *(M.elements + row * M.stride + col)\ntypedef struct {\n    int width;\n    int height;\n    int stride; \n    float* elements;\n} Matrix;\n\n// Get a matrix element\n__device__ float GetElement(const Matrix A, int row, int col) {\n    return A.elements[row * A.stride + col];\n}\n\n// Set a matrix element\n__device__ void SetElement(Matrix A, int row, int col, float value) {\n    A.elements[row * A.stride + col] = value;\n}\n\n// Get the BLOCK_SIZExBLOCK_SIZE sub-matrix Asub of A that is\n// located col sub-matrices to the right and row sub-matrices down\n// from the upper-left corner of A\n __device__ Matrix GetSubMatrix(Matrix A, int row, int col)  {\n    Matrix Asub;\n    Asub.width    = BLOCK_SIZE;\n    Asub.height   = BLOCK_SIZE;\n    Asub.stride   = A.stride;\n    Asub.elements = &amp;A.elements[A.stride * BLOCK_SIZE * row + BLOCK_SIZE * col];\n    return Asub;\n}\n\n// Matrix multiplication kernel called by MatMul()\n __global__ void MatMulKernel(Matrix A, Matrix B, Matrix C) {\n    // Block row and column\n    int blockRow = blockIdx.y;\n    int blockCol = blockIdx.x;\n\n    // Each thread block computes one sub-matrix Csub of C\n    Matrix Csub = GetSubMatrix(C, blockRow, blockCol);\n\n    // Each thread computes one element of Csub\n    // by accumulating results into Cvalue\n    float Cvalue = 0;\n\n    // Thread row and column within Csub\n    int row = threadIdx.y;\n    int col = threadIdx.x;\n\n    // Loop over all the sub-matrices of A and B that are\n    // required to compute Csub\n    // Multiply each pair of sub-matrices together\n    // and accumulate the results\n    for (int m = 0; m &lt; (A.width / BLOCK_SIZE); ++m) {\n\n        // Get sub-matrix Asub of A\n        Matrix Asub = GetSubMatrix(A, blockRow, m);\n\n        // Get sub-matrix Bsub of B\n        Matrix Bsub = GetSubMatrix(B, m, blockCol);\n\n        // Shared memory used to store Asub and Bsub respectively\n        __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];\n        __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];\n\n        // Load Asub and Bsub from device memory to shared memory\n        // Each thread loads one element of each sub-matrix\n        As[row][col] = GetElement(Asub, row, col);\n        Bs[row][col] = GetElement(Bsub, row, col);\n\n        // Synchronize to make sure the sub-matrices are loaded\n        // before starting the computation\n        __syncthreads();\n\n        // Multiply Asub and Bsub together\n        for (int e = 0; e &lt; BLOCK_SIZE; ++e) Cvalue += As[row][e] * Bs[e][col];\n\n        // Synchronize to make sure that the preceding\n        // computation is done before loading two new\n        // sub-matrices of A and B in the next iteration\n        __syncthreads();\n    }\n\n    // Write Csub to device memory\n    // Each thread writes one element\n    SetElement(Csub, row, col, Cvalue);\n}\n\n// Matrix multiplication - Host code\n// Matrix dimensions are assumed to be multiples of BLOCK_SIZE\nvoid MatMul(const Matrix A, const Matrix B, Matrix C) {\n    // Load A and B to device memory\n    Matrix d_A;\n    d_A.width = d_A.stride = A.width; d_A.height = A.height;\n    size_t size = A.width * A.height * sizeof(float);\n    cudaMalloc(&amp;d_A.elements, size);\n    cudaMemcpy(d_A.elements, A.elements, size, cudaMemcpyHostToDevice);\n\n    Matrix d_B;\n    d_B.width = d_B.stride = B.width; d_B.height = B.height;\n    size = B.width * B.height * sizeof(float);\n    cudaMalloc(&amp;d_B.elements, size);\n    cudaMemcpy(d_B.elements, B.elements, size, cudaMemcpyHostToDevice);\n\n    // Allocate C in device memory\n    Matrix d_C;\n    d_C.width = d_C.stride = C.width; d_C.height = C.height;\n    size = C.width * C.height * sizeof(float);\n    cudaMalloc(&amp;d_C.elements, size);\n\n    // Invoke kernel\n    dim3 dimBlock(BLOCK_SIZE, BLOCK_SIZE);\n    dim3 dimGrid(B.width / dimBlock.x, A.height / dimBlock.y);\n    MatMulKernel&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(d_A, d_B, d_C);\n\n    // Read C from device memory\n    cudaMemcpy(C.elements, d_C.elements, size, cudaMemcpyDeviceToHost);\n\n    // Free device memory\n    cudaFree(d_A.elements);\n    cudaFree(d_B.elements);\n    cudaFree(d_C.elements);\n}\n</code></pre>","text":""},{"location":"cuda/basics/#optimize-pointer-aliasing","title":"Optimize Pointer Aliasing <pre><code>// pointer aliasing example\nvoid example1(float *a, float *b, float *c, int i) {\n  a[i] = a[i] + c[i]; // c[i] may change (in case a == c)\n  b[i] = b[i] + c[i]; // c[i] needs reloading -&gt; time waste\n}\n\n__global__ void example3a(float* a, float* b, int* c) {\n  int index = blockIdx.x * blockDim.x + threadIdx.x;\n  b[index] = a[c[index]]; // in case a == b\n}\n</code></pre> <p>If we know at compile time a pointer is not accessed by other pointers (No overlapping regions in pointer area), we can add <code>__restrict__</code> to the pointer to avoid reloading.</p> <p>For cuda, we need both <code>const</code> and  <code>__restrict__</code> to achieve this optimization.</p> <pre><code>// tell cuda a != b\n__global__ void example3b(const float* __restrict__ a, float* __restrict__ b, const int*  __restrict__ c) {\n  int index = blockIdx.x * blockDim.x + threadIdx.x;\n  b[index] = a[c[index]];\n}\n</code></pre>","text":""},{"location":"cuda/basics/#stream","title":"Stream <p>The default stream (0) : No concurrency.</p> <pre><code>const int N = 1 &lt;&lt; 20;\n\n__global__ void kernel(float *x, int n)\n{\n    int tid = threadIdx.x + blockIdx.x * blockDim.x;\n    for (int i = tid; i &lt; n; i += blockDim.x * gridDim.x) {\n        x[i] = sqrt(pow(3.14159,i));\n    }\n}\n\nint main()\n{\n    const int num_streams = 8;\n\n    cudaStream_t streams[num_streams];\n    float *data[num_streams];\n\n    for (int i = 0; i &lt; num_streams; i++) {\n        cudaStreamCreate(&amp;streams[i]);\n\n        cudaMalloc(&amp;data[i], N * sizeof(float));\n\n        // launch one worker kernel per stream\n        kernel&lt;&lt;&lt;1, 64, 0, streams[i]&gt;&gt;&gt;(data[i], N);\n\n        // launch a dummy kernel on the default stream\n        kernel&lt;&lt;&lt;1, 1&gt;&gt;&gt;(0, 0);\n    }\n\n    cudaDeviceReset();\n\n    return 0;\n}\n</code></pre> <pre><code>nvcc ./stream_test.cu -o stream_legacy # slower\nnvcc --default-stream per-thread ./stream_test.cu -o stream_per_thread\n</code></pre>","text":""},{"location":"cuda/basics/#array-unfold","title":"Array unfold <p>In cuda, tensors are usually flattened for parallel. </p> <p>pytorch tensor is row-major.</p> <pre><code>arr [3, n] row-major\n[[x1, x2, ..., xn],\n [y1, y2, ..., yn],\n [z1, z2, ..., zn]]\n\nfarr = arr.view(-1) [3n,]\n[x1, x2, ..., xn, y1, ..., yn, z1, ..., zn]\n</code></pre> <p>Usually, to access <code>arr[i, j, k]</code>, we need <code>farr[i*(J+K) + j*K + k]</code></p>","text":""},{"location":"cuda/basics/#atomic-operators","title":"Atomic Operators <p>these functions are guaranteed to be performed without interference from other threads.</p> <p>(of course, slower than direct operation.)</p> <pre><code>T atomicAdd(T* address, T val); // add val to *address and write back to address (return old *address)\nint atomicSub(int* address, int val);\nint atomicExch(int* address, int val); // write val to *address\nint atomicMin(int* address, int val);\nint atomicMax(int* address, int val);\nint atomicAnd(int* address, int val);\nint atomicOr(int* address, int val);\nint atomicXor(int* address, int val);\n</code></pre>","text":""},{"location":"cuda/basics/#pragma-unroll","title":"Pragma unroll <pre><code>#pragma unroll\nfor(int i=0; i&lt;3; i++) {\n    a[i] = i;\n}\n</code></pre> <p>this will translate to</p> <pre><code>a[0] = 0;\na[1] = 1;\na[2] = 2;\n</code></pre>","text":""},{"location":"cuda/basics/#compute-capability","title":"compute capability  <p>\u5b9e\u9645\u67b6\u6784\u4ee3\u7801\u5fc5\u987b\u517c\u5bb9\u4e8e\u865a\u62df\u67b6\u6784\u4ee3\u7801\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u82e5\u4e8c\u8fdb\u5236\u4ee3\u7801\u53ef\u76f4\u63a5\u8fd0\u884c\u5728\u6240\u5728\u663e\u5361\u4e0a\uff0c\u5219\u76f4\u63a5\u8fd0\u884c\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1b\u5426\u5219\uff0c\u82e5\u6587\u4ef6\u4e2d\u5305\u542b\u865a\u62df\u67b6\u6784\u4ee3\u7801\uff0c\u663e\u5361\u9a71\u52a8\u4f1a\u5c1d\u8bd5\u5c06\u865a\u62df\u67b6\u6784\u4ee3\u7801\u5728\u7f16\u8bd1\u65f6\u52a8\u6001\u7f16\u8bd1\u4e3a\u4e8c\u8fdb\u5236\u4ee3\u7801\u8fdb\u884c\u6267\u884c\u3002</p>  <p><code>nvcc</code> compilation includes two phases:</p> <ul> <li> <p>Virtual compute arch (PTX generation, <code>.cu --&gt; .ptx</code>)</p> <p><code>-arch</code> specifies the virtual arch. (only support one, e.g., <code>-arch=compute_20</code>)</p> </li> </ul> <ul> <li> <p>Real sm arch (cubin/binary generation, <code>.ptx --&gt; .cubin</code>)</p> <p><code>-code</code> specifies the real arch. (support many, e.g. <code>-code=sm_20,sm_21</code>)</p> </li> </ul> <p>We can use <code>-gencode</code> to support many virtual archs:</p> <pre><code>... -gencode=arch=compute_50,code=sm_50 -gencode=arch=compute_52,code=sm_52 ...\n</code></pre> <p>Some abbreviations:</p> <pre><code>-arch=sm_70 // -arch=compute_70 -code=compute_70,sm_70\n            // -gencode arch=compute_70,code=\\'compute_70,sm_70\\'\n</code></pre>","text":""},{"location":"cuda/basics/#compilation-in-detail","title":"compilation in detail","text":""},{"location":"cuda/basics/#print-from-kernel","title":"Print from kernel <p>First, use <code>--gpu-architecture &gt; 20</code> (this is default to <code>compute_10</code>)</p> <pre><code>nvcc -arch=compute_30 program.cu\n</code></pre> <p>Or in pytorch CUDA extension:</p> <pre><code>extra_compile_args = {\n    'cxx': ['-g', '-O3', '-fopenmp', '-lgomp'],\n    'nvcc': ['-arch=compute_30', '-O3']\n}\n</code></pre> <p>then you can <code>printf()</code> from kernel directly!</p> <pre><code>#include &lt;cstdio&gt;\n\n__global__ void helloCUDA(float f) {\n    printf(\"Hello thread %d, f=%f\\n\", threadIdx.x, f);\n}\n</code></pre>","text":""},{"location":"cuda/basics/#cuda-memory-check","title":"CUDA memory check <p>Useful tool to debug <code>cuda illegal memory access</code>.</p> <p>For compute_70 and later, the tool is called <code>compute-sanitizer</code>.</p> <p>Compile your program with <code>-lineinfo</code> to get the detailed error location.</p> <p>then run:</p> <pre><code>compute-sanitizer [any program that uses cuda and error]\n\n# example output\n========= Invalid __global__ read of size 2 bytes                                                                                                                                                          \n=========     at 0xd80 in /home/kiui/anaconda3/lib/python3.9/site-packages/torch/include/c10/util/Half-inl.h:37:c10::Half::operator float() const                                                          \n=========     by thread (174,0,0) in block (11,0,0)                                                                                                                                                        \n=========     Address 0x7f169c7ff2f0 is out of bounds                                                                                                                                                      \n=========     Device Frame:/home/kiui/projects/torch-ngp/raymarching/src/raymarching.cu:154:void kernel_generate_points&lt;c10::Half&gt;(c10::Half const*, c10::Half const*, c10::Half const*, float, int, float,\n unsigned int, unsigned int, unsigned int, c10::Half*, int*, int*) [0xc50]                                                                                                                                 \n=========     Saved host backtrace up to driver entry point at kernel launch time                                                                                                                          \n=========     Host Frame: [0x209e4a]                                                                                                                                                                       \n=========                in /lib/x86_64-linux-gnu/libcuda.so.1                                                                                                                                             \n=========     Host Frame: [0x115ab]                                                                                                                                                                        \n=========                in /home/kiui/anaconda3/lib/python3.9/site-packages/torch/lib/libcudart-a7b20f20.so.11.0                                                                                          \n=========     Host Frame:cudaLaunchKernel [0x618c0]                                                                                                                                                        \n=========                in /home/kiui/anaconda3/lib/python3.9/site-packages/torch/lib/libcudart-a7b20f20.so.11.0                                                                                          \n=========     Host Frame:generate_points(at::Tensor, at::Tensor, at::Tensor, float, int, float, unsigned int, unsigned int, unsigned int, at::Tensor, at::Tensor, at::Tensor) [0x8c12]                     \n=========                in /home/kiui/.cache/torch_extensions/py39_cu113/_raymarching/_raymarching.so                                                                                                     \n=========     Host Frame: [0x1ca0d]                                                                                                                                                                        \n=========                in /home/kiui/.cache/torch_extensions/py39_cu113/_raymarching/_raymarching.so                                                                                                     \n=========     Host Frame: [0x18833]                                                                                                                                                                        \n=========                in /home/kiui/.cache/torch_extensions/py39_cu113/_raymarching/_raymarching.so                                                                                                     \n=========     Host Frame: [0x174714]                                                                                              .....\n</code></pre> <p>And it points out where out of bounds happens:</p> <pre><code>// /home/kiui/projects/torch-ngp/raymarching/src/raymarching.cu:154:\nconst float density = grid[index];\n</code></pre>","text":""},{"location":"cuda/basics/#template","title":"template <p>cuda provides <code>AT_DISPATCH_FLOATING_TYPES</code> to automatically dispatch &amp; cast type for every input.</p> <p>(mainly deal with <code>Float</code> vs <code>Double</code> issue)</p> <pre><code>template &lt;typename scalar_t&gt;\n__global__ void lltm_cuda_forward_kernel(\n    const scalar_t* __restrict__ gates,\n    const scalar_t* __restrict__ old_cell,\n    scalar_t* __restrict__ new_h,\n    scalar_t* __restrict__ new_cell,\n    scalar_t* __restrict__ input_gate,\n    scalar_t* __restrict__ output_gate,\n    scalar_t* __restrict__ candidate_cell,\n    size_t state_size) {\n  const int column = blockIdx.x * blockDim.x + threadIdx.x;\n  const int index = blockIdx.y * state_size + column;\n  const int gates_row = blockIdx.y * (state_size * 3);\n  if (column &lt; state_size) {\n    input_gate[index] = sigmoid(gates[gates_row + column]);\n    output_gate[index] = sigmoid(gates[gates_row + state_size + column]);\n    candidate_cell[index] = elu(gates[gates_row + 2 * state_size + column]);\n    new_cell[index] =\n        old_cell[index] + candidate_cell[index] * input_gate[index];\n    new_h[index] = tanh(new_cell[index]) * output_gate[index];\n  }\n}\n\n// macro\nAT_DISPATCH_FLOATING_TYPES(gates.type(), \"lltm_forward_cuda\", ([&amp;] {\n    lltm_cuda_forward_kernel&lt;scalar_t&gt;&lt;&lt;&lt;blocks, threads&gt;&gt;&gt;(\n        gates.data&lt;scalar_t&gt;(),\n        old_cell.data&lt;scalar_t&gt;(),\n        new_h.data&lt;scalar_t&gt;(),\n        new_cell.data&lt;scalar_t&gt;(),\n        input_gate.data&lt;scalar_t&gt;(),\n        output_gate.data&lt;scalar_t&gt;(),\n        candidate_cell.data&lt;scalar_t&gt;(),\n        state_size);\n  }));\n</code></pre> <p>For <code>c10::Half</code>, things are slightly different:</p> <pre><code>AT_DISPATCH_FLOATING_TYPES_AND_HALF(\n    in_feat.type(), \"convolution_forward_cuda\", ([&amp;] {\n        scatter_kernel&lt;scalar_t&gt;\n            &lt;&lt;&lt;ceil((double)(in_buffer_size * n_out_channels) / 256), 256&gt;&gt;&gt;(\n            in_buffer_size, n_out_feats, n_out_channels,\n            out_buffer.data_ptr&lt;scalar_t&gt;(),\n            out_feat.data_ptr&lt;scalar_t&gt;(),\n            neighbor_map.data_ptr&lt;int&gt;(), transpose);\n    }));\n</code></pre> <p>However, it will not cast <code>at::Half</code> to native  <code>__half</code> in CUDA. This lead to problems such as we cannot use <code>atomicAdd()</code> for <code>at::Half</code> (https://discuss.pytorch.org/t/getting-half-out-of-an-fp16-tensor/85743). The offcial implementation is like (https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCAtomics.cuh#L184):</p> <pre><code>static inline  __device__ at::Half gpuAtomicAdd(at::Half *address, at::Half val) {\n#if ((CUDA_VERSION &lt; 10000) || (defined(__CUDA_ARCH__) &amp;&amp; (__CUDA_ARCH__ &lt; 700)))\n  return AtomicFPOp&lt;at::Half&gt;()(address, val,\n                                [](at::Half hsum, at::Half val) {\n                                  return THCNumerics&lt;at::Half&gt;::add(hsum, val);\n                                });\n#else\n  return atomicAdd(reinterpret_cast&lt;__half*&gt;(address), val);\n#endif\n}\n</code></pre> <p>However, <code>__half</code> atomicAdd is extremely slow compared to <code>float</code> or <code>__half2</code>. Usually a better choice is to not use it at all.</p>","text":""},{"location":"cuda/basics/#cuda-example-find-max-value-index-in-an-array","title":"Cuda example: find max value &amp; index in an array <p>https://www.apriorit.com/dev-blog/614-cpp-cuda-accelerate-algorithm-cpu-gpu</p> <p>Local memory version: </p> <pre><code>__global__ void reduceMaxIdxOptimized(const float* __restrict__ input, const int size, float* maxOut, int* maxIdxOut)\n{\n    float localMax = 0.f;\n    int localMaxIdx = 0;\n\n    for (int i = threadIdx.x; i &lt; size; i += blockDim.x)\n    {\n        float val = input[i];\n\n        if (localMax &lt; abs(val))\n        {\n            localMax = abs(val);\n            localMaxIdx = i;\n        }\n    }\n\n    atomicMax(maxOut, localMax);\n\n    __syncthreads();\n\n    if (*maxOut == localMax)\n    {\n        *maxIdxOut = localMaxIdx;\n    }\n}\n\n// impl of atomic operation\n__device__ void atomicMax(float* const address, const float value)\n{\n    if (*address &gt;= value)\n    {\n        return;\n    }\n\n    int* const addressAsI = (int*)address;\n    int old = *addressAsI, assumed;\n\n    do\n    {\n        assumed = old;\n        if (__int_as_float(assumed) &gt;= value)\n        {\n            break;\n        }\n\n        old = atomicCAS(addressAsI, assumed, __float_as_int(value));\n    } while (assumed != old);\n}\n</code></pre> <p>Shared memory version.</p> <pre><code>__global__ void reduceMaxIdxOptimizedShared(const float* __restrict__ input, const int size, float* maxOut, int* maxIdxOut)\n{\n    __shared__ float sharedMax;\n    __shared__ int sharedMaxIdx;\n\n    if (0 == threadIdx.x)\n    {\n        sharedMax = 0.f;\n        sharedMaxIdx = 0;\n    }\n\n    __syncthreads();\n\n    float localMax = 0.f;\n    int localMaxIdx = 0;\n\n    for (int i = threadIdx.x; i &lt; size; i += blockDim.x)\n    {\n        float val = input[i];\n\n        if (localMax &lt; abs(val))\n        {\n            localMax = abs(val);\n            localMaxIdx = i;\n        }\n    }\n\n    atomicMax(&amp;sharedMax, localMax);\n\n    __syncthreads();\n\n    if (sharedMax == localMax)\n    {\n        sharedMaxIdx = localMaxIdx;\n    }\n\n    __syncthreads();\n\n    if (0 == threadIdx.x)\n    {\n        *maxOut = sharedMax;\n        *maxIdxOut = sharedMaxIdx;\n    }\n}\n</code></pre> <p>Optimized thread blocks</p> <pre><code>__global__ void reduceMaxIdxOptimizedBlocks(const float* __restrict__ input, const int size, float* maxOut, int* maxIdxOut)\n{\n    __shared__ float sharedMax;\n    __shared__ int sharedMaxIdx;\n\n    if (0 == threadIdx.x)\n    {\n        sharedMax = 0.f;\n        sharedMaxIdx = 0;\n    }\n\n    __syncthreads();\n\n    float localMax = 0.f;\n    int localMaxIdx = 0;\n\n    for (int i = threadIdx.x + blockIdx.x * blockDim.x; i &lt; size; i += blockDim.x)\n    {\n        float val = input[i];\n\n        if (localMax &lt; abs(val))\n        {\n            localMax = abs(val);\n            localMaxIdx = i;\n        }\n    }\n\n    atomicMax(&amp;sharedMax, localMax);\n\n    __syncthreads();\n\n    if (sharedMax == localMax)\n    {\n        sharedMaxIdx = localMaxIdx;\n    }\n\n    __syncthreads();\n\n    if (0 == threadIdx.x)\n    {\n        maxOut[blockIdx.x] = sharedMax;\n        maxIdxOut[blockIdx.x] = sharedMaxIdx;\n    }\n}\n</code></pre> <p>Warp optimized</p> <pre><code>__global__ void reduceMaxIdxOptimizedWarp(const float* __restrict__ input, const int size, float* maxOut, int* maxIdxOut)\n{\n    float localMax = 0.f;\n    int localMaxIdx = 0;\n\n    for (int i = threadIdx.x; i &lt; size; i += blockDim.x)\n    {\n        float val = input[i];\n\n        if (localMax &lt; abs(val))\n        {\n            localMax = abs(val);\n            localMaxIdx = i;\n        }\n    }\n\n    const float warpMax = warpReduceMax(localMax);\n\n    const int warpMaxIdx = warpBroadcast(localMaxIdx, warpMax == localMax);\n\n    const int lane = threadIdx.x % warpSize;\n\n    if (lane == 0)\n    {\n        int warpIdx = threadIdx.x / warpSize;\n        maxOut[warpIdx] = warpMax;\n        maxIdxOut[warpIdx] = warpMaxIdx;\n    }\n}\n</code></pre>","text":""},{"location":"cuda/cute/","title":"CuTe DSL","text":""},{"location":"cuda/cute/#install","title":"Install","text":"<p>Only for Linux + Python 3.12 + CUDA 12.9</p> <pre><code>pip install nvidia-cutlass-dsl\n</code></pre> <pre><code>import cutlass\nimport cutlass.cute as cute\n</code></pre>"},{"location":"cuda/cute/#basics","title":"Basics","text":"<p>Kernels (<code>@cute.kernel</code>) are CUDA kernels (like <code>__global__</code>) that runs on GPU devices.</p> <pre><code>@cute.kernel\ndef kernel():\n    # Get the x component of the thread index (y and z components are unused)\n    tidx, _, _ = cute.arch.thread_idx()\n    # Only the first thread (thread 0) prints the message\n    if tidx == 0:\n        cute.printf(\"Hello world\")\n</code></pre> <p>To launch kernels, we need host function on CPU (<code>@cute.jit</code>) </p> <pre><code>@cute.jit\ndef hello_world():\n    cute.printf(\"hello world\")\n    # Launch kernel\n    kernel().launch(\n        grid=(1, 1, 1),   # Single thread block\n        block=(32, 1, 1)  # One warp (32 threads) per thread block\n    )\n</code></pre> <p>The code can run in JIT or pre-compile modes:</p> <pre><code># directly call will run in JIT.\nhello_world()\n\n# or pre-compile\nhello_world_compiled = cute.compile(hello_world)\nhello_world_compiled()\n</code></pre>"},{"location":"cuda/cute/#print","title":"Print","text":"<p>The cute program will run at both compile and runtime. Python <code>print</code> will be called at compile time (and only know static values), while <code>cute.printf</code> will be called at runtime (know both static and dynamic values).</p> <pre><code>@cute.jit\ndef print_example(a: cutlass.Int32, b: cutlass.Constexpr[int]):\n    \"\"\"\n    Demonstrates different printing methods in CuTe and how they handle static vs dynamic values.\n\n    This example shows:\n    1. How Python's `print` function works with static values at compile time but can't show dynamic values\n    2. How `cute.printf` can display both static and dynamic values at runtime\n    3. The difference between types in static vs dynamic contexts\n    4. How layouts are represented in both printing methods\n\n    Args:\n        a: A dynamic Int32 value that will be determined at runtime\n        b: A static (compile-time constant) integer value\n    \"\"\"\n    # Use Python `print` to print static information\n    print(\"&gt;&gt;&gt;\", b)  # =&gt; 2\n    # `a` is dynamic value\n    print(\"&gt;&gt;&gt;\", a)  # =&gt; ?\n\n    # Use `cute.printf` to print dynamic information\n    cute.printf(\"&gt;?? {}\", a)  # =&gt; 8\n    cute.printf(\"&gt;?? {}\", b)  # =&gt; 2\n\n    print(\"&gt;&gt;&gt;\", type(a))  # =&gt; &lt;class 'cutlass.Int32'&gt;\n    print(\"&gt;&gt;&gt;\", type(b))  # =&gt; &lt;class 'int'&gt;\n\n    layout = cute.make_layout((a, b))\n    print(\"&gt;&gt;&gt;\", layout)            # =&gt; (?,2):(1,?)\n    cute.printf(\"&gt;?? {}\", layout)   # =&gt; (8,2):(1,8)\n</code></pre> <p>Output:</p> <pre><code>### print_example(cutlass.Int32(8), 2)\n# print at compile time\n&gt;&gt;&gt; 2 \n&gt;&gt;&gt; ?\n&gt;&gt;&gt; Int32\n&gt;&gt;&gt; &lt;class 'int'&gt;\n&gt;&gt;&gt; (?,2):(1,?)\n# printf at runtime\n&gt;?? 8\n&gt;?? 2\n&gt;?? (8,2):(1,8)\n</code></pre>"},{"location":"cuda/gpu_to_arch/","title":"Gpu to arch","text":"Fermi\u2020 Kepler\u2020 Maxwell\u2021 Pascal Volta Turing Ampere Lovelace* Hopper** sm_20 sm_30 sm_50 sm_60 sm_70 sm_75 sm_80 sm_90? sm_100c? sm_35 sm_52 sm_61 sm_72 sm_86 sm_37 sm_53 sm_62 <p>\u2020 Fermi and Kepler are deprecated from CUDA 9 and 11 onwards \u2021 Maxwell is deprecated from CUDA 12 onwards * Lovelace is the microarchitecture replacing Ampere (AD102) ** Hopper is NVIDIA\u2019s rumored \u201ctesla-next\u201d series, with a 5nm process.</p>"},{"location":"cuda/gpu_to_arch/#fermi-cards-cuda-32-until-cuda-8","title":"Fermi cards (CUDA 3.2 until CUDA 8)","text":"<p>Deprecated from CUDA 9, support completely dropped from CUDA 10.</p> <ul> <li>SM20 or SM_20, compute_30 \u2013   GeForce 400, 500, 600, GT-630.   *Completely dropped from CUDA 10 onwards.***</li> </ul>"},{"location":"cuda/gpu_to_arch/#kepler-cards-cuda-5-until-cuda-10","title":"Kepler cards (CUDA 5 until CUDA 10)","text":"<p>Deprecated from CUDA 11.</p> <ul> <li>SM30 or <code>SM_30, compute_30</code> \u2013   Kepler architecture (e.g. generic Kepler, GeForce 700, GT-730).   Adds support for unified memory programming   Completely dropped from CUDA 11 onwards.</li> <li>SM35 or <code>SM_35, compute_35</code> \u2013   Tesla K40.   Adds support for dynamic parallelism.   Deprecated from CUDA 11, will be dropped in future versions.</li> <li>SM37 or <code>SM_37, compute_37</code> \u2013   Tesla K80.   Adds a few more registers.   Deprecated from CUDA 11, will be dropped in future versions, strongly suggest replacing with a 32GB PCIe Tesla V100.</li> </ul>"},{"location":"cuda/gpu_to_arch/#maxwell-cards-cuda-6-until-cuda-11","title":"Maxwell cards (CUDA 6 until CUDA 11)","text":"<ul> <li>SM50 or <code>SM_50, compute_50</code> \u2013   Tesla/Quadro M series.   Deprecated from CUDA 11, will be dropped in future versions, strongly suggest replacing with a Quadro RTX 4000.</li> <li>SM52 or <code>SM_52, compute_52</code> \u2013   Quadro M6000 , GeForce 900, GTX-970, GTX-980, GTX Titan X.</li> <li>SM53 or <code>SM_53, compute_53</code> \u2013   Tegra (Jetson) TX1 / Tegra X1, Drive CX, Drive PX, Jetson Nano.</li> </ul>"},{"location":"cuda/gpu_to_arch/#pascal-cuda-8-and-later","title":"Pascal (CUDA 8 and later)","text":"<ul> <li>SM60 or <code>SM_60, compute_60</code> \u2013   Quadro GP100, Tesla P100, DGX-1 (Generic Pascal)</li> <li>SM61 or <code>SM_61, compute_61</code>\u2013   GTX 1080, GTX 1070, GTX 1060, GTX 1050, GTX 1030 (GP108), GT 1010 (GP108) Titan Xp, Tesla P40, Tesla P4, Discrete GPU on the NVIDIA Drive PX2</li> <li>SM62 or <code>SM_62, compute_62</code> \u2013    Integrated GPU on the NVIDIA Drive PX2, Tegra (Jetson) TX2</li> </ul>"},{"location":"cuda/gpu_to_arch/#volta-cuda-9-and-later","title":"Volta (CUDA 9 and later)","text":"<ul> <li>SM70 or <code>SM_70, compute_70</code> \u2013   DGX-1 with Volta, Tesla V100, GTX 1180 (GV104), Titan V, Quadro GV100</li> <li>SM72 or <code>SM_72, compute_72</code> \u2013   Jetson AGX Xavier, Drive AGX Pegasus, Xavier NX</li> </ul>"},{"location":"cuda/gpu_to_arch/#turing-cuda-10-and-later","title":"Turing (CUDA 10 and later)","text":"<ul> <li>SM75 or <code>SM_75, compute_75</code> \u2013   GTX/RTX Turing \u2013 GTX 1660 Ti, RTX 2060, RTX 2070, RTX 2080, Titan RTX, Quadro RTX 4000, Quadro RTX 5000, Quadro RTX 6000, Quadro RTX 8000, Quadro T1000/T2000, Tesla T4</li> </ul>"},{"location":"cuda/gpu_to_arch/#ampere-cuda-111-and-later","title":"Ampere (CUDA 11.1 and later)","text":"<ul> <li>SM80 or <code>SM_80, compute_80</code> \u2013   NVIDIA A100 (the name \u201cTesla\u201d has been dropped \u2013 GA100), NVIDIA DGX-A100</li> <li>*SM86 or <code>SM_86, compute_86</code>* \u2013 (from CUDA 11.1 onwards)   Tesla GA10x cards, RTX Ampere \u2013 RTX 3080, GA102 \u2013 RTX 3090, RTX A2000, A3000, A4000, A5000, A6000, NVIDIA A40, GA106 \u2013 RTX 3060, GA104 \u2013 RTX 3070, GA107 \u2013 RTX 3050, Quadro A10, Quadro A16, Quadro A40, A2 Tensor Core GPU</li> </ul> <p>\u201cDevices of compute capability 8.6 have 2x more FP32 operations per cycle per SM than devices of compute capability 8.0. While a binary compiled for 8.0 will run as is on 8.6, it is recommended to compile explicitly for 8.6 to benefit from the increased FP32 throughput.\u201c</p> <p>https://docs.nvidia.com/cuda/ampere-tuning-guide/index.html#improved_fp32</p>"},{"location":"cuda/gpu_to_arch/#hopper-cuda-12-planned-and-later","title":"Hopper (CUDA 12 [planned] and later)","text":"<ul> <li>SM90 or <code>SM_90, compute_90</code> \u2013   NVIDIA H100 (GH100)</li> </ul>"},{"location":"cuda/nsight-sys/","title":"nsight-sys","text":"<p>A CPU &amp; CUDA profiler.</p>"},{"location":"cuda/nsight-sys/#install","title":"install","text":"<p>Should be located in <code>/usr/local/cuda/bin/nsight-sys</code> if CUDA is successfully installed.</p> <pre><code># check status\nnsys status --environment\n\n# if it shows any Fail, we should change paranoid level\nTimestamp counter supported: Yes\nSampling Environment Check\nLinux Kernel Paranoid Level = 4: OK\nLinux Distribution = Ubuntu\nLinux Kernel Version = 5.11.0-46-generic: OK\nLinux perf_event_open syscall available: Fail\nSampling trigger event available: Fail\nIntel(c) Last Branch Record support: Not Available\nSampling Environment: Fail\n\n# set paranoid level to 2 or 1\nsudo sh -c 'echo 1 &gt;/proc/sys/kernel/perf_event_paranoid'\n</code></pre>"},{"location":"cuda/nsight-sys/#usage","title":"Usage","text":"<p>Pretty simple, just start the GUI, choose new project, and enter the command line that starts your program.</p> <p>Example usage:</p> <p></p> <p>Note:</p> <ul> <li>select <code>collect CUDA trace</code> to profile CUDA.</li> <li>select <code>start profiling after 10.0 secs</code>, because we run a training script and it needs to warm up. (else it will collect a lot of unneeded CPU instructions)</li> </ul> <p>And after finishing (or manually stopping) the command, it generates a report:</p> <ul> <li> <p>Timeline View: the most amazing part. DO CHECK THE WARNINGS!</p> <p></p> </li> </ul> <ul> <li>Files: where the <code>stdout</code> and <code>stderr</code> goes. Check here to make sure the command runs correctly.</li> </ul>"},{"location":"cuda/project_layout/","title":"CUDA project layout","text":"<p>Project with CUDA implementation + Python bindings.</p> <pre><code>include/\n    myproject/\n        common.h # common functions for CUDA side\n        utils.cuh # CUDA header with source\n        main.h # CPP side API, must not contain/include any CUDA code.\n\nsrc/\n    main.cu # implementation for main.h, may contain/include CUDA code. \n    bindings.cpp # pybind code\n\nmyproject/\n    __init__.py\n    main.py # python side API (call the C impl)\n\nsetup.py # build C side and install python side\n</code></pre>"},{"location":"cuda/project_layout/#implement-function-in-cpp","title":"Implement Function in CPP","text":"<p>This is much easier. </p> <p>We can handle memory allocation in python side, and only pass data pointer to C side.</p> <ul> <li>define the function API in python side <code>func.py</code>, which imports and calls backend functions.</li> <li>write a <code>func.h</code> to define the backend functions.</li> <li>implement backend functions in <code>func.cu</code></li> <li>write a <code>bindings.cpp</code> to expose the backend.</li> <li>write <code>setup.py</code> to build everything.</li> </ul>"},{"location":"cuda/project_layout/#implement-class-in-cpp","title":"Implement Class in CPP","text":"<p>We need to let C side hold data structures and maybe allocate memory! This becomes harder...</p> <p>For example, we'll need to convert data pointer to custom <code>struct</code> or <code>class</code>.</p>"},{"location":"cuda/project_layout/#header-source-separation","title":"Header Source Separation","text":""},{"location":"cuda/project_layout/#example","title":"Example","text":""},{"location":"cuda/runtime/","title":"Runtime","text":""},{"location":"cuda/runtime/#memory-transfer","title":"Memory transfer","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;cuda_runtime.h&gt;\n#include &lt;helper_cuda.h&gt;\n\n// Device code\n__global__ void VecAdd(float* A, float* B, float* C, int N)\n{\n    int i = blockDim.x * blockIdx.x + threadIdx.x;\n    if (i &lt; N) C[i] = A[i] + B[i];\n}\n\n// Host code\nint main()\n{\n    int N = 10;\n    size_t size = N * sizeof(float);\n\n    // Allocate input vectors h_A and h_B in host memory\n    float *h_A = (float*)malloc(size);\n    float *h_B = (float*)malloc(size);\n\n    // Allocate vectors in device memory\n    float *d_A, *d_B, *d_C;\n    cudaMalloc(&amp;d_A, size);\n    cudaMalloc(&amp;d_B, size);\n    cudaMalloc(&amp;d_C, size);\n\n    // Copy vectors from host memory to device memory\n    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);\n    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);\n\n    // Invoke kernel\n    int threadsPerBlock = 256;\n    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;\n    VecAdd&lt;&lt;&lt;blocksPerGrid, threadsPerBlock&gt;&gt;&gt;(d_A, d_B, d_C, N);\n\n    // Copy result from device memory to host memory\n    // h_C contains the result in host memory\n    float *h_C;\n    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);\n\n    // Free device memory\n    cudaFree(d_A);\n    cudaFree(d_B);\n    cudaFree(d_C);\n\n    // Free host memory\n    free(h_A);\n    free(h_B);\n    free(h_C);\n}\n</code></pre>"},{"location":"cuda/runtime/#error-check","title":"Error check","text":"<pre><code>#include &lt;cuda_runtime.h&gt;\n#include &lt;helper_cuda.h&gt;\n\nint main() {\n    cudaError_t err = cudaSuccess;\n\n    // functions\n    err = cudaMalloc((void**)&amp;d, size);\n    if (err != cudaSuccess) {\n        fprintf(stderr, \"error code %s\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    // kernels\n    vectorAdd&lt;&lt;&lt;blocksPerGrid, threadsPerBlock&gt;&gt;&gt;(d_A, d_B, d_C, numElements);\n    err = cudaGetLastError();\n\n    // simple way\n    checkCudaErrors(cudaMalloc(.));\n}\n</code></pre>"},{"location":"cuda/thrust/","title":"thrust","text":""},{"location":"cuda/thrust/#vectors","title":"Vectors","text":"<p>Just like the <code>std::vector</code>.</p> <pre><code>#include &lt;thrust/host_vector.h&gt;\n#include &lt;thrust/device_vector.h&gt;\n\n#include &lt;thrust/copy.h&gt;\n#include &lt;thrust/fill.h&gt;\n#include &lt;thrust/sequence.h&gt;\n\n#include &lt;iostream&gt;\n\nint main(void) {\n    thrust::host_vector&lt;int&gt; H(10, 0);\n    thrust::device_vector&lt;int&gt; D = H; // support H &lt;--&gt; D copy (call cudaMemcpy inside)\n\n    int s = H.size();\n    D[0] = 0;\n    int x = H[0];\n\n    // functions\n    thrust::fill(D.begin(), D.begin + 3, 1);\n    thrust::sequence(H.begin, H.end()); // assign range [0, 1, ..., H.size() - 1]\n    thrust::copy(H.begin(), H.end(), D.begin()); // copy all H to D\n\n    // also support raw device array, but need to wrap it with device_ptr&lt;T&gt;\n    int *arr;\n    cudaMalloc((void**)&amp;arr, 10 * sizeof(int));\n    thrust::device_ptr&lt;int&gt; dev_arr(arr); // wrap!\n    thrust::fill(dev_arr, dev_arr + 10, 1); \n\n    // also support unwrap.\n    thrust::device_ptr&lt;int&gt; dev_ptr = thrust::device_malloc&lt;int&gt;(N);\n    int* arr =  thrust::raw_pointer_cast(dev_arr); // unwrap \n\n    // support copy to STL\n    vector&lt;int&gt; S(D.size());\n    thrust::copy(D.begin(), D.end(), S.begin()); // cudaMemcpy inside\n}\n</code></pre>"},{"location":"cuda/thrust/#algorithms","title":"Algorithms","text":"<p>Thrust algorithms will auto detect host/device and run the correct version.</p> <pre><code>#include &lt;thrust/device_vector.h&gt;\n#include &lt;thrust/transform.h&gt;\n#include &lt;thrust/sequence.h&gt;\n#include &lt;thrust/copy.h&gt;\n#include &lt;thrust/fill.h&gt;\n#include &lt;thrust/replace.h&gt;\n#include &lt;thrust/scan.h&gt;\n#include &lt;thrust/sort.h&gt;\n#include &lt;thrust/functional.h&gt;\n#include &lt;iostream&gt;\n\nint main(void)\n{\n    // allocate three device_vectors with 10 elements\n    thrust::device_vector&lt;int&gt; X(10);\n    thrust::device_vector&lt;int&gt; Y(10);\n    thrust::device_vector&lt;int&gt; Z(10);\n\n    // initialize X to 0,1,2,3, ....\n    thrust::sequence(X.begin(), X.end());\n\n    // compute Y = -X\n    thrust::transform(X.begin(), X.end(), Y.begin(), thrust::negate&lt;int&gt;());\n\n    // fill Z with twos\n    thrust::fill(Z.begin(), Z.end(), 2);\n\n    // compute Y = X mod 2\n    thrust::transform(X.begin(), X.end(), Z.begin(), Y.begin(), thrust::modulus&lt;int&gt;());\n\n    // replace all the ones in Y with tens\n    thrust::replace(Y.begin(), Y.end(), 1, 10);\n\n    // reduce\n    int sum = thrust::reduce(D.begin(), D.end(), (int) 0, thrust::plus&lt;int&gt;());\n    int sum = thrust::reduce(D.begin(), D.end(), (int) 0);\n    int sum = thrust::reduce(D.begin(), D.end())\n\n    // count the 1s\n    thrust::device_vector&lt;int&gt; vec(5,0);\n    vec[1] = 1;\n    vec[3] = 1;\n    vec[4] = 1;\n    int result = thrust::count(vec.begin(), vec.end(), 1); // 3\n\n    // prefix-sum (scan)\n    int data[6] = {1, 0, 2, 2, 1, 3};\n    thrust::inclusive_scan(data, data + 6, data); // in-place, data is now {1, 1, 3, 5, 6, 9}\n    int data[6] = {1, 0, 2, 2, 1, 3};\n    thrust::exclusive_scan(data, data + 6, data); // in-place, data is now {0, 1, 1, 3, 5, 6} (right shifted)\n\n    // sort\n    const int N = 6;\n    int A[N] = {1, 4, 2, 8, 5, 7};\n    thrust::sort(A, A + N); // in-place sort\n\n    int keys[N] = {1, 4, 2, 8, 5, 7};\n    char values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\n    thrust::sort_by_key(keys, keys + N, values); // both keys and values are sorted in-place\n\n    // print Y\n    thrust::copy(Y.begin(), Y.end(), std::ostream_iterator&lt;int&gt;(std::cout, \"\\n\"));\n\n    return 0;    \n}\n</code></pre> <p><code>transform</code> is very useful for paralleled vector operations (at most two parameters), for example, we can implement our own function and parallel it:</p> <pre><code>// custorm_func(x, y) = x + y * a;\nstruct custom_func {\n    const float a;\n    custom_func(float _a) : a(_a) {}\n    __host__ __device__ float operator() (const float&amp; x, const float&amp; y) const {\n        return x + y * a;\n    }\n};\n\n// call with\nthrust::transform(X.begin(), X.end(), Y.begin(), Y.end(), custom_func(a));\n\n// square&lt;T&gt; computes the square of a number f(x) -&gt; x*x\ntemplate &lt;typename T&gt;\nstruct square\n{\n    __host__ __device__ T operator()(const T&amp; x) const { \n            return x * x;\n        }\n};\n\n// compute norm\nfloat norm = std::sqrt(thrust::transform_reduce(d_x.begin(), d_x.end(), square&lt;float&gt;(), 0, thrust::plus&lt;float&gt;()));\n</code></pre>"},{"location":"cuda/thrust/#iterators","title":"iterators","text":"<pre><code>#include &lt;thrust/iterator/constant_iterator.h&gt;\nthrust::constant_iterator&lt;int&gt; first(10); // init value is 10\nfirst[0]; // 10\nfirst[100]; // 10\nthrust.reduce(first, first + 3); // 30\n\n\n#include &lt;thrust/iterator/counting_iterator.h&gt;\nthrust::counting_iterator&lt;int&gt; first(10); // init value is 10, auto incremental\nfirst[0]; // 10\nfirst[1]; // 11\nfirst[100]; // 110\n\n\n#include &lt;thrust/iterator/zip_iterator.h&gt;\n// initialize vectors\nthrust::device_vector&lt;int&gt;  A(3);\nthrust::device_vector&lt;char&gt; B(3);\nA[0] = 10;  A[1] = 20;  A[2] = 30;\nB[0] = 'x'; B[1] = 'y'; B[2] = 'z';\n// create iterator (type omitted)\nfirst = thrust::make_zip_iterator(thrust::make_tuple(A.begin(), B.begin()));\nlast  = thrust::make_zip_iterator(thrust::make_tuple(A.end(),   B.end()));\nfirst[0]   // returns tuple(10, 'x')\nfirst[1]   // returns tuple(20, 'y')\nfirst[2]   // returns tuple(30, 'z')\n// maximum of [first, last)\nthrust::tuple&lt;int,char&gt; init = first[0];\nthrust::reduce(first, last, init, thrust::maximum&lt;tuple&lt;int,char&gt;&gt;()); // returns tuple(30, 'z')\n</code></pre>"},{"location":"cuda/triton/","title":"Triton","text":""},{"location":"cuda/triton/#install","title":"install","text":"<p>Better to install from source since it is under active development:</p> <pre><code>git clone https://github.com/openai/triton.git\ncd triton/python\npip install -e .\n</code></pre>"},{"location":"cuda/triton/#questions","title":"Questions","text":"<ul> <li>how to debug, e.g., print from kernel?</li> </ul> <ul> <li> <p>**it seems triton's logic is not identical to CUDA, what's the difference? **</p> <p>Maybe a good answer:</p> <p></p> <p>(This Single-Program-Multiple-Data model seems more convoluted than CUDA...)</p> </li> </ul> <ul> <li>Can I translate any CUDA implementation into triton?</li> </ul> <ul> <li> <p>if possible, is triton's performance comparable to the CUDA implementation?</p> <p>Yes, and can be better if carefully tuned, according to the matrix-multiplication exp. </p> <p>But the improvement is not very significant...</p> </li> </ul> <ul> <li> <p>How can I use triton?</p> <p>For even better performance compared to CUDA?</p> <p>Since it is also hard to write efficient triton programs... this is not very practical.</p> <p>For example, I cannot think of a way to use triton to do raytracing/raymarching. It still requires blocked operation, but in this case each ray behaves differently, and cannot share in a block.</p> </li> </ul>"},{"location":"cuda/triton/#basics","title":"basics","text":"<p>There is no built doc for <code>triton.language</code>, search it here.</p> <p>1D Vector add example:</p> <pre><code>import torch\nimport triton\nimport triton.language as tl\n\n# decorator to call the jit compiler\n@triton.jit\ndef kernel_add(px, py, pz, # pointer to data\n               N, # total element count\n               B: tl.constexpr, # batch size, `tl.constexpr` means value should be determined before runtime.\n              ):\n    # 1D parallel (axis=0), launch B threads to process N elements in a strided way.\n    pid = tl.program_id(0)\n    # we are going to process x[pid * B : (pid + 1) * B], create the index offset.\n    offsets = pid * B + tl.arange(0, B)\n    # mask out-of-bound threads in case N % B != 0\n    mask = offsets &lt; N\n    # load data\n    x = tl.load(px + offsets, mask=mask)\n    y = tl.load(py + offsets, mask=mask)    \n    # calculate \n    z = x + y\n    # write data\n    tl.store(pz + offsets, z, mask=mask)\n\n# function to wrap the kernel\ndef add(x, y):\n    # x, y: [N]\n    assert x.is_cuda and y.is_cuda\n    z = torch.empty_like(x)\n    N = x.shape[0]\n    # how many kernels to launch to cover N elements (return a tuple)\n    grid = lambda meta: (triton.cdiv(N, meta['B']),) # ceiling division, allocate enough blocks.\n    kernel_add[grid](x, y, z, N, B=512)\n    return z\n\n# test\nN = 10240\nx = torch.rand(N, device='cuda')\ny = torch.rand(N, device='cuda')\nz0 = x + y\nz1 = add(x, y)\nprint(torch.allclose(z0, z1))\n</code></pre> <p>Some differences from writing CUDA :</p> <ul> <li>We don't use <code>N_THREAD</code>, instead, we use <code>BLOCK_SIZE = N / N_THREAD</code>.</li> </ul> <p>parallel-on-batch-dim example (softmax):</p> <pre><code>import torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef kernel_softmax(px, py, M, B: tl.constexpr):\n    # parallel on N rows\n    pid = tl.program_id(0)\n    # allocate\n    px = px + pid * M\n    py = py + pid * M\n    offsets = tl.arange(0, B)\n    # mask (a little different, this mask happens for each thread)\n    mask = offsets &lt; M\n    # load\n    x = tl.load(px + offsets, mask=mask, other=-float('inf'))\n    # calc\n    x = x - tl.max(x, axis=0) # for numerical stability\n    num = tl.exp(x)\n    den = tl.sum(num, axis=0)\n    y = num / den\n    # write\n    tl.store(py + offsets, y, mask=mask)\n\ndef softmax(x):\n    # x: [N, M], perform row-wise softmax\n    N, M = x.shape\n    y = torch.empty_like(x)\n    # block size must cover a full row\n    B = triton.next_power_of_2(M)\n    # launch N kernels (parallel per batch)\n    kernel_softmax[(N,)](x, y, M, B=B)\n    return y    \n\n# test\nx = torch.randn(10, 100, device='cuda')\ny0 = torch.softmax(x, axis=1)\ny1 = softmax(x)\nassert torch.allclose(y0, y1), (y0, y1)\n\n# benchmark\n@triton.testing.perf_report(\n    triton.testing.Benchmark(\n        x_names=['M'],  # argument names to use as an x-axis for the plot\n        x_vals=[\n            128 * i for i in range(1, 100, 10)\n        ],  # different possible values for `x_name`\n        line_arg='provider',  # argument name whose value corresponds to a different line in the plot\n        line_vals=[\n            'triton',\n            'torch-native',\n        ],  # possible values for `line_arg``\n        line_names=[\n            \"Triton\",\n            \"Torch (native)\",\n        ],  # label name for the lines\n        styles=[('blue', '-'), ('green', '-')],  # line styles\n        ylabel=\"GB/s\",  # label name for the y-axis\n        plot_name=\"softmax-performance\",  # name for the plot. Used also as a file name for saving the plot.\n        args={'N': 4096},  # values for function arguments not in `x_names` and `y_name`\n    )\n)\n\ndef benchmark(N, M, provider):\n    x = torch.randn(N, M, device='cuda', dtype=torch.float32)\n    if provider == 'torch-native':\n        ms, min_ms, max_ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=1))\n    if provider == 'triton':\n        ms, min_ms, max_ms = triton.testing.do_bench(lambda: softmax(x))\n    gbps = lambda ms: 2 * x.nelement() * x.element_size() * 1e-9 / (ms * 1e-3)\n    return gbps(ms), gbps(max_ms), gbps(min_ms)\n\nbenchmark.run(show_plots=False, print_data=True)\n</code></pre> <p>TODO: </p> <p>Matrix-multiplication example:</p> <pre><code>import torch\n\nimport triton\nimport triton.language as tl\n\n# %\n# :code:`triton.jit`'ed functions can be auto-tuned by using the `triton.autotune`\n# decorator, which consumes:\n#   - A list of :code:`triton.Config` objects that define different configurations of\n#       meta-parameters (e.g., BLOCK_SIZE_M) and compilation options (e.g., num_warps) to try\n#   - An autotuning *key* whose change in values will trigger evaluation of all the\n#       provided configs\n\n\n@triton.autotune(\n    configs=[\n        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 256, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=3, num_warps=8),\n        triton.Config({'BLOCK_SIZE_M': 256, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=3, num_warps=8),\n        triton.Config({'BLOCK_SIZE_M': 256, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 256, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 32, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4, num_warps=4),\n        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 32, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=5, num_warps=2),\n        triton.Config({'BLOCK_SIZE_M': 32, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=5, num_warps=2),\n    ],\n    key=['M', 'N', 'K'],\n)\n@triton.jit\ndef matmul_kernel(\n    # Pointers to matrices\n    a_ptr, b_ptr, c_ptr,\n    # Matrix dimensions\n    M, N, K,\n    # The stride variables represent how much to increase the ptr by when moving by 1\n    # element in a particular dimension. E.g. stride_am is how much to increase a_ptr\n    # by to get the element one row down (A has M rows)\n    stride_am, stride_ak,\n    stride_bk, stride_bn,\n    stride_cm, stride_cn,\n    # Meta-parameters\n    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr,\n    ACTIVATION: tl.constexpr,\n):\n    \"\"\"Kernel for computing the matmul C = A x B.\n    A has shape (M, K), B has shape (K, N) and C has shape (M, N)\n    \"\"\"\n    # -----------------------------------------------------------\n    # Map program ids `pid` to the block of C it should compute.\n    # This is done in a grouped ordering to promote L2 data reuse\n    # See above `L2 Cache Optimizations` section for details\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * GROUP_SIZE_M\n    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n    pid_m = first_pid_m + (pid % group_size_m)\n    pid_n = (pid % num_pid_in_group) // group_size_m\n\n    # ----------------------------------------------------------\n    # Create pointers for the first blocks of A and B.\n    # We will advance this pointer as we move in the K direction\n    # and accumulate\n    # a_ptrs is a block of [BLOCK_SIZE_M, BLOCK_SIZE_K] pointers\n    # b_ptrs is a block of [BLOCK_SIZE_K, BLOCK_SIZE_n] pointers\n    # see above `Pointer Arithmetics` section for details\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    # -----------------------------------------------------------\n    # Iterate to compute a block of the C matrix\n    # We accumulate into a `[BLOCK_SIZE_M, BLOCK_SIZE_N]` block\n    # of fp32 values for higher accuracy.\n    # `accumulator` will be converted back to fp16 after the loop\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, K, BLOCK_SIZE_K):\n        # Note that for simplicity, we don't apply a mask here.\n        # This means that if K is not a multiple of BLOCK_SIZE_K,\n        # this will access out-of-bounds memory and produce an\n        # error or (worse!) incorrect results.\n        a = tl.load(a_ptrs)\n        b = tl.load(b_ptrs)\n        # We accumulate along the K dimension\n        accumulator += tl.dot(a, b)\n        # Advance the ptrs to the next K block\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n    # you can fuse arbitrary activation functions here\n    # while the accumulator is still in FP32!\n    if ACTIVATION:\n        accumulator = ACTIVATION(accumulator)\n    c = accumulator.to(tl.float16)\n\n    # -----------------------------------------------------------\n    # Write back the block of the output matrix C\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] &lt; M) &amp; (offs_cn[None, :] &lt; N)\n    tl.store(c_ptrs, c, mask=c_mask)\n\n\n# we can fuse `leaky_relu` by providing it as an `ACTIVATION` meta-parameter in `_matmul`\n@triton.jit\ndef leaky_relu(x):\n    return tl.where(x &gt;= 0, x, 0.01 * x)\n\n\ndef matmul(a, b, activation=None):\n    # checks constraints\n    assert a.shape[1] == b.shape[0], \"incompatible dimensions\"\n    assert a.is_contiguous(), \"matrix A must be contiguous\"\n    assert b.is_contiguous(), \"matrix B must be contiguous\"\n    M, K = a.shape\n    K, N = b.shape\n    assert (\n        K % 32 == 0\n    ), \"We don't check memory-out-of-bounds with K so K must be divisible by BLOCK_SIZE_K\"\n    # allocates output\n    c = torch.empty((M, N), device=a.device, dtype=a.dtype)\n    # 1D launch kernel where each block gets its own program.\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),\n    )\n    matmul_kernel[grid](\n        a, b, c,\n        M, N, K,\n        a.stride(0), a.stride(1),\n        b.stride(0), b.stride(1),\n        c.stride(0), c.stride(1),\n        ACTIVATION=activation,\n    )\n    return c\n\n\ntorch.manual_seed(0)\na = torch.randn((512, 512), device='cuda', dtype=torch.float16)\nb = torch.randn((512, 512), device='cuda', dtype=torch.float16)\ntriton_output = matmul(a, b, activation=None)\ntorch_output = torch.matmul(a, b)\nprint(f\"triton_output={triton_output}\")\nprint(f\"torch_output={torch_output}\")\nif triton.testing.allclose(triton_output, torch_output):\n    print(\"\u2705 Triton and Torch match\")\nelse:\n    print(\"\u274c Triton and Torch differ\")\n\n\n@triton.testing.perf_report(\n    triton.testing.Benchmark(\n        x_names=['M', 'N', 'K'],  # argument names to use as an x-axis for the plot\n        x_vals=[\n            128 * i for i in range(2, 33)\n        ],  # different possible values for `x_name`\n        line_arg='provider',  # argument name whose value corresponds to a different line in the plot\n        # possible values for `line_arg``\n        line_vals=['cublas', 'cublas + relu', 'triton', 'triton + relu'],\n        # label name for the lines\n        line_names=[\"cuBLAS\", \"cuBLAS (+ torch.nn.LeakyReLU)\", \"Triton\", \"Triton (+ LeakyReLU)\"],\n        # line styles\n        styles=[('green', '-'), ('green', '--'), ('blue', '-'), ('blue', '--')],\n        ylabel=\"TFLOPS\",  # label name for the y-axis\n        plot_name=\"matmul-performance\",  # name for the plot. Used also as a file name for saving the plot.\n        args={},\n    )\n)\n\ndef benchmark(M, N, K, provider):\n    a = torch.randn((M, K), device='cuda', dtype=torch.float16)\n    b = torch.randn((K, N), device='cuda', dtype=torch.float16)\n    if provider == 'cublas':\n        ms, min_ms, max_ms = triton.testing.do_bench(lambda: torch.matmul(a, b))\n    if provider == 'triton':\n        ms, min_ms, max_ms = triton.testing.do_bench(lambda: matmul(a, b))\n    if provider == 'cublas + relu':\n        torch_relu = torch.nn.ReLU(inplace=True)\n        ms, min_ms, max_ms = triton.testing.do_bench(\n            lambda: torch_relu(torch.matmul(a, b))\n        )\n    if provider == 'triton + relu':\n        ms, min_ms, max_ms = triton.testing.do_bench(\n            lambda: matmul(a, b, activation=leaky_relu)\n        )\n    perf = lambda ms: 2 * M * N * K * 1e-12 / (ms * 1e-3)\n    return perf(ms), perf(max_ms), perf(min_ms)\n\nbenchmark.run(show_plots=True, print_data=True)\n</code></pre>"},{"location":"cuda/utils/","title":"Utils","text":""},{"location":"cuda/utils/#a-useful-snippet-for-all-atomics","title":"A useful snippet for all atomics","text":"<pre><code>// atomics.cuh\n\n#pragma once\n\n#define ATOMIC(NAME)                                                           \\\n  template &lt;typename scalar, size_t size&gt; struct Atomic##NAME##IntegerImpl;    \\\n                                                                               \\\n  template &lt;typename scalar&gt; struct Atomic##NAME##IntegerImpl&lt;scalar, 1&gt; {     \\\n    inline __device__ void operator()(scalar *address, scalar val) {           \\\n      uint32_t *address_as_ui = (uint32_t *)(address - ((size_t)address &amp; 3)); \\\n      uint32_t old = *address_as_ui;                                           \\\n      uint32_t shift = ((size_t)address &amp; 3) * 8;                              \\\n      uint32_t sum;                                                            \\\n      uint32_t assumed;                                                        \\\n                                                                               \\\n      do {                                                                     \\\n        assumed = old;                                                         \\\n        sum = OP(val, scalar((old &gt;&gt; shift) &amp; 0xff));                          \\\n        old = (old &amp; ~(0x000000ff &lt;&lt; shift)) | (sum &lt;&lt; shift);                 \\\n        old = atomicCAS(address_as_ui, assumed, old);                          \\\n      } while (assumed != old);                                                \\\n    }                                                                          \\\n  };                                                                           \\\n                                                                               \\\n  template &lt;typename scalar&gt; struct Atomic##NAME##IntegerImpl&lt;scalar, 2&gt; {     \\\n    inline __device__ void operator()(scalar *address, scalar val) {           \\\n      uint32_t *address_as_ui =                                                \\\n          (uint32_t *)((char *)address - ((size_t)address &amp; 2));               \\\n      uint32_t old = *address_as_ui;                                           \\\n      uint32_t sum;                                                            \\\n      uint32_t newval;                                                         \\\n      uint32_t assumed;                                                        \\\n                                                                               \\\n      do {                                                                     \\\n        assumed = old;                                                         \\\n        sum = OP(val, (size_t)address &amp; 2 ? scalar(old &gt;&gt; 16)                  \\\n                                          : scalar(old &amp; 0xffff));             \\\n        newval = (size_t)address &amp; 2 ? (old &amp; 0xffff) | (sum &lt;&lt; 16)            \\\n                                     : (old &amp; 0xffff0000) | sum;               \\\n        old = atomicCAS(address_as_ui, assumed, newval);                       \\\n      } while (assumed != old);                                                \\\n    }                                                                          \\\n  };                                                                           \\\n                                                                               \\\n  template &lt;typename scalar&gt; struct Atomic##NAME##IntegerImpl&lt;scalar, 4&gt; {     \\\n    inline __device__ void operator()(scalar *address, scalar val) {           \\\n      uint32_t *address_as_ui = (uint32_t *)address;                           \\\n      uint32_t old = *address_as_ui;                                           \\\n      uint32_t assumed;                                                        \\\n                                                                               \\\n      do {                                                                     \\\n        assumed = old;                                                         \\\n        old = atomicCAS(address_as_ui, assumed, OP(val, (scalar)old));         \\\n      } while (assumed != old);                                                \\\n    }                                                                          \\\n  };                                                                           \\\n                                                                               \\\n  template &lt;typename scalar&gt; struct Atomic##NAME##IntegerImpl&lt;scalar, 8&gt; {     \\\n    inline __device__ void operator()(scalar *address, scalar val) {           \\\n      unsigned long long *address_as_ull = (unsigned long long *)address;      \\\n      unsigned long long old = *address_as_ull;                                \\\n      unsigned long long assumed;                                              \\\n                                                                               \\\n      do {                                                                     \\\n        assumed = old;                                                         \\\n        old = atomicCAS(address_as_ull, assumed, OP(val, (scalar)old));        \\\n      } while (assumed != old);                                                \\\n    }                                                                          \\\n  };                                                                           \\\n                                                                               \\\n  template &lt;typename scalar, size_t size&gt; struct Atomic##NAME##DecimalImpl;    \\\n                                                                               \\\n  template &lt;typename scalar&gt; struct Atomic##NAME##DecimalImpl&lt;scalar, 2&gt; {     \\\n    inline __device__ void operator()(scalar *address, scalar val) {           \\\n      unsigned int *address_as_ui =                                            \\\n          (unsigned int *)((char *)address - ((size_t)address &amp; 2));           \\\n      unsigned int old = *address_as_ui;                                       \\\n      unsigned int assumed;                                                    \\\n                                                                               \\\n      do {                                                                     \\\n        assumed = old;                                                         \\\n        at::Half hsum;                                                         \\\n        hsum.x = (size_t)address &amp; 2 ? (old &gt;&gt; 16) : (old &amp; 0xffff);           \\\n        hsum = OP(hsum, val);                                                  \\\n        old = (size_t)address &amp; 2 ? (old &amp; 0xffff) | (hsum.x &lt;&lt; 16)            \\\n                                  : (old &amp; 0xffff0000) | hsum.x;               \\\n        old = atomicCAS(address_as_ui, assumed, old);                          \\\n      } while (assumed != old);                                                \\\n    }                                                                          \\\n  };                                                                           \\\n                                                                               \\\n  template &lt;typename scalar&gt; struct Atomic##NAME##DecimalImpl&lt;scalar, 4&gt; {     \\\n    inline __device__ void operator()(scalar *address, scalar val) {           \\\n      int *address_as_i = (int *)address;                                      \\\n      int old = *address_as_i;                                                 \\\n      int assumed;                                                             \\\n                                                                               \\\n      do {                                                                     \\\n        assumed = old;                                                         \\\n        old = atomicCAS(address_as_i, assumed,                                 \\\n                        __float_as_int(OP(val, __int_as_float(assumed))));     \\\n      } while (assumed != old);                                                \\\n    }                                                                          \\\n  };                                                                           \\\n                                                                               \\\n  template &lt;typename scalar&gt; struct Atomic##NAME##DecimalImpl&lt;scalar, 8&gt; {     \\\n    inline __device__ void operator()(scalar *address, scalar val) {           \\\n      unsigned long long int *address_as_ull =                                 \\\n          (unsigned long long int *)address;                                   \\\n      unsigned long long int old = *address_as_ull;                            \\\n      unsigned long long int assumed;                                          \\\n                                                                               \\\n      do {                                                                     \\\n        assumed = old;                                                         \\\n        old = atomicCAS(                                                       \\\n            address_as_ull, assumed,                                           \\\n            __double_as_longlong(OP(val, __longlong_as_double(assumed))));     \\\n      } while (assumed != old);                                                \\\n    }                                                                          \\\n  };\n\n#define OP(X, Y) Y + X\nATOMIC(Add)\n#undef OP\nstatic inline __device__ void atomAdd(uint8_t *address, uint8_t val) {\n  AtomicAddIntegerImpl&lt;uint8_t, sizeof(uint8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomAdd(int8_t *address, int8_t val) {\n  AtomicAddIntegerImpl&lt;int8_t, sizeof(int8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomAdd(int16_t *address, int16_t val) {\n  AtomicAddIntegerImpl&lt;int16_t, sizeof(int16_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomAdd(int32_t *address, int32_t val) {\n  atomicAdd(address, val);\n}\nstatic inline __device__ void atomAdd(int64_t *address, int64_t val) {\n  AtomicAddIntegerImpl&lt;int64_t, sizeof(int64_t)&gt;()(address, val);\n}\n#if defined(__CUDA_ARCH__) &amp;&amp; (__CUDA_ARCH__ &lt; 700 || CUDA_VERSION &lt; 10000)\nstatic inline __device__ void atomAdd(at::Half *address, at::Half val) {\n  AtomicAddDecimalImpl&lt;at::Half, sizeof(at::Half)&gt;()(address, val);\n}\n#else\nstatic inline __device__ void atomAdd(at::Half *address, at::Half val) {\n  atomicAdd(reinterpret_cast&lt;__half *&gt;(address), val);\n}\n#endif\nstatic inline __device__ void atomAdd(float *address, float val) {\n  atomicAdd(address, val);\n}\n#if defined(__CUDA_ARCH__) &amp;&amp; (__CUDA_ARCH__ &lt; 600 || CUDA_VERSION &lt; 8000)\nstatic inline __device__ void atomAdd(double *address, double val) {\n  AtomicAddDecimalImpl&lt;double, sizeof(double)&gt;()(address, val);\n}\n#else\nstatic inline __device__ void atomAdd(double *address, double val) {\n  atomicAdd(address, val);\n}\n#endif\n\n#define OP(X, Y) Y *X\nATOMIC(Mul)\n#undef OP\nstatic inline __device__ void atomMul(uint8_t *address, uint8_t val) {\n  AtomicMulIntegerImpl&lt;uint8_t, sizeof(uint8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMul(int8_t *address, int8_t val) {\n  AtomicMulIntegerImpl&lt;int8_t, sizeof(int8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMul(int16_t *address, int16_t val) {\n  AtomicMulIntegerImpl&lt;int16_t, sizeof(int16_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMul(int32_t *address, int32_t val) {\n  AtomicMulIntegerImpl&lt;int32_t, sizeof(int32_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMul(int64_t *address, int64_t val) {\n  AtomicMulIntegerImpl&lt;int64_t, sizeof(int64_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMul(float *address, float val) {\n  AtomicMulDecimalImpl&lt;float, sizeof(float)&gt;()(address, val);\n}\nstatic inline __device__ void atomMul(at::Half *address, at::Half val) {\n  AtomicMulDecimalImpl&lt;at::Half, sizeof(at::Half)&gt;()(address, val);\n}\nstatic inline __device__ void atomMul(double *address, double val) {\n  AtomicMulDecimalImpl&lt;double, sizeof(double)&gt;()(address, val);\n}\n\n#define OP(X, Y) Y / X\nATOMIC(Div)\n#undef OP\nstatic inline __device__ void atomDiv(uint8_t *address, uint8_t val) {\n  AtomicDivIntegerImpl&lt;uint8_t, sizeof(uint8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomDiv(int8_t *address, int8_t val) {\n  AtomicDivIntegerImpl&lt;int8_t, sizeof(int8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomDiv(int16_t *address, int16_t val) {\n  AtomicDivIntegerImpl&lt;int16_t, sizeof(int16_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomDiv(int32_t *address, int32_t val) {\n  AtomicDivIntegerImpl&lt;int32_t, sizeof(int32_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomDiv(int64_t *address, int64_t val) {\n  AtomicDivIntegerImpl&lt;int64_t, sizeof(int64_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomDiv(at::Half *address, at::Half val) {\n  AtomicDivDecimalImpl&lt;at::Half, sizeof(at::Half)&gt;()(address, val);\n}\nstatic inline __device__ void atomDiv(float *address, float val) {\n  AtomicDivDecimalImpl&lt;float, sizeof(float)&gt;()(address, val);\n}\nstatic inline __device__ void atomDiv(double *address, double val) {\n  AtomicDivDecimalImpl&lt;double, sizeof(double)&gt;()(address, val);\n}\n\n#define OP(X, Y) max(Y, X)\nATOMIC(Max)\n#undef OP\nstatic inline __device__ void atomMax(uint8_t *address, uint8_t val) {\n  AtomicMaxIntegerImpl&lt;uint8_t, sizeof(uint8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMax(int8_t *address, int8_t val) {\n  AtomicMaxIntegerImpl&lt;int8_t, sizeof(int8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMax(int16_t *address, int16_t val) {\n  AtomicMaxIntegerImpl&lt;int16_t, sizeof(int16_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMax(int32_t *address, int32_t val) {\n  atomicMax(address, val);\n}\nstatic inline __device__ void atomMax(int64_t *address, int64_t val) {\n  AtomicMaxIntegerImpl&lt;int64_t, sizeof(int64_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMax(at::Half *address, at::Half val) {\n  AtomicMaxDecimalImpl&lt;at::Half, sizeof(at::Half)&gt;()(address, val);\n}\nstatic inline __device__ void atomMax(float *address, float val) {\n  AtomicMaxDecimalImpl&lt;float, sizeof(float)&gt;()(address, val);\n}\nstatic inline __device__ void atomMax(double *address, double val) {\n  AtomicMaxDecimalImpl&lt;double, sizeof(double)&gt;()(address, val);\n}\n\n#define OP(X, Y) min(Y, X)\nATOMIC(Min)\n#undef OP\nstatic inline __device__ void atomMin(uint8_t *address, uint8_t val) {\n  AtomicMinIntegerImpl&lt;uint8_t, sizeof(uint8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMin(int8_t *address, int8_t val) {\n  AtomicMinIntegerImpl&lt;int8_t, sizeof(int8_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMin(int16_t *address, int16_t val) {\n  AtomicMinIntegerImpl&lt;int16_t, sizeof(int16_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMin(int32_t *address, int32_t val) {\n  atomicMin(address, val);\n}\nstatic inline __device__ void atomMin(int64_t *address, int64_t val) {\n  AtomicMinIntegerImpl&lt;int64_t, sizeof(int64_t)&gt;()(address, val);\n}\nstatic inline __device__ void atomMin(at::Half *address, at::Half val) {\n  AtomicMinDecimalImpl&lt;at::Half, sizeof(at::Half)&gt;()(address, val);\n}\nstatic inline __device__ void atomMin(float *address, float val) {\n  AtomicMinDecimalImpl&lt;float, sizeof(float)&gt;()(address, val);\n}\nstatic inline __device__ void atomMin(double *address, double val) {\n  AtomicMinDecimalImpl&lt;double, sizeof(double)&gt;()(address, val);\n}\n</code></pre>"},{"location":"cuda/utils/#atomicadd-for-athalf","title":"<code>atomicAdd</code> for <code>at::Half</code>","text":"<pre><code>// at::Half atomicAdd, requires CUDA &gt;= 10 &amp;&amp; arch &gt;= 7.x\n// ref: https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCAtomics.cuh#L184\nstatic inline  __device__ at::Half atomicAdd(at::Half *address, at::Half val) {\n  return atomicAdd(reinterpret_cast&lt;__half*&gt;(address), val);\n}\n</code></pre>"},{"location":"cuda/utils/#atomicmax-for-athalf-float-double","title":"<code>atomicMax</code> for <code>at::Half, float, double</code>","text":"<pre><code>// atomicMax for __half, float, double (requires arch &gt; 7.0 for ushort ver of atomicCAS)\n// ref: https://github.com/treecode/Bonsai/blob/master/runtime/profiling/derived_atomic_functions.h\n// ref: https://github.com/NVIDIA-developer-blog/code-samples/blob/master/posts/cuda-aware-mpi-example/src/Device.cu\nstatic inline __device__ double atomicMax(double* address, double val)\n{\n  unsigned long long* address_as_ll = reinterpret_cast&lt;unsigned long long*&gt;(address);\n  unsigned long long old = *address_as_ll, assumed;\n  do {\n    assumed = old;\n    old = atomicCAS(address_as_ll, assumed, __double_as_longlong(fmax(val, __longlong_as_double(assumed))));\n  } while (assumed != old);\n  return __longlong_as_double(old);\n}\n\nstatic inline __device__ float atomicMax(float* address, float val)\n{\n  int* address_as_i = reinterpret_cast&lt;int*&gt;(address);\n  int old = *address_as_i, assumed;\n  do {\n    assumed = old;\n    old = atomicCAS(address_as_i, assumed, __float_as_int(fmaxf(val, __int_as_float(assumed))));\n  } while (assumed != old);\n  return __int_as_float(old);\n}\n\nstatic inline __device__ __half atomicMax(__half *address, __half val) {\n  unsigned short* address_as_ushort = reinterpret_cast&lt;unsigned short*&gt;(address);\n  unsigned short old = *address_as_ushort, assumed;\n  do {\n    assumed = old;\n    // ref: https://github.com/NVIDIA/TensorRT/issues/1003\n    // __hmax is only available at arch &gt;= 800 ? even the doc says it should be available from arch &gt;= 520.\n    //old = atomicCAS(address_as_ushort, assumed, __half_as_ushort(__hmax(val, __ushort_as_half(assumed))));\n    old = atomicCAS(address_as_ushort, assumed, __half_as_ushort(__float2half(fmaxf(__half2float(val), __half2float(__ushort_as_half(assumed))))));\n  } while (assumed != old);\n  return __ushort_as_half(old);\n}\n\nstatic inline __device__ at::Half atomicMax(at::Half *address, at::Half val) {\n  return atomicMax(reinterpret_cast&lt;__half*&gt;(address), val);\n}\n</code></pre>"},{"location":"cuda/vector_utils/","title":"CUDA built in vector utils","text":""},{"location":"cuda/vector_utils/#vector","title":"vector","text":"<p>CUDA has built in support for simple vectors like <code>float2, float3, float4, int2, ...</code></p> <pre><code>int x, y;\n// define\nint2 xy = make_int2(x, y);\n// access\nx = xy.x;\ny = xy.y;\n\n// at most we have &lt;type&gt;4\nfloat4 c = make_float4(0, 0, 0, 0);\nc.x; c.y; c.z; c.w;\n</code></pre> <p>However, there is no other utility support... we need to define them manually.</p> <p>A very complete one can be found in the <code>helper_math.h</code> sample code.</p> <p>An enough-to-use one from <code>nvdiffrast</code> is pasted here:</p> <pre><code>// Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.\n//\n// NVIDIA CORPORATION and its licensors retain all intellectual property\n// and proprietary rights in and to this software, related documentation\n// and any modifications thereto.  Any use, reproduction, disclosure or\n// distribution of this software and related documentation without an express\n// license agreement from NVIDIA CORPORATION is strictly prohibited.\n\n#pragma once\n#include &lt;cuda.h&gt;\n#include &lt;stdint.h&gt;\n\n//------------------------------------------------------------------------\n// C++ helper function prototypes.\n\ndim3 getLaunchBlockSize(int maxWidth, int maxHeight, int width, int height);\ndim3 getLaunchGridSize(dim3 blockSize, int width, int height, int depth);\n\n//------------------------------------------------------------------------\n// The rest is CUDA device code specific stuff.\n\n#ifdef __CUDACC__\n\n//------------------------------------------------------------------------\n// Helpers for CUDA vector types.\n\nstatic __device__ __forceinline__ float2&amp;   operator*=  (float2&amp; a, const float2&amp; b)       { a.x *= b.x; a.y *= b.y; return a; }\nstatic __device__ __forceinline__ float2&amp;   operator+=  (float2&amp; a, const float2&amp; b)       { a.x += b.x; a.y += b.y; return a; }\nstatic __device__ __forceinline__ float2&amp;   operator-=  (float2&amp; a, const float2&amp; b)       { a.x -= b.x; a.y -= b.y; return a; }\nstatic __device__ __forceinline__ float2&amp;   operator*=  (float2&amp; a, float b)               { a.x *= b; a.y *= b; return a; }\nstatic __device__ __forceinline__ float2&amp;   operator+=  (float2&amp; a, float b)               { a.x += b; a.y += b; return a; }\nstatic __device__ __forceinline__ float2&amp;   operator-=  (float2&amp; a, float b)               { a.x -= b; a.y -= b; return a; }\nstatic __device__ __forceinline__ float2    operator*   (const float2&amp; a, const float2&amp; b) { return make_float2(a.x * b.x, a.y * b.y); }\nstatic __device__ __forceinline__ float2    operator+   (const float2&amp; a, const float2&amp; b) { return make_float2(a.x + b.x, a.y + b.y); }\nstatic __device__ __forceinline__ float2    operator-   (const float2&amp; a, const float2&amp; b) { return make_float2(a.x - b.x, a.y - b.y); }\nstatic __device__ __forceinline__ float2    operator*   (const float2&amp; a, float b)         { return make_float2(a.x * b, a.y * b); }\nstatic __device__ __forceinline__ float2    operator+   (const float2&amp; a, float b)         { return make_float2(a.x + b, a.y + b); }\nstatic __device__ __forceinline__ float2    operator-   (const float2&amp; a, float b)         { return make_float2(a.x - b, a.y - b); }\nstatic __device__ __forceinline__ float2    operator*   (float a, const float2&amp; b)         { return make_float2(a * b.x, a * b.y); }\nstatic __device__ __forceinline__ float2    operator+   (float a, const float2&amp; b)         { return make_float2(a + b.x, a + b.y); }\nstatic __device__ __forceinline__ float2    operator-   (float a, const float2&amp; b)         { return make_float2(a - b.x, a - b.y); }\nstatic __device__ __forceinline__ float2    operator-   (const float2&amp; a)                  { return make_float2(-a.x, -a.y); }\nstatic __device__ __forceinline__ float3&amp;   operator*=  (float3&amp; a, const float3&amp; b)       { a.x *= b.x; a.y *= b.y; a.z *= b.z; return a; }\nstatic __device__ __forceinline__ float3&amp;   operator+=  (float3&amp; a, const float3&amp; b)       { a.x += b.x; a.y += b.y; a.z += b.z; return a; }\nstatic __device__ __forceinline__ float3&amp;   operator-=  (float3&amp; a, const float3&amp; b)       { a.x -= b.x; a.y -= b.y; a.z -= b.z; return a; }\nstatic __device__ __forceinline__ float3&amp;   operator*=  (float3&amp; a, float b)               { a.x *= b; a.y *= b; a.z *= b; return a; }\nstatic __device__ __forceinline__ float3&amp;   operator+=  (float3&amp; a, float b)               { a.x += b; a.y += b; a.z += b; return a; }\nstatic __device__ __forceinline__ float3&amp;   operator-=  (float3&amp; a, float b)               { a.x -= b; a.y -= b; a.z -= b; return a; }\nstatic __device__ __forceinline__ float3    operator*   (const float3&amp; a, const float3&amp; b) { return make_float3(a.x * b.x, a.y * b.y, a.z * b.z); }\nstatic __device__ __forceinline__ float3    operator+   (const float3&amp; a, const float3&amp; b) { return make_float3(a.x + b.x, a.y + b.y, a.z + b.z); }\nstatic __device__ __forceinline__ float3    operator-   (const float3&amp; a, const float3&amp; b) { return make_float3(a.x - b.x, a.y - b.y, a.z - b.z); }\nstatic __device__ __forceinline__ float3    operator*   (const float3&amp; a, float b)         { return make_float3(a.x * b, a.y * b, a.z * b); }\nstatic __device__ __forceinline__ float3    operator+   (const float3&amp; a, float b)         { return make_float3(a.x + b, a.y + b, a.z + b); }\nstatic __device__ __forceinline__ float3    operator-   (const float3&amp; a, float b)         { return make_float3(a.x - b, a.y - b, a.z - b); }\nstatic __device__ __forceinline__ float3    operator*   (float a, const float3&amp; b)         { return make_float3(a * b.x, a * b.y, a * b.z); }\nstatic __device__ __forceinline__ float3    operator+   (float a, const float3&amp; b)         { return make_float3(a + b.x, a + b.y, a + b.z); }\nstatic __device__ __forceinline__ float3    operator-   (float a, const float3&amp; b)         { return make_float3(a - b.x, a - b.y, a - b.z); }\nstatic __device__ __forceinline__ float3    operator-   (const float3&amp; a)                  { return make_float3(-a.x, -a.y, -a.z); }\nstatic __device__ __forceinline__ float4&amp;   operator*=  (float4&amp; a, const float4&amp; b)       { a.x *= b.x; a.y *= b.y; a.z *= b.z; a.w *= b.w; return a; }\nstatic __device__ __forceinline__ float4&amp;   operator+=  (float4&amp; a, const float4&amp; b)       { a.x += b.x; a.y += b.y; a.z += b.z; a.w += b.w; return a; }\nstatic __device__ __forceinline__ float4&amp;   operator-=  (float4&amp; a, const float4&amp; b)       { a.x -= b.x; a.y -= b.y; a.z -= b.z; a.w -= b.w; return a; }\nstatic __device__ __forceinline__ float4&amp;   operator*=  (float4&amp; a, float b)               { a.x *= b; a.y *= b; a.z *= b; a.w *= b; return a; }\nstatic __device__ __forceinline__ float4&amp;   operator+=  (float4&amp; a, float b)               { a.x += b; a.y += b; a.z += b; a.w += b; return a; }\nstatic __device__ __forceinline__ float4&amp;   operator-=  (float4&amp; a, float b)               { a.x -= b; a.y -= b; a.z -= b; a.w -= b; return a; }\nstatic __device__ __forceinline__ float4    operator*   (const float4&amp; a, const float4&amp; b) { return make_float4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w); }\nstatic __device__ __forceinline__ float4    operator+   (const float4&amp; a, const float4&amp; b) { return make_float4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w); }\nstatic __device__ __forceinline__ float4    operator-   (const float4&amp; a, const float4&amp; b) { return make_float4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w); }\nstatic __device__ __forceinline__ float4    operator*   (const float4&amp; a, float b)         { return make_float4(a.x * b, a.y * b, a.z * b, a.w * b); }\nstatic __device__ __forceinline__ float4    operator+   (const float4&amp; a, float b)         { return make_float4(a.x + b, a.y + b, a.z + b, a.w + b); }\nstatic __device__ __forceinline__ float4    operator-   (const float4&amp; a, float b)         { return make_float4(a.x - b, a.y - b, a.z - b, a.w - b); }\nstatic __device__ __forceinline__ float4    operator*   (float a, const float4&amp; b)         { return make_float4(a * b.x, a * b.y, a * b.z, a * b.w); }\nstatic __device__ __forceinline__ float4    operator+   (float a, const float4&amp; b)         { return make_float4(a + b.x, a + b.y, a + b.z, a + b.w); }\nstatic __device__ __forceinline__ float4    operator-   (float a, const float4&amp; b)         { return make_float4(a - b.x, a - b.y, a - b.z, a - b.w); }\nstatic __device__ __forceinline__ float4    operator-   (const float4&amp; a)                  { return make_float4(-a.x, -a.y, -a.z, -a.w); }\nstatic __device__ __forceinline__ int2&amp;     operator*=  (int2&amp; a, const int2&amp; b)           { a.x *= b.x; a.y *= b.y; return a; }\nstatic __device__ __forceinline__ int2&amp;     operator+=  (int2&amp; a, const int2&amp; b)           { a.x += b.x; a.y += b.y; return a; }\nstatic __device__ __forceinline__ int2&amp;     operator-=  (int2&amp; a, const int2&amp; b)           { a.x -= b.x; a.y -= b.y; return a; }\nstatic __device__ __forceinline__ int2&amp;     operator*=  (int2&amp; a, int b)                   { a.x *= b; a.y *= b; return a; }\nstatic __device__ __forceinline__ int2&amp;     operator+=  (int2&amp; a, int b)                   { a.x += b; a.y += b; return a; }\nstatic __device__ __forceinline__ int2&amp;     operator-=  (int2&amp; a, int b)                   { a.x -= b; a.y -= b; return a; }\nstatic __device__ __forceinline__ int2      operator*   (const int2&amp; a, const int2&amp; b)     { return make_int2(a.x * b.x, a.y * b.y); }\nstatic __device__ __forceinline__ int2      operator+   (const int2&amp; a, const int2&amp; b)     { return make_int2(a.x + b.x, a.y + b.y); }\nstatic __device__ __forceinline__ int2      operator-   (const int2&amp; a, const int2&amp; b)     { return make_int2(a.x - b.x, a.y - b.y); }\nstatic __device__ __forceinline__ int2      operator*   (const int2&amp; a, int b)             { return make_int2(a.x * b, a.y * b); }\nstatic __device__ __forceinline__ int2      operator+   (const int2&amp; a, int b)             { return make_int2(a.x + b, a.y + b); }\nstatic __device__ __forceinline__ int2      operator-   (const int2&amp; a, int b)             { return make_int2(a.x - b, a.y - b); }\nstatic __device__ __forceinline__ int2      operator*   (int a, const int2&amp; b)             { return make_int2(a * b.x, a * b.y); }\nstatic __device__ __forceinline__ int2      operator+   (int a, const int2&amp; b)             { return make_int2(a + b.x, a + b.y); }\nstatic __device__ __forceinline__ int2      operator-   (int a, const int2&amp; b)             { return make_int2(a - b.x, a - b.y); }\nstatic __device__ __forceinline__ int2      operator-   (const int2&amp; a)                    { return make_int2(-a.x, -a.y); }\nstatic __device__ __forceinline__ int3&amp;     operator*=  (int3&amp; a, const int3&amp; b)           { a.x *= b.x; a.y *= b.y; a.z *= b.z; return a; }\nstatic __device__ __forceinline__ int3&amp;     operator+=  (int3&amp; a, const int3&amp; b)           { a.x += b.x; a.y += b.y; a.z += b.z; return a; }\nstatic __device__ __forceinline__ int3&amp;     operator-=  (int3&amp; a, const int3&amp; b)           { a.x -= b.x; a.y -= b.y; a.z -= b.z; return a; }\nstatic __device__ __forceinline__ int3&amp;     operator*=  (int3&amp; a, int b)                   { a.x *= b; a.y *= b; a.z *= b; return a; }\nstatic __device__ __forceinline__ int3&amp;     operator+=  (int3&amp; a, int b)                   { a.x += b; a.y += b; a.z += b; return a; }\nstatic __device__ __forceinline__ int3&amp;     operator-=  (int3&amp; a, int b)                   { a.x -= b; a.y -= b; a.z -= b; return a; }\nstatic __device__ __forceinline__ int3      operator*   (const int3&amp; a, const int3&amp; b)     { return make_int3(a.x * b.x, a.y * b.y, a.z * b.z); }\nstatic __device__ __forceinline__ int3      operator+   (const int3&amp; a, const int3&amp; b)     { return make_int3(a.x + b.x, a.y + b.y, a.z + b.z); }\nstatic __device__ __forceinline__ int3      operator-   (const int3&amp; a, const int3&amp; b)     { return make_int3(a.x - b.x, a.y - b.y, a.z - b.z); }\nstatic __device__ __forceinline__ int3      operator*   (const int3&amp; a, int b)             { return make_int3(a.x * b, a.y * b, a.z * b); }\nstatic __device__ __forceinline__ int3      operator+   (const int3&amp; a, int b)             { return make_int3(a.x + b, a.y + b, a.z + b); }\nstatic __device__ __forceinline__ int3      operator-   (const int3&amp; a, int b)             { return make_int3(a.x - b, a.y - b, a.z - b); }\nstatic __device__ __forceinline__ int3      operator*   (int a, const int3&amp; b)             { return make_int3(a * b.x, a * b.y, a * b.z); }\nstatic __device__ __forceinline__ int3      operator+   (int a, const int3&amp; b)             { return make_int3(a + b.x, a + b.y, a + b.z); }\nstatic __device__ __forceinline__ int3      operator-   (int a, const int3&amp; b)             { return make_int3(a - b.x, a - b.y, a - b.z); }\nstatic __device__ __forceinline__ int3      operator-   (const int3&amp; a)                    { return make_int3(-a.x, -a.y, -a.z); }\nstatic __device__ __forceinline__ int4&amp;     operator*=  (int4&amp; a, const int4&amp; b)           { a.x *= b.x; a.y *= b.y; a.z *= b.z; a.w *= b.w; return a; }\nstatic __device__ __forceinline__ int4&amp;     operator+=  (int4&amp; a, const int4&amp; b)           { a.x += b.x; a.y += b.y; a.z += b.z; a.w += b.w; return a; }\nstatic __device__ __forceinline__ int4&amp;     operator-=  (int4&amp; a, const int4&amp; b)           { a.x -= b.x; a.y -= b.y; a.z -= b.z; a.w -= b.w; return a; }\nstatic __device__ __forceinline__ int4&amp;     operator*=  (int4&amp; a, int b)                   { a.x *= b; a.y *= b; a.z *= b; a.w *= b; return a; }\nstatic __device__ __forceinline__ int4&amp;     operator+=  (int4&amp; a, int b)                   { a.x += b; a.y += b; a.z += b; a.w += b; return a; }\nstatic __device__ __forceinline__ int4&amp;     operator-=  (int4&amp; a, int b)                   { a.x -= b; a.y -= b; a.z -= b; a.w -= b; return a; }\nstatic __device__ __forceinline__ int4      operator*   (const int4&amp; a, const int4&amp; b)     { return make_int4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w); }\nstatic __device__ __forceinline__ int4      operator+   (const int4&amp; a, const int4&amp; b)     { return make_int4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w); }\nstatic __device__ __forceinline__ int4      operator-   (const int4&amp; a, const int4&amp; b)     { return make_int4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w); }\nstatic __device__ __forceinline__ int4      operator*   (const int4&amp; a, int b)             { return make_int4(a.x * b, a.y * b, a.z * b, a.w * b); }\nstatic __device__ __forceinline__ int4      operator+   (const int4&amp; a, int b)             { return make_int4(a.x + b, a.y + b, a.z + b, a.w + b); }\nstatic __device__ __forceinline__ int4      operator-   (const int4&amp; a, int b)             { return make_int4(a.x - b, a.y - b, a.z - b, a.w - b); }\nstatic __device__ __forceinline__ int4      operator*   (int a, const int4&amp; b)             { return make_int4(a * b.x, a * b.y, a * b.z, a * b.w); }\nstatic __device__ __forceinline__ int4      operator+   (int a, const int4&amp; b)             { return make_int4(a + b.x, a + b.y, a + b.z, a + b.w); }\nstatic __device__ __forceinline__ int4      operator-   (int a, const int4&amp; b)             { return make_int4(a - b.x, a - b.y, a - b.z, a - b.w); }\nstatic __device__ __forceinline__ int4      operator-   (const int4&amp; a)                    { return make_int4(-a.x, -a.y, -a.z, -a.w); }\nstatic __device__ __forceinline__ uint2&amp;    operator*=  (uint2&amp; a, const uint2&amp; b)         { a.x *= b.x; a.y *= b.y; return a; }\nstatic __device__ __forceinline__ uint2&amp;    operator+=  (uint2&amp; a, const uint2&amp; b)         { a.x += b.x; a.y += b.y; return a; }\nstatic __device__ __forceinline__ uint2&amp;    operator-=  (uint2&amp; a, const uint2&amp; b)         { a.x -= b.x; a.y -= b.y; return a; }\nstatic __device__ __forceinline__ uint2&amp;    operator*=  (uint2&amp; a, unsigned int b)         { a.x *= b; a.y *= b; return a; }\nstatic __device__ __forceinline__ uint2&amp;    operator+=  (uint2&amp; a, unsigned int b)         { a.x += b; a.y += b; return a; }\nstatic __device__ __forceinline__ uint2&amp;    operator-=  (uint2&amp; a, unsigned int b)         { a.x -= b; a.y -= b; return a; }\nstatic __device__ __forceinline__ uint2     operator*   (const uint2&amp; a, const uint2&amp; b)   { return make_uint2(a.x * b.x, a.y * b.y); }\nstatic __device__ __forceinline__ uint2     operator+   (const uint2&amp; a, const uint2&amp; b)   { return make_uint2(a.x + b.x, a.y + b.y); }\nstatic __device__ __forceinline__ uint2     operator-   (const uint2&amp; a, const uint2&amp; b)   { return make_uint2(a.x - b.x, a.y - b.y); }\nstatic __device__ __forceinline__ uint2     operator*   (const uint2&amp; a, unsigned int b)   { return make_uint2(a.x * b, a.y * b); }\nstatic __device__ __forceinline__ uint2     operator+   (const uint2&amp; a, unsigned int b)   { return make_uint2(a.x + b, a.y + b); }\nstatic __device__ __forceinline__ uint2     operator-   (const uint2&amp; a, unsigned int b)   { return make_uint2(a.x - b, a.y - b); }\nstatic __device__ __forceinline__ uint2     operator*   (unsigned int a, const uint2&amp; b)   { return make_uint2(a * b.x, a * b.y); }\nstatic __device__ __forceinline__ uint2     operator+   (unsigned int a, const uint2&amp; b)   { return make_uint2(a + b.x, a + b.y); }\nstatic __device__ __forceinline__ uint2     operator-   (unsigned int a, const uint2&amp; b)   { return make_uint2(a - b.x, a - b.y); }\nstatic __device__ __forceinline__ uint3&amp;    operator*=  (uint3&amp; a, const uint3&amp; b)         { a.x *= b.x; a.y *= b.y; a.z *= b.z; return a; }\nstatic __device__ __forceinline__ uint3&amp;    operator+=  (uint3&amp; a, const uint3&amp; b)         { a.x += b.x; a.y += b.y; a.z += b.z; return a; }\nstatic __device__ __forceinline__ uint3&amp;    operator-=  (uint3&amp; a, const uint3&amp; b)         { a.x -= b.x; a.y -= b.y; a.z -= b.z; return a; }\nstatic __device__ __forceinline__ uint3&amp;    operator*=  (uint3&amp; a, unsigned int b)         { a.x *= b; a.y *= b; a.z *= b; return a; }\nstatic __device__ __forceinline__ uint3&amp;    operator+=  (uint3&amp; a, unsigned int b)         { a.x += b; a.y += b; a.z += b; return a; }\nstatic __device__ __forceinline__ uint3&amp;    operator-=  (uint3&amp; a, unsigned int b)         { a.x -= b; a.y -= b; a.z -= b; return a; }\nstatic __device__ __forceinline__ uint3     operator*   (const uint3&amp; a, const uint3&amp; b)   { return make_uint3(a.x * b.x, a.y * b.y, a.z * b.z); }\nstatic __device__ __forceinline__ uint3     operator+   (const uint3&amp; a, const uint3&amp; b)   { return make_uint3(a.x + b.x, a.y + b.y, a.z + b.z); }\nstatic __device__ __forceinline__ uint3     operator-   (const uint3&amp; a, const uint3&amp; b)   { return make_uint3(a.x - b.x, a.y - b.y, a.z - b.z); }\nstatic __device__ __forceinline__ uint3     operator*   (const uint3&amp; a, unsigned int b)   { return make_uint3(a.x * b, a.y * b, a.z * b); }\nstatic __device__ __forceinline__ uint3     operator+   (const uint3&amp; a, unsigned int b)   { return make_uint3(a.x + b, a.y + b, a.z + b); }\nstatic __device__ __forceinline__ uint3     operator-   (const uint3&amp; a, unsigned int b)   { return make_uint3(a.x - b, a.y - b, a.z - b); }\nstatic __device__ __forceinline__ uint3     operator*   (unsigned int a, const uint3&amp; b)   { return make_uint3(a * b.x, a * b.y, a * b.z); }\nstatic __device__ __forceinline__ uint3     operator+   (unsigned int a, const uint3&amp; b)   { return make_uint3(a + b.x, a + b.y, a + b.z); }\nstatic __device__ __forceinline__ uint3     operator-   (unsigned int a, const uint3&amp; b)   { return make_uint3(a - b.x, a - b.y, a - b.z); }\nstatic __device__ __forceinline__ uint4&amp;    operator*=  (uint4&amp; a, const uint4&amp; b)         { a.x *= b.x; a.y *= b.y; a.z *= b.z; a.w *= b.w; return a; }\nstatic __device__ __forceinline__ uint4&amp;    operator+=  (uint4&amp; a, const uint4&amp; b)         { a.x += b.x; a.y += b.y; a.z += b.z; a.w += b.w; return a; }\nstatic __device__ __forceinline__ uint4&amp;    operator-=  (uint4&amp; a, const uint4&amp; b)         { a.x -= b.x; a.y -= b.y; a.z -= b.z; a.w -= b.w; return a; }\nstatic __device__ __forceinline__ uint4&amp;    operator*=  (uint4&amp; a, unsigned int b)         { a.x *= b; a.y *= b; a.z *= b; a.w *= b; return a; }\nstatic __device__ __forceinline__ uint4&amp;    operator+=  (uint4&amp; a, unsigned int b)         { a.x += b; a.y += b; a.z += b; a.w += b; return a; }\nstatic __device__ __forceinline__ uint4&amp;    operator-=  (uint4&amp; a, unsigned int b)         { a.x -= b; a.y -= b; a.z -= b; a.w -= b; return a; }\nstatic __device__ __forceinline__ uint4     operator*   (const uint4&amp; a, const uint4&amp; b)   { return make_uint4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w); }\nstatic __device__ __forceinline__ uint4     operator+   (const uint4&amp; a, const uint4&amp; b)   { return make_uint4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w); }\nstatic __device__ __forceinline__ uint4     operator-   (const uint4&amp; a, const uint4&amp; b)   { return make_uint4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w); }\nstatic __device__ __forceinline__ uint4     operator*   (const uint4&amp; a, unsigned int b)   { return make_uint4(a.x * b, a.y * b, a.z * b, a.w * b); }\nstatic __device__ __forceinline__ uint4     operator+   (const uint4&amp; a, unsigned int b)   { return make_uint4(a.x + b, a.y + b, a.z + b, a.w + b); }\nstatic __device__ __forceinline__ uint4     operator-   (const uint4&amp; a, unsigned int b)   { return make_uint4(a.x - b, a.y - b, a.z - b, a.w - b); }\nstatic __device__ __forceinline__ uint4     operator*   (unsigned int a, const uint4&amp; b)   { return make_uint4(a * b.x, a * b.y, a * b.z, a * b.w); }\nstatic __device__ __forceinline__ uint4     operator+   (unsigned int a, const uint4&amp; b)   { return make_uint4(a + b.x, a + b.y, a + b.z, a + b.w); }\nstatic __device__ __forceinline__ uint4     operator-   (unsigned int a, const uint4&amp; b)   { return make_uint4(a - b.x, a - b.y, a - b.z, a - b.w); }\n\ntemplate&lt;class T&gt; static __device__ __forceinline__ T zero_value(void);\ntemplate&lt;&gt; __device__ __forceinline__ float  zero_value&lt;float&gt; (void)                      { return 0.f; }\ntemplate&lt;&gt; __device__ __forceinline__ float2 zero_value&lt;float2&gt;(void)                      { return make_float2(0.f, 0.f); }\ntemplate&lt;&gt; __device__ __forceinline__ float4 zero_value&lt;float4&gt;(void)                      { return make_float4(0.f, 0.f, 0.f, 0.f); }\nstatic __device__ __forceinline__ float3 make_float3(const float2&amp; a, float b)             { return make_float3(a.x, a.y, b); }\nstatic __device__ __forceinline__ float4 make_float4(const float3&amp; a, float b)             { return make_float4(a.x, a.y, a.z, b); }\nstatic __device__ __forceinline__ float4 make_float4(const float2&amp; a, const float2&amp; b)     { return make_float4(a.x, a.y, b.x, b.y); }\nstatic __device__ __forceinline__ int3 make_int3(const int2&amp; a, int b)                     { return make_int3(a.x, a.y, b); }\nstatic __device__ __forceinline__ int4 make_int4(const int3&amp; a, int b)                     { return make_int4(a.x, a.y, a.z, b); }\nstatic __device__ __forceinline__ int4 make_int4(const int2&amp; a, const int2&amp; b)             { return make_int4(a.x, a.y, b.x, b.y); }\nstatic __device__ __forceinline__ uint3 make_uint3(const uint2&amp; a, unsigned int b)         { return make_uint3(a.x, a.y, b); }\nstatic __device__ __forceinline__ uint4 make_uint4(const uint3&amp; a, unsigned int b)         { return make_uint4(a.x, a.y, a.z, b); }\nstatic __device__ __forceinline__ uint4 make_uint4(const uint2&amp; a, const uint2&amp; b)         { return make_uint4(a.x, a.y, b.x, b.y); }\n\ntemplate&lt;class T&gt; static __device__ __forceinline__ void swap(T&amp; a, T&amp; b)                  { T temp = a; a = b; b = temp; }\n\n#endif // __CUDACC__\n</code></pre>"},{"location":"deeplearning/autodiff_understand/","title":"autodiff","text":""},{"location":"deeplearning/autodiff_understand/#concepts","title":"Concepts","text":"<ul> <li> <p><code>x.is_leaf</code></p> <p>whether tensor <code>x</code> is a leaf node, i.e., <code>x.grad_fn == None</code> (is not created via a <code>Function</code> operation / is the leaf nodes in the DAG).</p> <p>In specific, <code>is_leaf == True</code> includes the following conditions:</p> <ul> <li><code>requires_grad == False</code> (e.g., the input data, the ground truth)</li> <li><code>requires_grad == True and grad_fn == None</code> (e.g., the trainable parameters)</li> </ul> <p>therefore, non-leaf tensors are any outputs of <code>Function</code> that <code>requires_grad == True</code>. (e.g., predictions, loss). </p> <p>non-leaf tensors must have <code>requires_grad = True</code>, if you want to change it, an error will be reported:</p> <pre><code>x = torch.rand(1, 3)\ny = nn.Linear(3, 5)(x)\ny.requires_grad = False\n# RuntimeError: you can only change requires_grad flags of leaf variables. If you want to use a computed variable in a subgraph that doesn't require differentiation use var_no_grad = var.detach().\n</code></pre> </li> </ul> <ul> <li> <p><code>x.requires_grad</code></p> <p>whether tensor <code>x</code> requires grad, which affects:</p> <ul> <li>In <code>forward()</code>, a <code>Function</code> is only recored in the DAG if at least one of its inputs has <code>requires_grad == True</code></li> <li>In <code>backward()</code>, only tensors with <code>is_leaf == True and requires_grad == True</code> will get <code>grad</code>.</li> </ul> <p>default to <code>False</code>, unless set explicitly, or wrapped in <code>nn.Parameter</code>.</p> <p>it is just a boolean flag, so setting it is not a <code>Function</code>.</p> <pre><code># set at intialization\nx = torch.rand(3, requires_grad=True)\n\n# both following method just change the flag in-place.\nx.requires_grad = True\nx.requires_grad_(True) # also return the tensor itself.\n\n# nn.Parameter (which is used inside nn.Module) automatically requires grad.\nx = nn.Parameter(torch.rand(3))\n# is_leaf: True, requires_grad: True, grad_fn: None, grad: None\nx = nn.Linear(3, 5).weight\n# is_leaf: True, requires_grad: True, grad_fn: None, grad: None\n</code></pre> </li> </ul> <ul> <li> <p><code>x.grad_fn</code></p> <p>the <code>torch.autograd.Function</code> (operation) that creates <code>x</code>.</p> <p>this is the place where the computation DAG is saved (i.e., saves all the inputs, and the exact operator used to compute <code>x</code>)</p> </li> </ul> <ul> <li> <p><code>x.backward()</code></p> <p>calculate gradients through the DAG. </p> <p>only non-leaf tensors (<code>grad_fn != None</code>) can call <code>backward()</code>, else an error will be reported:</p> <pre><code>RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn\n</code></pre> </li> </ul> <ul> <li> <p><code>x.grad</code></p> <p>the accumulated / populated gradients, default to <code>None</code>.</p> <p>only tensor with <code>is_leaf == True and requires_grad == True</code> will get its <code>grad</code> after a later <code>backward()</code>.</p> <p>if you access the <code>grad</code> of a non-leaf tensor, a warning will be reported:</p> <pre><code>UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the gradient for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations.\n</code></pre> </li> </ul> <ul> <li> <p><code>x.detach()</code></p> <p>create a new tensor (but not copy data) from <code>x</code>, and set <code>requires_grad = False</code>. (which also means <code>is_leaf == True</code>). note that <code>x.clone()</code> will copy data but remains the gradient to the original tensor (thus <code>is_leaf == False</code>).</p> </li> </ul> <ul> <li> <p><code>with torch.no_grad():</code></p> <p>temporarily disable all DAG recording (and thus cannot call <code>backward()</code>), i.e., behave as if no inputs requires grad. </p> <p>it can also work as a  decorator:</p> <pre><code>@torch.no_grad()\ndef func(x):\n  ...\n</code></pre> <p><code>torch.enable_grad()</code> can be used inside <code>torch.no_grad()</code> block, to re-enable gradient calculation.</p> </li> </ul> <ul> <li> <p><code>nn.Module.eval()</code></p> <p>not to be confused with <code>no_grad()</code>, it just sets the correct behavior for special modules like <code>BatchNorm</code> and <code>Dropout</code>.</p> <p>the correct way to perform inference is always using both <code>no_grad()</code> and <code>eval()</code>:</p> <pre><code>model.eval()\nwith torch.no_grad():\n    y = model(x)\n</code></pre> </li> </ul> <ul> <li> <p><code>with torch.set_grad_enabled(True/False):</code></p> <p>similar to <code>with torch.no_grad()/enable_grad():</code>.</p> </li> </ul> <ul> <li> <p><code>x.retain_grad()</code></p> <p><code>x</code> must be a non-leaf tensor to call this before <code>backward()</code>, so <code>x</code> will keep its <code>grad</code> (as the leaf tensors that requires grad).</p> <p>the state can be checked by <code>x.retains_grad</code>, which is a boolean flag.</p> </li> </ul> <ul> <li> <p><code>torch.autograd.grad(outputs, inputs, grad_outputs=None, retain_graph=None, create_graph=False)</code></p> <p>a way to manually compute and get the gradients.</p> <ul> <li>outputs: tensor, usually a scalar such as the loss.</li> <li>inputs: tensor, used to calculate \\(\\frac{d~\\text{outputs}}{d~\\text{inputs}}\\).</li> <li>grad_outputs: \\(d~\\text{outputs}\\), should be the same shape as outputs, if left <code>None</code>, will use all ones.</li> <li>create_graph: whether keep the DAG so higher order derivitives can be calculated.</li> <li>retrain_graph: default to create_graph, do not free the DAG.</li> </ul> <p>example use in SDF to calculate normals:</p> <pre><code>with torch.set_grad_enabled(True):\n    input.requires_grad_(True)\n    sigma = self.backbone(input)\n    normal = - torch.autograd.grad(torch.sum(sigma), input, create_graph=True)[0] # [B, N, 3]\n    return sigma, normal\n</code></pre> </li> </ul> <p>Full Examples:</p> <pre><code>import torch\nimport torch.nn as nn\n\ndef check(x):\n    print(f'is_leaf: {x.is_leaf}, requires_grad: {x.requires_grad}, grad_fn: {x.grad_fn}, grad: {x.grad}')\n\n#####################\n### simple operations\n\nx = torch.rand(3)\ncheck(x)\n# is_leaf: True, requires_grad: False, grad_fn: None, grad: None\n\nx = torch.rand(3, requires_grad=True)\ncheck(x)\n# is_leaf: True, requires_grad: True, grad_fn: None, grad: None\n\nx = torch.rand(3, requires_grad=True) + 1\ncheck(x)\n# is_leaf: False, requires_grad: True, grad_fn: &lt;AddBackward0 object at 0x7f7df1added0&gt;, grad: None\n# note: + is a Function. therefore, it leaves a CopyBackwards grad_fn, and makes x non-leaf.\n\nx = torch.rand(3, requires_grad=True).cuda()\ncheck(x)\n# is_leaf: False, requires_grad: True, grad_fn: &lt;CopyBackwards object at 0x7f7e2efe90d0&gt;, grad: None\n# note: cuda() is also a Function! \n\nx = torch.rand(3) + 1\ncheck(x)\n# is_leaf: True, requires_grad: False, grad_fn: None, grad: None\n# note: if x doesn't require grad, the Function that operates on it will not be recorded, and the output is still a leaf.\n\nx = torch.rand(3).cuda()\ncheck(x)\n# is_leaf: True, requires_grad: False, grad_fn: None, grad: None\n\n##############\n### nn.Module\n\nx = torch.rand(3, requires_grad=True, device='cuda')\ncheck(x)\n# cuda:0, is_leaf: True, requires_grad: True, grad_fn: None, grad: None\n\nlin = nn.Linear(3, 5)\ncheck(lin.weight)\n# is_leaf: True, requires_grad: True, grad_fn: None, grad: None\n# note: nn.Module's parameters are wrapped by nn.Parameter, so it is leaf and requires grad.\n\nx = torch.rand(1, 3)\ny = lin(x)\ncheck(y)\n# is_leaf: False, requires_grad: True, grad_fn: &lt;AddmmBackward object at 0x7f7e4004c9d0&gt;, grad: None\n\ngt = torch.rand(1, 5)\nl = nn.L1Loss(y, gt)\ncheck(l)\n# is_leaf: False, requires_grad: True, grad_fn: &lt;L1LossBackward object at 0x7f7e40021c90&gt;, grad: None\n\nl.backward()\ncheck(lin.weight)\n# is_leaf: True, requires_grad: True, grad_fn: None, grad: tensor([...])\n# note: other tensors (x, y, l, gt) will still have grad == None.\n</code></pre>"},{"location":"deeplearning/background_removal/","title":"Background removal tools","text":""},{"location":"deeplearning/background_removal/#kiuikit","title":"kiuikit","text":"<p>re-wrapped rembg:</p> <pre><code>pip install kiui[full]\n\n### cli\npython -m kiui.bg --help\npython -m kiui.bg input_folder output_folder\npython -m kiui.bg input_folder output_folder --return_mask --lcc\n</code></pre> <pre><code>from kiui.bg import remove\nremove_folder(input_folder, output_folder, return_mask=True)\n</code></pre>"},{"location":"deeplearning/background_removal/#carvekit","title":"Carvekit","text":"<pre><code>pip install carvekit\n\n### cli\npython -m carvekit --help\npython -m carvekit -i input_file -o output_file --device cuda --fp16 True\n# output_folder should be created first\npython -m carvekit -i input_folder -o output_folder --batch_size 32 --device cuda --fp16 True\n</code></pre> <pre><code>import os\nimport tqdm\nimport cv2\nimport glob\nimport argparse\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\nimport torch\n\nclass BackgroundRemoval():\n    def __init__(self, device='cuda'):\n\n        from carvekit.api.high import HiInterface\n        self.interface = HiInterface(\n            object_type=\"object\",  # Can be \"object\" or \"hairs-like\".\n            batch_size_seg=5,\n            batch_size_matting=1,\n            device=device,\n            seg_mask_size=640,  # Use 640 for Tracer B7 and 320 for U2Net\n            matting_mask_size=2048,\n            trimap_prob_threshold=231,\n            trimap_dilation=30,\n            trimap_erosion_iters=5,\n            fp16=True,\n        )\n\n    @torch.no_grad()\n    def __call__(self, image):\n        # image: PIL Image\n        image = self.interface([image])[0]\n        image = np.array(image)\n        return image\n\nparser = argparse.ArgumentParser()\nparser.add_argument('path', type=str)\n\nopt = parser.parse_args()\n\nif opt.path[-1] == '/':\n    opt.path = opt.path[:-1]\n\nout_dir = os.path.join(os.path.dirname(opt.path), f'mask')\nos.makedirs(out_dir, exist_ok=True)\n\nprint(f'[INFO] removing background: {opt.path} --&gt; {out_dir}')\n\nmodel = BackgroundRemoval()\n\ndef run_image(img_path):\n    # img: filepath\n    image = Image.open(img_path)\n    carved_image = model(image) # [H, W, 4]\n    mask = (carved_image[..., -1] &gt; 0).astype(np.uint8) * 255 # [H, W]\n    out_path = os.path.join(out_dir, os.path.splitext(os.path.basename(img_path))[0] + '.png')\n    cv2.imwrite(out_path, mask)\n\nimg_paths = glob.glob(os.path.join(opt.path, '*'))\nfor img_path in tqdm.tqdm(img_paths):\n    run_image(img_path)\n</code></pre>"},{"location":"deeplearning/background_removal/#rembg","title":"Rembg","text":"<p>best quality.</p> <pre><code>pip install rembg[gpu]\n\n# cli won't work for me... click complains.\nrembg i input_file output_file\nrembg p input_folder output_folder\n</code></pre> <pre><code>from rembg import remove\nimport cv2\n\ninput = cv2.imread('input.png')\n\noutput = remove(input) # [H, W, 4]\noutput = remove(input, post_process=True) # apply morphological opening and gaussian blurring\noutput = remove(input, alpha_matting=True) # alpha matting, better for hair-like object, but need hyperparameter tuning...\n\ncv2.imwrite('output.png', output)\n</code></pre>"},{"location":"deeplearning/background_removal/#backgroundremover","title":"BackgroundRemover","text":"<p>better than carvekit, but slightly worse than rembg.</p> <pre><code>pip install backgroundremover\n\n# cli\nbackgroundremover -i \"/path/to/image.jpeg\" -o \"output.png\"\n</code></pre>"},{"location":"deeplearning/diffusion_models/","title":"Diffusion models","text":""},{"location":"deeplearning/diffusion_models/#the-forward-pass-image-to-noise","title":"The forward pass (image to noise)","text":"<p>The forward process can be described with a sequence of gaussian distributions:</p> \\[ \\displaylines{ q(x_t|x_{t-1})=\\mathcal N(x_t; \\sqrt{1 - \\beta_t}x_{t-1}, \\beta_tI) } \\] <p>Assume \\(\\(\\beta_t\\)\\) is the weight for gaussian noise (variance) at step \\(\\(t\\)\\), and \\(\\(\\alpha_t = 1 - \\beta_t,~ \\bar\\alpha_t= \\prod_{i=1}^t\\alpha_i\\)\\).</p> <p>The forward step gradually adds a sequence of gaussian noise \\(\\{\\epsilon_t\\} \\sim \\mathcal N(0, I)\\) to the real image \\(x_0\\), so the corrupted image at step \\(t\\) is:</p> \\[ \\displaylines{ \\begin{aligned} x_t &amp;= \\sqrt{\\alpha_t}x_{t-1}+ \\sqrt{1-\\alpha_t}\\epsilon_{1} \\\\ &amp;= \\sqrt{\\alpha_t}(\\sqrt{\\alpha_{t-1}}x_{t-2}+ \\sqrt{1-\\alpha_{t-1}}\\epsilon_{2})+ \\sqrt{1-\\alpha_t}\\epsilon_{1}  \\\\ &amp;= \\sqrt{\\alpha_t\\alpha_{t-1}}x_{t-2}+\\sqrt{\\alpha_t(1-\\alpha_{t-1})}\\epsilon_{2}+ \\sqrt{1-\\alpha_t}\\epsilon_{1}  \\\\ &amp;= \\sqrt{\\alpha_t\\alpha_{t-1}}x_{t-2}+\\sqrt{1-\\alpha_t\\alpha_{t-1}} \\epsilon_{2}  \\\\ &amp;= \\cdots \\\\ &amp;= \\sqrt{\\bar \\alpha_{t}}x_{0}+\\sqrt{1-\\bar \\alpha_{t}} \\epsilon_{t} \\\\ \\end{aligned} } \\] <p>Note that two independent gaussian noise \\(\\epsilon_{1}, \\epsilon_{2}\\) can be merged into one: </p> \\[ \\displaylines{ \\mathcal N(0, {\\alpha_t(1-\\alpha_{t-1})})+\\mathcal N(0, {1-\\alpha_{t}}) \\rightarrow \\mathcal N(0, {1-\\alpha_t\\alpha_{t-1}}) } \\] <p>This means we can express any \\(x_t\\) with \\(x_0\\), \\(\\{\\beta_1, \\beta_2, \\cdots, \\beta_t\\}\\), and a random noise \\(\\epsilon_{t}\\).</p>"},{"location":"deeplearning/diffusion_models/#the-backward-pass-noise-to-image","title":"The backward pass (noise to image)","text":"<p>Given \\(\\(x_{t}\\)\\), we want to get \\(\\(x_{t-1}\\)\\), and eventually restore the real image \\(x_0\\).</p> <p>It's proven that if \\(\\beta_t\\) is small enough, the backward process is also a sequence of gaussian.</p> \\[ \\displaylines{ q(x_{t-1}|x_t) = \\mathcal N(x_{t-1}; \\tilde\\mu_t(x_t, t), \\tilde\\beta_tI) } \\] <p>which gives the denoising step with another sequence of gaussian noise \\(\\{z_t\\} \\sim \\mathcal N(0, I)\\):</p> \\[ \\displaylines{ x_{t-1} = \\tilde\\mu_t(x_t, t)+\\tilde \\beta_t z_t } \\] <p>Through some math we could get:</p> \\[ \\displaylines{ \\tilde\\beta_t = \\frac {1 - \\bar \\alpha_{t-1}} {1 - \\bar \\alpha_{t}} \\beta_t\\\\ \\tilde\\mu_t(x_t, t)=\\frac {1} {\\sqrt{\\alpha_t}} (x_t-\\frac{1-\\alpha_t}{\\sqrt{1-\\bar \\alpha_t}}\\epsilon_t) } \\] <p>Note that here \\(\\epsilon_t\\) is the exact noise added in the forward step!</p> <p>And all we need is a neural network that predicts this noise \\(\\epsilon_t\\) given \\(x_t(x_0, t) = \\sqrt{\\bar \\alpha_{t}}x_{0}+\\sqrt{1-\\bar \\alpha_{t}}\\epsilon_t\\).</p> <p>Assume the predicted noise is \\(\\epsilon_\\theta\\), we need to minimize the following loss:</p> \\[ \\displaylines{ \\mathcal L=\\mathbb E_{t,x_0,\\epsilon_t}||\\epsilon_t -\\epsilon_\\theta(x_0, t)||^2 } \\] <p>The neural network is usually an U-Net with attention since we need same-size output as input.</p>"},{"location":"deeplearning/diffusion_models/#ddpm-denoising-diffusion-probabilistic-model","title":"DDPM (Denoising Diffusion Probabilistic Model)","text":"<p>DDPM exactly describes the above idea.</p> <p>Note that DDPM use \\(\\tilde \\beta_t = \\beta_t\\) as an approximation.</p> <p></p>"},{"location":"deeplearning/diffusion_models/#ddim-denoising-diffusion-implicit-model","title":"DDIM (Denoising Diffusion Implicit Model)","text":"<p>DDIM use a different formula for the backward step:</p> \\[ \\displaylines{ \\begin{aligned} x_{t-1} &amp;= \\sqrt{\\bar \\alpha_{t-1}}x_{0}+\\sqrt{1-\\bar \\alpha_{t-1}} \\epsilon_{t-1} \\\\ &amp;= \\sqrt{\\bar \\alpha_{t-1}}x_{0}+\\sqrt{1-\\bar \\alpha_{t-1} -\\sigma_t^2} \\epsilon_{t} +\\sigma_t z_t \\\\ &amp;= \\sqrt{\\bar \\alpha_{t-1}}x_{0}+\\sqrt{1-\\bar \\alpha_{t-1} -\\sigma_t^2} \\frac {x_t-\\sqrt{\\alpha_t}x_0}{\\sqrt{1-\\alpha_t}} +\\sigma_t z_t \\\\ \\end{aligned} } \\] <p>According to \\(x_{t-1} = \\tilde\\mu_t(x_t, t)+\\tilde \\beta_t z_t\\), we have</p> \\[ \\displaylines{ \\tilde\\mu_t(x_t, t)=\\sqrt{\\bar \\alpha_{t-1}}x_{0}+\\sqrt{1-\\bar \\alpha_{t-1} -\\sigma_t^2} \\frac {x_t-\\sqrt{\\alpha_t}x_0}{\\sqrt{1-\\alpha_t}} \\\\ \\tilde\\beta_t = \\sigma_t^2= \\frac {1 - \\bar \\alpha_{t-1}} {1 - \\bar \\alpha_{t}} \\beta_t } \\] <p>Another hyper-parameter \\(\\eta \\ge  0\\) is introduced as \\(\\eta \\tilde \\beta_t = \\sigma_t^2\\).</p> <p>DDPM usually requires \\(T=1000\\) steps for both training and inference (\\(S = T = 1000\\)), which makes generation (inference) too slow.</p> <p>To speed up inference, DDIM use strided sampling where \\(S &lt;T\\), and shows when \\(\\eta = 0\\), \\(S=50\\sim100\\) steps are enough to generate good images.</p>"},{"location":"deeplearning/diffusion_models/#ldm-latent-diffusion-model","title":"LDM (Latent Diffusion Model)","text":"<p>Instead of diffusing in the pixel space, LDM first use a VQVAE to compress the image space (e.g., 512x512x3) into a latent space (e.g., 64x64x4).</p> <p>This greatly reduces the computation cost for both training and testing.</p>"},{"location":"deeplearning/diffusion_models/#conditioned-generation","title":"Conditioned Generation","text":"<p>Assume we want to condition the generation to an input \\(y\\) which may be class labels or text.</p>"},{"location":"deeplearning/diffusion_models/#classifier-guided-diffusion","title":"Classifier-Guided Diffusion","text":"<p>A pretrained classifier is required, not flexible.</p>"},{"location":"deeplearning/diffusion_models/#classifier-free-guidance","title":"Classifier-Free Guidance","text":"<p>Train both conditioned denoiser \\(\\epsilon_\\theta(x_0, t)\\) and unconditioned denoiser \\(\\epsilon_\\theta(x_0, t, y)\\) in the same neural network together.</p> <p>The final denoiser is simply a weighted combination of these two terms:</p> \\[ \\displaylines{ \\begin{aligned} \\bar\\epsilon_\\theta(x_0, t, y) &amp;= \\epsilon_\\theta(x_0, t, y) + w(\\epsilon_\\theta(x_0, t, y) - \\epsilon_\\theta(x_0, t)) \\\\ &amp;=(w+1)\\epsilon_\\theta(x_0, t, y) - w\\epsilon_\\theta(x_0, t) \\end{aligned} } \\] <p>where a larger \\(w\\) leads to stronger class guidance.</p>"},{"location":"deeplearning/einops_tutorial/","title":"einops","text":"<pre><code>pip install einops\n</code></pre>"},{"location":"deeplearning/einops_tutorial/#operations","title":"operations","text":"<pre><code>from einops import rearrange, reduce\nfrom einops.layers.torch import Rearrange, Reduce\n\n# permutation \ny = rearrange(x, 'b c h w -&gt; b h w c') \n# eqs:\ny = x.permute(0, 2, 3, 1).contiguous()\n\n# composition\ny = rearrange(x, 'b h w c -&gt; (b h) w c')\n# eqs:\ny = x.view(B*H, W, C)\n\n# decomposition\ny = rearrange(x, '(b h) w c -&gt; b h w c')\n# eqs:\ny = x.view(B, H, W, C)\n\n# shift\ny = rearrange(x, '(b1 b2) h w c -&gt; h (b1 b2 w) c') # 1 2 3 4\ny = rearrange(x, '(b1 b2) h w c -&gt; h (b2 b1 w) c') # 1 3 2 4\n\n# mean/min/max\ny = reduce(x, 'b h w c -&gt; h w c', 'mean')\n# eqs:\ny = x.mean(dim=0)\n\n# min-pooling\ny = reduce(x, 'b (h h2) (w w2) c -&gt; b h w c', 'min', h2=2, w2=2)\n\n# stack\nx = rearrange(xs, 'b h w c -&gt; b h w c') # xs is [[h, w, c], ...] x b\n# eqs:\nx = torch.stack(xs, dim=0)\n\nx = rearrange(xs, 'b h w c -&gt; h w c b')\n# eqs:\nx = torch.stack(xs, dim=-1)\n\n# squeeze/unsqueeze\nx = rearrange(x, 'h w c -&gt; 1 h w c')\n# eqs:\nx = x.unsqueeze(0)\n\nx = rearrange(x, '1 h w c -&gt; h w c')\n# eqs:\nx = x.squeeze(0)\n</code></pre>"},{"location":"deeplearning/flow_matching/","title":"Flow Matching","text":"<p>A Flow \\(\\psi:[0, 1]\\times \\mathbb{R}^d \\rightarrow \\mathbb{R}^d\\) is a deterministic, time-continuous bijective transformation.</p>"},{"location":"deeplearning/grid_sample/","title":"Grid sample","text":""},{"location":"deeplearning/grid_sample/#coordinate-system-of-fgrid_sample","title":"Coordinate system of <code>F.grid_sample</code>","text":""},{"location":"deeplearning/grid_sample/#2d-case","title":"2D case","text":"<p>First we use <code>meshgrid</code> to build grid coordinates:</p> <pre><code>import torch\nimport torch.nn.functional as F\n\nres = 2\ndim = 2\ndevice = torch.device(\"cpu\")\n\nline = torch.linspace(-1, 1, res, device=device)\n\"\"\" [-1, 1] \"\"\"\n\npoints_ij = torch.stack(torch.meshgrid([line]*dim, indexing=\"ij\"), dim=-1)\n\"\"\"\n[-1, -1] [-1, 1]\n[1,  -1] [1,  1]\n\"\"\"\n\npoints_xy = torch.stack(torch.meshgrid([line]*dim, indexing=\"xy\"), dim=-1)\n\"\"\"\n[-1, -1] [1, -1]\n[-1,  1] [1,  1]\n\"\"\"\n\n# xy is transpose of ij\nassert torch.allclose(points_ij[..., [1, 0]], points_xy)\n</code></pre> <p>Why <code>ij</code> and <code>xy</code> are transposed:</p> <pre><code># coordinate system of a 2D image (i/x row, j/y col!)\nO -------- x/j\n|      \n|  \n|\ny/i\n\n# i.e.\n--&gt;\nxy\nji\n&lt;--\n</code></pre> <p>Now we can try <code>grid_sample</code>:</p> <pre><code># simplest image\ngrid = torch.arange(res**dim).view([res]*dim).float()\n\"\"\"\n0 1\n2 3\n\"\"\"\n\n# use ij\nval_ij = F.grid_sample(grid.unsqueeze(0).unsqueeze(0), points_ij.unsqueeze(0), mode='bilinear', align_corners=True).squeeze()\n\"\"\"\n0=[-1, -1] 2=[-1, 1]\n1=[1,  -1] 3=[1,  1]\n\"\"\"\n\n# use xy (or ji)\nval_xy = F.grid_sample(grid.unsqueeze(0).unsqueeze(0), points_xy.unsqueeze(0), mode='bilinear', align_corners=True).squeeze()\n\"\"\"\n0=[-1, -1] 1=[1, -1]\n2=[-1,  1] 3=[1,  1]\n\"\"\"\n</code></pre> <p>We can see the internal coordinate system of <code>grid_sample</code> is:</p> <pre><code>                 -       \n                 |\n      0=[-1,-1]--|---------1=[1,-1]\n      |          |         |\n      |          |         |\n      |          |         |\n - ------------- O ------------ +x/j\n      |          |         |\n      |          |         |\n      |          |         |\n      2=[-1,1]---|---------3=[1,1]\n                 |\n                 +y/i    \n</code></pre> <p>Therefore, just use <code>ji</code> (i.e., <code>xy</code>) to make sure the output is aligned with input:</p> <pre><code>assert torch.allclose(grid, val_xy)\n</code></pre>"},{"location":"deeplearning/grid_sample/#3d-case","title":"3D case","text":"<pre><code>import torch\nimport torch.nn.functional as F\n\nres = 2\ndim = 3\ndevice = torch.device(\"cpu\")\n\nline = torch.linspace(-1, 1, res, device=device) # [N]\n\npoints_ijk = torch.stack(torch.meshgrid([line]*dim, indexing=\"ij\"), dim=-1) # [N, N, N, 3]\n\"\"\"\n        [1,-1,-1]---------[1,-1,1]\n       /|                /|\n     /  |              /  |\n    [-1,-1,-1]--------[-1,-1,1]\n    |   |             |   |  \n    |   |             |   |\n    |   [1,1,-1]------|---[1,1,1]\n    |  /              |  /\n    |/                |/\n    [-1,1,-1]---------[-1,1,1]\n\"\"\"\n\n# NOTE: here the order is not xyz, but yzx !!!\npoints_yzx = torch.stack(torch.meshgrid([line]*dim, indexing=\"xy\"), dim=-1) # [N, N, N, 3]\n\"\"\"\n        [-1,1,-1]---------[-1,1,1]\n       /|                /|\n     /  |              /  |\n    [-1,-1,-1]--------[-1,-1,1]\n    |   |             |   |  \n    |   |             |   |\n    |   [1,1,-1]------|---[1,1,1]\n    |  /              |  /\n    |/                |/\n    [1,-1,-1]---------[1,-1,1]\n\"\"\"\n</code></pre> <p>Relationship with <code>xyz</code> and <code>ijk</code>:</p> <pre><code># coordinate system of a 3D volume\n       z/i\n     /\n   /\n /  \nO---------x/k\n|   \n|   \n|\n|\ny/j\n\n# this is because xy[z] and ij[k] notation are always reversed!\n2D       3D\n--&gt;      ---&gt;\nxy       xyz\nji       kji\n&lt;--      &lt;---\n\n# why \"xy\" returns yzx instead of xyz?\n# this is because torch simply swaps the first and second dimensions when using \"xy\".\n# for 2D case, ij --&gt; ji == xy\n# for 3D case, ijk --&gt; jik == yzx\n# ref: https://github.com/pytorch/pytorch/blob/8ed093217272f9978e33799cdcc928ae591664c2/aten/src/ATen/native/TensorShape.cpp#L3584\n</code></pre> <p>Try <code>grid_sample</code>:</p> <pre><code># simplest volume\ngrid = torch.arange(res**dim).view([res]*dim).float()\n\"\"\"\n        4-----------5\n       /|          /|\n     /  |        /  |\n    0-----------1   |\n    |   |       |   |  \n    |   6-------|---7\n    |  /        |  /\n    |/          |/\n    2-----------3\n\"\"\"\n\n# use ijk\nF.grid_sample(grid.unsqueeze(0).unsqueeze(0), points_ijk.unsqueeze(0), mode='bilinear', align_corners=True).squeeze()\n\"\"\"\n        1=[1,-1,-1]-------5=[1,-1,1]\n       /|                /|\n     /  |              /  |\n    0=[-1,-1,-1]------4=[-1,-1,1]\n    |   |             |   |  \n    |   |             |   |\n    |   3=[1,1,-1]----|---7=[1,1,1]\n    |  /              |  /\n    |/                |/\n    2=[-1,1,-1]-------6=[-1,1,1]\n\"\"\"\n\n# use yzx\nF.grid_sample(grid.unsqueeze(0).unsqueeze(0), points_yzx.unsqueeze(0), mode='bilinear', align_corners=True).squeeze()\n\"\"\"\n        2=[-1,1,-1]-------6=[-1,1,1]\n       /|                /|\n     /  |              /  |\n    0=[-1,-1,-1]------4=[-1,-1,1]\n    |   |             |   |  \n    |   |             |   |\n    |   3=[1,1,-1]----|---7=[1,1,1]\n    |  /              |  /\n    |/                |/\n    1=[1,-1,-1]-------5=[1,-1,1]\n\"\"\"\n</code></pre> <p>Internal coordinate system of <code>grid_sample</code> is:</p> <pre><code>                       -           +z/i\n                       |          /\n                       |        /\n             4=[-1,-1,1]----------5=[1,-1,1]\n            /|         |     /   /|\n          /  |         |   /   /  |\n         0=[-1,-1,-1]---------1=[1,-1,-1]\n         |   |         |/     |   |  \n- -------|---|-------- O -----|---|------------ +x/k\n         |   |        /|      |   |\n         |   6=[-1,1,1]-------|---7=[1,1,1]\n         |  /      /   |      |  /\n         |/      /     |      |/\n         2=[-1,1,-1]----------3=[1,1,-1]\n              /        |\n            /          |\n          /            |\n        -              +y/j\n</code></pre> <p>Notice that both <code>ijk</code> and <code>yzx</code> cannot align the output with input, and instead we need <code>kji</code> (or <code>xyz</code>):</p> <pre><code>points_ijk = torch.stack(torch.meshgrid([line]*dim, indexing=\"ij\"), dim=-1) # [N, N, N, 3]\npoints_kji = points_ijk[..., [2,1,0]]\n\nval = F.grid_sample(grid.unsqueeze(0).unsqueeze(0), points_kji.unsqueeze(0), mode='bilinear', align_corners=True).squeeze()\nassert torch.allclose(grid, val)\n</code></pre>"},{"location":"deeplearning/jax_tutorial/","title":"Jax tutorial","text":""},{"location":"deeplearning/jax_tutorial/#jax-tutorial","title":"JAX tutorial","text":""},{"location":"deeplearning/jax_tutorial/#why","title":"why","text":"<p><code>jax</code> is more suitable for:</p> <ul> <li>functional programming lover.</li> </ul> <ul> <li>higher order optimization.</li> <li>data parallel, especially on TPU.</li> </ul>"},{"location":"deeplearning/jax_tutorial/#install","title":"install","text":"<pre><code># Installs the wheel compatible with CUDA 11 and cuDNN 8.2 or newer.\npip install --upgrade \"jax[cuda]\" -f https://storage.googleapis.com/jax-releases/jax_releases.html  # Note: wheels only available on linux.\n</code></pre>"},{"location":"deeplearning/jax_tutorial/#basics","title":"basics","text":"<pre><code>import numpy as np\n\nimport jax\nimport jax.numpy as jnp\n\nfrom jax import grad, jit\nfrom jax import lax\nfrom jax import random\n</code></pre>"},{"location":"deeplearning/jax_tutorial/#jaxnumpy","title":"jax.numpy","text":"<p><code>jax.numpy</code> mimics <code>numpy</code> API:</p> <pre><code># jax array: DeviceArray\narr = jnp.array([1, 2, 3], dtype=jnp.float32)\narr = jnp.asarray([1, 2, 3], dtype=jnp.float32)\n\narr.shape # python tuple\narr.size # prod of shape\narr.dtype # numpy dtype\narr.device() # it's a function! GpuDevice(id=0, process_index=0)\n</code></pre> <ul> <li> <p>DeviceArray are immutable (cannot be in-place modified)</p> <pre><code>arr[0] = 0 # TypeError\n\n# you must copy it and set new values by:\n# However, jit can be used avoid the copy.\narr.at[0].set(0)\n</code></pre> </li> </ul>"},{"location":"deeplearning/jax_tutorial/#jaxgrad","title":"jax.grad","text":"<p><code>jax.grad</code> for gradient calculation:</p> <pre><code>def mse_loss(x, y):\n    return jnp.mean((x - y) ** 2)\n\nx = jnp.asarray([1, 2, 3], dtype=jnp.float32)\ny = jnp.asarray([0, 0, 0], dtype=jnp.float32)\n\n# calculate loss\nl = mse_loss(x, y)\n\n# calculate gradient: dl/dx\nmse_loss_dx = jax.grad(mse_loss) # default to use first argument\nx_grad = mse_loss_dx(x, y)\n\n# both (dl/dx, dl/dy)\nmse_loss_dxdy = jax.grad(mse_loss, argnums=(0, 1))\nx_grad, y_grad = mse_loss_dxdy(x, y)\n\n# a convenient shortcut:\n# jax.value_and_grad(f)(*xs) == (f(*xs), jax.grad(f)(*xs))\nl, x_grad = jax.value_and_grad(mse_loss)(x, y)\n</code></pre> <ul> <li> <p><code>jax.grad</code> only works on scalar-output functions!</p> <pre><code>def loss_aux(x, y):\n    # return (loss, aux), aux may be any value used to debug.\n    return mse_loss(x, y), x - y\n\n# then you should use `has_aux=True`:\nloss_dx = jax.grad(loss_aux, has_aux=True)\nx_grad = loss_dx(x, y)\n</code></pre> </li> </ul>"},{"location":"deeplearning/jax_tutorial/#jaxjit","title":"jax.jit","text":"<p><code>jax.jit</code> for just-in-time compilation of functions.</p> <p>It trace the function at the first time call, and generate <code>jaxpr</code> intermediate results, for faster later calls.</p> <p>Therefore, it should only be used on Pure functions, i.e., functions with no side-effect, including:</p> <ul> <li><code>print()</code>: it will only be valid at the first time call (tracing), and later calls will ignore the print. Therefore, it still can be used to debug.</li> <li>reading/writing global variables. NEVER do these!</li> </ul> <pre><code>def selu(x, alpha=1.67, lambda_=1.05):\n  return lambda_ * jnp.where(x &gt; 0, x, alpha * jnp.exp(x) - alpha)\n\nselu_jit = jax.jit(selu)\n\nx = jnp.arange(1000000)\nselu(x) # slower.\nselu_jit(x) # first time call, will trace the function. still, it is faster.\nselu_jit(x) # should be much faster.\n</code></pre> <p>by default, jit tracers record at the level of input shape, i.e., all inputs with the same type should behave uniformly. Therefore, control flows that depend on input value will fail if transformed with jit:</p> <pre><code># cond\ndef f(x):\n    return x if x &gt; 0 else 0\n\nf_jit = jax.jit(f)\nf_jit(10) # ConcretizationTypeError!\n\n# note: jax.grad can be used with python control flows\nf_dx = jax.grad(f)\nf_dx(10) # OK\n</code></pre> <p>There are two solutions:</p> <ul> <li> <p>use control flow operators in <code>jax.lax</code>:</p> <pre><code># for cond, we still need to know if x &gt; 0 first... so this is not a solution.\njax.lax.cond(True, lambda x: x, lambda x: 0, x)\njax.lax.cond(False, lambda x: x, lambda x: 0, x)\n</code></pre> </li> </ul> <ul> <li> <p>specify static arguments, and avoid jit on these args.</p> <pre><code>x = jnp.array([1., 2., 3.])\n\ndef g(x, n):\n    y = 0\n  for i in range(n):\n        y = y + x[i]\n    return y\n\n# this fails, because the flow depends on dynamic value n.\njax.jit(g)(x, 3)\n\n# this works, but everytime n change, it will be re-compiled.\njax.jit(g, static_argnums=(1,))(x, 3)\n\n# similarly for f (but this is meaningless)\njax.jit(f, static_argnums=(0,))(10)\n\ndef g2(x):\n  y = 0.\n  for i in range(x.shape[0]):\n    y = y + x[i]\n  return y\n\n# this works, because jit trace the array shape, so x.shape[0] is static.\njax.jit(g2)(x)\n</code></pre> </li> </ul> <p>Tips to use <code>jit</code>:</p> <ul> <li>Use on functions that will be called numerous times.</li> <li>if use <code>static_argnums</code>, the static argument should not change too frequently, otherwise the compilation overhead will be terrible.</li> <li>Do not jit function in loops, always jit the function before using it in a loop.</li> </ul>"},{"location":"deeplearning/jax_tutorial/#vmap","title":"vmap","text":"<p><code>jax.vmap</code> for automatic vectorization (batch).</p> <pre><code># any function that operates on unbatched inputs\ndef func(x, y):\n    return x @ y\n\n# unbatched inputs\nx = jnp.array([1., 2., 3.])\ny = jnp.array([0., 0., 0.])\n\nz = func(x, y)\n\n# batched inputs\nxs = jnp.stack([x, x], axis=0)\nys = jnp.stack([y, y], axis=0)\n\n# automatically batched function\nfunc_batch = jax.vmap(func)\nzs = func_batch(xs, ys)\n\n# specify the batch axis\nfunc_batch_transposed = jax.vmap(func, in_axes=1, out_axes=1)\nzst = func_batch_transposed(jnp.transpose(xs), jnp.transpose(ys))\n\n# you can even specify different batch axes for different inputs/outputs\nfunc_batch_mixed = jax.vmap(func, in_axes=(0, 1))\nzsm = func_batch_mixed(xs, jnp.transpose(ys))\n\n# or broadcast:\nfunc_batch_broadcast = jax.vmap(func, in_axes=(0, None))\nzsb = func_batch_broadcast(xs, y)\n</code></pre> <p><code>jit</code>, <code>vmap</code>, <code>grad</code> can be combined in arbitrary orders and all works well.</p>"},{"location":"deeplearning/jax_tutorial/#rng","title":"RNG","text":"<p>random number generator in jax is very different from numpy, to be reproducible, parallelizable, vectorizable.</p> <pre><code>from jax import random\n\nkey = random.PRNGKey(42) # just a two-element array, [0, 42]\n\nrandom.normal(key) # -0.1847\nrandom.normal(key) # -0.1847, same since key is the same.\n\n# split key for new value:\nkey, subkey = random.split(key)\nrandom.normal(subkey) # 0.7692, different now.\n\n# to split multiple subkeys (useful for parallel)\nkey, subkeys = random.split(key, num=10)\n</code></pre>"},{"location":"deeplearning/jax_tutorial/#pytree","title":"Pytree","text":"<p>Any nested data structures.</p> <p>a pytree is a container of leaf elements and/or more pytrees. Containers include lists, tuples, and dicts. A leaf element is anything that\u2019s not a pytree, e.g. an array.</p> <p>If nested, note that the container types do not need to match. </p> <p>A single \u201cleaf\u201d, i.e. a non-container object, is also considered a pytree.</p> <pre><code>example_trees = [\n    [1, 'a', object()],\n    (1, (2, 3), ()),\n    [1, {'k1': 2, 'k2': (3, 4)}, 5],\n    {'a': 2, 'b': (2, 3)},\n    jnp.array([1, 2, 3]),\n]\n\n# Let's see how many leaves they have:\nfor pytree in example_trees:\n  leaves = jax.tree_leaves(pytree)\n  print(f\"{repr(pytree):&lt;45} has {len(leaves)} leaves: {leaves}\")\n\n'''\n[1, 'a', &lt;object object at 0x7fded60bb8c0&gt;]   has 3 leaves: [1, 'a', &lt;object object at 0x7fded60bb8c0&gt;]\n(1, (2, 3), ())                               has 3 leaves: [1, 2, 3]\n[1, {'k1': 2, 'k2': (3, 4)}, 5]               has 5 leaves: [1, 2, 3, 4, 5]\n{'a': 2, 'b': (2, 3)}                         has 3 leaves: [2, 2, 3]\nDeviceArray([1, 2, 3], dtype=int32)           has 1 leaves: [DeviceArray([1, 2, 3], dtype=int32)]\n'''    \n</code></pre> <p>e.g., Model parameters can be viewed as a pytree.</p> <pre><code>tree = [\n    [1, 2, 3],\n    [1, 2],\n    [1, 2, 3, 4]\n]\n\n# apply a function on pytree's leaves\njax.tree_map(lambda x: x*2, tree)\n\n# apply a function on two (or more) pytrees' leaves\n# note: the pytrees' structure must be the same!\njax.tree_multimap(lambda x, y: x + y, tree, tree)\n</code></pre> <p>To use custom data container (e.g., custom class) as leaves, you should register it with flatten &amp; unflatten methods. Usually, you don't want to do this... Internal classes (e.g., <code>NamedTuple</code>) can handle most cases.</p> <p>Tips:</p> <ul> <li> <p><code>None</code> is treated as an empty node, insteaad of a leaf:</p> <pre><code>jax.tree_leaves([None, None, None]) # []\n</code></pre> </li> </ul> <ul> <li>since array  <code>shape</code> are tuples, it will be treated as a node instead of a leaf.</li> </ul>"},{"location":"deeplearning/jax_tutorial/#pmap","title":"pmap","text":"<p><code>jax.pmap</code> performs parallel evaluation. Different from <code>jax.vmap</code> which vectorizes on the same device, <code>jax.pmap</code> aims to map the function to different devices and run in parallel (data parallelism).</p> <pre><code># check how many devices we have\njax.devices()\nn_devices = jax.local_device_count() \n\nx = jnp.array([1., 2., 3.])\ny = jnp.array([0., 0., 0.])\n\n# batched inputs\nxs = jnp.stack([x, x], axis=0)\nys = jnp.stack([y, y], axis=0)\n\n# call pmap\nzs = jax.pmap(func)(xs, ys) # ShardedDeviceArray (on different devices)\n</code></pre> <p>communication between devices by collective ops (<code>jax.lax.p*</code>):</p> <pre><code>def normalized_convolution(x, w):\n  output = []\n  for i in range(1, len(x)-1):\n    output.append(jnp.dot(x[i-1:i+2], w))\n  output = jnp.array(output)\n  # axis_name is just an identifier to match between pmap and psum\n  return output / jax.lax.psum(output, axis_name='p')\n\njax.pmap(normalized_convolution, axis_name='p')(xs, ws)\n</code></pre> <p>nesting <code>vmap</code> and <code>pmap</code>:</p> <pre><code># any order is OK.\njax.vmap(jax.pmap(f, axis_name='i'), axis_name='j')\n</code></pre> <p>An example:</p> <pre><code>from typing import NamedTuple, Tuple\nimport functools\n\nclass Params(NamedTuple):\n  weight: jnp.ndarray\n  bias: jnp.ndarray\n\n\ndef init(rng) -&gt; Params:\n  \"\"\"Returns the initial model params.\"\"\"\n  weights_key, bias_key = jax.random.split(rng)\n  weight = jax.random.normal(weights_key, ())\n  bias = jax.random.normal(bias_key, ())\n  return Params(weight, bias)\n\n\ndef loss_fn(params: Params, xs: jnp.ndarray, ys: jnp.ndarray) -&gt; jnp.ndarray:\n  \"\"\"Computes the least squares error of the model's predictions on x against y.\"\"\"\n  pred = params.weight * xs + params.bias\n  return jnp.mean((pred - ys) ** 2)\n\nLEARNING_RATE = 0.005\n\n# So far, the code is identical to the single-device case. Here's what's new:\n\n# Remember that the `axis_name` is just an arbitrary string label used\n# to later tell `jax.lax.pmean` which axis to reduce over. Here, we call it\n# 'num_devices', but could have used anything, so long as `pmean` used the same.\n@functools.partial(jax.pmap, axis_name='num_devices')\ndef update(params: Params, xs: jnp.ndarray, ys: jnp.ndarray) -&gt; Tuple[Params, jnp.ndarray]:\n  \"\"\"Performs one SGD update step on params using the given data.\"\"\"\n\n  # Compute the gradients on the given minibatch (individually on each device).\n  loss, grads = jax.value_and_grad(loss_fn)(params, xs, ys)\n\n  # Combine the gradient across all devices (by taking their mean).\n  grads = jax.lax.pmean(grads, axis_name='num_devices')\n\n  # Also combine the loss. Unnecessary for the update, but useful for logging.\n  loss = jax.lax.pmean(loss, axis_name='num_devices')\n\n  # Each device performs its own update, but since we start with the same params\n  # and synchronise gradients, the params stay in sync.\n  new_params = jax.tree_multimap(\n      lambda param, g: param - g * LEARNING_RATE, params, grads)\n\n  return new_params, loss\n\n# Generate true data from y = w*x + b + noise\ntrue_w, true_b = 2, -1\nxs = np.random.normal(size=(128, 1))\nnoise = 0.5 * np.random.normal(size=(128, 1))\nys = xs * true_w + true_b + noise\n\n# Initialise parameters and replicate across devices.\nparams = init(jax.random.PRNGKey(123))\nn_devices = jax.local_device_count()\nreplicated_params = jax.tree_map(lambda x: jnp.array([x] * n_devices), params)\n\ndef split(arr):\n  \"\"\"Splits the first axis of `arr` evenly across the number of devices.\"\"\"\n  return arr.reshape(n_devices, arr.shape[0] // n_devices, *arr.shape[1:])\n\n# Reshape xs and ys for the pmapped `update()`.\nx_split = split(xs)\ny_split = split(ys)\n\ndef type_after_update(name, obj):\n  print(f\"after first `update()`, `{name}` is a\", type(obj))\n\n# Actual training loop.\nfor i in range(1000):\n\n  # This is where the params and data gets communicated to devices:\n  replicated_params, loss = update(replicated_params, x_split, y_split)\n\n  if i % 100 == 0:\n    # Note that loss is actually an array of shape [num_devices], with identical\n    # entries, because each device returns its copy of the loss.\n    # So, we take the first element to print it.\n    print(f\"Step {i:3d}, loss: {loss[0]:.3f}\")\n\n\n# Like the loss, the leaves of params have an extra leading dimension,\n# so we take the params from the first device.\nparams = jax.device_get(jax.tree_map(lambda x: x[0], replicated_params))\n</code></pre> <p>Tips:</p> <ul> <li><code>pmap</code> will call <code>jit</code> internally.</li> </ul>"},{"location":"deeplearning/jax_tutorial/#misc","title":"misc","text":"<ul> <li> <p>synchronization for timing:</p> <pre><code>jnp.dot(a, b).block_until_ready()\n</code></pre> </li> </ul> <ul> <li> <p>debugging <code>NaN</code>s:</p> <ul> <li>run with <code>JAX_DEBUG_NANS=True</code>, or</li> </ul> <ul> <li> <p>add at the top of main:</p> <pre><code>from jax.config import config\nconfig.update(\"jax_debug_nans\", True)\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>use fp64:</p> <ul> <li>run with <code>JAX_ENABLE_X64=True</code>, or</li> </ul> <ul> <li> <p>add at the top of main:</p> <pre><code>from jax.config import config\nconfig.update(\"jax_enable_x64\", True)\n</code></pre> </li> </ul> </li> </ul>"},{"location":"deeplearning/mAP_understand/","title":"mAP (mean Average Precision)","text":"<p>(A good tutorial with graphs)</p> <p>A metric usually used in object detection.</p> <p>mAP = mean AP for all classes.</p> <p>And the calculation of AP is like the AUC of ROC in binary classification:</p>"},{"location":"deeplearning/mAP_understand/#ap","title":"AP","text":"<pre><code># for each class's `preds` and `gts`, assert both non empty.\nTHRESH = 0.5\n\nmatched = np.zeros(len(gts))\ntp = np.zeros(len(preds))\nfp = np.zeros(len(preds))\n\npreds = sorted(preds, key=\"confidence\", decreasing=True)\n# for each pred\nfor i, pred in enumerate(preds):\n    max_iou = 0\n    max_id = -1\n    # brute-force enumerate gts of the same label!\n    for j, gt in enumearte(gts): \n        iou = get_iou(pred, gt)\n        if iou &gt; max_iou:\n            max_iou = iou\n            max_id = j\n    if max_iou &gt; THRESH and matched[max_id] == 0:\n        matched[max_id] = 1\n        tp[i] = 1\n    else:\n        fp[i] = 1\n\ntp = np.cumsum(tp)\nfp = np.cumsum(fp)\nrecall = tp / len(gts) # increasing\nprecision = tp / (tp + fp + 1e-6) # zig-zag\n\n### VOC 2007 metric, calculate AUC on 11 discrete points.\nap07 = 0\nfor t in np.arange(0, 1.1, 0.1):\n    if np.sum(recall &gt;= t) == 0:\n        p = 0\n    else:\n        p = np.max(precision[recall &gt;= t])\n    ap07 += p / 11\n\n### VOC after 2007, continuous AUC\nap = 0\nrecall = np.concatenate([0], recall, [1])\nprecision = np.concatenate([0], precision, [0])\n# smooth out the zig-zag\nfor i in range(len(precision)-1, 0, -1):\n    precision[i-1] = np.maximum(precision[i-1], precision[i])\nxs = np.where(recall[1:] != recall[:-1])[0]\nap = np.sum((recall[xs + 1] - recall[xs]) * precision[xs + 1])\n</code></pre> <p>illustration of VOC 07:</p> <p></p> <p>illustration of VOC after 07:</p> <p></p>"},{"location":"deeplearning/mAP_understand/#other-notations","title":"Other Notations","text":"<p>usually used in COCO dataset:</p> <ul> <li>AP@0.5: AP with threshold = 0.5</li> <li>AP@[.5:.95]: average AP (mAP) with threshold in <code>arange(0.5, 0.95, 0.05)</code>, the AP is not averaged on classes, but on the IoU thresholds.</li> </ul>"},{"location":"deeplearning/pandas_tutorial/","title":"Pandas","text":"<p>Credit to <code>https://github.com/hangsz/pandas-tutorial</code></p> <pre><code>import numpy as np\nimport pandas as pd\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#io","title":"IO","text":"<pre><code># load\ndf = pd.read_csv(path, header=None) # no column names (first line is data)\n\n# save\ndf.to_csv(path, header=False, index=False) # do not write row and column names (will be default int)\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#data-structure","title":"Data Structure","text":""},{"location":"deeplearning/pandas_tutorial/#series-ordered-indexed-homogenous-one-dimensional","title":"Series (Ordered, Indexed, Homogenous, One-Dimensional)","text":"<pre><code>pd.Series(data=None, index=None, dtype=None, name=None, copy=False)\n# index := range(0, data.shape[0])\n# dtype := float64\n\ns = pd.Series([1,2,3], ['a','b','c'])\ns = pd.Series({'a':1, 'b':2, 'c':3}) # indexed data\n\n## attributes\ns.name\ns.values\ns.index\ns.dtype\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#dataframe-indexed-heterogenous-two-dimensional","title":"DataFrame (Indexed, Heterogenous, Two-Dimensional)","text":"<p>Series of Series.</p> <pre><code>pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)\n# index := range(0, data.shape[0])\n# columns := range(0, data.shape[1])\n\ndata = [[1,2,3],\n        [4,5,6]]\nindex = ['a','b']\ncolumns = ['A','B','C']\ndf = pd.DataFrame(data=data, index = index, columns = columns)\n\n## attributes\ndf.index\ndf.columns\ndf.values\ndf.dtypes # of every column\ndf.shape\ndf.size\ndf.head()\ndf.tail()\ndf.memory_usage(deep=False) # deep: whether count reference\ndf.descrive(include='all') # simple stats of columns\n\n## create from file\ndf = pd.read_csv(filepath_or_buffer, sep=',', header='infer', index_col=None, names=None)\n# If csv has no header: set header=None\n# index_col=None: create a new range. \n# index_col=0: use the first col \n# index_col='name': use the 'name' col\n\ndf = pd.read_excel(io, sheetname=0, header=0)\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#manipulate-data","title":"Manipulate Data","text":""},{"location":"deeplearning/pandas_tutorial/#series","title":"Series","text":"<pre><code>### Access\nmask = [True,True,False]\n## [], index\ns[0]\ns[0:2]\ns[[0,1]]\ns[mask]\n## .loc[] == []\ns.loc['a']\n## .iloc[], position\ns.iloc[0]\ns.iloc[0:2]\ns.iloc[[0,2]]\ns.iloc[mask]\n\n### Modify value\ns[0] = 1\ns.replace(to_replace, value, inplace=False) # can replace a list of values\n\n### Modify index\ns.index = new_index\ns.rename(index=None, level=None, inplace=False)\n\n### append\ns.loc[100] = 100\n# `s[100] = 100` lead to error, use [] only to access.\ns.append(s2, ignore_index=False) # ignore_index: erase index of s2\n\n### delete\ndel s[100]\ns.drop([100, 'a'])\n\n### unique\ns.unique()\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#dataframe","title":"DataFrame","text":"<pre><code>data = [[1,2,3],\n        [4,5,6]]\nindex = ['a','b']\ncolumns = ['A','B','C']\ndf = pd.DataFrame(data=data, index=index, columns = columns)\n\n### access\n\n## []\ndf['A'] # column, return Series\ndf[['A', 'B']] # multiple columns, return DF\n# `df[0]` error, 0 is not a column name.\ndf[0:1] # row, return DF! use df.iloc[0] to get same data as Series\ndf[mask] # row, return DF\n\n## .loc()\ndf.loc['b'] # == df.loc['b', :], return Series\n# `df.loc['B']` error, 'B' not in index (rows)\ndf.loc[:, 'B'] # return Series\ndf.loc['b', 'B'] # return scalar\ndf.loc[['a', 'b'], 'B']\ndf.loc[mask, 'B']\n\n## .iloc()\ndf.iloc[0,0]\ndf.iloc[0:2, 0]\ndf.iloc[[0,1], [0,2]] # return DF\ndf.iloc[mask1, mask2]\n\n### modify value\ndf.loc['a', 'A'] = 0\n\n### modify name\ndf.index = [...]\ndf.columns = [...]\n\n### append rows\ndf.loc['c'] = [7,8,9]\npd.concat([df1, df2], axis=0)\n\n### append cols\ndf['D'] = [10, 11]\npd.concat([df1, df2], axis=1)\n\n### remove\ndf.drop(['a', 'b'], axis=0) # row\ndf.drop(['A', 'B'], axis=1) # col\n\n### unique\ndf.drop_duplicates()\n\n\n### List as column\n## select non empty rows\ndf[df['list'].str.len() &gt; 0]\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#conditioned-query","title":"Conditioned Query","text":"<pre><code>df.loc[df.country == 'Italy']\ndf.loc[df.country.isin(['Italy', 'New Zealand'])]\ndf.loc[(df.points&gt;80) &amp; (df.country=='Italy')] # Never use `and`, `or`. Must use ()&amp;(), ()|()\ndf.loc[df.price.notnull()] # or isnull()\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#grouping-and-sorting","title":"Grouping and Sorting","text":"<pre><code>df.groupby(by=None, axis=0, ...)\n# combine rows, followed by a function.\n\n&gt;&gt;&gt; df\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n\n&gt;&gt;&gt; df.groupby(['Animal']).mean()\n        Max Speed\nAnimal\nFalcon      375.0\nParrot       25.0\n\n&gt;&gt;&gt; df.groupby(['Animal'])\n&lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x000002B607F06128&gt;\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#missing-values","title":"Missing values","text":"<pre><code>### find na rows\n\nis_NaN = df.isnull()\nrow_has_NaN = is_NaN.any(axis=1)\nrows_with_NaN = df[row_has_NaN]\nprint(rows_with_NaN)\n\n### fillna\ndef encode_label(train, columns, test=None):\n    from sklearn.preprocessing import LabelEncoder\n    for column in columns:\n        train[column] = train[column].fillna('na')\n        enc = LabelEncoder()\n        enc.fit(train[column])\n        train[column] = enc.transform(train[column])\n        if test is not None:\n            test[column] = test[column].fillna('na')\n            test[column] = enc.transform(test[column])\n    return train if test is None else train, test\n\ndef impute(train, columns, test=None):\n    from sklearn.impute import SimpleImputer\n    for column in columns:\n        imp = SimpleImputer(missing_values=np.nan, strategy='mean')\n        imp.fit(train[[column]])\n        train[column] = imp.transform(train[[column]])\n        if test is not None:\n            test[column] = imp.transform(test[[column]])      \n    return train if test is None else train, test\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#melting","title":"Melting","text":"<pre><code>df.melt(id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)\n# id_vars[list]: cols to use as identifier variables. If None, use nothing.\n# value_vars[list]: cols to unpivot. If None, use all cols not in id_vars.\n# var_name[scalar]:  name for 'variable' col.\n# value_name[scalar]: name for 'value' col.\n&gt;&gt;&gt; df\n     Name    Course  Age\n0    John   Masters   27\n1     Bob  Graduate   23\n2  Shiela  Graduate   21\n\n&gt;&gt;&gt; df.melt(id_vars=['Name'])\n     Name variable     value\n0    John   Course   Masters\n1     Bob   Course  Graduate\n2  Shiela   Course  Graduate\n3    John      Age        27\n4     Bob      Age        23\n5  Shiela      Age        21\n\n&gt;&gt;&gt; df.melt(id_vars=['Name', 'Course'], value_vars=['Age'])\n     Name    Course variable  value\n0    John   Masters      Age     27\n1     Bob  Graduate      Age     23\n2  Shiela  Graduate      Age     21\n\n&gt;&gt;&gt; df.melt(value_vars=['Age'])\n  variable  value\n0      Age     27\n1      Age     23\n2      Age     21\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#pivoting","title":"Pivoting","text":"<pre><code>df.pivot(index=None, columns=None, values=None)\n# index[str/obj]: index for new df. If None, use current.\n# columns[str/obj]: col for new df.\n# values[str/obj/list]: If None, use all remained.\n\n&gt;&gt;&gt; df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two', 'two'],\n                      'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                      'baz': [1, 2, 3, 4, 5, 6],\n                      'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n&gt;&gt;&gt; df\n    foo   bar  baz  zoo\n0   one   A    1    x\n1   one   B    2    y\n2   one   C    3    z\n3   two   A    4    q\n4   two   B    5    w\n5   two   C    6    t\n\n&gt;&gt;&gt; df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n      baz       zoo\nbar   A  B  C   A  B  C\nfoo\none   1  2  3   x  y  z\ntwo   4  5  6   q  w  t\n\n&gt;&gt;&gt; df.pivot(index='foo', columns='bar', values='baz')\nbar  A   B   C\nfoo\none  1   2   3\ntwo  4   5   6\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#merging","title":"Merging","text":"<pre><code>pd.merge(left, right, how='inner', on=None)\n# how: inner, outer, left, right\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#options","title":"Options","text":"<pre><code>pd.get_option(key)\npd.set_option(key, value)\npd.reset_option(key)\n\n\"display.max_rows\"\n\"display.max_cols\"\n\"display.precision\"\n\"display.max_colwidth\"\n</code></pre>"},{"location":"deeplearning/pandas_tutorial/#others","title":"Others","text":"<pre><code># arithm\ndf.add(other, axis='columns')\ndf1.dot(df2)\ndf.abs()\ndf.clip(mn, mx)\ndf.sum(axis='rows') \n\n# functional\ndf.apply(func, axis=0, raw=False, ...)\ndf.pipe(func, *args, **kwargs)\n</code></pre>"},{"location":"deeplearning/pytorch_cpp_extension/","title":"Custom C++ &amp; CUDA extensions","text":""},{"location":"deeplearning/pytorch_cpp_extension/#pitfalls","title":"Pitfalls","text":"<ul> <li> <p>always check the input tensor is <code>contiguous</code> !!!</p> <p>else <code>.data_ptr&lt;float&gt;()</code> will generate a mess and you never get the expected values.</p> </li> </ul> <ul> <li></li> </ul>"},{"location":"deeplearning/pytorch_cpp_extension/#bindings","title":"Bindings","text":""},{"location":"deeplearning/pytorch_cpp_extension/#ahead-of-time-setup","title":"Ahead of Time (setup)","text":"<pre><code>#include &lt;pybind11/pybind11.h&gt;\n#include \"src/add.hpp\"\n\n/*\n * macro PYBIND11_MODULE(module_name, m)\n *     module_name: should not be in quotes. import this name in python.\n *     m: pybind11::module interface\n * */\nPYBIND11_MODULE(add_cpp, m) {\n    m.def(\"forward\", &amp;Add_forward_cpu, \"Add forward\");\n    m.def(\"backward\", &amp;Add_backward_cpu, \"Add backward\");\n\n}\n</code></pre> <pre><code>import os\nimport glob\nfrom setuptools import setup\nfrom torch.utils.cpp_extension import BuildExtension, CppExtension, CUDAExtension\n\nsource_files = glob.glob('src/*.cpp') + ['bindings.cpp']\n\n'''\nname: import name in python, should be the same as in bindings.cpp\n'''\nsetup(\n    name = 'add_cpp',\n    ext_modules = [\n        CppExtension(\n            name = 'add_cpp', \n            sources = source_files,\n            extra_compile_args = {\n                'cxx': ['-O3'],\n            }\n        ),\n    ],\n    cmdclass = {'build_ext': BuildExtension}\n)\n</code></pre> <pre><code>import torch\nfrom torch.autograd import Function\nimport torch.nn as nn\n\nimport add_cpp\n\n# Function\nclass _add(Function):\n    @staticmethod\n    def forward(ctx, x, y):\n        return add_cpp.forward(x, y)\n\n    @staticmethod\n    def backward(ctx, gradOutput):\n        gradX, gradY = add_cpp.backward(gradOutput)\n        return gradX, gradY\n\nadd = _add.apply\n\n\n# Module\nclass Add(nn.Module):\n    def __init__(self):\n        super(Add, self).__init__()\n\n    def forward(self, x, y):\n        return add(x, y)\n</code></pre> <pre><code>from add import add, Add\nimport torch\n\n'''\nstatic setup, run first:\npython setup.py install\n'''\n\none = torch.ones(1)\n\nadder = Add()\nprint(adder(one, one))\n\nprint(add(one, one))\n</code></pre>"},{"location":"deeplearning/pytorch_cpp_extension/#just-in-time-load","title":"Just in Time (load)","text":"<p>Better use this.</p> <pre><code>import os\nimport glob\nfrom torch.utils.cpp_extension import load\n\nsource_files = glob.glob('src/*.cpp') + ['bindings.cpp']\n\n'''\ndynamic load of extensions.\n    name: should be the same module_name as in bindings.cpp\n'''\n_backend = load(\n    name='_backend',\n    extra_cflags=['-O3', '-std=c++17'],\n    sources=source_files,\n)\n</code></pre> <pre><code>import torch\nfrom torch.autograd import Function\nimport torch.nn as nn\n\nfrom backend import _backend\n\n'''\nEncapsulation of raw methods.\npytorch has functional and Module level encapsulations.\n'''\n\n# Function\nclass _add(Function):\n    @staticmethod\n    def forward(ctx, x, y):\n        return _backend.forward(x, y)\n\n    @staticmethod\n    def backward(ctx, gradOutput):\n        gradX, gradY = _backend.backward(gradOutput)\n        return gradX, gradY\n\nadd = _add.apply\n\n# Module\nclass Add(nn.Module):\n    def __init__(self):\n        super(Add, self).__init__()\n\n    def forward(self, x, y):\n        return add(x, y)\n</code></pre>"},{"location":"deeplearning/pytorch_cpp_extension/#torch-c-api","title":"Torch C++ API","text":""},{"location":"deeplearning/pytorch_cpp_extension/#header","title":"Header","text":"<pre><code>#include &lt;ATen/ATen.h&gt; // at::\n#include &lt;torch/extension.h&gt; // torch::\n</code></pre>"},{"location":"deeplearning/pytorch_cpp_extension/#aten","title":"ATen","text":"<p>A Tensor Library for CPU &amp; GPU. Not differentiable.</p> <pre><code>#include &lt;ATen/ATen.h&gt;\n\nat::Tensor a = at::randn({2, 2});\nbool gpu = at::cuda::is_available();\n</code></pre> <pre><code>// shape\nint x = a.size(idx);\nauto sizes = a.sizes();\n\n// access raw data\na.data_ptr&lt;int&gt;()\n\n// property\na.device();\na.dtype();\n</code></pre> <pre><code>at::cuda::getCurrentCUDAStream();\nat::device(a.device()).dtype(at::ScalarType::Int));\n</code></pre>"},{"location":"deeplearning/pytorch_cpp_extension/#c-frontend","title":"C++ Frontend","text":"<p>high level library providing CPU &amp; GPU tensor support with automatic differentiation.</p> <pre><code>torch::Tensor x = torch::ones({2,3,4});\nx.sizes();\nx.size(0);\n</code></pre> <p>A full example:</p> <pre><code>#include &lt;torch/torch.h&gt;\n\nstruct Net : torch::nn::Module {\n  // constructor\n  Net()\n      : conv1(torch::nn::Conv2dOptions(1, 10, /*kernel_size=*/5)),\n        conv2(torch::nn::Conv2dOptions(10, 20, /*kernel_size=*/5)),\n        fc1(320, 50),\n        fc2(50, 10) {\n    register_module(\"conv1\", conv1);\n    register_module(\"conv2\", conv2);\n    register_module(\"conv2_drop\", conv2_drop);\n    register_module(\"fc1\", fc1);\n    register_module(\"fc2\", fc2);\n  }\n\n  torch::Tensor forward(torch::Tensor x) {\n    x = torch::relu(torch::max_pool2d(conv1-&gt;forward(x), 2));\n    x = torch::relu(\n        torch::max_pool2d(conv2_drop-&gt;forward(conv2-&gt;forward(x)), 2));\n    x = x.view({-1, 320});\n    x = torch::relu(fc1-&gt;forward(x));\n    x = torch::dropout(x, /*p=*/0.5, /*training=*/is_training());\n    x = fc2-&gt;forward(x);\n    return torch::log_softmax(x, /*dim=*/1);\n  }\n\n  torch::nn::Conv2d conv1;\n  torch::nn::Conv2d conv2;\n  torch::nn::FeatureDropout conv2_drop;\n  torch::nn::Linear fc1;\n  torch::nn::Linear fc2;\n};\n</code></pre>"},{"location":"deeplearning/pytorch_grad/","title":"autograd","text":""},{"location":"deeplearning/pytorch_grad/#basics","title":"basics","text":"<p>Gradients can only be calculated for float tensor.</p> <pre><code>import torch\nimport numpy as np\n\n# default Tensor will not requires grad\nx = torch.randn(2, 2)\nprint(x.requires_grad) # False\n\n# check if requires grad\nprint(x.requires_grad)\nprint(x) # if x requires_grad, it will print at the end.\n\n# ways to enable gradient\nx = torch.randn(2, 2, requires_grad=True) # at creation\nx.requires_grad_(True) # in-place function\nx.requires_grad = True # directly change attribute\n\n# grad\nprint(x.grad) # None, the grad value, only meaningful after backward() is called.\nprint(x.grad_fn) # None, the grad function.\nprint(x.is_leaf) # True. see below.\n</code></pre>"},{"location":"deeplearning/pytorch_grad/#leaf","title":"leaf","text":"<p>A node is leaf if:</p> <ul> <li>Initialized explicitly.</li> <li>Created by operations on tensors that all do not requires_grad.</li> <li>Created by <code>.detach()</code>.</li> </ul> <p>Gradients are only populated to tensors with both <code>required_grad</code> and <code>is_leaf</code> are <code>True</code>.</p>"},{"location":"deeplearning/pytorch_grad/#backward","title":"backward","text":"<p>backward will calculate the target tensor's gradients w.r.t all is_leaf and requires_grad tensors.</p> <pre><code># z must be a scalar.\nz.backward() # == z.backward(torch.tensor(1.0))\n\n# if z is vector, pass in weights the same shape as z.\nz.backward(torch.Tensor([1.0 ,1.0 ,1.0])) \n</code></pre>"},{"location":"deeplearning/pytorch_grad/#dynamic-computation-graph","title":"dynamic computation graph","text":"<p>A DAG to track gradient flow.</p> <p>Example:</p> <pre><code>import torch\n\nx = torch.tensor(1.0, requires_grad = True)\ny = torch.tensor(2.0)\nz = x * y\n\nz.backward()\n\n# dz/dx = 2\nprint(x.grad.data)\n</code></pre> <p></p>"},{"location":"deeplearning/pytorch_grad/#implement-a-simple-autograd","title":"Implement a simple <code>autograd</code>","text":""},{"location":"deeplearning/pytorch_internals/","title":"Pytorch internals","text":""},{"location":"deeplearning/pytorch_internals/#pytorch-internals","title":"PyTorch Internals","text":"<p>A summary of ezyang's blog.</p>"},{"location":"deeplearning/pytorch_internals/#tensor-view-and-storage","title":"Tensor View and Storage","text":"<pre><code>## View (logical)\n# shape: [2, 2], logical shape\n# stride: [2, 1], the stride for each axis\n# offset: 0, the offset of storage pointer\nx = [[1, 2],\n     [3, 4]]\n\n## Storage (physical)\n# always a 1D contiguous array.\nx.storage = [1, 2, 3, 4]\n\n## Slicing\ny = x[1:] # [3, 4], shape = [2], stride = [1], offset = 2\nz = x[:, 0] # [1, 3], shape = [2], stride = [2], offset = 0\n\n## Stride and Index:\ndef index_to_pos(index, stride, offset=0):\n    # index: logical, same dimension as stride\n    # pos: physical, 1d value.\n    # this works for both continuous and discoutinuous tensors!\n    pos = offset\n    for i, s in zip(index, stride):\n        pos += i * s\n    return pos\n\ndef strides_from_shape(shape):\n    # assuming a continuous tensor!\n    # example: shape [3, 4, 5] --&gt; stride []\n    layout = [1]\n    offset = 1\n    for s in reversed(shape[1:]): # [5, 4]\n        layout.append(s * offset) # [1, 5, 20]\n        offset = s * offset # [5, 20]\n    return tuple(reversed(layout)) # [20, 5, 1]\n\ndef is_contiguous(stride):\n    # continuous tensor &lt;==&gt; mono-decreasing stride &amp;&amp; last stride is 1\n    last = stride[0]\n    for s in stride[1:]:\n        if s &gt; last: \n            return False\n        else:\n            last = s\n    if last &gt; 1:\n        return False\n    else;\n        return True\n</code></pre> <ul> <li>Each tensor always has a view-storage pair. </li> <li>Multiple tensor views can share the same storage.</li> </ul> <ul> <li> <p>Tensor trinity that decides its true implementation:</p> <ul> <li>device: CPU, CUDA, XLA, ...</li> </ul> <ul> <li>layout: Strided, Sparse, ...</li> </ul> <ul> <li>dtype: int, float, ...</li> </ul> </li> </ul>"},{"location":"deeplearning/pytorch_internals/#source-structure","title":"Source Structure","text":"<pre><code>torch/ # torch frontend\ntorch/csrc/ # c++ frontent, python bindings, autograd engine, JIT compiler\naten/ # a tensor library, most tensor operations.\nc10/ # implementation of core abstractions.\n</code></pre> <p>Mostly we would want to extend the <code>aten</code> part for new operators.</p> <p>First, you should register your op in some config file: detailed workflow</p> <p>Each op should be implemented in three versions:</p> <pre><code>myop_out(..., out) # write to out\n# usually the following two funcs can just call myop_out()\nmyop_(...) # inplace\nmyop() # return the output\n</code></pre> <p>Then you should write kernels as the real implementation.</p> <p>You'll need to <code>dispatch</code> based on <code>dtype</code>, and implement each (or use template).</p>"},{"location":"deeplearning/pytorch_internals/#workflow-efficiency","title":"Workflow efficiency","text":"<ul> <li>Editing headers sparingly, since it may cause re-compilation of lots of files...</li> <li>setup ccache</li> </ul>"},{"location":"deeplearning/pytorch_profiler/","title":"Pytorch profiler","text":""},{"location":"deeplearning/pytorch_profiler/#profiling-in-pytorch","title":"profiling in pytorch","text":"<p>Never use <code>time.time()</code> for CUDA time measuring!</p> <p>The correct way to go:</p> <pre><code>starter, ender = torch.cuda.Event(enable_timing=True), torch.cuda.Event(enable_timing=True)\n\nstarter.record()\n# do the things\nender.record(); torch.cuda.synchronize(); curr_time = starter.elapsed_time(ender); print(f\"{curr_time}\"); starter.record()\n</code></pre>"},{"location":"deeplearning/roc_auc_understand/","title":"ROC &amp; AUC","text":"<p>A metric traditionally used for binary classification task.</p>"},{"location":"deeplearning/roc_auc_understand/#sklearn-api","title":"sklearn API","text":"<pre><code>from sklearn import metrics\n\n# one step\nauc = metrics.roc_auc_score(truth, pred)\n\n# two steps\nfpr, tpr, thresholds = metrics.roc_curve(truth, pred)\nauc = metrics.auc(fpr, tpr)\n</code></pre>"},{"location":"deeplearning/roc_auc_understand/#great-illustration","title":"Great Illustration","text":""},{"location":"deeplearning/roc_auc_understand/#receiver-operation-curve","title":"Receiver Operation Curve","text":"<p>A graphic plot metric for binary classifier. </p> \\[ \\displaylines{ \\begin{eqnarray} TPR = \\frac{TP}{P}=\\frac {TP}{TP+FN} \\\\  FPR = \\frac{FP}{N}=\\frac {FP}{FP+TN} \\\\ \\end{eqnarray} } \\] <p>In binary classification, the prediction is usually a continuous variable. </p> <p>We need a threshold \\(T\\) to determine whether the prediction is positive or negative.</p> <p>ROC curve plots parametrically \\(TPR(T)\\) vs. \\(FPR(T)\\).</p>"},{"location":"deeplearning/roc_auc_understand/#area-under-the-curve","title":"Area Under the Curve","text":"<p>Use \\(TPR\\) as y axis and \\(FPR\\) as x axis.</p>"},{"location":"deeplearning/roc_auc_understand/#self-implementations","title":"Self Implementations","text":"<pre><code># naive thresholding (lot of duplicates)\ndef get_auc(truth, pred):\n    truth = np.array(truth)\n    pred = np.array(pred)\n    def get_tpr_fpr(truth, pred, thresh):\n        pred = (pred &gt;= thresh).astype(np.int)\n        tp = np.logical_and(truth == 1, pred == 1).sum()\n        tn = np.logical_and(truth == 0, pred == 0).sum()\n        fn = np.logical_and(truth == 1, pred == 0).sum()\n        fp = np.logical_and(truth == 0, pred == 1).sum()\n        tpr = tp / (tp + fn)\n        fpr = fp / (fp + tn)\n        return tpr, fpr\n    # get tprs, fprs\n    tprs = []\n    fprs = []\n    threshs = []\n    for thresh in np.arange(1, -0.01, -0.01): # descending, so we get [0,0] to [1,1]\n        tpr, fpr = get_tpr_fpr(truth, pred, thresh)\n        tprs.append(tpr)\n        fprs.append(fpr)\n        threshs.append(thresh)\n    # area\n    area = 0\n    for i in range(1, len(tprs)):\n        area += (tprs[i]+tprs[i-1])*(fprs[i]-fprs[i-1])/2\n    return area\n\n# we can simply use pred as thresholds!\ndef get_auc(truth, pred):\n    truth = np.array(truth)\n    pred = np.array(pred)\n    def get_tpr_fpr(truth, pred, thresh):\n        pred = (pred &gt;= thresh).astype(np.int)\n        tp = np.logical_and(truth == 1, pred == 1).sum()\n        tn = np.logical_and(truth == 0, pred == 0).sum()\n        fn = np.logical_and(truth == 1, pred == 0).sum()\n        fp = np.logical_and(truth == 0, pred == 1).sum()\n        tpr = tp / (tp + fn)\n        fpr = fp / (fp + tn)\n        return tpr, fpr\n    # get tprs, fprs\n    idx = np.argsort(pred)[::-1] # descending threshs\n    pred = pred[idx]\n    truth = truth[idx]\n    threshs = np.insert(pred, 0, pred[0]+1) # insert a large thresh at beginning to get [0,0]\n    tprs = [0]\n    fprs = [0]\n    for thresh in pred:\n        tpr, fpr = get_tpr_fpr(truth, pred, thresh)\n        tprs.append(tpr)\n        fprs.append(fpr)\n    # area\n    area = 0\n    for i in range(1, len(tprs)):\n        area += (tprs[i]+tprs[i-1])*(fprs[i]-fprs[i-1])/2\n    return area\n\n# amazing cumsum\ndef get_auc_final(truth, pred):\n    truth = np.array(truth)\n    pred = np.array(pred)\n\n    # get tprs, fprs\n    idx = np.argsort(pred)[::-1]\n    pred = pred[idx]\n    truth = truth[idx]\n\n    tprs = np.cumsum(truth)\n    fprs = np.cumsum(1 - truth)\n\n    tprs = tprs / tprs[-1] # get rate\n    fprs = fprs / fprs[-1]\n\n    tprs = np.insert(tprs, 0, 0)\n    fprs = np.insert(fprs, 0, 0)\n    threshs = np.insert(pred, 0, pred[0]+1)\n    # area\n    area = 0\n    for i in range(1, len(tprs)):\n        area += (tprs[i]+tprs[i-1])*(fprs[i]-fprs[i-1])/2\n    return area\n</code></pre>"},{"location":"deeplearning/wordcloud/","title":"Word Cloud","text":"<pre><code>pip install wordcloud\n</code></pre>"},{"location":"deeplearning/wordcloud/#cli","title":"CLI","text":"<pre><code>wordcloud_cli --text mytext.txt --imagefile wordcloud.png\n</code></pre>"},{"location":"deeplearning/wordcloud/#api","title":"API","text":"<pre><code>from wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ntext = open('constitution.txt').read()\n\nwordcloud = WordCloud().generate(text)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n</code></pre> <pre><code>Parameters\n    ----------\n    font_path : string\n        Font path to the font that will be used (OTF or TTF).\n        Defaults to DroidSansMono path on a Linux machine. If you are on\n        another OS or don't have this font, you need to adjust this path.\n    width : int (default=400)\n        Width of the canvas.\n    height : int (default=200)\n        Height of the canvas.\n    prefer_horizontal : float (default=0.90)\n        The ratio of times to try horizontal fitting as opposed to vertical.\n        If prefer_horizontal &lt; 1, the algorithm will try rotating the word\n        if it doesn't fit. (There is currently no built-in way to get only\n        vertical words.)\n    mask : nd-array or None (default=None)\n        If not None, gives a binary mask on where to draw words. If mask is not\n        None, width and height will be ignored and the shape of mask will be\n        used instead. All white (#FF or #FFFFFF) entries will be considerd\n        \"masked out\" while other entries will be free to draw on. [This\n        changed in the most recent version!]\n    contour_width: float (default=0)\n        If mask is not None and contour_width &gt; 0, draw the mask contour.\n    contour_color: color value (default=\"black\")\n        Mask contour color.\n    scale : float (default=1)\n        Scaling between computation and drawing. For large word-cloud images,\n        using scale instead of larger canvas size is significantly faster, but\n        might lead to a coarser fit for the words.\n    min_font_size : int (default=4)\n        Smallest font size to use. Will stop when there is no more room in this\n        size.\n    font_step : int (default=1)\n        Step size for the font. font_step &gt; 1 might speed up computation but\n        give a worse fit.\n    max_words : number (default=200)\n        The maximum number of words.\n    stopwords : set of strings or None\n        The words that will be eliminated. If None, the build-in STOPWORDS\n        list will be used. Ignored if using generate_from_frequencies.\n    background_color : color value (default=\"black\")\n        Background color for the word cloud image.\n    max_font_size : int or None (default=None)\n        Maximum font size for the largest word. If None, height of the image is\n        used.\n    mode : string (default=\"RGB\")\n        Transparent background will be generated when mode is \"RGBA\" and\n        background_color is None.\n    relative_scaling : float (default='auto')\n        Importance of relative word frequencies for font-size.  With\n        relative_scaling=0, only word-ranks are considered.  With\n        relative_scaling=1, a word that is twice as frequent will have twice\n        the size.  If you want to consider the word frequencies and not only\n        their rank, relative_scaling around .5 often looks good.\n        If 'auto' it will be set to 0.5 unless repeat is true, in which\n        case it will be set to 0.\n        .. versionchanged: 2.0\n            Default is now 'auto'.\n    color_func : callable, default=None\n        Callable with parameters word, font_size, position, orientation,\n        font_path, random_state that returns a PIL color for each word.\n        Overwrites \"colormap\".\n        See colormap for specifying a matplotlib colormap instead.\n        To create a word cloud with a single color, use\n        ``color_func=lambda *args, **kwargs: \"white\"``.\n        The single color can also be specified using RGB code. For example\n        ``color_func=lambda *args, **kwargs: (255,0,0)`` sets color to red.\n    regexp : string or None (optional)\n        Regular expression to split the input text into tokens in process_text.\n        If None is specified, ``r\"\\w[\\w']+\"`` is used. Ignored if using\n        generate_from_frequencies.\n    collocations : bool, default=True\n        Whether to include collocations (bigrams) of two words. Ignored if using\n        generate_from_frequencies.\n        .. versionadded: 2.0\n    colormap : string or matplotlib colormap, default=\"viridis\"\n        Matplotlib colormap to randomly draw colors from for each word.\n        Ignored if \"color_func\" is specified.\n        .. versionadded: 2.0\n    normalize_plurals : bool, default=True\n        Whether to remove trailing 's' from words. If True and a word\n        appears with and without a trailing 's', the one with trailing 's'\n        is removed and its counts are added to the version without\n        trailing 's' -- unless the word ends with 'ss'. Ignored if using\n        generate_from_frequencies.\n    repeat : bool, default=False\n        Whether to repeat words and phrases until max_words or min_font_size\n        is reached.\n    include_numbers : bool, default=False\n        Whether to include numbers as phrases or not.\n    min_word_length : int, default=0\n        Minimum number of letters a word must have to be included.\n    collocation_threshold: int, default=30\n        Bigrams must have a Dunning likelihood collocation score greater than this\n        parameter to be counted as bigrams. Default of 30 is arbitrary.\n        See Manning, C.D., Manning, C.D. and Sch\u00fctze, H., 1999. Foundations of\n        Statistical Natural Language Processing. MIT press, p. 162\n        https://nlp.stanford.edu/fsnlp/promo/colloc.pdf#page=22\n    Attributes\n    ----------\n    ``words_`` : dict of string to float\n        Word tokens with associated frequency.\n        .. versionchanged: 2.0\n            ``words_`` is now a dictionary\n    ``layout_`` : list of tuples (string, int, (int, int), int, color))\n        Encodes the fitted word cloud. Encodes for each word the string, font\n        size, position, orientation and color.\n</code></pre>"},{"location":"deeplearning/old/CVXPY_tutorial/","title":"CVXPY","text":""},{"location":"deeplearning/old/CVXPY_tutorial/#basics","title":"Basics","text":"<pre><code>import cvxpy as cp\nx = cp.Variable()\ny = cp.Variable()\n\nconstraints = [x + y == 1,\n               x - y &gt;= 1]\n\nobj = cp.Minimize((x-y)**2)\n\nprob = cp.Problem(obj, constraints)\nprob.solve()\n\nprint(prob.status)\nprint(prob.value)\nprint(x.value, y.value)\n</code></pre> <ul> <li> <p>Status:</p> <ul> <li> <p>optimal (<code>cp.OPTIMAL</code>)</p> <p>solved successfully.</p> </li> </ul> <ul> <li> <p>infeasible (<code>cp.INFEASIBLE</code>)</p> <p>eg. <code>Minimize(x), [x&gt;=1, x&lt;=0]</code></p> </li> </ul> <ul> <li> <p>unbounded (<code>cp.UNBOUNDED</code>)</p> <p>eg. only <code>Minimize(x)</code></p> </li> </ul> <ul> <li> <p>*_inaccurate</p> <p>if only get low accuracy result than desired.</p> </li> </ul> <ul> <li> <p>SolverError</p> <p>eg. not a DCP problem.</p> <p>should try other solvers. </p> </li> </ul> </li> </ul> <ul> <li> <p>Variables</p> <p>dimensions can be 0,1,2.</p> <pre><code>scalar = cp.Variable()\nvector = cp.Variable(5) # [5,]\nmatrix = cp.Variable((2,3)) # [2,3]\n</code></pre> <p>Numpy ndarray, Scipy sparse matrix is supported.</p> <pre><code># Problem data.\nm = 10\nn = 5\nnumpy.random.seed(1)\nA = numpy.random.randn(m, n)\nb = numpy.random.randn(m)\n\n# Construct the problem.\nx = cp.Variable(n)\nobjective = cp.Minimize(cp.sum_squares(A*x - b))\nconstraints = [0 &lt;= x, x &lt;= 1]\nprob = cp.Problem(objective, constraints)\n\nprint(\"Optimal value\", prob.solve())\nprint(\"Optimal var\")\nprint(x.value) # A numpy ndarray.\n</code></pre> </li> </ul> <ul> <li> <p>Constraints</p> <p>use ==, &gt;=, &lt;= for constraints.</p> <p>semidefinite</p> </li> </ul> <ul> <li> <p>Parameters</p> <p>Parameter is used to change the value of a constant without rebuilding the Problem.</p> <p>Can be attributed as nonpos, nonneg, ... (for DCP use)</p> <pre><code># Positive scalar parameter.\nm = cp.Parameter(nonneg=True)\n\n# Column vector parameter with unknown sign (by default).\nc = cp.Parameter(5)\n\n# Matrix parameter with negative entries.\nG = cp.Parameter((4, 7), nonpos=True)\n\n# Assigns a constant value to G.\nG.value = -numpy.ones((4, 7))\n\n# Create parameter, then assign value.\nrho = cp.Parameter(nonneg=True)\nrho.value = 2\n\n# Initialize parameter with a value.\nrho = cp.Parameter(nonneg=True, value=2)\n</code></pre> </li> </ul>"},{"location":"deeplearning/old/CVXPY_tutorial/#dcp","title":"DCP","text":"<p>DCP is used to ensure the optimization problem is convex. (sufficient but not necessary)</p> <ul> <li> <p>Expressions</p> <p>formed by </p> <ul> <li>Variable, Parameter, numerical constants (support ndarray) </li> <li><code>+,-,*,/</code></li> <li>cvxpy functions</li> </ul> <p>Properties:<code>shape, size, ndim, sign, curvature</code></p> <ul> <li>shape, size, ndim</li> </ul> <ul> <li> <p>sign</p> <p>ZERO, UNKNOWN, NONPOSITIVE, NONNEGATIVE</p> </li> </ul> <ul> <li> <p>curvature</p> <p>AFFINE, CONSTANT, CONVEX, CONCAVE, UNKNOWN  </p> </li> </ul> </li> </ul> <ul> <li> <p>DCP tree analysis</p> <p></p> </li> </ul> <ul> <li> <p>DCP rules</p> <ul> <li>Objectice<ul> <li>Minimize(Convex)</li> <li>Maximize(Concave)</li> </ul> </li> <li>Constraints<ul> <li>affine == affine</li> <li>convex &lt;= concave</li> <li>concave &gt;= convex</li> </ul> </li> </ul> <p><code>prob.is_dcp()</code></p> </li> </ul>"},{"location":"deeplearning/old/CVXPY_tutorial/#atomic-functions","title":"Atomic functions","text":""},{"location":"deeplearning/old/CVXPY_tutorial/#index-and-slice-and-transpose-and-power","title":"Index and slice and transpose and power","text":"<p>like numpy</p> <p><code>expr.T</code></p> <p><code>expr**2</code> or <code>power(expr, 2)</code></p>"},{"location":"deeplearning/old/CVXPY_tutorial/#scalar-functions","title":"scalar functions","text":"<ul> <li>max() convex</li> </ul> <ul> <li> <p>min() concave </p> <p>consider min(concave, concave) is concave.</p> </li> </ul> <ul> <li> <p>norm(X) default is 2-norm.</p> <p>norm(X, 1), norm(X, \"inf\")</p> </li> </ul> <ul> <li>sum_squares(X) convex</li> </ul> <ul> <li>sum(X) affine</li> </ul> <ul> <li>quad_over_lin(X, y)</li> </ul> <ul> <li>trace(X) affine</li> </ul> <ul> <li>...</li> </ul>"},{"location":"deeplearning/old/CVXPY_tutorial/#element-wise-functions","title":"element-wise functions","text":"<ul> <li>abs(x) convex</li> </ul> <ul> <li> <p>entr(x)</p> <p>entropy, <code>-xlogx</code>, concave</p> </li> </ul> <ul> <li>exp(x), log(x)</li> </ul> <ul> <li>neg(x), pos(x), both convex</li> </ul> <ul> <li>sqrt(x), power(x)</li> </ul>"},{"location":"deeplearning/old/CVXPY_tutorial/#vectormatrix-functions","title":"vector/matrix functions","text":"<ul> <li>reshape() affine</li> <li>diag() affine</li> </ul>"},{"location":"deeplearning/old/Convex_optimization/","title":"Optimization","text":""},{"location":"deeplearning/old/Convex_optimization/#mathematical-optimization","title":"Mathematical optimization","text":"<p>Optimization arises everywhere.</p> <p>But most of them are intractable.</p> <p>Exception is the tractable Convex optimization.</p>"},{"location":"deeplearning/old/Convex_optimization/#convex-optimization","title":"Convex optimization","text":""},{"location":"deeplearning/old/Convex_optimization/#problem-definition-standard-form","title":"Problem definition (standard form)","text":"\\[ \\displaylines{ minimize \\ f_0(x) \\\\ subject \\ to \\ f_i(x) \\le 0, i=1,...,m \\\\ Ax=b } \\] <ul> <li>\\(x \\in R^n\\)</li> <li>equality constraints are linear</li> <li>\\(f_0, ..., f_m\\) are convex.</li> </ul>"},{"location":"deeplearning/old/Convex_optimization/#solvers","title":"Solvers","text":""},{"location":"deeplearning/old/Convex_optimization/#cvxpy","title":"CVXPY","text":"<pre><code>from cvxpy import *\n\nx = Variable(n)\ncost = sum_squares(A*x-b) + gamma*norm(x,1)\nprob = Problem(Minimize(cost), [norm(x, \"inf\")&lt;=1])\nopt_val = prob.solve()\nsolution = x.value\n</code></pre>"},{"location":"deeplearning/old/Convex_optimization/#applications","title":"Applications","text":""},{"location":"deeplearning/old/Convex_optimization/#portfolio-optimization","title":"Portfolio Optimization","text":""},{"location":"deeplearning/old/Convex_optimization/#regression-variation","title":"Regression variation","text":""},{"location":"deeplearning/old/Convex_optimization/#model-fitting","title":"Model fitting","text":""},{"location":"deeplearning/old/Convex_optimization/#regularized-loss-minimization","title":"Regularized loss minimization","text":"<ul> <li>Regression Problem</li> </ul> \\[ \\displaylines{   R^n \\rightarrow R\\cup\\{\\infty\\} } \\] <ul> <li> <p>Regularized Loss</p> <p>m examples, each has n dimensions.</p> </li> </ul> \\[ \\displaylines{   (1/m)\\sum_i^nL(x_i, y_i, \\theta) + r(\\theta) } \\] <p></p> <p>* \\(\\lambda &gt; 0\\) scales regularization.   * all lead to convex fitting problems.</p>"},{"location":"deeplearning/old/Convex_optimization/#constructive-convex-analysis-dcp","title":"Constructive Convex Analysis &amp; DCP","text":""},{"location":"deeplearning/old/Convex_optimization/#convex-optimization_1","title":"Convex Optimization","text":""},{"location":"deeplearning/old/Convex_optimization/#conic-form","title":"Conic form","text":"\\[ \\displaylines{ minimize\\ c^Tx \\\\ subject\\ to\\ Ax=b,\\ x\\in K } \\] <ul> <li>\\(x \\in  R^n\\)</li> <li>\\(K\\) is convex cone.</li> <li>linear objective, equality constraints.</li> </ul>"},{"location":"deeplearning/old/Convex_optimization/#how-to-solve-a-convex-optimization-problem","title":"How to solve a convex optimization problem?","text":""},{"location":"deeplearning/old/Convex_optimization/#curvature","title":"Curvature","text":"<ul> <li>convex (\u51f9)<ul> <li>definition: \\(f(\\theta x+(1-\\theta)y) \\le \\theta f(x)+(1-\\theta)f(y)\\)</li> <li>\\(\\nabla^2f(x)\\ge0\\)</li> <li>can be constructed using basic functions that are convex or concave, and using transformations that preserve convexity.</li> </ul> </li> <li>concave (\u51f8)<ul> <li>\\(-f(x)\\) is convex</li> </ul> </li> <li>affine<ul> <li>both concave and convex.</li> <li>has the form \\(f(x) = a^Tx+b\\)</li> </ul> </li> </ul>"},{"location":"deeplearning/old/Convex_optimization/#basic-convex-functions","title":"Basic convex functions","text":"<ul> <li>\\(x^p,\\ p\\ge1\\ or\\ p\\le 0\\)</li> <li>\\(e^x\\)</li> <li>\\(xlogx\\)</li> <li>\\(a^T+b\\), affine</li> <li>\\(x^TPx,\\ P\\ge0\\)</li> <li>\\(||x||\\)</li> <li>\\(max(x_1, x_2, ..)\\)</li> </ul> <p>Less basic ones:</p> <ul> <li>\\(\\frac {x^2} {y}, y&gt;0\\), jointly convex for x and y.</li> <li>\\(xlog(x/y)\\), jointly convex for x and y. </li> <li>\\(x^TY^{-1}x,\\ Y\\ge0\\)</li> <li>\\(log(e^{x_1}+e^{x_2}+...)\\)</li> <li>sum of largest k entries</li> <li>\\(\\lambda_{max}(X), X=X^T\\)</li> </ul>"},{"location":"deeplearning/old/Convex_optimization/#basic-concave-functions","title":"Basic concave functions","text":"<ul> <li>\\(x^p,\\ 0 \\le p\\le 1\\)</li> <li>\\(logx\\)</li> <li>\\(x^TPx,\\ P\\le0\\)</li> <li>\\(min(x_1, x_2, ...)\\)</li> </ul> <p>Less basic ones:</p> <ul> <li>\\(log\\ det\\ X\\)</li> <li>\\(\\lambda_{min}(X), X=X^T\\)</li> </ul>"},{"location":"deeplearning/old/Convex_optimization/#calculus-rules-that-keeps-convexity","title":"Calculus rules that keeps convexity","text":"<ul> <li>nonnegative scaling</li> </ul> <ul> <li>sum</li> </ul> <ul> <li>affine composition</li> </ul> <ul> <li>pointwise maximum (non-differentiability)</li> </ul> <ul> <li> <p>general composition rule:</p> <p>\\(h(f_1(x), ..., f_k(x))\\) is convex when \\(h\\) is convex and for each \\(i\\):</p> <ul> <li>\\(h\\) is increasing in argument \\(i\\), and \\(f_i\\) is convex, or</li> <li>\\(h\\) is decreasing in argument \\(i\\), and \\(f_i\\) is concave, or</li> <li>\\(f_i\\) is affine</li> </ul> </li> </ul> <p>eg. show the following function is convex:</p> \\[ \\displaylines{ f(u, v) = (u+1)log(\\frac {u+1}{min(u,v)}) } \\]"},{"location":"deeplearning/old/Convex_optimization/#constructive-convexity-verification","title":"Constructive Convexity verification","text":"<p>view the function as an expression tree, and use the general composition rule to determine the convexity.</p> <p>sufficient, but not necessary for convexity.</p> <ul> <li>\\(f(x)=\\sqrt{1+x^2}\\) is convex, but can't be proved by Constructive Convexity verification.</li> </ul>"},{"location":"deeplearning/old/Convex_optimization/#disciplined-convex-program-dcp","title":"Disciplined Convex Program (DCP)","text":"<p>framework for describing convex optimization problems based on constructive convex analysis.</p>"},{"location":"deeplearning/old/Convex_optimization/#definition","title":"Definition","text":"<p>a DCP has</p> <ul> <li>zero or one objective with form<ul> <li>minimize {scalar convex expression} or</li> <li>maximize {scalar concave expression}</li> </ul> </li> <li>zero or more constraints, with form<ul> <li>{convex expression} &lt;= {concave expression} or</li> <li>{concave expression} &gt;= {convex expression} or</li> <li>{affine expression} == {affine expression} </li> </ul> </li> </ul> <p>Expressions are formed from variables, constants, and functions have known convexity, monotonicity and sign properties.</p>"},{"location":"deeplearning/old/Convex_optimization/#canonicalization","title":"Canonicalization","text":"<p>DCP is very easy to build a parser/analyzer, and be transformed to cone form, then solved by some generic solver.</p> <p>CVXPY will raise error if the constraints not obey the DCP rules.</p>"},{"location":"deeplearning/old/RAPIDS_tutorial/","title":"RAPIDS","text":""},{"location":"deeplearning/old/RAPIDS_tutorial/#cudf","title":"cudf","text":"<p>GPU DataFrame.</p>"},{"location":"deeplearning/old/RAPIDS_tutorial/#cuml","title":"cuml","text":"<p>Machine Learning Algorithms.</p>"},{"location":"deeplearning/old/RAPIDS_tutorial/#k-nn","title":"k-NN","text":"<ul> <li> <p>find duplicates from image embedding</p> <pre><code>import cuml\n\nmodel = cuml.neighbors.NearestNeighbors(n_neighbors=3)\nmodel.fit(embed_train)\ndistances, indices = model.kneighbors(embed_test)\n\nmm = np.min(distances, axis=1)\n\nidx = np.where((mm &lt; 2))[0]\n</code></pre> </li> </ul>"},{"location":"deeplearning/old/RAPIDS_tutorial/#k-means","title":"k-Means","text":"<pre><code>import cuml\n\nmodel = cuml.KMeans(n_clusters=20)\nmodel.fit(embed)\ntrain['cluster'] = model.labels_\ntrain.head()\n</code></pre>"},{"location":"deeplearning/old/RAPIDS_tutorial/#t-sne","title":"T-SNE","text":"<pre><code>import cuml\n\n# model\nmodel = cuml.TSNE()\nembed2D = model.fit_transform(embed)\ntrain['x'] = embed2D[:,0]\ntrain['y'] = embed2D[:,1]\n\n# get region with largest MM rate\nX_DIV = 10; Y_DIV = 10\nx_min = train.x.min()\nx_max = train.x.max()\ny_min = train.y.min()\ny_max = train.y.max()\nx_step = (x_max - x_min)/X_DIV\ny_step = (y_max - y_min)/Y_DIV\nmx = 0; xa_mx = 0; xb_mx=0; ya_mx = 0; yb_mx = 0\nfor k in range(X_DIV+1):\n    for j in range(Y_DIV+1):\n        xa = k*x_step + x_min\n        xb = (k+1)*x_step + x_min\n        ya = j*y_step + y_min\n        yb = (j+1)*y_step + y_min\n        df = train.loc[(train.x&gt;xa)&amp;(train.x&lt;xb)&amp;(train.y&gt;ya)&amp;(train.y&lt;yb)]\n        t = df.target.mean()\n        if (t&gt;mx)&amp;(len(df)&gt;=16):\n            mx = t\n            xa_mx = xa\n            xb_mx = xb\n            ya_mx = ya\n            yb_mx = yb\n        #print(k,j,t)\n\n# vis\nplt.figure(figsize=(10,10))\ndf1 = train.loc[train.target==0]\nplt.scatter(df1.x,df1.y,color='orange',s=10,label='Benign')\ndf2 = train.loc[train.target==1]\nplt.scatter(df2.x,df2.y,color='blue',s=10,label='Malignant')\nplt.plot([xa_mx,xa_mx],[ya_mx,yb_mx],color='black')\nplt.plot([xa_mx,xb_mx],[ya_mx,ya_mx],color='black')\nplt.plot([xb_mx,xb_mx],[ya_mx,yb_mx],color='black')\nplt.plot([xa_mx,xb_mx],[yb_mx,yb_mx],color='black')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"deeplearning/old/datatable_tutorial/","title":"datatable","text":"<pre><code>import datatable as dt\n</code></pre>"},{"location":"deeplearning/old/datatable_tutorial/#load","title":"Load","text":"<pre><code>dt.Frame(A=range(5), B=['a','b','c','d','e'])\ndt.Frame({\"A\": [1,2], \"B\": ['a', 'b']})\n\ndt.Frame(pandas_dataframe)\ndt.Frame(numpy_array)\n\ndt.fread(\"test.csv\")\ndt.fread(data, sep=None, header=None, fill=False, skip_blank_lines=False, columns=None)\n</code></pre>"},{"location":"deeplearning/old/datatable_tutorial/#properties","title":"Properties","text":"<pre><code>DT.shape\nDT.names\nDT.stypes # column types\n</code></pre>"},{"location":"deeplearning/old/datatable_tutorial/#data-manipulation","title":"Data Manipulation","text":"\\[ \\displaylines{ DT[i, j, by(), sort(), join()] } \\] <pre><code># selector\nDT[i, j] = 1 # [row, col, ...]\ndel DT[i, j] \n\n# frame proxy\nfrom datatable import f, max, min, sum\nDT[:, (f.A-min(f.A))/(max(f.A)-min(f.A))]\n\nf.A\nf['A']\nf[0]\nf[:]          # select all columns\nf[::-1]       # select all columns in reverse order\nf[:5]         # select the first 5 columns\nf[3:4]        # select the fourth column\nf[\"B\":\"H\"]    # select columns from B to H, inclusive\nf[int]        # select all integer columns\nf[float]      # select all floating-point columns\nf[dt.str32]   # select all columns with stype `str32`\nf[None]       # select no columns (empty columnset)\n\nf[int].extend(f[float])          # integer and floating-point columns\nf[:3].extend(f[-3:])             # the first and the last 3 columns\nf.A.extend(f.B)                  # columns \"A\" and \"B\"\nf[:].extend({\"cost\": f.price * f.quantity}) # add new column\nf[:].remove(f[str])    # all columns except columns of type string\nf[:10].remove(f.A)     # the first 10 columns without column \"A\"\nf[:].remove(f[3:-3])   # same as `f[:3].extend(f[-3:])`\n\n\nDT[:, \"A\"]         # select 1 column\nDT[:10, :]         # first 10 rows\nDT[::-1, \"A\":\"D\"]  # reverse rows order, columns from A to D\nDT[27, 3]          # single element in row 27, column 3 (0-based)\nDT[(f.x &gt; mean(f.y) + 2.5 * sd(f.y)) | (f.x &lt; -mean(f.y) - sd(f.y)), :]\ndel DT[:, \"D\"]     # delete column D\ndel DT[f.A &lt; 0, :] # delete rows where column A has negative values\n\n# compute new column\nDT[:, {\"x\": f.x, \"y\": f.y, \"x+y\": f.x + f.y, \"x-y\": f.x - f.y}]\n\n# append\nDT1.cbind(DT2, DT3)\nDT1.rbind(DT4, force=True)\n\n# aggeregate with by\nDT[:, sum(f.quantity), by(f.product_id)]\n\n# join (left outer join)\nDT[:, sum(f.quantity * g.price), join(products)]\n\n# sort\nDT.sort(\"A\")\nDT[:, :, sort(f.A)]\n</code></pre>"},{"location":"deeplearning/old/datatable_tutorial/#save","title":"Save","text":"<pre><code>DT.to_pandas()\nDT.to_numpy()\nDT.to_dict()\nDT.to_list()\n\nDT.to_csv(\"out.csv\")\nDT.to_jay(\"out.jay\") # binary\n</code></pre>"},{"location":"deeplearning/old/feature_engineering/","title":"Feature Engineering","text":"<pre><code>### Label Encoding\nfrom sklearn import preprocessing\n\ncat_features = ['app', ...]\nle = preprocessing.LabelEncoder()\nfor feature in cat_features:\n    df[feature+\"_label\"] = le.fit_transform(df[feature])\n</code></pre>"},{"location":"deeplearning/old/gradient_boost/","title":"Gradient Boost","text":""},{"location":"deeplearning/old/gradient_boost/#lightgbm","title":"LightGBM","text":"<pre><code>import lightgbm as lgb\n\ntrain_data = lgb.Dataset(train[features], label=train['label'])\nvalid_data = lgb.Dataset(valid[features], label=valid['label'])\ntest_data = lgb.Dataset(test[features], label=test['label'])\n\nparams = {\n    'num_classes': 64,\n    'objective': 'binary',\n    'metric': 'auc',\n}\nnum_round = 1000\n\n### train\nbest = lgb.train(params, train_data, num_round, valid_sets=[valid_data], early_stopping_rounds=10)\n\n### test\nfrom sklearn import metrics\nypred = best.predict(test[features])\nscore = metrics.roc_auc_score(test['label'], ypred)\n</code></pre>"},{"location":"deeplearning/old/jupyter_remote/","title":"Jupyter remote","text":""},{"location":"deeplearning/old/jupyter_remote/#jupyter-notebook-remote","title":"Jupyter Notebook Remote","text":"<pre><code># server shell\njupyter notebook --no-browser --port=8889 test.ipynb\n\n# local shell\nssh -NfL localhost:8888:localhost:8889 user@server_host\n\n# local browser\nlocalhost:8888\n</code></pre>"},{"location":"deeplearning/old/k_means_tutorial/","title":"K-means","text":""},{"location":"deeplearning/old/k_means_tutorial/#intended-for","title":"Intended for:","text":"<ul> <li>all variables are of quantitative type</li> <li>Squared Euclidean distance as the dissimilarity measure</li> </ul>"},{"location":"deeplearning/old/k_means_tutorial/#algorithm","title":"Algorithm","text":"<ul> <li>Init centroids</li> <li>iter until convergence:<ul> <li>update each data point's label</li> <li>update centroids</li> <li>check convergence</li> </ul> </li> </ul>"},{"location":"deeplearning/old/k_means_tutorial/#implementation","title":"Implementation","text":"<pre><code>import numpy as np\nfrom sklearn import datasets\nimport matplotlib.pyplot as plt\n\niris = datasets.load_iris()\nX, y = iris.data, iris.target\n\ndef randomCent(data, k):\n    return data[np.random.choice(data.shape[0],k,replace=False)]\n\ndef squareEucliDist(A,B):\n    return np.sum(np.power(A-B, 2))\n\ndef kMeans(data, k, dist=squareEucliDist, cent=randomCent, ITER = 100, show=True):\n    n = data.shape[0]\n    labels = np.zeros(data.shape[0], np.int32)\n    centroids = cent(data, k)\n    converged = False\n    iter = 0\n    if show:\n        plt.scatter(data[:,0],data[:,1])\n        plt.ion()\n    while not converged:\n        iter += 1\n        old_centroids = centroids.copy()\n        # update labels\n        for i in range(n):\n            d = np.array([dist(data[i],centroids[j]) for j in range(k)])\n            labels[i] = np.argsort(d)[0]\n        # update centroids\n        for m in range(k):\n            centroids[m] = np.mean(data[labels==m],axis=0)\n        if show:\n            plt.cla()\n            for m in range(k):\n                tmp = data[labels==m]\n                plt.scatter(tmp[:,0], tmp[:,1], marker='x')\n            plt.scatter(centroids[:,0],centroids[:,1], marker='o')\n            plt.pause(0.2)\n        # check converge\n        if np.mean(np.power(old_centroids-centroids, 2))==0 or iter==ITER:\n            converged = True\n    if show:\n        plt.ioff()\n        plt.show()\n    return labels, centroids\n\ndata = X[:,[1,3]]\nlabels, cent = kMeans(data, 3, show=True)\n\ndata = X[:,:]\nlabels, cent = kMeans(data, 3, show=False)\nprint('Accuracy:',max(np.sum(labels==y), np.sum(labels==(y+3)%3), np.sum(labels==(y+2)%3))/y.shape[0])\n</code></pre>"},{"location":"deeplearning/old/k_means_tutorial/#sklean","title":"sklean","text":"<pre><code>from sklearn.cluster import KMeans\n\nkm = KMeans(3).fit(data)\nlabels, cent = km.labels_, km.cluster_centers_\n\n'''\nKMeans()\n    n_clusters = 8\n    init = 'k-means++'\n    n_init = 10 # run idependently for 10 times and select the best\n    max_iter = 300\n    random_state = None # random seed. eg.set to 0\n    algorithm = 'auto'\n\nother uses:\n    labels = KMeans(3).fit_predict(data)\n    test = km.predict([1,2])\n    ...\n'''\n</code></pre>"},{"location":"deeplearning/old/k_means_tutorial/#k-means_1","title":"k-means++","text":"<p>select the initial centroids as far as possible:</p> <pre><code>def ppCent(data, k, dist=squareEucliDist):\n    centroids = list(data[np.random.choice(data.shape[0],1)])\n    for i in range(1, k):\n        D = []\n        for j in range(data.shape[0]):\n            D.append([dist(data[j],centroids[k]) for k in range(len(centroids))])\n        D = np.min(np.array(D),axis=1)\n        centroids.append(data[np.argsort(D)[-1]])\n    return np.array(centroids)\n</code></pre>"},{"location":"deeplearning/old/k_means_tutorial/#weighted-kernel-k-means","title":"(Weighted) Kernel k-means","text":"<p>One limit for k-means is that it always cluster by a hyperplane.</p> <p>So we can use a transfer function \\(\\phi()\\) to transfer each data vector into a higher dimension, then apply traditional k-means.</p> <p>Besides, we can also add weight for each data vector.</p> \\[ \\displaylines{ \\sum_{c=1}^{k}\\sum_{a_i \\in \\pi_c} w_i||\\phi(a_i) - m_c||^2 } \\] <p>Further more, if we simply expand the \\(l2\\) norm, we notice that we even needn't knowing the explicit form of \\(\\phi()\\) to compute this norm.</p> <p>All we need is a Kernel Matrix \\(K\\), where \\(K_{ij} = \\phi(a_i)\\phi(a_j)\\)</p> <p>for example, a polynomial \\(K\\) can be defined as:</p> \\[ \\displaylines{ K_{ij} = (a_i \\cdot a_j + c)^d } \\]"},{"location":"deeplearning/old/k_means_tutorial/#spherical-k-means","title":"Spherical k-means","text":"<p>Used in document clustering, replace Euclidean Distance with Cosine Distance.</p>"},{"location":"deeplearning/old/keras_tutorial/","title":"Keras Tutorial","text":"<p>OK, I'm here for free TPU.</p> <p>The difference between <code>tf.keras</code> and <code>keras</code> is the Tensorflow specific enhancement to the framework.</p> <p><code>keras</code> is an API specification that describes how a Deep Learning framework should implement certain part, related to the model definition and training. Is framework agnostic and supports different backends (Theano, Tensorflow, ...)</p> <p><code>tf.keras</code> is the Tensorflow specific implementation of the Keras API specification. It adds the framework the support for many Tensorflow specific features like: perfect support for <code>tf.data.Dataset</code> as input objects, support for eager execution, ...</p> <p>In Tensorflow 2.0 <code>tf.keras</code> will be the default and I highly recommend to start working using <code>tf.keras</code></p>"},{"location":"deeplearning/old/keras_tutorial/#model","title":"Model","text":""},{"location":"deeplearning/old/keras_tutorial/#sequential","title":"Sequential","text":"<pre><code>from keras.models import Sequential\nfrom keras.layers import Dense\n\n#model = Sequential()\n#model.add(Dense(units=64, activation='relu', input_dim=100))\n\nmodel = Sequential([\n    Dense(32, input_shape=(784,)), # take [-1, 784] shaped input, same as input_dim=784\n    Activation('relu'),\n    Dense(10),\n    Activation('softmax'),\n])\n\n#model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.SGD(lr=0.01, momentum=0.9, nesterov=True)\n             )\n\nmodel.fit(X, y, epochs=5, batch_size=32)\nmodel.train_on_batch(Xb, yb)\nloss_and_metrics = model.evaluate(X, y, batch_size=32)\nclasses = model.predict(X, y, batch_size=1)\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#functional-more-flexible","title":"Functional (More flexible)","text":"<pre><code>from keras.layers import Input, Dense\nfrom keras.models import Model\n\ninputs = Input(shape=(784,))\nx = Dense(64, activation='relu')(inputs)\noutputs = Dense(10, activation='softmax')(x)\n\nmodel = Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer, loss, metrics)\n\n### multiple output example\ndef build_densenet():\n    densenet = DenseNet121(weights='imagenet', include_top=False)\n\n    input = Input(shape=(SIZE, SIZE, N_ch))\n    x = Conv2D(3, (3, 3), padding='same')(input)\n\n    x = densenet(x)\n\n    x = GlobalAveragePooling2D()(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.5)(x)\n    x = Dense(256, activation='relu')(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.5)(x)\n\n    # multi output\n    grapheme_root = Dense(types['grapheme_root'],\n                          activation = 'softmax', name='root')(x)\n    vowel_diacritic = Dense(types['vowel_diacritic'],\n                            activation = 'softmax', name='vowel')(x)\n    consonant_diacritic = Dense(types['consonant_diacritic'],\n                                activation = 'softmax', name='consonant')(x)\n\n    # model\n    model = Model(input, [grapheme_root, vowel_diacritic, consonant_diacritic])\n\n    return model\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#data-loaders","title":"Data Loaders","text":"<pre><code>### built-in datasets\n(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()\n\n### Use in-memory numpy ndarray\nX, y = np.load(...)\nmodel.fit(x=X, y=y)\n\n### keras.utils.Sequence\nclass DataGenerator(keras.utils.Sequence):\n    def __init__(self, df, batch_size = 16, subset=\"train\", shuffle=False, \n                 preprocess=None, info={}):\n        super().__init__()\n        self.df = df\n        self.shuffle = shuffle\n        self.subset = subset\n        self.batch_size = batch_size\n        self.preprocess = preprocess\n        self.info = info\n\n        if self.subset == \"train\":\n            self.data_path = path + 'train_images/'\n        elif self.subset == \"test\":\n            self.data_path = path + 'test_images/'\n\n        ### shuffle\n        self.on_epoch_end()\n\n    ### Must\n    def __len__(self):\n        return int(np.floor(len(self.df) / self.batch_size))\n\n    def on_epoch_end(self):\n        self.indexes = np.arange(len(self.df))\n        if self.shuffle == True:\n            np.random.shuffle(self.indexes)\n\n    ### Must, return a Batch!\n    def __getitem__(self, index): \n        X = np.empty((self.batch_size,128,800,3),dtype=np.float32)\n        y = np.empty((self.batch_size,128,800,4),dtype=np.int8)\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        for i,f in enumerate(self.df['ImageId'].iloc[indexes]):\n            self.info[index*self.batch_size+i]=f\n            X[i,] = Image.open(self.data_path + f).resize((800,128))\n            if self.subset == 'train': \n                for j in range(4):\n                    y[i,:,:,j] = rle2maskResize(self.df['e'+str(j+1)].iloc[indexes[i]])\n        ### Custom preprocess\n        if self.preprocess!=None: \n            X = self.preprocess(X)\n        if self.subset == 'train': \n            return X, y\n        else: \n            return X\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#preprocess","title":"Preprocess","text":"<pre><code>### Mostly, just use numpy (eg. albumentations) inside DataLoader.\n\n### Image preprocessor\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\ny_train = np_utils.to_categorical(y_train, num_classes)\ny_test = np_utils.to_categorical(y_test, num_classes)\n\ndatagen = ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True)\n\ndatagen.fit(x_train)\nmodel.fit_generator(datagen.flow(x_train, y_train, batch_size=32),\n                    steps_per_epoch=len(x_train) / 32, epochs=epochs)\n\n# or\nfor e in range(epochs):\n    print('Epoch', e)\n    batches = 0\n    for x_batch, y_batch in datagen.flow(x_train, y_train, batch_size=32):\n        model.fit(x_batch, y_batch)\n        batches += 1\n        if batches &gt;= len(x_train) / 32:\n            # we need to break the loop by hand because\n            # the generator loops indefinitely\n            break\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#callbacks","title":"Callbacks","text":""},{"location":"deeplearning/old/keras_tutorial/#built-ins","title":"Built-ins","text":"<pre><code># define callbacks\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\n# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] // batch_size\n                              , callbacks=[learning_rate_reduction])\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#custom-callbacks","title":"Custom Callbacks","text":"<pre><code>class MyCallback(keras.callbacks.Callback):\n    def on_epoch_begin(self):\n        pass\n    def on_epoch_end(self):\n        pass\n    def on_batch_begin(self, batch, logs={}):\n        pass\n    def on_batch_end(self, batch, logs={}):\n        pass\n    def on_train_begin():\n        pass\n    def on_train_end():\n        pass\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#custom-metrics","title":"Custom Metrics","text":"<pre><code>import keras.backend as K ### here K == tf\n\n# dice\ndef dice_coef(y_true, y_pred, smooth=1):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy', dice_coef])\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#custom-losses","title":"Custom Losses","text":"<pre><code>### Just wrap metrics\nimport keras.backend as K\ndef dice_coef(y_true, y_pred, smooth=1):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\n# the wrapper should return a function that only accepts (y_true, y_pred)\ndef dice_loss(smooth):\n    def _loss(y_true, y_pred):\n        return -dice_coef(y_true, y_pred, smooth=smooth)\n    return _loss\n\n# use it\nmodel.compile(loss=dice_loss(smooth=0.001))\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#custom-layers","title":"Custom Layers","text":"<pre><code>### Lambda\n\n## Generalized mean pool - GeM\n\n# define weights, functionals first\ngm_exp = tf.Variable(3.0, dtype = tf.float32)\ndef generalized_mean_pool_2d(X):\n    pool = (tf.reduce_mean(tf.abs(X**(gm_exp)), \n                        axis = [1, 2], \n                        keepdims = False) + 1.e-7)**(1./gm_exp)\n    return pool\n# use Lambda to wrap\nlambda_layer = Lambda(generalized_mean_pool_2d)\nlambda_layer.trainable_weights.extend([gm_exp])\nx = lambda_layer(x_model.output)\n\n### Layer class\nfrom keras.layers import Layer\nclass MyLayer(Layer):\n    def __init__(self, output_dim):\n        super(MyLayer, self).__init__()\n        self.output_dim = output_dim\n\n    ## Must, define the weights\n    def build(self, input_shape):\n        # add_weight\n        self.W = self.add_weight(name='W', shape=(input_shape[1], self.output_dim), initializer='uniform', trainable=True)\n        # must call this at the end\n        super(MyLayer, self).build(input_shape) \n\n    ## Must, forward()\n    def call(self, x):\n        return K.dot(x, self.W)\n\n    ## Must, for the next layer to know its input_shape\n    def compute_output_shape(input_shape):\n        return (input_shape[0], self.output_dim)\n</code></pre>"},{"location":"deeplearning/old/keras_tutorial/#examples","title":"Examples","text":"<pre><code># Create Model\ndef create_model(input_shape):\n    # Input Layer\n    input = Input(shape = input_shape)\n\n    # Create and Compile Model and show Summary\n    x_model = efn.EfficientNetB3(weights = None, include_top = False, input_tensor = input, pooling = None, classes = None)\n\n    # UnFreeze all layers\n    for layer in x_model.layers:\n        layer.trainable = True\n\n    # GeM\n    lambda_layer = Lambda(generalized_mean_pool_2d)\n    lambda_layer.trainable_weights.extend([gm_exp])\n    x = lambda_layer(x_model.output)\n\n    # multi output\n    grapheme_root = Dense(168, activation = 'softmax', name = 'root')(x)\n    vowel_diacritic = Dense(11, activation = 'softmax', name = 'vowel')(x)\n    consonant_diacritic = Dense(7, activation = 'softmax', name = 'consonant')(x)\n\n    # model\n    model = Model(inputs = x_model.input, outputs = [grapheme_root, vowel_diacritic, consonant_diacritic])\n\n    return model\n</code></pre>"},{"location":"deeplearning/old/meshlab_tutorial/","title":"MeshLab Tutorial","text":""},{"location":"deeplearning/old/meshlab_tutorial/#input-format","title":"Input format","text":"<ul> <li> <p>XYZ (.txt)</p> <pre><code>x; y; z; r; g; b; ....\nx; y; z; r; g; b; ....\n...\n</code></pre> <p>(separator and format can be changed)</p> </li> </ul>"},{"location":"deeplearning/old/meshlab_tutorial/#coloring","title":"Coloring","text":"<p>can only use the RGB to color.</p>"},{"location":"deeplearning/old/meshlab_tutorial/#codelet","title":"Codelet","text":"<pre><code>palette = [[255,0,0], [0,255,0], [0,0,255], [255,255,0], [0,255,255], [255,0,255], [192,192,192], [128, 0, 0], [128, 128, 0], [0, 128, 0], [128, 0, 128], [0, 128, 128], [0, 0, 128]]\n\ndef color_gradient(x, a=[255,0,0], b=[0,255,0]):\n    # x in [-1, 1]\n    return (np.array(a) + ((x+1)/2) * np.array(b)).astype(int)\n\ndef color_palette(x, colors=palette):\n    return colors[x]\n\n\ndef save_xyz(path, arr, color='rgb'):\n    with open(path, 'w') as f:\n        # arr=[N, C], col=[x, y, z, r, g, b, tsdf, height, label]\n        if color == 'rgb':\n            for l in arr:\n                f.write(';'.join([str(x) for x in l])+'\\n')\n        elif color == 'tsdf':\n            for l in arr:\n                f.write(';'.join([str(x) for x in l[:3]])+';'+';'.join([str(x) for x in color_gradient(l[6])])+'\\n')\n        elif color == 'label':\n            for l in arr:\n                f.write(';'.join([str(x) for x in l[:3]])+';'+';'.join([str(x) for x in color_palette(int(l[-1]))])+'\\n')\n</code></pre>"},{"location":"deeplearning/old/plotly_tutorial/","title":"plotly","text":""},{"location":"deeplearning/old/pytorch_API/","title":"pytorch API","text":""},{"location":"deeplearning/old/pytorch_API/#torch","title":"torch","text":"<pre><code>### Settings\nis_tensor(obj)\nset_default_dtype(d) # torch.float32\nget_default_dtype()\nset_default_tensor_type(t) # torch.FloatTensor , float32\nset_printoptions() # threshold=\"nan\" for print all\n\n### Creations\n''' shared parameters\n@ dtype=None\n@ device=None\n@ layout=None : memory layout, eg. strided, sparse_coo\n@ require_grad=False\n'''\ntensor(data) # always copy the data!\nas_tensor(data) # no copy if device, dtype is the same.\nfrom_numpy(ndarray) # no copy, share the same memory.\nzeros(*size) # dtype is globally default as float32\nzeros_like(input)\nones(*size)\nones_like(input)\narange(start=0, end, step=1)\nlinspace(start, end, steps=100)\nlogspace(start, end, steps=100)\neye(n)\nempty(*size)\nempty_like(input)\nfull(size, fill_value)\nfull_like(input, fill_value)\n\n\n### Operations\ncat(seq, dim=0) # concat in dim\nstack(seq, dim=0) # stack in a new dim\nchunk(tensor, chunks&lt;int&gt;, dim=0) # split into chunks\nsplit(tensor, split_size, dim=0) # split by size\ngather(input, dim, index&lt;LongTensor&gt;) # rearrange\n'''\nvery tricky... Different from tensorflow.gather.\n&gt;&gt;&gt; t = torch.tensor([[1,2],[3,4]])\n&gt;&gt;&gt; torch.gather(t, 1, torch.tensor([[0,0],[1,0]]))\ntensor([[ 1,  1],\n        [ 4,  3]])\n'''\nindex_select(input, dim, indices&lt;LongTensor&gt;) # select indices from input along dim.\n\"\"\"\nonly support indices to be a vector(1-dim tensor).\nso also silly.\n\"\"\"\n\nmasked_select(input, mask&lt;ByteTensor&gt;)\nnonzero(input) # indices of non-zero input\n\"\"\"very important and useful!\"\"\"\n\nreshape(x, shape)\nsqueeze(x, dim=None) # default: remove all 1. INPLACE!\nunsqueeze(x, dim)\nt(x) # transpose(x, 0, 1)\ntranspose(x, d0, d1)\npermute(x, (d0, d1, ...))\ntake(input, indices&lt;LongTensor&gt;) # indices is 1d, flattened indices version of index_select\nunbind(x, dim=0) # inversion of cat\nwhere(condition&lt;ByteTensor&gt;, x, y) # x if True else y\n\n\n### random sampling\nmanual_seed(seed)\nbernoulli(input) # out_i ~ B(input_i)\nnormal(mean, std) # mean&amp;std can be a tensor\nrand(*size)\nrand_like(input)\nrandint(low=0, high, size)\nrandint_like(input, low=0, high, size)\nrandn(*size)\nrandn_like(input)\n\n\n### Math\nabs(x)\nadd(x, n) # tensor + number\ndiv(x, n)\nmul(x, n)\nceil(x)\nfloor(x)\nclamp(x, min, max)\npow(x, n)\nexp(x)\n...\n\n### reduction\nargmax(x, dim=None, keepdim=False) # default is flatten\nargmin(x, dim=None, keepdim=False)\ncumprod(x, dim) # cumulative product\ncumsum(x, dim)\ndist(x, y, p=2) # p-norm\nnorm(x, p=2)\nunique(x, sorted=False, return_inverse=False) # unique value\n\n\n### comparison\neq(x, y) # -&gt; element-wise ByteTensor\nne(x, y)\nequal(x, y) # -&gt; Trur/False\nisfinite(x)\nisinf(x)\nisnan(x)\nsort(x, dim=None, descending=False)\n\n# others\ncross(x, y, dim=-1)\ndiag(x, diagonal=0)\ndiagonal(x) # diag(x, 0)\n\n# BLAS &amp; LAPACK\nmatmul(t1, t2) # broadcastable\n''' behavior\n@ [M]*[M] = [M], [M,N]*[N,K]=[M,K]\n@ [M]*[M,N] = [1,M]*[M,N] = [N]\n@ [M,N]*[N] = [M]\n\n@ [j,m,n]*[j,n,p] = [j,m,p]\n@ [j,m,n]*[n] = [j,m]\n@ [j,1,n,m]*[k,m,p] = [j,k,n,p]\n@ [j,m,n]*[n,p] = [j,m,p]\n\n'''\nbmm(b1, b2) # [B,X,Y] * [B,Y,Z] = [B,X,Z]\nmm(m1, m2) # [N,M] * [M,P] = [N,P]\ndot(t1, t2)\neig(mat, eigenvectors=False)\ninverse(x)\ndet(x)\n</code></pre>"},{"location":"deeplearning/old/pytorch_API/#torchtensor","title":"torch.Tensor","text":"<p>default torch.Tensor is <code>FloatTensor</code> <pre><code>class Tensor:\n    shape\n    device\n    dtype\n    layout # strided for dense, sparse_coo for coo\n    item() # tensor-&gt;scalar, only for one-element tensor\n    tolist() # tensor-&gt;list\n    abs()\n    abs_() # inplace, faster\n    clone()\n    contiguous()\n    cpu()\n    cuda()\n    to()\n    '''\n    to(dtype)\n    to(device)\n    '''\n    repeat(*size) # np.tile\n    '''\n    &gt;&gt;&gt; x = torch.tensor([1, 2, 3])\n    &gt;&gt;&gt; x.repeat(4, 2)\n    tensor([[ 1,  2,  3,  1,  2,  3],\n            [ 1,  2,  3,  1,  2,  3],\n            [ 1,  2,  3,  1,  2,  3],\n            [ 1,  2,  3,  1,  2,  3]])\n    '''\n    size()\n    type()\n    view(*size)\n    view_as(other)\n</code></pre></p>"},{"location":"deeplearning/old/pytorch_API/#torchnn","title":"torch.nn","text":"<pre><code>### parameters\nParameters()\n    '''a kind of tensor able to be considered a module parameter'''\n    data # the tensor\n    requires_grad # bool\n\n### Containers\nModule() # base class for all nn modules.\n    add_module(name, module) # add child module\n    apply(fn) # apply function fn to all submodules recursively\n    ''' net.apply(init_weight) '''\n    children() # iterator on children\n    modules() # ditto?\n    cpu(), cuda()\n    double(), float(), half(), ...\n    train() # train mode.\n    eval() # eval mode, stop Dropout and BatchNorm.\n    forward(*input) # define the computation\n    state_dict()\n    load_state_dict(dict)\n    parameters() # iterator on all Parameters\n    register_buffer(name, tensor) # add a persistent buffer\n    register_parameter(name, param) # add a parameter\n    type(dtype) # cast all paramters to dtype.\n    to() # device or dtype, inplace, always\n    zero_grad() \n\nSequential(*args)\n    args: *list, or OrderedDict.\n    # all inputs are aligned sequentially.\n\nModuleList(modules=None)\n    modules: list\n    # just a list, supporting append, extend.\n\nModuleDict(modules=None)\n    # just a dict\n\nParameterList(...)\nParameterDict(...)\n\n### Convolutions\nConv1d(Fin, Fout, ks, stride=1, padding=0, dilation=1, groups=1, bias=True)\n'''\nIt's a VALID cross-correlation in fact.\npadding: int or (int, int)\nL_out = floor((L_in+2*padding-ks)/stride + 1)\n'''\nConv2d(...)\n\"\"\"\nonly accept (N,C,H,W).\n\"\"\"\nConvTransposed1d(Fin, Fout, ks, stride=1, padding=0, output_padding=0,...)\n\"\"\"\naccept (N, F_in, L_in).\nL_out = (L_in - 1)*stride - 2*paddint + ks + output_padding\n\"\"\"\n\n### Pooling\nMaxPool1d(ks, stride=None, padding=0, dilation=1, ...)\nMaxUnpool1d(ks, stride=None, padding=0) # lost-vals are set to 0.\nAvgPool1d(...)\nLPPool1d(p, ks, stride=None)\nAdaptiveMaxPool1d(output_size) # [N, L] -&gt; [N, out]\nAdaptiveAvgPool1d(output_size)\n\n### Padding\nReflectionPad1d(padding)\nReplicationPad1d(padding)\n...\n\n### activation\nELU(alpha=1.0, inplace=False)\nSELU(inplace=False)\n\nReLU(inplace=False)\nReLU6(inplace=False) # min(max(0,x),6)\n\nLeakyReLU(negative_slope=0.01, inplace=False)\nPReLU(num_parameters=1, init=0.25)\n\"\"\"\nx = x if x&gt;=0 else Ax; A is learnable.\nnum_parameters: length of A, set to Fin.\ninit: initial value of A.\n\"\"\"\nRReLU(lover=0.125, upper=0.333, inplace=False)\n\"\"\"\nsimilar to PReLU, where A ~ U(lower,upper)\n\"\"\"\nSigmoid()\nSoftplus(beta=1)\nSoftmax()\nTanh()\n\n### Normalization\nBatchNorm1d(num_features, eps=1e-5, momentum=0.1, affine=True, ...)\n...\n\n### RNN\n\n### Linear\nLinear(Fin, Fout, bias=True)\nBilinear(Fin1, Fin2, Fout, bias=True) # y = x_1 * A * x_2 + b\n\n### dropout\nDropout(p=0.5, inplace=False)\nDropout2d(p=0.5, inplace=False)\n\n\n### Loss\nL1Loss(size_average=True, reduce=True, ...)\n''' \nl = mean({|x_n - y_n|})\nloss(input, target), shape=(N,*)\n'''\nMSELoss(...)\n''' \nl = mean({(x_n - y_n)^2})\nloss(input, target), shape=(N,*)\n'''\nCrossEntropyLoss()\n'''\nl(x,cls) = -x[class]+log(\\sum_j exp(x[j]))\nloss(input&lt;N,nCls&gt;, target&lt;N&gt;)\n'''\nNLLLoss()\n'''\nnegative log likelihood.\nl(x, y) = (\\sum_n -w_yn*x_{n,yn})/\\sum_n w_yn\n\nlogits = nn.LogSoftmax(x)\nloss(logits&lt;N,C&gt;, target&lt;N&gt;)\n\nequals to CrossEntropyLoss(x).\n'''\n\nBCELoss()\n'''\nl_n = -w_n[y_n * log x_n + (1-y_n)*log(1-x_n)]\nl(input&lt;N&gt;,target&lt;N&gt;) = mean(l_n)\n\nlogits = nn.Sigmoid(x)\nloss(logits, target)\n\neq. BCEWithLogitLoss(x)\n'''\n</code></pre>"},{"location":"deeplearning/old/pytorch_API/#torchnnfunctional","title":"torch.nn.functional","text":"<pre><code># mostly correspond to layers.\ninterpolate(input, size=None, scale_factor=None, mode=\"nearest\", align_corners=None)\n</code></pre>"},{"location":"deeplearning/old/pytorch_API/#torchoptim","title":"torch.optim","text":"<pre><code>optimizer = optim.SGD(model.parameters(), lr=..., momentum=...)\noptimizer.zero_grad()\nloss.backward()\noptimizer.step()\n...\n\nlr_scheduler.LambdaLR(optimizer, lr_lambda, last_epoch=-1)\nlr_scheduler.StepLR(optimizer, step_size, gamma=0.1, last_epoch=-1)\n'''\n&gt;&gt;&gt; scheduler = StepLR(optimizer, step_size=30, gamma=0.1)\n&gt;&gt;&gt; for epoch in range(100):\n&gt;&gt;&gt;     scheduler.step()\n&gt;&gt;&gt;     train(...)\n&gt;&gt;&gt;     validate(...)\n'''\nlr_scheduler.MultiStepLR(opt, milestones, gamma=0.1)\n'''\nscheduler = MultiStepLR(optimizer, milestones=[30,80], gamma=0.1)\n'''\nlr_scheduler.ExponentialLR(optimizer, gamma)\n\nlr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=10, verbose=False, threshold=0.0001, threshold_mode='rel', cooldown=0, min_lr=0, eps=1e-08)\n'''\ndynamically reduce lr when a metric has stopped improving.\nmode: min means metric stops decreasing.\n\n&gt;&gt;&gt; optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9)\n&gt;&gt;&gt; scheduler = ReduceLROnPlateau(optimizer, 'min')\n&gt;&gt;&gt; for epoch in range(10):\n&gt;&gt;&gt;     train(...)\n&gt;&gt;&gt;     val_loss = validate(...)\n&gt;&gt;&gt;     # Note that step should be called after validate()\n&gt;&gt;&gt;     scheduler.step(val_loss)\n'''\n</code></pre>"},{"location":"deeplearning/old/pytorch_API/#torchautograd","title":"torch.autograd","text":"<pre><code>backward(tensors)\ngrad(outputs, inputs)\n\nno_grad()\n'''\nreduce memory consumption, be sure not call backward().\n1. with torch.no_grad():\n2. @torch.no_grad()\n'''\n</code></pre>"},{"location":"deeplearning/old/pytorch_tutorial/","title":"PyTorch","text":""},{"location":"deeplearning/old/pytorch_tutorial/#tensors","title":"Tensors","text":"<pre><code>## create a tensor\nx = torch.Tensor(d1, d2)\nr = torch.rand(d1, d2)\nx # print(x)\nx.size() # torch.Size, in fact tuple.\n\n## operation\nx + y\ntorch.add(x, y)\ny.add_(x) # inplace\nx[:, 1] # numpy-like slice is supported\nz = x.view(-1, 8) # view means reshape. -1 is inferred.\n\n## numpy\na = torch.ones(5)\nb = a.numpy() # it will follow the change of a. SHALLOW.\nc = np.ones(5)\nd = torch.from_numpy(a) # it follows c.\n\n## cuda\nif torch.cuda.is_available():\n    x = x.cuda()\n</code></pre> <pre><code>## operations\nx.permute(*axes) # 3+ dim transpose\nx.transpose(d1, d2) # only 2 dim\nx.view(*shape) # reshape\nx.contiguous() # make x store continuously in memory\nx.is_contiguous() \n# after permute(), x is not contiguous, and CANNOT view.\nx.permute().contiguous().view() # routine\n\ntorch.cat((A, B), dim=1)\n</code></pre>"},{"location":"deeplearning/old/pytorch_tutorial/#autograd","title":"autograd","text":"<pre><code>## Variable\n'''\nWrapper of Tensors. Support all operations of Tensors.\n`.backward()` method will automatically compute all gradients.\n'''\nfrom torch.autograd import Variable\nt = torch.ones(2, 2)\nx = Variable(t, requires_grad=True)\nx.data # t\n\n## autograd\nx = Variable(torch.ones(2, 2), requires_grad = True) # requires_grad default is False.\ny = x + 2\nz = y * y * 3\nout = z.mean()\nout.backward() # output nothing.\nprint(out.grad_fn) # Function \nprint(x.grad) # 4.5\n</code></pre> \\[ \\displaylines{ out = \\frac {3}{4} \\sum (x + 2)^2 \\\\ \\frac {\\partial out}{\\partial x_i} = \\frac{3}{2}(x+2) = 4.5 } \\]"},{"location":"deeplearning/old/pytorch_tutorial/#neural-network","title":"Neural Network","text":"<p>Affine Layer: Fully connected layer.</p> <p>Affine Transformation = Linear Transformation + Translation</p> <p>\\(y = Wx + b\\)</p> <pre><code>import torch\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom functools import reduce\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(1, 6, 5) # [in_channel, out_channel, filter_size]\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, 120) # [in, out]\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n\n    # override forward(), which will be used by backward()\n    def forward(self, x):\n        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2)) # [input, (px, py)]\n        x = F.max_pool2d(F.relu(self.conv2(x)), 2) # equals [input, (p, p)]\n        x = x.view(-1, self.num_flat_features(x)) # flatten with batch\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x) # logits\n        return x\n\n    def num_flat_features(self, x):\n        size = x.size()[1:]  # \u9664\u6279\u91cf\u7ef4\u5ea6\u5916\u7684\u6240\u6709\u7ef4\u5ea6\n        return reduce(lambda x,y:x*y, size)\n\nnet = Net()\nprint(net)\n\n# list all learnable parameters\nparams = list(net.parameters())\n\n# predict\ninput = Variable(torch.randn(1,1,32,32)) # input shape is [N, C, H, W]\n# torch.nn only support 4-dim input, if necessary:\n# input.unsqueeze(0) # tf.expand_dims()\noutput = net(input)\nprint(output)\n\n# reset grad\nnet.zero_grad() # clear grad\n\n# Loss\ntarget = Variable(torch.arange(1, 11))\nloss = nn.MSELoss(output, target)\nloss.backward()\n\n# optimizer\noptimizer = optim.SGD(net.parameters(), lr = 0.01)\noptimizer.zero_grad() # the same as net.zero_grad()\noptimizer.step()\n</code></pre> <pre><code>nn.Module\n'''\nBase class for all networks\nMethod:\n@ forward(self, x)\n@ backward(self)\n@ apply(fn)\n    apply fn recursively to all sub-Modules.\n    typically used to feed weight initializer to the net.\n@ cpu()\n@ cuda(device=None)\n@ double()\n    also float(), half()\n@ children()\n@ modules() # iterator \n@ parameters()\n@ to(dtype/device)\n    to(torch.device(\"cpu\"))\n    to(torch.double)\n@ zero_grad()\n'''\ndef init_weights(m):\n    print(m)\n    if type(m) == nn.Linear:\n        m.weight.data.fill_(1.0)\n        print(m.weight)\nnet = nn.Sequential(nn.Linear(2, 2), nn.Linear(2, 2))\nnet.apply(init_weights)\n\n\nnn.ModuleList\n'''\nfor dynamic models.\njust lika a python list.\nappend(), extend()\n'''\nclass MyModule(nn.Module):\n    def __init__(self):\n        super(MyModule, self).__init__()\n        self.linears = nn.ModuleList([nn.Linear(10, 10) for i in range(10)])\n\n    def forward(self, x):\n        # ModuleList can act as an iterable, or be indexed using ints\n        for i, l in enumerate(self.linears):\n            x = self.linears[i // 2](x) + l(x)\n        return x\n\n\nnn.ModuleDict\nclass MyModule(nn.Module):\n    def __init__(self):\n        super(MyModule, self).__init__()\n        self.choices = nn.ModuleDict({\n                'conv': nn.Conv2d(10, 10, 3),\n                'pool': nn.MaxPool2d(3)\n        })\n        self.activations = nn.ModuleDict([\n                ['lrelu', nn.LeakyReLU()],\n                ['prelu', nn.PReLU()]\n        ])\n\n    def forward(self, x, choice, act):\n        x = self.choices[choice](x)\n        x = self.activations[act](x)\n        return x\n\nnn.BatchNorm2d(num_features, eps=1e-5, momentum=0.1, affine=True)\n'''\n(x-mean(x))/(sqrt(var(x))+eps) * W + b\naffine=True: add learnable weights\n'''\n\nnn.ReLU(inplace=False)\n\nnn.ConvTranspose2d(in_cs, out_cs, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True)\n'''\nfractionally-strided convolution (deconvolution/transposed convolution) \nbias=True: whether to add a learnable Bias.\n'''\n</code></pre> <pre><code>### init\ndef weights_init(m):\n    classname = m.__class__.__name__\n    if classname.find('Conv') != -1:\n        nn.init.normal_(m.weight.data, 0.0, 0.02)\n    elif classname.find('BatchNorm') != -1:\n        nn.init.normal_(m.weight.data, 1.0, 0.02)\n        nn.init.constant_(m.bias.data, 0)\n</code></pre>"},{"location":"deeplearning/old/pytorch_tutorial/#low-level-functional","title":"Low level functional","text":"<pre><code>## Function\nimport torch.nn.functional as F\nF.max_pool2d(input, kernel_size, stride=None, padding=0, dilation=1, ...)\n'''\nthis is used more than nn.MaxPool2d, however.\nkernel_size: int or (int,int)\nstride is by default the kernel_size.\n'''\nF.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1)\n'''\nthis is the function called by\nnn.Conv2d\nneed to provide weight tensor.\n'''\nF.relu(input, inplace=False)\nF.softmax(input)\nF.dropout(input, p=0.5, training=False, inplace=False)\nF.cross_entropy(input, target, weight=None, size_average=True)\n</code></pre>"},{"location":"deeplearning/old/pytorch_tutorial/#dataset-torchvision","title":"dataset &amp; torchvision","text":"<pre><code># CIFAR10\nimport torch\nimport torchvision\nimport torchvision.transforms as transforms\n\ntransform = transforms.Compose([transforms.ToTensor(),\n                                transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\ntrainset = torchvision.datasets.CIFAR10(root='./data', \n                                        train=True,\n                                        download=True,\n                                        transform=transform)\n\ntrainloader = torch.utils.data.DataLoader(trainset,\n                                          batch_size=4,\n                                          shuffle=True,\n                                          num_workers=2)\n\ntestset = torchvision.datasets.CIFAR10(root='./data',\n                                       train=False,\n                                       download=True,\n                                       transform=transform)\n\ntestloader = torch.utils.data.DataLoader(testset,\n                                         batch_size=4,\n                                         shuffle=False,\n                                         num_workers=2)\n\nclasses = ('plane', 'car', 'bird', 'cat',\n           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef imshow(img):\n    img = img / 2 + 0.5     # \u975e\u6807\u51c6\u5316\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n\ndataiter = iter(trainloader)\nimages, labels = dataiter.next()\n\nimshow(torchvision.utils.make_grid(images))\nprint(' '.join('%5s' % classes[labels[j]] for j in range(4)))\n\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n\nnet = Net()\nnet.cuda() # run on GPU\n\nimport torch.optim as optim\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)\n\n# train\nfor epoch in range(2):  \n    running_loss = 0.0\n    for i, data in enumerate(trainloader, 0):\n        inputs, labels = data\n        inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())\n        optimizer.zero_grad()\n        outputs = net(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.data[0]\n        if i % 2000 == 1999:    # \u6bcf2000\u4e2a\u5c0f\u6279\u91cf\u6253\u5370\u4e00\u6b21\n            print('[%d, %5d] loss: %.3f' %\n                  (epoch + 1, i + 1, running_loss / 2000))\n            running_loss = 0.0\n\nprint('Finished Training')\n\n# test\ndataiter = iter(testloader)\nimages, labels = dataiter.next()\n\nimshow(torchvision.utils.make_grid(images))\nprint('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))\n\n# test single\noutputs = net(Variable(images))\n_, predicted = torch.max(outputs.data, 1)\nprint('Predicted: ', ' '.join('%5s' % classes[predicted[j]]\n                              for j in range(4)))\n# test whole\ncorrect = 0\ntotal = 0\nfor data in testloader:\n    images, labels = data\n    outputs = net(Variable(images))\n    _, predicted = torch.max(outputs.data, 1)\n    total += labels.size(0)\n    correct += (predicted == labels).sum()\n\nprint('Accuracy of the network on the 10000 test images: %d %%' % (\n    100 * correct / total))\n</code></pre>"},{"location":"deeplearning/old/pytorch_tutorial/#save-model","title":"Save Model","text":"<pre><code>class Net(nn.Module):\n    pass\n\nmodel = Net()\n\noptimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)\n\nprint(\"Model's state_dict:\")\nfor param_tensor in model.state_dict():\n    print(param_tensor, \"\\t\", model.state_dict()[param_tensor].size())\n\nprint(\"Optimizer's state_dict:\")\nfor var_name in optimizer.state_dict():\n    print(var_name, \"\\t\", optimizer.state_dict()[var_name])\n\n### save state_dict\ntorch.save(model.state_dict(), PATH)\n\n# load\nmodel = Net()\nmodel.load_state_dict(torch.load(PATH))\nmodel.eval() # set dropout and BN to evaluation mode.\n\n### save the whole model by pickle\ntorch.save(model, PATH)\n\n# load\nmodel = torch.load(PATH)\nmodel.eval()\n</code></pre>"},{"location":"deeplearning/old/pytorch_tutorial/#torchvision-transforms","title":"torchvision transforms","text":""},{"location":"deeplearning/old/scipy.sparse_API/","title":"scipy.sparse API","text":""},{"location":"deeplearning/old/scipy.sparse_API/#sparse-matrix-class","title":"Sparse matrix class","text":"<ul> <li> <p>bsr_matrix</p> <p>Block Sparse Row format</p> </li> </ul> <ul> <li> <p>coo_matrix</p> <p>Coordinate format. </p> <p>No support for arithmetic operators, and no slicing.</p> <p>Usually used to construct, then changed to csr/csc for arithmetic.</p> <pre><code>coo_matrix(D)\ncoo_matrix((m, n), dtype=np.int32)\ncoo_matrix((data, (I, J)), shape=[M, N])\n\ncoo.toarray()\ncoo.shape/ndim/dtype\ncoo.tocsr() # csr_matrix(coo)\n</code></pre> </li> </ul> <ul> <li> <p>csr_matrix</p> <p>Compressed Sparse Row format</p> <p>efficient row slicing and arithmetic operations between CSRs.</p> </li> </ul> <ul> <li> <p>csc_matrix</p> <p>Compressed Sparse Column format</p> </li> </ul> <ul> <li> <p>dia_matrix</p> <p>Diagonal storage format</p> <pre><code>dia_matrix((data, offsets=0), shape=(M,N))\n</code></pre> </li> </ul> <ul> <li> <p>dok_matrix</p> <p>Dictionary Of Key format</p> </li> </ul> <ul> <li> <p>lil_matrix</p> <p>Linked List format</p> </li> </ul>"},{"location":"deeplearning/old/scipy.sparse_API/#functions","title":"Functions","text":"<pre><code>eye(m[, dtype, format=\"dia\"])\nidentity(n[, dtype, format])\ndiags(diagonals[, offsets, shape, format, dtype])\nrand(m, n[, density, format, dtype])\nissparse(x) # isspmatrix(x)\nisspmatrix_csc(x)\n</code></pre>"},{"location":"deeplearning/old/scipy.sparse_API/#linalg","title":"linalg","text":"<pre><code>inv(A)\nexpm(A) # exp using Pade approximation\n\neigs(A[, k, M, which])\n    '''\n    k: calculate the first k eig\n    M: generalized eigenproblem Ax=wMx\n    which: which first k eig to find\n        \"LM\": largest magnitude\n        \"SM\": smallest magnitude\n        \"LR\": largest real part\n        \"LI\": largest imaginary part\n    '''\neigsh(A[, k]) # fast for real sym mat\n</code></pre>"},{"location":"deeplearning/old/sklearn_API/","title":"sklearn API","text":""},{"location":"deeplearning/old/sklearn_API/#cluster","title":"cluster","text":"<ul> <li>classes</li> <li>functions</li> </ul>"},{"location":"deeplearning/old/sklearn_API/#datasets","title":"datasets","text":"<ul> <li> <p>loaders</p> <ul> <li>load_*</li> </ul> <pre><code>load_digits(n_classes=10, return_X_y=False)\ndigits = load_digits()\n'''\ndigits.data : [N, 64]\ndigits.images : [N, 8, 8]\ndigits.target : [N, 1]\n'''\ndata, target = load_digits(return_X_y=True)\n\nload_iris(return_X_y=False)\n</code></pre> <ul> <li>fetch_*</li> </ul> <pre><code># fetch_lfw_people(data_home=None, resize=0.5, min_faces_per_persion=0, color=False, ...)\nlfw = fetch_lfw_people()\n'''\n'~/scikit_learn_data' is the data_home by default.\n'''\n</code></pre> </li> </ul> <ul> <li>generators</li> </ul>"},{"location":"deeplearning/old/sklearn_API/#decomposition","title":"decomposition","text":""},{"location":"deeplearning/old/sklearn_API/#ensemble","title":"ensemble","text":"<pre><code>RandomForestRegressor()\nRandomForestClassifier()\n</code></pre>"},{"location":"deeplearning/old/sklearn_API/#feature_extraction","title":"feature_extraction","text":""},{"location":"deeplearning/old/sklearn_API/#linear_model","title":"linear_model","text":""},{"location":"deeplearning/old/sklearn_API/#manifold","title":"manifold","text":""},{"location":"deeplearning/old/sklearn_API/#metrics","title":"metrics","text":"<ul> <li> <p>classification metrics</p> <pre><code>classification_report(y_true, y_pred)\n'''\n@ labels=None : use in report\n@ digits=2 : precision of numbers\n# string of report\n'''\nconfusion_matrix(yt, yp)\n'''\n# confusionMat : [N_classes,N_classes]\n  this mat count the result of all classification.\n  &gt;&gt;&gt; y_true = [2, 0, 2, 2, 0, 1]\n  &gt;&gt;&gt; y_pred = [0, 0, 2, 2, 0, 2]\n  &gt;&gt;&gt; confusion_matrix(y_true, y_pred)\n  array([[2, 0, 0],\n             [0, 0, 1],\n             [1, 0, 2]])\n'''\n</code></pre> </li> </ul>"},{"location":"deeplearning/old/sklearn_API/#model_selection","title":"model_selection","text":"<ul> <li>Splitter classes</li> </ul> <ul> <li> <p>Splitter functions</p> <pre><code>train_test_split(*arr, ...)\n'''\n$ *arrays: the whole dataset. (X) or (X,y)\n$ test_size: float for percentage, int for number. default is 0.25\n$ train_size: 1 - test_size\n$ shuffle=True\n# splitting: (X_train, X_test[, y_train, y_test])\n'''\ncross_val_score(clf, X, y, cv=3)\n'''\nsimply print this to get cv.\n'''\nkf = KFold(n_splits=3, shuffle=False)\n'''\nfor train_idx, test_idx in kf.split(X):\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train, y_test = ...\n'''\n</code></pre> </li> </ul> <ul> <li> <p>Hyper parameter optimizer</p> <pre><code>GridSearchCV(estimator, ...)\n'''\n$ estimator: interface, have a score funtion.\n$ param_grid: dict or list\n@ cv_results_: dict of ndarray, or dataframe\n@ best_estimator_: \n@ best_score_:\n@ best_params_:\nM fit(X[, y])\nM predict(X): use the best.\n\nsvc = svm.SVC()\nparameters = {'kernel':['linear', 'rbf'], 'C':[1, 10]}\nclf = GridSearchCV(svc, parameters)\n'''\n</code></pre> </li> </ul> <ul> <li> <p>Model validation</p> <pre><code>cross_validate()\ncross_val_score(estimator, X, y=None)\n'''\n$ cv=None: int of KFold. default is 3.\n# scores\n'''\ncross_val_predict()\n</code></pre> </li> </ul>"},{"location":"deeplearning/old/sklearn_API/#naive_bayes","title":"naive_bayes","text":""},{"location":"deeplearning/old/sklearn_API/#pipeline","title":"pipeline","text":""},{"location":"deeplearning/old/sklearn_API/#preprocessing","title":"preprocessing","text":"<pre><code>scaler = StandardScaler()\ndf[col+\"_scaled\"] = scaler.fit_transform(df[col].values.reshape(-1,1))\n</code></pre>"},{"location":"deeplearning/old/sklearn_API/#svm","title":"svm","text":""},{"location":"deeplearning/old/sklearn_API/#tree","title":"tree","text":""},{"location":"deeplearning/old/sklearn_API/#utils","title":"utils","text":""},{"location":"deeplearning/old/sklearn_tutorial/","title":"Sklearn tutorial","text":""},{"location":"deeplearning/old/sklearn_tutorial/#introduction","title":"Introduction","text":"<ol> <li>Machine Learning</li> </ol> <ul> <li>Supervised learning<ul> <li>classification</li> <li>regression</li> </ul> </li> <li>Unsupervised learning<ul> <li>clustering</li> <li>density estimation</li> </ul> </li> </ul> <ol> <li> <p>Loading example dataset</p> <pre><code>from sklearn import datasets\niris = datasets.load_iris()\ndigits = datasets.load_digits()\n\nprint(digits.data) # [S, N*M]\nprint(digits.data.shape) # [N, M]\nprint(digits.target) # [S, 1]\nprint(digits.images) # [S, N, M]\n</code></pre> </li> <li> <p>Learning and predicting</p> <pre><code>from sklearn import svm\n# build a classifier(estimator)\nclf = svm.SVC(gamma=0.001, C=100.)\n# fit in training data\nclf.fit(digits.data[:-1], digits.target[:-1])\n# test with the last data\nclf.predict(digits.data[-1])\n</code></pre> </li> <li> <p>Model persistence</p> <pre><code>import pickle\ns = pickle.dumps(clf)\nclf2 = pickle.loads(s)\n# or\nfrom sklearn.externals import joblib\njoblib.dump(clf, \"file.pkl\")\nclf = joblib.load(\"file.pkl\")\n</code></pre> </li> </ol>"},{"location":"deeplearning/old/sklearn_tutorial/#supervised-learning","title":"Supervised Learning","text":"<ul> <li> <p>k-NN algorithm for classification</p> <p>one of the simplest algorithm for ML. </p> <p>Prediction is just the vote of its k-NN.</p> <pre><code>from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(iris_X_train, iris_y_train)\nknn.predict(iris_X_test)\n</code></pre> <p>the curse of dimension:</p> <p>The common theme of these problems is that when the dimensionality increases, the volume of the space increases so fast that the available data become sparse. This sparsity is problematic for any method that requires statistical significance. In order to obtain a statistically sound and reliable result, the amount of data needed to support the result often grows exponentially with the dimensionality</p> </li> </ul> <ul> <li> <p>Linear model</p> <ul> <li>Linear regression model:</li> </ul> </li> </ul> \\[ \\displaylines{   y = Xw + \\epsilon \\\\   J(w) = min_w||Xw-y||^2 \\\\   \\nabla J(w) = 2X'(Xw-y) \\\\   w_k = w_{k-1} - \\alpha\\nabla J(w) \\\\   in \\ fact \\ we \\ can \\ solve \\ it: \\\\   w = (X'X)^{-1}X'y } \\] <pre><code>from sklearn import linear_model\nregr = linear_model.LinearRegression()\nregr.fit(X_train, y_train)\n# learned \\beta values\nprint(regr.coef_)\n# variance score. 1 is perfect.\nregr.score(X_test, y_test)\n</code></pre> <p>* Ridge regression model</p> <pre><code>LR is very **sensitive to noise**, so RR is designed to improve this.\n</code></pre> \\[ \\displaylines{     J(W) = min_w\\{||Xw-y||^2 + \\alpha||w||^2\\} } \\] <pre><code>so we can set an $\\alpha$ to avoid $w$ being so big and thus too sensitive.\n\n$\\alpha||w||^2$ is called the regularization.\n\n```python\nregr = linear_model.Ridge(alpha=0.1)\n# also, if we use L1 norm:\nregr = linear_model.Lasso(alpha=0.1)\n```\n</code></pre> <p>* Logistic regression model</p> <pre><code>linear model proposed for Classification.\n\nC is for regularization.\n\n```python\nlogistic = linear_model.LogisticRegression(C=1e5)\n```\n</code></pre> <ul> <li> <p>SVM </p> <ul> <li> <p>Linear SVM</p> <p>SVM can be used in SVR(regression) or SVC(classification) form.</p> <pre><code>from sklearn import svm\nsvc = svm.SVC(kernel='linear')\n</code></pre> </li> </ul> <ul> <li> <p>Kernels</p> <pre><code>svc = svm.SVC(kernel='rbf')\n'''\nrbf: exp(-gamma||x-x'||^2)\npoly: (&lt;x,x'&gt; + r)^d\nsigmoid:\n'''\n</code></pre> </li> </ul> </li> </ul>"},{"location":"deeplearning/old/sklearn_tutorial/#model-selection","title":"Model Selection","text":"<ul> <li> <p>Score</p> <p>Bigger is Better.</p> <ul> <li> <p>K Fold Cross validation</p> <pre><code>from sklearn.model_selection import KFold, cross_val_score\n# split to 3 part\nk_fold = KFold(n_splits=3)\ntrain_indices, test_indices = k_fold.split(X)\n# KFold(n_splits, shuffle=False)\n</code></pre> </li> </ul> <ul> <li> <p>cross_val_score</p> <pre><code>cross_val_score(estimator, X, y)\n# by default using 3-fold, and output three scores.\n</code></pre> </li> </ul> <ul> <li> <p>CV estimators</p> <p>some shortcut for calling CV automatically.</p> <pre><code>lasso = linear_model.lassoCV()\nlasso.fit(...)\nprint(lasso.alpha_)\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>Grid search</p> <p>to search through the parameter space and find the optimal.</p> <pre><code>from sklearn_model_selection import GridSearchCV\nCs = np.linspace(-6, -1, 10)\nclf = GridSearchCV(estimator=svc, param_grid=dict(C=Cs), n_jobs=-1) \n# n_jobs=-1 : use all cpus\n# by default, it use 3-fold Cross Validation.\nclf.fit(train_X,train_y)\nprint(clf.best_score_)\nprint(clf.best_estimator_.C)\nclf.score(test_X, test_y)\n</code></pre> </li> </ul>"},{"location":"deeplearning/old/sklearn_tutorial/#unsupervised-learning","title":"Unsupervised learning","text":"<ul> <li> <p>Clustering</p> <ul> <li>K-Means</li> </ul> <pre><code>from sklearn import cluster\nkm = cluster.KMeans(n_clusters=3)\nkm.fit(X)\nprint(km.labels_)\n</code></pre> </li> </ul> <ul> <li> <p>Decomposition</p> <ul> <li>PCA (Principle)</li> </ul> <pre><code>from sklearn import decomposition\npca = decomposition.PCA()\npca.fit(X)\n# larger score means more useful\nprint(pca.explained_variance_)\n# choose targeted dims, here 2\npca.n_components = 2\nX_reduced = pca.fit_transform(X)\n</code></pre> <ul> <li> <p>ICA (Independent)</p> <p>separate a multivariate signal into additive subcomponents that are maximally independent.</p> </li> </ul> </li> </ul>"},{"location":"deeplearning/old/sklearn_user_guide/","title":"Sklearn user guide","text":""},{"location":"deeplearning/old/sklearn_user_guide/#supervised-learning","title":"Supervised learning","text":"<ul> <li> <p>Generalized Linear Models</p> <ul> <li>Ordinary Least Squares</li> </ul> </li> </ul> \\[ \\displaylines{     argmin_w\\{||Xw+b-y||_2^2\\} } \\] <pre><code>```python\nclf = LinearRegression()\nclf.fit(X, y) # [N, M]\nclf.coef_ # w, [M, 1]\nclf.intercept_ # b\n```\n</code></pre> <p>* Ridge Regression</p> \\[ \\displaylines{     argmin_w\\{||Xw+b-y||_2^2+\\alpha||w||_2^2\\} } \\] <pre><code>```python\nclf = Ridge(alpha=0.5)\n'''\n$ alpha: regularization, positive or 0. \n'''\n```\n</code></pre> <p>* Lasso Regression</p> \\[ \\displaylines{     argmin_w\\{\\frac{1}{2N}||Xw+b-y||_2^2 + \\alpha||w||_1\\} } \\] <p>* Least Angle Regression</p> <pre><code>```python\nclf = LassoLars(alpha=.1)\n```\n</code></pre> <p>* Bayesian Regression</p> <p>* Logistic Regression</p> <pre><code>for classification instead of regression.\n\nwe can use L1 or L2 norm for regularization.\n</code></pre> \\[ \\displaylines{     argmin_{w,b}\\{\\frac 1 2 ||w||_2 + C\\sum_{i=1}^nlog(exp(-y_i(X_i^Tw+b))+1)\\} } \\] <pre><code>```python\n...\n```\n</code></pre> <p>* SGD</p> <pre><code>for large dataset\n</code></pre> <p>* Perceptron</p> <pre><code>for large dataset\n</code></pre> <p>* Robustness regression</p> <pre><code>detect outliers\n</code></pre> <p>* Polynomial Regression</p> <pre><code>by adding dimensions, we turn a polynomial model into linear.\n\n```python\nfrom sklearn.preprocessing import PolynomialFeatures\nX = np.arange(6).reshape(3, 2)\n# [x1, x2]\npoly = PolynomialFeatures(degree=2)\nX_ = poly.fit_transform(X)\n# [1, x1, x2, x1^2, x1x2, x2^2]\n```\n</code></pre> <ul> <li>Linear and Quadratic Discriminant Analysis</li> </ul> <ul> <li> <p>Kernel ridge regression</p> <p>faster than SVM in large dataset with near performance.</p> </li> </ul> <ul> <li> <p>Support Vector Machines</p> <ul> <li></li> </ul> </li> </ul>"},{"location":"deeplearning/old/sklearn_user_guide/#unsupervised-learning","title":"Unsupervised learning","text":""},{"location":"deeplearning/old/sklearn_user_guide/#model-selection-and-evaluation","title":"Model selection and evaluation","text":""},{"location":"deeplearning/old/sklearn_user_guide/#dataset-transformations","title":"Dataset transformations","text":""},{"location":"deeplearning/old/sklearn_user_guide/#dataset-loading-utilities","title":"Dataset loading utilities","text":""},{"location":"deeplearning/old/sklearn_user_guide/#scaling-performance","title":"Scaling &amp; Performance","text":""},{"location":"deeplearning/old/tensorflow_API/","title":"tensorflow API","text":""},{"location":"deeplearning/old/tensorflow_API/#tips","title":"tips","text":"<ul> <li> <p><code>axis</code></p> <p>None is all, 0 is by col, 1 is by row, [0, 1] is both row and col (the same as None for 2D data.)</p> </li> </ul> <ul> <li> <p>Batch training</p> <p>Compared to Stochastic training (each time pick one train data and fit it.)</p> <p>batch training pick BATCH SIZE train data randomly and fit them.</p> <p>More robust and converge faster.</p> <p>but how to choose a good BATCH SIZE is very confusing.</p> <p>**Tensorflow is suited for batch training, and the data shapes all start with a [None, ...], which is the batch dimension. **</p> </li> </ul> <ul> <li> <p>Batch normalization</p> <p>this is totally different from batch training. </p> <p>BN means Normalize the inputs of all layers, instead of just normalize the first input.</p> <p>An implementation:</p> <pre><code># think of this as the input layer\nmodel.add(Dense(64, input_dim=16, init=\u2019uniform\u2019))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\u2018tanh\u2019))\nmodel.add(Dropout(0.5))\n# think of this as the output layer\nmodel.add(Dense(2, init=\u2019uniform\u2019))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\u2018softmax\u2019))\n</code></pre> <p>...seems not that useful ?</p> </li> </ul> <ul> <li> <p>Losses</p> <ul> <li>MSE (mean of L2_loss)</li> </ul> <ul> <li>MAE (mean of L1_loss)</li> </ul> <ul> <li>MAPE (percentage error)</li> </ul> </li> </ul> \\[ \\displaylines{     MAPE = \\frac{1}{n}\\sum_{i=1}^n|\\frac{\\hat y - y_i}{y_i}| } \\] <p>* binary cross entropy</p> <pre><code>binary classification with sigmoid.\n</code></pre> \\[ \\displaylines{     L = -\\sum_{i=1}^n(y_ilog(\\hat y) + (1-y_i)log(1-\\hat y)) } \\] <p>* categorical cross entropy</p> <pre><code>multiple classification with one_hot + softmax.\n</code></pre> \\[ \\displaylines{     L = -\\sum_{i=1}^n\\sum_{t=1}^c(y_{i,t}log\\hat y_t) } \\]"},{"location":"deeplearning/old/tensorflow_API/#tensorflow","title":"tensorflow","text":"<pre><code>Session()\n# with as \nInteractiveSession()\n# start a default session, don't need with as.\n\n## operations -----\nadd(x,y)\nmultiply(x,y)\npow(a,b)\ngreater(x,y,name=None)\nequal(x,y)\ncast(x,dtype)\nwhere(condition, x, y, name)\n'''\ncondition is a tensor of bool.\nreturn indices.\n#####\ng = tf.where(tf.greater(x,30))\n'''\ngather()\n'''\nparams, # tensor from where to gather\nindices, # tensor of indices to gather\nvalidate_indices=None,\nname=None,\naxis=0\n#####\nv = tf.gather(x, g)\n'''\nreduce_sum()\n'''\ninput_tensor \naxis=None # None means reduce all, return single element.\nkeepdims=None # if True, avoid squeezing dims.\nname=None\n'''\n\n## generators -----\nzeros(shape)\nones(shape)\nfill(shape, value)\nlin_space(start,stop,num)\nrange(start, limit, delta, dtype)\n\nrandom_uniform(shape, dtype, ...)\n'''\nshape, # [] for scalar\nminval=0, maxval=None, # 1 for float\ndtype=tf.float32,\nseed=None, name=None\n'''\n\ncase()\n'''\npred_fn_pairs, # list or dict of pairs(in tuple form)\ndefault=None, # callable\nexclusive=False, # return immediately when one condition is True\nstrict=False, name='case'\n#####\nx = tf.random_uniform([],minval=-1,maxval=1)\ny = tf.random_uniform([],minval=-1,maxval=1)\nout = tf.case([(tf.greater(x,y),lambda: x-y),\n               (tf.less(x,y),lambda: x+y)],\n             default=lambda: 0.0\n             )\n'''\n\nadd_n(tensors)\n'''\nadd up a list of tensor element-wise\n'''\n\nmoments(x, axes)\n'''\ncalculate mean and var along axes.\nmean, variance = moments(x, [0])\n'''\n\nconstant()\n\nzeros_like(Tensor)\n\n\ndiag(diagonal, name)\nmatrix_determinant(mat)\nunique()\n'''\nuni, idx = tf.unique(x)\n'''\n</code></pre> <pre><code>g = tf.Graph()\nwith g.as_default():\n    pass\nsess = tf.Session(graph=g)\n\ntf.reset_default_graph()\ntf.get_default_graph()\n</code></pre>"},{"location":"deeplearning/old/tensorflow_API/#train","title":"train","text":"<pre><code>GradientDescentOptimizer(learning_rate)\n</code></pre>"},{"location":"deeplearning/old/tensorflow_API/#layers","title":"layers","text":"<p>An encapsulation of <code>tf.nn</code>.</p> <pre><code>conv2d()\n'''\ninputs # [N,H,W,C]\nfilters # int, out_channels\nkernel_size # int--&gt;[1,K,K,1]; or (int, int)--&gt;[1,K,L,1]\nstrides=(1,1) # [1, 1, 1, 1]\npadding=\"valid\" # or \"same\"\ndata_format=\"channels_last\" # NHWC\nactivation=None # tf.nn.relu\nuse_bias=True # auto plus bias\nname=None\nreuse=None # whether to reuse weights of a previous same-named layer.\n#####\noutput # [N,HH,WW,CC]\n'''\ndense()\n'''\ninputs # tensor\nunits # int, dimension of output\nactivatoin=None # tf.nn.relu \nuse_bias=True # \ntrainable=True # whether to train kernel and bias.\nname\nreuse\n#####\noutput = activation(inputs*kernel + bias)\n'''\ndropout()\n'''\ninputs # tensor\nrate=0.5 # 50% of inpute unit will be dropped to 0, others scaled up by 1/0.5=2\ntraining=False # whether to use dropout.\nname\n#####\nWe only dropout when training, and shouldn't when testing!\nso the routine is to use a placeholder. (rate or training)\n#####\nreturn inputs/rate or 0.\n'''\nflatten(inputs)\n'''\npreserve the batch dimension.\n(None, 4, 4) --&gt; (None, 16)\n'''\nmax_pooling2d()\n'''\ninputs\npool_size # int or (int, int)\nstrides # int or (int, int)\npadding=\"valid\"\ndata_format=\"channels_last\",\nname\n'''\naverage_pooling2d()\n</code></pre>"},{"location":"deeplearning/old/tensorflow_API/#nn","title":"nn","text":"<pre><code>## activation -----\nrelu(features, name=None)\n'''\nreturn max(features, 0)\n'''\ndropout(x, keep_prob)\n'''\nthere is no *training* param, so use ph_keep_prob.\n#####\nif rand() &lt; keep_prob: return x/keep_prob\nelse: return 0\n'''\n\n## convolution -----\nconv2d()\n'''\ninput # [batch, in_height, in_width, in_channels]\nfilter # [filter_height, filter_width, in_channels, out_channels]\nstrides # [1, stride, stride, 1] usually\npadding # \"SAME\", \"VALID\"\ndata_format # default is \"NHWC\"\nname=None\n#####\noutput # [batch, out_height, out_width, out_channels]\n'''\n\n## pooling -----\navg_pool(value,ksize,strides,padding,data_format,name)\n'''\nksize # [1, k, k, 1]\nstrides # [1, 1, 1, 1]\n'''\nmax_pool(value, ksize, strides, padding, data_format, name)\n\n## normalization -----\nl2_normalize(x, axis=None, epsilon=1e-12, name=None)\n'''\nreturn x / sqrt(max(sum(x**2), epsilon))\n'''\n\n## losses -----\nl2_loss(t, name=None)\n'''\nreturn sum(t**2)/2\n'''\n\n## classification -----\nsoftmax(logits, axis=None, name)\n'''\nreturn tf.exp(logits)/tf.reduce_sum(tf.exp(logits), axis)\n'''\nsoftmax_cross_entropy_with_logits()\n'''\nthis will call softmax with logits, so NEVER softmax the logits before it. (speed up)\n#####\nlabels # one_hot tensor\nlogits # same as labels\n'''\n</code></pre>"},{"location":"deeplearning/old/tensorflow_API/#contrib","title":"contrib","text":""},{"location":"deeplearning/old/tensorflow_API/#keras","title":"keras","text":"<pre><code>from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten\nfrom keras.optimizers import \n\n### layers -----\nConv2D() # or Convolution2D\n'''\ninput_shape # [H,W,C], correspond to [N,H,W,C]\ninput_dim # H, correspond to [N,H]\n#####\nfilters # int\nkernel_size # int or (int, int)\nstrides # int or (int, int)\npadding=\"valid\" # or \"same\", CaSeInsEnsiTiVE\nactivation # \"relu\", \"linear\"\n'''\nDense()\n'''\nunits\nactivation\n'''\nMaxPooling2D() # or MaxPool2D\n'''\npool_size\nstrides\npadding\n'''\nSoftmax()\nFlatten()\nReLU()\nDropout(rate)\n\n### optimizers -----\nAdam()\n'''\nlr, ...\n'''\nAdagrad()\nRMSprop()\nSGD()\n'''\nlr\nmomentum # float&gt;=0\ndacay # float&gt;=0\n'''\n\n### losses -----\nKLD # or kld. KL divergence, relative entropy\nMAE # or mae. Mean absolute error\nMSE # or mse. Mean squared error\nbinary_crossentropy\ncategorical_crossentropy\n\n\n### utils -----\nto_categorical(y, num_classes=None)\n</code></pre> <pre><code># example\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=2))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10, activation = \"softmax\"))\n\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nmodel.fit(x, y, batch_size=32, epochs=10)\n# model.evaluate(x,y,batch_size=None)\nmodel.predict(x, batch_size=None)\nmodel.save(\"full_model.h5\")\n# model = keras.models.load_model(\"xxx.h5\")\n</code></pre>"},{"location":"deeplearning/old/tensorflow_API/#summary","title":"summary","text":""},{"location":"deeplearning/onnx/basics/","title":"ONNX: Open Neural Network eXchange","text":"<p>ONNX: An open standard format for ML models.</p> <p>ONNX Runtime: a multi-platform and hardware performance-focused engine for ONNX models.</p>"},{"location":"deeplearning/onnx/basics/#python-api","title":"Python API","text":"<p>Install:</p> <pre><code>pip install numpy protobuf==3.16.0\npip install onnx onnxruntime onnxruntime_gpu\n</code></pre> <p>Check model IO size:</p> <pre><code>import onnxruntime\n\nsess = onnxruntime.InferenceSession(path)\n\n# single\nprint(sess.get_inputs()[0].name)\n\n# loop all\nfor x in sess.get_inputs():\n    print(x.name, x.shape, x.type)\nfor x in sess.get_outputs():\n    print(x.name, x.shape, x.type)\n\n# util\ndef inspect(path):\n    import onnxruntime\n    sess = onnxruntime.InferenceSession(path)\n    for x in sess.get_inputs():\n        print(x.name, x.shape, x.type)\n    for x in sess.get_outputs():\n        print(x.name, x.shape, x.type)\n</code></pre> <p>Update IO size:</p> <pre><code>import onnx\nfrom onnx.tools import update_model_dims\n\nmodel = onnx.load(path)\n\n# Here both 'seq', 'batch' and -1 are dynamic using dim_param.\nvariable_length_model = update_model_dims.update_inputs_outputs_dims(model, {'input_name': ['seq', 'batch', 3, -1]}, {'output_name': ['seq', 'batch', 1, -1]})\n</code></pre> <p>Save:</p> <pre><code>onnx.save(onnx_model, path)\n</code></pre>"},{"location":"deeplearning/onnx/model_visualization/","title":"Netron","text":"<p>https://github.com/lutzroeder/netron</p> <p>Amazing work!</p>"},{"location":"deeplearning/onnx/torch2onnx/","title":"pytorch to onnx","text":""},{"location":"deeplearning/onnx/torch2onnx/#export-trained-models-to-onnx-format","title":"export trained models to onnx format","text":"<pre><code>model = Network()\nmodel.load_state_dict(pretrained_path)\n\n# set to eval mode (must)\nmodel.eval()\n\n# To export the full model, we need to know IO size. \n# Usually it is fixed, but we can use dynamic axes to support random shapes (like the batch_size)\nbatch_size = 1\nx = torch.randn(batch_size, 1, 64, 64, requires_grad=True)\n\noutput_path = \"out.onnx\"\ntorch.onnx.export(model, x, output_path, \n                  export_params=True, # export parameters, of course\n                  do_constant_folding=True, # optimization\n                  opset_version=11, # default is 9, some ops not supported.\n                  input_names=['input'],\n                  output_names=['output'],\n                  # dynamic axes is a dict of {input/output name: dimension list or dict}\n                  # list specifies each dynamic axis, dict supports custom name {axis: name}.\n                  # use a string means it is dynamic, else a number or omitted in dict means fixed. \n                  dynamic_axes={\n                      'input': {0: 'batch_size'}, # or [0], automatic named like \"input_dynamic_axes_1\"\n                      'output': {0: 'batch_size'},\n                  }\n                  )\n\n# verify the onnx model\nimport onnx\nonnx_model = onnx.load(output_path)\nonnx.checker.check_model(onnx_model)\n\n# verify results\nimport onnxruntime\nort_session = onnxruntime.InferenceSession(output_path)\ny = model(x) # GT\nort_inputs = {ort_session.get_inputs()[0].name: x.detach().cpu().numpy()}\nort_outputs = ort_session.run(None, ort_inputs)\nnp.testing.assert_allclose(y.cpu().numpy(), ort_outputs[0], rtol=1e-03, atol=1e-05)\n</code></pre>"},{"location":"deeplearning/onnx/web/","title":"web deployment","text":""},{"location":"deeplearning/onnx/web/#install","title":"install","text":"<pre><code>npm install -S onnxruntime-web\n</code></pre>"},{"location":"deeplearning/onnx/web/#example","title":"example","text":""},{"location":"deeplearning/spark/dataframe/","title":"Spark SQL","text":"<pre><code>from pyspark.sql import SparkSession\n\n# create spark\nspark = SparkSession.builder.getOrCreate()\n\n# load data\ndf = spark.read.json('test.json') # json\ndf = spark.read.csv('foo.csv', header=True) # csv\n\n# create by Row\nfrom pyspark.sql import Row\ndf = spark.createDataFrame([\n    Row(a=1, b=2., c='string1', d=date(2000, 1, 1), e=datetime(2000, 1, 1, 12, 0)),\n    Row(a=2, b=3., c='string2', d=date(2000, 2, 1), e=datetime(2000, 1, 2, 12, 0)),\n    Row(a=4, b=5., c='string3', d=date(2000, 3, 1), e=datetime(2000, 1, 3, 12, 0))\n])\n\n# create from explicit schema\ndf = spark.createDataFrame([\n    (1, 2., 'string1', date(2000, 1, 1), datetime(2000, 1, 1, 12, 0)),\n    (2, 3., 'string2', date(2000, 2, 1), datetime(2000, 1, 2, 12, 0)),\n    (3, 4., 'string3', date(2000, 3, 1), datetime(2000, 1, 3, 12, 0))\n], schema='a long, b double, c string, d date, e timestamp')\n\n# create from pandas df\npandas_df = pd.DataFrame({\n    'a': [1, 2, 3],\n    'b': [2., 3., 4.],\n    'c': ['string1', 'string2', 'string3'],\n    'd': [date(2000, 1, 1), date(2000, 2, 1), date(2000, 3, 1)],\n    'e': [datetime(2000, 1, 1, 12, 0), datetime(2000, 1, 2, 12, 0), datetime(2000, 1, 3, 12, 0)]\n})\ndf = spark.createDataFrame(pandas_df)\n\n# view data\ndf.columns # cols\ndf.printSchema() # detailed cols definition\ndf.show() # all cols, default first 20 rows\ndf.show(1) # all cols, the first row\ndf.select('name').show() # specific col\ndf.filter(df['age'] &gt; 21).show() # filter by col condition\ndf.groupBy(\"age\").count().show() # group\n\n# sql query\nsqlDF = spark.sql(\"SELECT * FROM people\")\nsqlDF.show()\n\n# write / export data\npandas_df = df.toPandas() # pandas\ndf.write.csv('foo.csv', header=True) # csv\n</code></pre>"},{"location":"docker/basics/","title":"docker basics","text":""},{"location":"docker/basics/#install","title":"install","text":"<p>Follow https://docs.docker.com/engine/install/ubuntu/</p> <pre><code>### ubuntu\n# remove old\nsudo apt-get remove docker docker-engine docker.io containerd runc\n\n# install from repo\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg lsb-release\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io  \n\n# verify\nsudo docker run --rm hello-world\n</code></pre> <p>Or install from TUNA:</p> <pre><code>export DOWNLOAD_URL=\"https://mirrors.tuna.tsinghua.edu.cn/docker-ce\"\n\ncurl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh | sh\n</code></pre> <p>You can control docker daemon by:</p> <pre><code>sudo systemctl enable docker\nsudo systemctl start docker\n</code></pre> <p>By default, only root user (<code>sudo</code>) can use docker. A docker group can be created to avoid this, but anyone in the docker group equals a sudoer.</p> <pre><code>sudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker # reset group information without logout\n\n# verify\nid -nG # should contain docker\ndocker run --rm hello-world \n</code></pre>"},{"location":"docker/basics/#docker-hub-mirrors","title":"docker hub mirrors","text":"<p>Add in <code>/etc/docker/daemon.json</code>:</p> <pre><code>{\n  \"registry-mirrors\": [\n    \"https://hub-mirror.c.163.com\",\n    \"https://mirror.baidubce.com\"\n  ]\n}\n</code></pre> <pre><code>sudo systemctl daemon-reload\nsudo systemctl restart docker\n</code></pre>"},{"location":"docker/basics/#command-line","title":"command line","text":"<ul> <li> <p>get image from docker hub:</p> <p>Image is a pre-built system to run in docker.</p> <pre><code>docker pull user/repo[:tag]\n</code></pre> </li> </ul> <ul> <li> <p>list local images:</p> <pre><code># ls local images (top layer images)\ndocker image ls\n\n# example otuput:\n# REPOSITORY     TAG          IMAGE ID       CREATED        SIZE\n# hello-world    latest       301bfc30ea2b   43 hours ago   13.3kB\n\n\n# ls dangling images (deprecated images, displayed as &lt;none&gt;:&lt;none&gt;)\ndocker image ls -f dangling=true\n# auto clean dangling images\ndocker image prune\n\n# ls all local images (including middle layer images/dependencies, do not delete them!)\ndocker image ls -a\n\n# ls matched repos\ndocker image ls ubuntu\n\n# only ls IMAGE ID (can be used with rm)\ndocker image ls -q\n</code></pre> </li> </ul> <ul> <li> <p>remove local images</p> <pre><code># rm a local image\ndocker image rm &lt;name[:tag]/image_ID&gt;\n\n# rm all images named ubuntu*\ndocker image rm -f $(docker image ls -q ubuntu)\n\n# prune to free storage\ndocker system prune -f\n</code></pre> </li> </ul> <ul> <li> <p>run &amp; manage container</p> <p>Container is the instantiation of an image.</p> <pre><code>### run a command and exit.\ndocker run ubuntu:18.04 /bin/echo \"Hello!\"\n\n### run interactive container\n# --interactive, --tty. should follow nothing, or a specific shell\ndocker run -it ubuntu:18.04 [/bin/bash]\n# enter shell\necho \"Hello!\"\nexit\n# exit shell\n\n# auto remove the container when exit\ndocker run --rm -it ubuntu:18.04\n\n### run detached container \n\n# the command itself must be non-terminating!\ndocker run -d [--name test] ubuntu:18.04 /bin/bash -c \"while true; do echo hello world; sleep 1; done\"\n# will print the &lt;ID&gt; of this container\n\n# this will still exit after finishing the command\ndocker run -d ubuntu:18.04 /bin/bash -c \"echo hello world\"\n\n# detached interactive:\ndocker run -dit ubuntu:18.04 \n\n### port mapping (--publish)\n# single port mapping\ndocker run -d -p &lt;host&gt;:&lt;container&gt; nginx\n# random port mapping\ndocker run -d -P nginx\n# use host network (all ports are mapped identitcally)\ndocker run --network host nginx\n\n### volume mapping (--volume)\ndocker run -v /host:/container -it ubuntu\n\n### docker container\n\n# only ls running containers\ndocker container ls\n# example output:\n# CONTAINER ID   IMAGE    COMMAND    CREATED     STATUS          PORTS     NAMES\n# if name not assigned, it will be randomly generated like `elastic_knuth`\n\n# ls all containers (recently stopped)\ndocker container ls -a\n\n# print logs from detached container\ndocker container logs &lt;ID/name&gt;\n\n# terminate a running container\ndocker container stop &lt;ID/name&gt;\n\n# start a terminated container\ndocker container start &lt;ID/name&gt;\n\n# restart a running container\ndocker container restart &lt;ID/name&gt;\n\n### attach to the current shell of a detached container\ndocker attach &lt;ID/name&gt;\n# enter shell\n# if exit from this shell, the container will stop too.\n\n### attach by entering a new shell.\ndocker exec -it &lt;ID/name&gt; bash\n# enter shell\n# if exit from this shell, the container will not stop!\n\n### remove terminated container\ndocker container rm &lt;ID/name&gt;\n\n# auto remove all termintaed containers\ndocker container prune\n</code></pre> </li> </ul> <ul> <li> <p>other utils</p> <pre><code># ps of all running containers\ndocker ps \n\n# ps of all containers\ndocker ps -a\n\n# filtered ps\ndocker ps --filter \"name=nostalgic\"\n\n# top \ndocker top &lt;ID/name&gt;\n</code></pre> </li> </ul> <ul> <li> <p>commit to image</p> <pre><code># run a detached nginx container\ndocker run --name webserver -d -p 80:80 nginx\n\n# enter the shell of the container\ndocker exec -it webserver bash\n# begin shell: modify the index file\necho '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html\nexit\n# end shell\n\n# check changes by diff \ndocker diff webserver\n\n# commit changes\ndocker commit webserver nginx:v2 [--message \"change index\"]\n\n# check the new image\ndocker image ls nginx\n\n# check history\ndocker history nginx:v2\n\n# now you can run this new image\ndocker run --name webserver2 -d -p 81:81 nginx:v2\n</code></pre> <p>Never use commit to build a image! The image built from commit is a black box, and may contain many redundant layers.</p> <p>Always use <code>Dockerfile</code> to build a image!</p> </li> </ul>"},{"location":"docker/basics/#dockerfile","title":"Dockerfile","text":"<p>To build an image, we should first create an empty folder and create a <code>Dockerfile</code>:</p> <pre><code>mkdir repo\ncd repo\nvim Dockerfile\n</code></pre> <p>edit it:</p> <pre><code>FROM nginx\nRUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html\n</code></pre> <p>Then build it:</p> <pre><code># image name is nginx, tag is v3, context is pwd\ndocker build -t nginx:v3 .\n</code></pre> <p>You can even build from github repository:</p> <pre><code># the repo should contain a Dockerfile\ndocker build -t hello-world https://github.com/docker-library/hello-world.git#master:amd64/hello-world\n</code></pre> <p>Push to registry: <pre><code># login to your registry\ndocker login registry\n\n# tag your image with the name in remote registry\ndocker image tag myimage:version registry/myname/myimage:version\n\n# you should see both images (share the same ID)\ndocker image ls\n\n# then push it\ndocker image push registry/myname/myimage:version\n</code></pre></p> <p>Detailed command:</p> <ul> <li> <p>from base image</p> <pre><code>FROM ubuntu\nFROM scratch\n</code></pre> </li> </ul> <ul> <li> <p>copy from the context folder to container</p> <pre><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;srcfiles&gt; &lt;dstdir&gt;\n\n# copy files\n# if dstdir (/myfiles/) do not exit, it will be created automatically.\n# the last / is necessary! \nCOPY index.html /myfiles/\n\n# copy folder is however tricky: by default it copy the content, not the folder itself\nCOPY folder /myfiles/ # cp folder/* /myfiles/\nCOPY folder /myfiles/folder # cp folder /myfiles/\n</code></pre> </li> </ul> <ul> <li> <p>add: advanced copy, but not recommended.</p> <p>it can automatically decompress files, download from URL, ...</p> <pre><code># copy then `tar -zxvf` \nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n\n# it can replace all usage of COPY\nCOPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;srcfiles&gt; &lt;dstdir&gt;\n</code></pre> </li> </ul> <ul> <li> <p>run command when building the image</p> <pre><code># run command\nRUN apt update \\\n    &amp;&amp; apt upgrade \\\n    &amp;&amp; apt install -y nginx\n\n# always clear the workspace!\nRUN set -x; buildDeps='gcc libc6-dev make wget' \\\n    &amp;&amp; apt-get update \\\n    &amp;&amp; apt-get install -y $buildDeps \\\n    &amp;&amp; wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\\n    &amp;&amp; mkdir -p /usr/src/redis \\\n    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    &amp;&amp; make -C /usr/src/redis \\\n    &amp;&amp; make -C /usr/src/redis install \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/* \\\n    &amp;&amp; rm redis.tar.gz \\\n    &amp;&amp; rm -r /usr/src/redis \\\n    &amp;&amp; apt-get purge -y --auto-remove $buildDeps\n</code></pre> <p>Use RUN sparingly! Each RUN will create a layer, and we should use as less layer as possible.</p> </li> </ul> <ul> <li> <p>run command when container start</p> <pre><code># shell mode\nCMD &lt;shell command&gt;\nCMD echo hello\n\n# exec mode\nCMD [\"file\", \"args\", ...] # must use \"\", not '', since it will be converted to json.\nCMD [\"bash\", \"-c\", \"echo hello\"]\n\n# entrypoint mode\n# define the base command, all later args will be appended to it.\n# example:\nCMD [ \"curl\", \"-s\", \"http://myip.ipip.net\" ]\n# docker run myip [OK]\n# docker run myip -i [ERROR]\n# instead, if we use\nENTRYPOINT [ \"curl\", \"-s\", \"http://myip.ipip.net\" ]\n# docker run myip [OK]\n# docker run myip -i [OK]\n</code></pre> </li> </ul> <ul> <li> <p>environment variables</p> <pre><code># env: persistent, can still be used in running containers.\nENV &lt;key&gt; &lt;val&gt;\nENV &lt;k1&gt;=&lt;v1&gt; &lt;k2&gt;=&lt;v2&gt; ...\n\nENV DEBUG=on\nRUN echo $DEBUG\n\n# arg: non-persistent, only available in dockerfile\nARG &lt;key&gt;=&lt;val&gt;\n\n# only available in FROM\nARG DOCKER_USERNAME=library\nFROM ${DOCKER_USERNAME}/alpine\n# should reassign\nARG DOCKER_USERNAME=library\nRUN set -x ; echo ${DOCKER_USERNAME}\n</code></pre> </li> </ul> <ul> <li> <p>create a anonymous volume.</p> <p>It is just a declaration to create the folder.</p> <pre><code>VOLUME &lt;path&gt;\n\nVOLUME /data\n</code></pre> <p>In practice, we need to use <code>-v</code> to replace these anonymous volumes to make data persistent.</p> <pre><code># this will use /host to replace to anonymous volume.\ndocker run -it -v /host:/data ubuntu\n</code></pre> </li> </ul> <ul> <li> <p>expose port</p> <p>It is just a declaration that the port can be opened.</p> <pre><code>EXPOSE &lt;port&gt; [&lt;port2&gt; ...]\n</code></pre> <p>In practice, we need to use <code>-p</code> to map the port.</p> <pre><code>docker run -it -p 80:80 nginx\n</code></pre> </li> </ul> <ul> <li> <p>change work directory</p> <pre><code># create the folder, and later commands will be executed here.\nWORKDIR &lt;path&gt;\n\n# default workdir is root dir\nWORKDIR /\n\n# example\nWORKDIR /a # current workdir is /a/\nWORKDIR b # current workdir is /a/b/\nRUN touch c # create file at /a/b/c\n</code></pre> </li> </ul> <ul> <li> <p>change user</p> <pre><code># must create the user first\nRUN groupadd -r redis &amp;&amp; useradd -r -g redis redis\n\n# change to user redis for later commands.\nUSER redis\nRUN [ \"redis-server\" ]\n</code></pre> </li> </ul> <ul> <li> <p>add metadata</p> <pre><code>LABEL &lt;key&gt;=&lt;val&gt; ...\n</code></pre> </li> </ul>"},{"location":"docker/compose/","title":"docker-compose","text":""},{"location":"docker/compose/#install","title":"install","text":"<p>Follow https://docs.docker.com/compose/install/</p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n</code></pre>"},{"location":"docker/compose/#usage","title":"usage","text":"<p>Run multiple containers (service) within one config (project).</p> <p>Create an empty folder, and create  <code>docker-compose.yml</code>:</p> <pre><code>version: '3'\nservices:\n  web:\n    build: . # build image from current dir\n    ports:\n     - \"5000:5000\"\n  redis:\n    image: \"redis:alpine\" # use image\n</code></pre> <p>Run it:</p> <pre><code># run in foreground\ndocker-compose up\n\n# run in background (detached)\ndocker-compuse up -d\n\n# check status\ndocker-compose ps\n\n# stop\ndocker-compose down\n</code></pre>"},{"location":"docker/cuda/","title":"docker for CUDA","text":""},{"location":"docker/cuda/#nvidia-docker","title":"nvidia-docker","text":"<p>Enable GPU in docker &gt;= 19.03.</p> <p>The driver version is dependent on the host !!!</p> <p>But the CUDA version can change freely as long as the driver supports.</p> <pre><code># Add the package repositories\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n\n# Install nvidia-container-toolkit\nsudo apt-get update &amp;&amp; sudo apt-get install -y nvidia-container-toolkit\nsudo systemctl restart docker\n\n# Check that it worked!\ndocker run --rm --gpus all nvidia/cuda:10.2-base nvidia-smi\n#docker run --rm --gpus all nvidia/cuda:10.1-base nvidia-smi # you can change cuda version freely!\n</code></pre> <p>Note:</p> <ul> <li>Always monitor in host by <code>nvidia-smi</code>. In container it will not display correctly.</li> </ul> <ul> <li> <p>Use specific GPU:</p> <pre><code>docker run --gpus '\"device=1,2\"' \n</code></pre> </li> </ul>"},{"location":"docker/display/","title":"docker with display","text":"<p>Mostly need to build with <code>libglvnd</code> support.</p> <pre><code>FROM ubuntu:18.04\n\n# Dependencies for glvnd and X11.\nRUN apt-get update \\\n  &amp;&amp; apt-get install -y -qq --no-install-recommends \\\n    libglvnd0 \\\n    libgl1 \\\n    libglx0 \\\n    libegl1 \\\n    libxext6 \\\n    libx11-6 \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# custom command\nRUN apt-get update \\\n  &amp;&amp; apt-get install -y -qq glmark2\n\nCMD glmark2\n</code></pre> <p>NO success yet, to be continued...</p>"},{"location":"docker/hub/","title":"docker hub","text":"<p>Docker hosts images in a registry server. </p> <p>Docker hub is the official site for hosting images pushed by all users.</p>"},{"location":"docker/hub/#publish-image","title":"publish image","text":"<pre><code># build the image locally.\ndocker built -t &lt;name&gt;:&lt;tag&gt; .\n\n# login to a registry\ndocker login -u &lt;user&gt; \n\n# create a remote repository in dockerhub.\n# e.g., the repo is &lt;user&gt;/&lt;name&gt;\n\n# tag local image\ndocker tag &lt;name&gt;:&lt;tag&gt; &lt;user&gt;/&lt;name&gt;:&lt;tag&gt;\n\n# push\ndocker push &lt;user&gt;/&lt;name&gt;:&lt;tag&gt;\n\n# logout\ndocker logout\n</code></pre>"},{"location":"driving/theory/","title":"Theory","text":"<p>\u4f9d\u636e\uff1a\u300a\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u9053\u8def\u5b89\u5168\u6cd5\u300b\u4e0e\u300a\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u9053\u8def\u5b89\u5168\u6cd5\u5b9e\u65bd\u6761\u4f8b\u300b</p>"},{"location":"driving/theory/#_1","title":"\u9a7e\u9a76\u8bc1\u7c7b\u578b","text":"<p>A1\uff1a\u5927\u578b\u5ba2\u8f66\uff0820+\u4eba\uff09\uff0cA2\uff1a\u91cd\u578b\u7275\u5f15\u6302\u8f66\uff0cA3\uff1a\u57ce\u5e02\u516c\u4ea4\u8f66\uff0810+\u4eba\uff09</p> <p>B1\uff1a\u4e2d\u578b\u5ba2\u8f66\uff0810-19\u4eba\uff09\uff0cB2\uff1a\u5927\u578b\u8d27\u8f66</p> <p>C1\uff1a\u5c0f\u578b\uff08\u624b\u52a8\u6321\uff09\u5ba2\u8f66&amp;\u8d27\u8f66</p> <p>C2\uff1a\u5c0f\u578b\u81ea\u52a8\u6321\u6c7d\u8f66</p> <p>C3\uff1a\u4f4e\u901f\u8f7d\u8d27\u6c7d\u8f66</p> <p>C4\uff1a\u4e09\u8f6e\u6c7d\u8f66</p> <p>C5\uff1a\u6b8b\u75be\u4eba\u7528\u8f66</p> <p>C6\uff1a\u8f7b\u578b\u7275\u5f15\u6302\u8f66</p> <ul> <li>C1\u53ef\u4ee5\u9a7e\u9a76C2/3\uff0c\u53cd\u4e4b\u4e0d\u884c\u3002</li> <li>AB\u7c7b\u578b\u6bcf\u5e74\u8bb0\u5206\u5468\u671f\u7ed3\u675f30\u5929\u5185\u5ba1\u9a8c\uff08\u4f53\u68c0\u3001\u79d1\u76ee\u4e00\uff09\uff0c\u6ca1\u6263\u5206\u53ef\u514d\u9664\u3002</li> <li>\u5927\u4e2d\u5ba2\u8f66\uff08\u4e0d\u5305\u542b\u57ce\u5e02\u516c\u4ea4\u8f66\uff09\u548c\u8f7b\u91cd\u7275\u5f15\u6302\u8f66\u53ea\u80fd\u901a\u8fc7\u589e\u9a7e\u53d6\u5f97\uff0c\u6ee1\u8db3\u9a7e\u9f84\u8f7b1\u4e2d2\u91cd3\u4e2a\u5468\u671f\u5185\u6ca1\u6709\u8bb0\u6ee112\u5206\u3002     - \u8f7b1\uff1aC6\u9700\u8981\u53d6\u5f97C1/2\u4e00\u5e74\u540e     - \u4e2d2\uff1aB1\u9700\u8981\u53d6\u5f97C1/2\u4e24\u5e74\u540e     - \u589e\u9a7e\u540c\u7c7b\u8f66\u4e0d\u9700\u8981\u5b9e\u4e60\uff0c\u53ea\u6709\u521d\u6b21\u53d6\u5f97\u6c7d\u8f66/\u6469\u6258\u8f66\u9a7e\u7167\u5206\u522b\u6709\u4e00\u5e74\u5b9e\u4e60\u3002</li> </ul> <p>\u9a7e\u7167\u6709\u6548\u671f\uff1a6\u5e74\u2014&gt;10\u5e74\u2014&gt;\u957f\u671f\uff0c\u9700\u8981\u6bcf\u5e74\u5185\u8fdd\u89c4\u4e0d\u8d85\u8fc712\u5206\uff0c\u5230\u671f\u524d90\u5929\u5185\u7533\u8bf7\u6362\u8bc1\uff08\u5e76\u63a5\u53d7\u5ba1\u9a8c\uff09\uff0c\u66f4\u6539\u4fe1\u606f30\u5929\u5185\u5907\u6848\u3002\u5230\u671f\u540e\u4e00\u5e74\u4e0d\u6362\u8bc1\u4f1a\u88ab\u6ce8\u9500\u3002</p> <ul> <li>\u62a5\u540d\u5b66\u4e60\u9a7e\u6821\u7684\u6709\u6548\u671f3\u5e74\uff0c\u6700\u957f\u5ef6\u671f3\u5e74\u3002</li> <li>\u79d1\u76ee\u4e00\u5408\u683c\u540e\u7acb\u523b\u53d1\u5b66\u4e60\u9a7e\u9a76\u8bc1\u660e\u3002</li> <li>\u79d1\u76ee\u4e8c\u3001\u4e09\u5206\u522b\u67095\u6b21\u673a\u4f1a\u3002</li> <li>\u79d1\u76ee\u4e09\u5e94\u8be5\u5728\u62a5\u540d\u5b66\u4e60\u81ea\u52a8\u632120\u5929\u3001\u624b\u52a8\u632130\u5929\u3001\u5927\u8f6640\u5929\u540e\u9884\u7ea6\uff0c\u9a7e\u9a76\u91cc\u7a0b\u22653\u516c\u91cc\u3002</li> </ul> <p>\u5b9e\u4e60\u671f\uff1a\u9886\u53d6\u9a7e\u9a76\u8bc1\u540e\u4e00\u5e74\uff0c\u9ad8\u901f\u9700\u4e09\u5e74\u7ecf\u9a8c\u4ee5\u4e0a\u53f8\u673a\u966a\u540c\u3002\u5b9e\u4e60\u671f\u8ba1\u6ee112\u5206\u540a\u9500\u3002</p> <p>\u5e74\u9f84\u9650\u5236\uff1a</p> <ul> <li>\u5c0f\u578b\u6c7d\u8f66\uff1a18+\uff08\u65e0\u4e0a\u9650\uff09</li> <li>\u666e\u901a\u6469\u6258\u8f66\uff1a18-70</li> <li>\u4f4e\u901f\u8d27\u8f66\u3001\u673a\u68b0\u8f66\uff1a18-63</li> <li>\u8f7b\u578b\u7275\u5f15\u6302\u8f66\uff1a20-70</li> <li>\u57ce\u5e02\u516c\u4ea4\u8f66\uff0c\u4e2d\u578b\u5ba2\u8f66\uff0c\u5927\u578b\u8d27\u8f66\uff0c\u7535\u8f66\uff1a20-63</li> <li>\u5927\u578b\u5ba2\u8f66\uff0c\u91cd\u578b\u7275\u5f15\u6302\u8f66\uff1a22-63</li> </ul> <p>\u91cd\u65b0\u7533\u8bf7\u95f4\u9694\uff1a\u50471\u9a973\u4ee33\u6bd23\u91895\u8d855\u65e010\u9003\u7ec8\u751f</p> <ul> <li>\u50471\uff1a\u8003\u8bd5\u8fc7\u7a0b\u4e2d\u8d3f\u8d42\u821e\u5f0a\u3001\u9690\u7792\u76f8\u5173\u60c5\u51b5\u6216\u63d0\u4f9b\u865a\u5047\u6750\u6599\u7b49\uff08\u53d6\u5f97\u524d\uff09\uff0c\u7f5a\u6b3e2000</li> <li>\u9a973\uff1a\u4ee5\u6b3a\u9a97\u3001\u8d3f\u8d42\u7b49\u4e0d\u6b63\u5f53\u624b\u6bb5\u53d6\u5f97\u9a7e\u7167\uff08\u5df2\u7ecf\u53d6\u5f97\uff09\uff0c\u7f5a\u6b3e2000</li> <li>\u4ee33\uff1a\u4ee3\u66ff\u4ed6\u4eba\u8003\u8bd5(\u4e5f\u662f\u4e00\u79cd\u6b3a\u9a97)</li> <li>\u8d855\uff1a\u8d85\u901f\u8d85\u5458\u5bfc\u81f4\u72af\u7f6a</li> <li>\u65e010\uff1a\u65e0\u8bc1\u9a7e\u9a76\u9020\u6210\u540c\u7b49\u4ee5\u4e0a\u8d23\u4efb\u4eba\u5458\u4f24\u4ea1</li> <li>\u9152\u9a7e\u9189\u9a7e\u91cd\u5927\u4e8b\u6545\u6784\u6210\u72af\u7f6a\u4e5f\u662f\u7ec8\u751f\u3002</li> </ul> <p>\u968f\u8eab\u643a\u5e26\uff1a2\u8bc12\u68071\u724c = \u9a7e\u9a76\u8bc1\uff08\u4eba\uff09\u3001\u884c\u9a76\u8bc1\uff08\u8f66\uff09\u3001\u68c0\u9a8c\u5408\u683c\u6807\u5fd7\u3001\u4fdd\u9669\u6807\u5fd7\u3001\u8f66\u724c</p> <ul> <li>\u5c0f\u8f6610\u5e74\u5185\u6bcf2\u5e74\u68c0\u9a8c\u4e00\u6b21\uff0c10\u5e74\u5916\u6bcf1\u5e74\u68c0\u9a8c\u4e00\u6b21\u3002</li> </ul> <p>\u8f66\u7ba1\u6240\u76f8\u5173\uff1a</p> <ul> <li>\u884c\u9a76\u8bc1\u3001\u8f66\u724c\uff1a\u8865\u529e\u627e\u767b\u8bb0\u5730\uff0c\u4f46\u662f\u521d\u6b21\u7533\u8bf7\u627e\u5c45\u4f4f\u5730\uff08\u7533\u8bf7=\u767b\u8bb0\uff0c\u6b64\u540e\u624d\u6709\u767b\u8bb0\u5730\uff09\u3002</li> <li>\u8865\u529e\u9a7e\u9a76\u8bc1\uff1a\u627e\u4efb\u610f\uff08\u6838\u53d1\u5730\u3001\u5c45\u4f4f\u5730\uff09\uff0c\u4f46\u662f\u5fc5\u987b\u662f\u8f66\u7ba1\u6240\uff08\u4e0d\u662f\u4efb\u610f\u516c\u5b89\u673a\u5173\u4ea4\u901a\u7ba1\u7406\u90e8\u95e8\uff09</li> <li>\uff08\u8865\u529e\u4ee5\u5916\u7684\u9a7e\u9a76\u8bc1\u76f8\u5173\uff09\u7533\u8bf7\u589e\u9a7e\u3001\u5ba1\u9a8c\u5ef6\u671f\uff1a\u627e\u6838\u53d1\u5730\u3002</li> <li>\u6237\u7c4d\u8fc1\u51fa\u627e\u8fc1\u5165\u5730\uff0c\u4ece\u4e1a\u8f66\u8f86\u627e\u4ece\u4e1a\u5355\u4f4d\u6240\u5728\u5730\uff0c\u519b\u4eba\u627e\u90e8\u961f\u9a7b\u5730\u3002</li> </ul> <p>\u5b66\u4e60\u671f\u95f4\u7f5a\u6b3e\u3001\u8d23\u4efb\u5747\u5f52\u5c5e\u6559\u7ec3\u5458\uff0c\u4e14\u8f66\u4e0a\u4e0d\u80fd\u6709\u5176\u4ed6\u4eba\u5458\u3002</p> <ul> <li>\u81ea\u5b66\u76f4\u8003\uff1a\u7b26\u5408\u6761\u4ef6\u3001\u4f7f\u7528\u4e13\u7528\u81ea\u5b66\u76f4\u8003\u8f66\u8f86\uff0c\u4e0d\u80fd\u6709\u6559\u7ec3\u5458\u3002</li> </ul>"},{"location":"driving/theory/#_2","title":"\u8fdd\u6cd5\u8bb0\u5206","text":"<p>\u6700\u9ad812\u5206\u3002\u6bcf\u5e74\uff08\u7f34\u7eb3\u8bb0\u5206\u7f5a\u6b3e\u540e\uff09\u91cd\u7f6e\u3002</p> <p>\u8fbe\u523012\u5206\u9700\u8981\u91cd\u8003\u79d1\u76ee\u4e00\uff0c\u5c0f\u578b\u8f66\u53c2\u52a07\u5929\u5b66\u4e60\uff08\u7f51\u7edc5\u5929\u73b0\u573a2\u5929\uff0c\u6bcf\u7d2f\u8ba112\u5206+7\u5929\u6700\u591a60\u5929\uff09\uff0c\u5927\u578b\u8f6630\u5929\u3002</p> <p>\u7d2f\u8ba1\u8fbe\u523024\u5206\uff08\u4e24\u6b2112\u5206\uff09\u9700\u8981\u91cd\u8003\u79d1\u76ee\u4e00\u3001\u79d1\u76ee\u4e09\uff08\u9053\u8def\u9a7e\u9a76\uff09</p> <p>\u7d2f\u8ba1\u8fbe\u523036\u5206\uff08\u4e09\u6b2112\u5206\uff09\u9700\u8981\u91cd\u8003\u79d1\u76ee\u4e00\u3001\u79d1\u76ee\u4e09\u3001\u79d1\u76ee\u4e8c\uff08\u573a\u5730\u9a7e\u9a76\uff09</p> <p>\u5b9a\u4e49\uff1a</p> <p>\u5927\u5ba2\u8f66\uff1a\u6821\u8f66\u3001\u516c\u8def\u5ba2\u8fd0\u3001\u65c5\u6e38\u5ba2\u8fd0</p> <p>\u4e2d\u5ba2\u8f66\uff1a\u5176\u4ed6\u4e03\u5ea7\u4ee5\u4e0a\u5ba2\u8f66</p> <p>\u5c0f\u5ba2\u8f66\uff1a\u5176\u4ed6\u6c7d/\u5ba2\u8f66</p> <p>\u9ad8\u901f\uff1a\u9ad8\u901f\u516c\u8def&amp;\u57ce\u5e02\u5feb\u901f\u8def</p> <p>\u5e38\u89c4\u7cfb\u5217\uff1a</p> <p>12\u5206\uff1a\u9ad8\u901f\u9006\u884c/\u5012\u8f66/\u6389\u5934\uff0c\u4f2a\u9020\u8f66\u724c/\u9a7e\u7167\uff0c\u996e\u9152\uff0c\u8f7b\u4f24\u4ee5\u4e0a\u9003\u9038\uff0c\u4ee3\u53d7\u5904\u7f5a\u725f\u5229\u3002</p> <p>9\u5206\uff1a\u9ad8\u901f\u505c\u8f66\uff0c\u4e0d\u6302/\u906e\u6321\u8f66\u724c\uff0c\u8f66\u578b\u4e0e\u9a7e\u7167\u4e0d\u7b26\uff08e.g.\u672a\u53d6\u5f97\u6821\u8f66\u9a7e\u7167\u5c31\u9a7e\u9a76\u6821\u8f66\uff09</p> <p>6\u5206\uff1a\u9ad8\u901f\u5360\u7528\u5e94\u6025\u8f66\u9053\uff0c\u5404\u79cd\u5371\u9669\u54c1\u5b89\u5168\u8fdd\u89c4\uff0c\u8fdd\u53cd\u4ea4\u901a\u4fe1\u53f7\uff0c\u9a7e\u7167\u6682\u6263\u671f\u95f4\u9a7e\u9a76\uff0c\u8f7b\u4f24\u4ee5\u4e0b\u9003\u9038</p> <p>3\u5206\uff1a\u9ad8\u901f\u8fdd\u89c4\u4f7f\u7528\u8f66\u9053\uff0c\u9ad8\u901f\u4f4e\u4e8e\u6700\u4f4e\u901f\u5ea6\uff0c\u666e\u901a\u9053\u8def\u9006\u884c\u3001\u7528\u9519\u8f6c\u5411\u8f66\u9053\uff0c\u6253\u7535\u8bdd\uff0c\u8fdd\u89c4\u8d85\u8f66/\u8ba9\u884c\uff08\u4e0d\u907f\u8ba9\u4eba\u884c\u6a2a\u9053/\u6821\u8f66\uff09\uff0c\u8fdd\u89c4\u5b89\u88c5\u8f66\u724c\uff0c\u6545\u969c\u505c\u8f66\u540e\u4e0d\u4f7f\u7528\u706f\u5149/\u8b66\u544a</p> <p>1\u5206\uff1a\u3010\u884c\u706f\u4f1a\u7981\u68c0\u5b89\u3011\u666e\u901a\u9053\u8def\u8fdd\u89c4\u5012\u8f66/\u6389\u5934\uff0c\u8fdd\u89c4\u706f\u5149\uff0c\u8fdd\u89c4\u4f1a\u8f66\uff0c\u8fdd\u89c4\u7981\u6b62\u6807\u5fd7/\u6807\u7ebf\uff0c\u4e0d\u8f66\u8f86\u5e74\u68c0\uff0c\u4e0d\u7cfb\u5b89\u5168\u5e26\uff0c\u6469\u6258\u4e0d\u5e26\u5934\u76d4\uff0c\u9b54\u6539\u8d27\u8f66</p> <ul> <li>\u9ad8\u901f\uff1a\u8fdd-\u5360-\u505c-\u5012\uff08\u6389\u9006\uff09\uff0c3-6-9-12\uff1b\u666e\u901a\uff1a\u5012\u63891-\u90063</li> <li>\u8f66\u724c\uff1a\u8fdd\u89c43-\u906e\u6321/\u4e0d\u63029-\u4f2a\u902012</li> <li>\u9003\u9038\uff1a\u8f7b\u4f246-\u91cd\u4f2412</li> </ul> <p>\u8d85\u8f7d\uff1a</p> <p>\u5927\u5ba2\u8f66\u8d85\u8f7d\u226520%=12\uff0c&lt;20%=6\u30102\uff0c6-12\u3011</p> <p>\u4e2d\u5ba2\u8f66\u8d85\u8f7d\u2265100%=12\uff0c100%-50%=9\uff0c50%-20%=6\u30102-5-10\uff0c0-6-9-12\u3011</p> <p>\u5c0f\u5ba2\u8f66\u8d85\u8f7d\u2265100%=12\uff0c100%-50%=6\uff0c50%-20%=3\u30102-5-10\uff0c0-3-6-12\u3011</p> <p>\u8d27\u8f66\u8d85\u8f7d\u226550%=6\uff0c50%-30%=3\uff0c&lt;30%=1\uff0c\u8fdd\u89c4\u8f7d\u4eba=3\uff0c\u957f\u5bbd\u9ad8\u8d85\u9650=1\u30103-5\uff0c1-3-6\u3011</p> <p>\u8d85\u901f\uff1a</p> <p>\u5927\u5ba2\u8f66&amp;\u5371\u9669\u8d27\u8f66\u9ad8\u901f\u8d85\u901f\u226520%=12\uff0c&lt;20%=6\u30102\uff0c6-12\u3011</p> <p>\u5927\u5ba2\u8f66&amp;\u5371\u9669\u8d27\u8f66\u666e\u901a\u9053\u8def\u8d85\u901f\u226550%=9\uff0c50%-20%=6\uff0c20%-10%=1\u30101-2-5\uff0c0-1-6-9\u3011</p> <p>\u666e\u901a\u8f66\u9ad8\u901f\u8d85\u901f\u226550%=12\uff0c50%-20%=6\u30102-5\uff0c0-6-12\u3011</p> <p>\u666e\u901a\u8f66\u666e\u901a\u9053\u8def\u8d85\u901f\u226550%=6\uff0c50%-20%=3\u30102-5\uff0c0-3-6\u3011</p> <p>\u5176\u4ed6\uff1a</p> <p>\u884c\u9a76\u56db\u5c0f\u65f6\u4f11\u606f\u4e0d\u6ee120\u5206\u949f\uff1a\u5927\u5ba2\u8f66&amp;\u5371\u9669\u8d27\u8f66=9\uff0c\u5176\u4ed6\u8d27\u8f66=3</p> <p>\u672a\u8fdb\u884c\u5b89\u5168\u5e74\u68c0\uff1a\u5ba2\u8f66&amp;\u8d27\u8f66=3\uff0c\u5176\u4ed6\u8f66\u8f86=1</p> <p>\u5206\u6570\u51cf\u6263</p> <ul> <li>\u73b0\u573a\u5b66\u4e60\u4e00\u5c0f\u65f6\u4e14\u8003\u8bd5\u5408\u683c\uff0c\u53ef\u51cf\u62632\u5206\u3002</li> <li>\u7f51\u7edc\u5b66\u4e60\u534a\u5c0f\u65f6\u4e14\u8003\u8bd5\u5408\u683c\uff0c\u53ef\u51cf\u62631\u5206\u3002</li> <li>\u516c\u76ca\u6d3b\u52a8\u4e00\u5c0f\u65f6\uff0c\u53ef\u51cf\u62631\u5206\u3002</li> <li>\u5b9e\u4e60\u671f\u5185\u4e0d\u5f97\u51cf\u514d\u3002</li> <li>\u996e\u9152\u9a7e\u9a76\u5904\u7f5a\u7684\u4e09\u4e2a\u8bb0\u5206\u5468\u671f\u5185\u4e0d\u5f97\u51cf\u514d\u3002</li> <li>\u7d2f\u8ba124\u5206\uff08\u53c2\u52a0\u4e24\u6b21\u53ca\u4ee5\u4e0a\u6ee1\u5206\u6559\u80b2\uff09\u7684\u4e0d\u5f97\u51cf\u514d\u3002</li> <li>\u4e00\u4e2a\u5468\u671f\u6700\u591a\u51cf\u62636\u5206\u3002</li> </ul>"},{"location":"driving/theory/#_3","title":"\u5904\u7f5a","text":"<p>\u6263\u7559\u9a7e\u9a76\u8bc1\uff08\u4e0d\u62d8\u7559\u4eba\uff0c\u4e0d\u6263\u8f66\uff09\uff1a</p> <ul> <li>\u521d\u6b21\u9152\u9a7e\uff08\u6263\u9a7e\u71676\u4e2a\u6708\uff0c\u7f5a\u6b3e1000-2000\uff09</li> <li>\u628a\u8f66\u7ed9\u6ca1\u6709\u9a7e\u7167\u7684\u4eba\u5f00\uff08\u540a\u9500\u9a7e\u7167\uff09</li> <li>\u8d85\u901f50%\uff08\u540a\u9500\u9a7e\u7167\uff09</li> <li>\u62fc\u88c5/\u62a5\u5e9f\u8f66</li> <li>\u91cd\u5927\u4ea4\u901a\u4e8b\u6545\u6784\u6210\u72af\u7f6a</li> <li>\u6263\u6ee112\u5206</li> </ul> <p>\u62d8\u7559\uff08\u4eba\uff09\uff1a</p> <ul> <li>\u518d\u6b21\u9152\u9a7e\uff08\u540a\u9500\u9a7e\u7167\uff0c\u62d8\u755910\u65e5\uff0c\u7f5a\u6b3e1000-2000\uff09</li> <li>[\u5371\u9669\u9a7e\u9a76\u7f6a] \u9189\u9a7e\uff08\u540a\u9500\u9a7e\u7167\u4e145\u5e74\u5185\u4e0d\u5f97\u91cd\u8003\uff0c\u62d8\u75591-6\u6708\uff0c\u7f5a\u6b3e\uff09</li> <li>[\u5371\u9669\u9a7e\u9a76\u7f6a] \u8ffd\u9010\u7ade\u6280</li> <li>[\u5371\u9669\u9a7e\u9a76\u7f6a] \u4e25\u91cd\u8d85\u8f7d&amp;\u8d85\u901f</li> <li>[\u5371\u9669\u9a7e\u9a76\u7f6a] \u8fdd\u89c4\u8fd0\u8f93\u5371\u9669\u54c1</li> <li>\u672a\u53d6\u5f97\u9a7e\u7167/\u6263\u7559\u671f\u95f4\u9a7e\u9a76\uff1a\u62d8\u755915\u65e5\u4ee5\u5185\uff0c\u7f5a\u6b3e200-2000</li> <li>\u4e0d\u542c\u529d\u963b\u5f3a\u884c\u901a\u884c\uff1a\u62d8\u755915\u65e5\u4ee5\u5185\uff0c\u7f5a\u6b3e200-2000</li> <li>\u4e8b\u6545\u9003\u9038\u4f46\u4e0d\u6784\u6210\u72af\u7f6a\uff1a\u62d8\u755915\u65e5\u4ee5\u5185\uff0c\u7f5a\u6b3e200-2000</li> </ul> <p>\u6263\u7559\u8f66\u8f86\uff08\u4e0d\u6263\u8bc1&amp;\u4eba\uff09\uff1a</p> <ul> <li>\u4e0d\u5e26\u9a7e\u9a76\u8bc1\u3001\u884c\u9a76\u8bc1\u3001\u68c0\u9a8c\u5408\u683c\u6807\u5fd7\u3001\u4fdd\u9669\u6807\u5fd7\u3001\u8f66\u724c\u7684</li> </ul> <p>\u7f5a\u6b3e\u76f8\u5173</p> <ul> <li>\u5b9e\u4e60\u671f\u7275\u5f15\u6302\u8f66\u3001\u5b9e\u4e60\u671f\u5355\u72ec\u4e0a\u9ad8\u901f\u3001\u8865\u9886\u540e\u4ecd\u7528\u65e7\u9a7e\u7167\uff1a20-200</li> <li>\u8f6c\u8ba9\u8f66\u8f86\u4e0d\u767b\u8bb0\uff0c\u8f66\u8eab\u55b7\u6d82\u5e7f\u544a\u5f71\u54cd\u5b89\u5168\u9a7e\u9a76\uff1a&lt;200</li> <li>\u5ba1\u9a8c\u903e\u671f\u3001\u8eab\u4f53\u4e0d\u9002\u4ecd\u7136\u9a7e\u9a76\uff1a200-500</li> <li>\u7533\u9886\u9a7e\u7167\uff1a\u5047\u6750\u6599500\uff0c\u6b3a\u9a971000\uff0c\u4f5c\u5f0a2000</li> <li>\u51cf\u6263\u4f5c\u50471000</li> <li>\uff08\u5927\u90e8\u5206\u60c5\u51b5\uff09\u4e0d\u542c\u529d\u963b\u9020\u6210\u62e5\u5835\uff0c\u540a\u9500\u671f\u95f4\u9a7e\u9a76\uff0c\u7ed9\u6ca1\u9a7e\u7167\u7684\u4eba\u5f00\uff0c\u5f00\u62fc\u88c5\u8f66\uff0c\u9003\u9038\u4f46\u4e0d\u72af\u7f6a\uff0c\u8d85\u901f50%\uff0c\u5f3a\u884c\u901a\u884c\uff0c\u6545\u610f\u635f\u574f\u4ea4\u901a\u8bbe\u65bd\uff1a200-2000</li> <li>\u9152\u9a7e: 1000-2000</li> <li>\u4f2a\u9020\u9a7e\u7167\uff1a2000-5000</li> <li>\u4e3a\u522b\u4eba\u5ba1\u9a8c\u9020\u5047\uff1a\u4e09\u500d\u7f5a\u6b3e\uff0c\u6700\u9ad8\u4e24\u4e07</li> <li>\u4ee3\u66ff\u4ed6\u4eba\u63a5\u53d7\u8bb0\u5206\u5904\u7f5a\uff1a\u4e09\u500d\u7f5a\u6b3e\uff0c\u6700\u9ad8\u4e94\u4e07</li> </ul>"},{"location":"driving/theory/#_4","title":"\u4ea4\u901a\u4fe1\u53f7\u706f","text":"<p>\u4fe1\u53f7\u706f\uff1a</p> <ul> <li>\u7eff\u706f\u901a\u884c\uff0c\u5de6\u8f6c\u8ba9\u5bf9\u9762\u76f4\u884c\uff0c\u53f3\u8f6c\u8ba9\u5bf9\u9762\u5de6\u8f6c\u3002</li> <li>\u9ec4\u706f\u8b66\u793a\uff0c\u524d\u8f6e\u8d8a\u8fc7\u505c\u6b62\u7ebf\u53ef\u7ee7\u7eed\u901a\u884c\uff1b</li> <li>\u7ea2\u706f\u7981\u6b62\uff0c\u540e\u8f6e\u8d8a\u8fc7\u505c\u6b62\u7ebf\u53ef\u7ee7\u7eed\u901a\u884c\uff0c\u5426\u5219\u53ea\u80fd\u53f3\u8f6c\u3002</li> </ul> <p>\u65b9\u5411\u6307\u793a\u4fe1\u53f7\u706f\uff1a\u5e26\u6709\u65b9\u5411\u7684\u4fe1\u53f7\u706f\uff0c\u590d\u6742\u8def\u53e3\u4e0b\u66f4\u5177\u4f53\u5730\u6307\u793a\u5de6\u8f6c/\u76f4\u884c/\u53f3\u8f6c\u3002</p> <p>\u5168\u95ea\u70c1\u9ec4\u706f\uff1a\u7528\u4e8e\u8f66\u6d41\u91cf\u4f4e\u65f6\uff0c\u907f\u514d\u6f2b\u957f\u7b49\u5f85\u3002</p>"},{"location":"driving/theory/#_5","title":"\u4ea4\u901a\u6807\u5fd7","text":"<p>https://zh.wikipedia.org/zh-cn/\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u570b\u4ea4\u901a\u6a19\u8a8c</p> <p>\u7ea2\u8272\u7981\u6b62\uff1a</p> <ul> <li>\u7981\u6b62\u9a76\u5165\uff1a\u4f46\u5141\u8bb8\u9a76\u51fa\uff0c\u901a\u5e38\u662f\u5355\u884c\u8def\u53cd\u5411\u4fa7\u3002</li> <li>\u7981\u6b62\u5de6\u8f6c\uff1a\u540c\u65f6\u4e5f\u7981\u6b62\u6389\u5934\u3002</li> <li>\u7981\u6b62\u8f66\u8f86\uff1a\u8f66\u5934\u6b63\u9762=\u7981\u6b62\u6240\u6709\u8f66\u8f86\uff0c\u8f66\u8eab\u4fa7\u9762=\u7981\u6b62\u5c0f\u578b\u5ba2\u8f66\u3002</li> </ul> <p>\u9ec4\u8272\u8b66\u544a\uff1a</p> <ul> <li>\u4eba\u884c\u6a2a\u9053\u548c\u884c\u4eba\uff1a\u6ce8\u610f\u884c\u4eba\uff0c\u4e0d\u4e00\u5b9a\u6709\u4eba\u884c\u6a2a\u9053\uff01\uff08\u84dd\u8272\u624d\u662f\u63d0\u9192\u4eba\u884c\u6a2a\u9053\uff09</li> <li>\u725b=\u6ce8\u610f\u7272\u755c\uff0c\u9e7f=\u6ce8\u610f\u91ce\u751f\u52a8\u7269\u3002</li> <li>\u4e24\u4e2a\u5f2f=\u53cd\u5411\u5f2f\u8def\uff0c\u4e09\u4e2a\u5f2f=\u8fde\u7eed\u5f2f\u8def</li> <li>\u8ffd\u5c3e\u56fe\u6848\uff1a\u4e8b\u6545\u6613\u53d1\u6807\u5fd7\uff0c\u4e0d\u4ec5\u4ec5\u662f\u8ffd\u5c3e</li> <li>\u96a7\u9053\uff0c\u6ca1\u6709\u6db5\u6d1e</li> <li>\u5824\u575d\u8def\uff0c\u6ca1\u6709\u508d\u6c34\u8def</li> <li>\u508d\u5c71\u9669\u8def\uff0c\u6ca1\u6709\u90bb\u5d16\u8def\uff08\u533a\u522b\u6ce8\u610f\u843d\u77f3\uff09</li> </ul> <p>\u84dd\u5e95\u767d\u8272\u56fe\u6848\uff1a\u53ea\u80fd\u6309\u7167\u6307\u793a\u884c\u8f66\uff0c\u4f8b\u5982\u767d\u8272\u884c\u4eba\u4ee3\u8868\u53ea\u80fd\u6b65\u884c\uff0c\u7981\u6b62\u8f66\u8f86\u9a76\u5165\uff08\u5982\u6b65\u884c\u8857\uff09\uff1b\u767d\u8272\u8f66\u706f\u8868\u793a\u9700\u8981\u5f00\u706f\u3002</p> <ul> <li>\u9519\u8f66\u9053=\u6ca1\u6709\u865a\u7ebf\uff0c\u7d27\u6025\u505c\u8f66\u5e26=\u6709\u865a\u7ebf</li> <li>\u96a7\u9053\u5185\u7684\u84dd\u8272\u6807\u8bb0\u4e3a\u5230\u51fa\u53e3\u8ddd\u79bb\uff0c\u4e0d\u662f\u603b\u957f\u3002</li> <li>\u2191\u2191|\u2191\uff1a\u786c\u8def\u80a9\uff08\u76f8\u5f53\u4e8e\u989d\u5916\u7684\u8f66\u9053\uff09\u5141\u8bb8\u884c\u9a76\u8d77\u70b9\uff0c\u2191\u2191|\u21b0\u4e3a\u5373\u5c06\u62b5\u8fbe\u7ec8\u70b9\u8bf7\u56de\u5230\u8f66\u9053\uff0c\u2191\u2191|X\u4e3a\u7ec8\u70b9\u3002</li> </ul> <p>\u6307\u8def\u6807\u5fd7\uff08\u6709\u5b57\u7684\u957f\u65b9\u5f62\uff09\uff1a\u84dd\u5e95\u666e\u901a\u9053\u8def\uff0c\u7eff\u5e95\u9ad8\u901f\u3002\u56fd\u9053G\uff0c\u7701\u9053S\uff0c\u53bf\u9053X\uff0c\u4e61\u9053Y\u3002</p> <ul> <li>\u7eff\u5e95\u9ed1\u7535\u8bdd\uff1a\u9ad8\u901f\u7d27\u6025\u7535\u8bdd</li> <li>\u53ea\u6709P=\u505c\u8f66\u573a\uff0cP+\u52a0\u6cb9\u7ad9+\u5e8a+\u6273\u624b=\u670d\u52a1\u533a</li> </ul>"},{"location":"driving/theory/#_6","title":"\u4ea4\u901a\u6807\u7ebf","text":"<p>\u6807\u7ebf\u4e5f\u5206\u6307\u793a\u3001\u8b66\u544a\u3001\u7981\u6b62\u3002\u4f8b\u5982\u9ec4\u8272\u5355\u865a\u7ebf\u4e3a\u6307\u793a\uff0c\u9ec4\u8272\u53cc\u5b9e\u7ebf\u4e3a\u7981\u6b62\u3002</p> <ul> <li>\u53ef\u8de8\u8d8a\u5bf9\u5411\u8f66\u884c\u9053\u5206\u754c\u7ebf\uff1a\u9ec4\u8272\u5355\u865a\u7ebf\u3002\u786e\u4fdd\u5b89\u5168\u65f6\u5141\u8bb8\u8d8a\u7ebf\u8d85\u8f66\u6216\u8f6c\u5f2f\u3002</li> <li>\u53ef\u8de8\u8d8a\u540c\u5411\u8f66\u884c\u9053\u5206\u754c\u7ebf\uff1a\u767d\u8272\u5355\u865a\u7ebf\u3002\u786e\u4fdd\u5b89\u5168\u65f6\u5141\u8bb8\u8d8a\u7ebf\u53d8\u6362\u8f66\u9053\uff08\u4ee5\u8d85\u8f66\u6216\u8f6c\u5f2f\uff09\u3002</li> <li>\u8f66\u884c\u9053\u8fb9\u7f18\u7ebf\uff08\u673a\u52a8\u8f66\u4e0e\u975e\u673a\u52a8\u8f66\u5206\u754c\u7ebf\uff09\u767d\u8272\u5b9e\u7ebf\u4e0d\u5141\u8bb8\u8de8\u8d8a\uff0c\u767d\u8272\u865a\u7ebf\u5141\u8bb8\u4e34\u65f6\u8de8\u8d8a\uff08\u4ee5\u8f6c\u5f2f\uff09\u3002</li> <li>\u5de6\u8f6c\u5f85\u8f6c\u533a\u7ebf\uff1a\u5341\u5b57\u8def\u53e3\u5de6\u8f6c\u8f66\u9053\u5ef6\u957f\u7684\u767d\u8272\u865a\u7ebf\u3002\u8fd9\u79cd\u8def\u53e3\u901a\u5e38\u76f4\u884c\u706f\u5148\u4eae\uff0c\u6b64\u65f6\u8f66\u8f86\u53ef\u8fdb\u5165\u5de6\u8f6c\u5f85\u8f6c\u533a\uff0c\u7b49\u5f85\u5de6\u8f6c\u706f\u4eae\u8d77\u540e\u5de6\u8f6c\u3002\u5de6\u8f6c\u5f85\u8f6c\u533a\u5185\u7684\u8f66\u8f86\u5728\u5de6\u8f6c\u706f\u7ed3\u675f\u540e\u4e5f\u5e94\u8be5\u7ee7\u7eed\u5b8c\u6210\u5de6\u8f6c\u3002</li> <li>\u5de6\u8f6c\u5f2f\u8def\u53e3\u5bfc\u5411\u7ebf\uff1a\u6307\u793a\u5de6\u8f6c\u884c\u8f66\u8f68\u8ff9\uff08\u4ee5\u907f\u514d\u8f6c\u5f2f\u540e\u8fdb\u5165\u9519\u8bef\u8f66\u9053\uff09\uff0c\u9ec4\u8272\u865a\u7ebf-\u673a\u52a8\u8f66\u5de6\u8f6c\u533a\u95f4-\u767d\u8272\u865a\u7ebf-\u975e\u673a\u52a8\u8f66\u5de6\u8f6c\u533a\u95f4\u3002</li> <li>\u4eba\u884c\u6a2a\u9053\u7ebf\uff1a\u6c34\u5e73\u6591\u9a6c\u7ebf\u6216\u8005\u4e24\u9053\u5782\u76f4\u4e8e\u8f66\u9053\u7684\u767d\u8272\u5b9e\u7ebf\u3002\u767d\u8272\u83f1\u5f62\u56fe\u6848\u4e3a\u4eba\u884c\u6a2a\u9053\u9884\u544a\u7ebf\u3002</li> <li>\u9ad8\u901f\u516c\u8def\u8f66\u8ddd\u786e\u8ba4\u6807\u7ebf\uff1a\u7b49\u95f4\u8ddd\u7684\u767d\u8272\u5e73\u884c\u7c97\u5b9e\u7ebf\uff0c\u767d\u8272\u6298\u7ebf\uff0c\u6216\u4e24\u4fa7\u7684\u767d\u8272\u534a\u5706\u3002\u901a\u5e38\u95f4\u969450\u7c73\u3002</li> <li>\u51fa\u5165\u53e3\u6807\u7ebf\uff1a\u9ad8\u901f\u52a0\u901f\u51cf\u901f\u8f66\u9053\u524d\u7684\u6298\u7ebf\u586b\u5145\u7684\u4e09\u89d2\u533a\u57df\u3002</li> <li>\u4e00\u822c\u793e\u4f1a\u505c\u8f66\u4f4d\u6807\u7ebf\uff1a\u5e73\u884c\u3001\u503e\u659c\u3001\u5782\u76f4\u7684\u767d\u8272\u5b9e\u7ebf\u6846\u3002</li> <li>\u51fa\u79df\u8f66\u8f66\u4f4d\uff1a\u5199\u6709\u51fa\u79df\u8f66\u5b57\u6837\uff0c\u767d\u8272\u5b9e\u7ebf\u4e3a\u5f85\u5ba2\uff0c\u767d\u8272\u865a\u7ebf\u4e3a\u4e34\u65f6\u505c\u8f66\u3002</li> <li>\u975e\u673a\u52a8\u8f66\u505c\u8f66\u4f4d\uff1a\u753b\u6709\u81ea\u884c\u8f66\u6807\u5fd7\u3002</li> <li>\u9650\u65f6\u505c\u8f66\u4f4d\uff1a\u5199\u6709\u65f6\u95f4\uff0c\u767d\u8272\u865a\u7ebf\u3002</li> <li>\u6e2f\u6e7e\u5f0f\u505c\u9760\u7ad9\u6807\u7ebf\uff1a\u4e24\u4fa7\u865a\u7ebf\u3001\u4e2d\u95f4\u4e3a\u767d\u8272\u5b9e\u7ebf\u6216\u767d\u8272\u586b\u5145\u68af\u5f62\u533a\u57df\uff0c\u53ef\u4ee5\u4e34\u65f6\u505c\u9760\u3002\u6807\u6ce8\u8f66\u79cd\u5219\u53ea\u80fd\u505c\u653e\u5bf9\u5e94\u8f66\u8f86\uff08\u901a\u5e38\u4e3a\u516c\u4ea4\u8f66\uff09\u3002     - \u4e2d\u95f4\u865a\u7ebf\uff0c\u53f3\u4fa7\u8f66\u9053\u51f8\u51fa\u68af\u5f62\uff1a\uff08\u9ad8\u901f\u516c\u8def\uff09\u5e94\u6025\u505c\u8f66\u5e26     - \u65e0\u7ebf\u68af\u5f62\uff1a\u9519\u8f66\u9053</li> <li>\u8f66\u9053\u5bfc\u5411\u7bad\u5934\uff1a\u6307\u793a\u5bf9\u5e94\u7684\u8f66\u9053\u5141\u8bb8\u7684\u884c\u8f66\u65b9\u5411\u3002</li> <li>\u53ef\u53d8\u5bfc\u5411\u8f66\u9053\u7ebf\uff1a\u8f66\u9053\u7ebf\u5185\u4fa7\u767d\u8272\u952f\u9f7f\u72b6\u7ebf\uff0c\u6ca1\u6709\u5bfc\u5411\u7bad\u5934\uff0c\u6839\u636e\u4e0a\u65b9\u7535\u5b50\u5c4f\u51b3\u5b9a\u884c\u8f66\u65b9\u5411\u3002</li> <li>\u901f\u5ea6\u9650\u5236\u6807\u5fd7\uff1a\u767d\u8272\u6700\u4f4e\u65f6\u901f\uff0c\u9ec4\u8272\u6700\u9ad8\u65f6\u901f\u3002</li> <li>\u6ce8\u610f\u524d\u65b9\u8def\u51b5\u6807\u5fd7\uff1a\u767d\u8272\u4e09\u89d2\u7ebf\u3002</li> <li>\u6f6e\u6c50\u8f66\u9053\u7ebf\uff1a\u9ec4\u8272\u53cc\u865a\u7ebf\uff0c\u6839\u636e\u5176\u4ed6\u4ea4\u901a\u6807\u5fd7\u51b3\u5b9a\u901a\u884c\u65b9\u5411\u3002</li> <li>\u7981\u6b62\u8de8\u8d8a\u5bf9\u5411\u8f66\u884c\u9053\u5206\u754c\u7ebf\uff1a\u9ec4\u8272\u53cc\u5b9e\u7ebf\uff08\u4e2d\u95f4\u53ef\u80fd\u6709\u9ec4\u8272\u659c\u7ebf\u586b\u5145\uff09\u3001\u9ec4\u8272\u5355\u5b9e\u7ebf\uff08\u67d0\u4fa7\u8f66\u9053\u5c11\u4e8e\u4e24\u6761\u65f6\uff09\uff0c\u4e25\u7981\u8de8\u8d8a\u6216\u538b\u7ebf\u3002\u7279\u6b8a\u7684\u9ec4\u8272\u865a\u5b9e\u7ebf\u8868\u793a\u865a\u7ebf\u65b9\u5411\u53ef\u5728\u786e\u8ba4\u5b89\u5168\u65f6\u4e34\u65f6\u8de8\u8d8a\u4ee5\u8d85\u8f66\u3002</li> <li>\u7981\u6b62\u8de8\u8d8a\u540c\u5411\u8f66\u884c\u9053\u5206\u754c\u7ebf\uff1a\u767d\u8272\u5355\u5b9e\u7ebf\uff0c\u7981\u6b62\u8de8\u8d8a\u6216\u538b\u7ebf\uff08\u4ee5\u53d8\u6362\u8f66\u9053\uff09\uff0c\u901a\u5e38\u5728\u8f6c\u5f2f\u3001\u4eba\u884c\u9053\u9644\u8fd1\u3002</li> <li>\u7981\u6b62\u8def\u8fb9\u505c\u653e\u8f66\u8f86\u7ebf\uff1a\u8def\u6cbf\u7684\u9ec4\u8272\u865a\u7ebf\u4ee3\u8868\u7981\u6b62\u957f\u65f6\u95f4\u505c\u8f66\uff1b\u8def\u6cbf\u7684\u9ec4\u8272\u5b9e\u7ebf\u4ee3\u8868\u7981\u6b62\u505c\u8f66\u3002</li> <li>\u8ba9\u884c\u7ebf\uff1a\u5782\u76f4\u8f66\u9053\u7684\u53cc\u767d\u5b9e\u7ebf+\u505c\u5b57\uff08\u505c\u8f66\u8ba9\u884c\uff09\uff0c\u6216\u53cc\u767d\u865a\u7ebf+\u767d\u8272\u5012\u4e09\u89d2\uff08\u51cf\u901f\u8ba9\u884c\uff09\uff0c\u901a\u5e38\u5728\u4eba\u884c\u6a2a\u9053\u524d\u3002</li> <li>\u505c\u6b62\u7ebf\uff1a\u5782\u76f4\u8f66\u9053\u7684\u767d\u8272\u5355\u5b9e\u7ebf\u3002\u5728\u505c\u6b62\u7ebf\u5916\uff08\u76f8\u5bf9\u4e8e\u4ea4\u53c9\u8def\u53e3\uff09\u505c\u8f66\u7b49\u5f85\uff0c\u901a\u5e38\u5728\u5341\u5b57\u8def\u53e3\u524d\u3002\u7ea2\u706f\u65f6\u5373\u4f7f\u524d\u8f6e\u5df2\u7ecf\u9a76\u8fc7\u505c\u6b62\u7ebf\u4e5f\u4e0d\u80fd\u7ee7\u7eed\u524d\u8fdb\uff08\u540e\u8f6e\u4e5f\u9a76\u8fc7\u505c\u6b62\u7ebf\u624d\u53ef\u4ee5\u7ee7\u7eed\u524d\u884c\uff09\u3002</li> <li>\u5bfc\u6d41\u7ebf\uff1a\u767d\u8272\u659c\u7ebf\u586b\u5145\u533a\u57df\uff0c\u4e0d\u5141\u8bb8\u9a76\u5165\u3002</li> <li>\u4e2d\u5fc3\u5708\uff1a\u5341\u5b57\u8def\u53e3\u4e2d\u5fc3\u7684\u767d\u8272\u659c\u7ebf\u586b\u5145\u5706\u5f62\u6216\u83f1\u5f62\uff0c\u4e0d\u5141\u8bb8\u9a76\u5165\u3002</li> <li>\u7f51\u72b6\u7ebf\uff1a\u9ec4\u8272\u4ea4\u53c9\u5b9e\u7ebf\u586b\u5145\u533a\u57df\uff0c\u7981\u6b62\u505c\u8f66\uff0c\u5982\u5341\u5b57\u8def\u53e3\u4e2d\u5fc3\u6216\u5b66\u6821\u95e8\u53e3\u3002</li> <li>\u516c\u4ea4\u4e13\u7528\u8f66\u9053\u7ebf\uff1a\u6587\u5b57+\u9ec4\u8272\u865a\u7ebf\uff0c\u89c4\u5b9a\u65f6\u95f4\u5185\u53ea\u80fd\u884c\u9a76\u5bf9\u5e94\u8f66\u8f86\uff0c\u5176\u4ed6\u65f6\u95f4\u53ef\u4e34\u65f6\u501f\u9053\u3002</li> <li>\u51cf\u901f\u6807\u7ebf\uff1a\u5782\u76f4\u4e8e\u8f66\u9053\u7684\u53cc\u767d\u865a\u7ebf\u3001\u8f66\u9053\u5185\u767d\u8272\u83f1\u5f62\u865a\u7ebf\u3001\u5f69\u8272\u8def\u9762\u3001\u6536\u8d39\u5c9b\u6807\u7ebf\u7b49\u3002</li> </ul>"},{"location":"driving/theory/#_7","title":"\u4ea4\u8b66\u6307\u6325","text":"<p>\u89c6\u9891\uff1ahttps://www.bilibili.com/video/BV1DmsVeyERw</p> <p>\u4f18\u5148\u4e8e\u5176\u4ed6\u4fe1\u53f7\u3002\u6307\u6325\u9488\u5bf9\u7684\u662f\u8138\u9762\u5411\u7684\u8f66\u8f86\uff01</p> <ul> <li>\u6b63\u5bf9\u8f66\u8f86\uff0c\u5de6\u624b\u9ad8\u4e3e\uff08\u53ef\u89c1\u638c\u5fc3\uff09\uff1a\u505c\u8f66\u7b49\u5f85</li> <li>\u4fa7\u5bf9\u8f66\u8f86\uff0c\u53cc\u624b\u5e73\u4e3e\uff0c\u53f3\u624b\u5411\u5de6\u624b\u6446\u52a8\uff1a\u76f4\u884c\uff08\u53f3\u624b\u8fb9\u8f66\u8f86\u5411\u5de6\u624b\u8fb9\uff09</li> <li>\u4fa7\u5bf9\u8f66\u8f86\uff0c\u53f3\u624b\u5e73\u4e3e\uff08\u6307\u5411\u8f66\u8f86\u5de6\u4fa7\uff09\uff0c\u5de6\u624b\u4ece\u540e\u5f80\u524d\u6446\u52a8\uff1a\u5de6\u8f6c\u5f2f\uff08\u6b64\u65f6\u4ea4\u8b66\u8eab\u4f53\u9762\u5411\u53f3\u4fa7\uff09</li> <li>\u4fa7\u5bf9\u8f66\u8f86\uff0c\u5de6\u624b\u5e73\u4e3e\uff08\u6307\u5411\u8f66\u8f86\u53f3\u4fa7\uff09\uff0c\u53f3\u624b\u4ece\u540e\u5f80\u524d\u6446\u52a8\uff1a\u53f3\u8f6c\u5f2f\uff08\u6b64\u65f6\u4ea4\u8b66\u8eab\u4f53\u9762\u5411\u5de6\u4fa7\uff09</li> <li>\u6b63\u5bf9\u8f66\u8f86\uff0c\u53f3\u624b\u5e73\u4e3e\uff0c\u5de6\u53f3\u5c0f\u5e45\u79fb\u52a8\uff1a\u53d8\u66f4\u8f66\u9053</li> <li>\u6b63\u5bf9\u8f66\u8f86\uff0c\u53f3\u624b\u5e73\u4e3e\uff0c\u541145\u5ea6\u65b9\u5411\u4e0a\u4e0b\u79fb\u52a8\uff1a\u51cf\u901f</li> <li>\u4fa7\u5bf9\u8f66\u8f86\uff0c\u5de6\u624b\u4ece45\u5ea6\u5411\u8d34\u8eab\u65b9\u5411\u4e0a\u4e0b\u6446\u52a8\uff08\u53f3\u624b\u8d34\u8eab\uff09\uff1a\u5de6\u8f6c\u5f2f\u5f85\u8f6c\uff08\u6b64\u65f6\u4ea4\u8b66\u8eab\u4f53\u9762\u5411\u53f3\u4fa7\uff09</li> <li>\u6b63\u5bf9\u8f66\u8f86\uff0c\u5de6\u624b\u9ad8\u4e3e\uff08\u53ef\u89c1\u638c\u5fc3\uff09\uff0c\u53f3\u624b45\u5ea6\u5de6\u53f3\u5c0f\u5e45\u79fb\u52a8\uff1a\u9760\u8fb9\u505c\u8f66</li> </ul>"},{"location":"driving/theory/#_8","title":"\u901a\u884c\u539f\u5219","text":"<ul> <li>\u53f3\u4fa7\u901a\u884c</li> <li>\u5206\u9053\u901a\u884c\uff1a\u591a\u8f66\u9053\u6700\u5de6\u4fa7\u4e3a\u5feb\u901f\u8f66\u9053\uff0c\u5176\u4ed6\u53f3\u4fa7\u8f66\u9053\u5747\u4e3a\u6162\u901f\u8f66\u9053</li> <li>\u4f18\u5148\u901a\u884c\uff1a     - \u5341\u5b57\u8def\u53e3\uff1a\u8f6c\u5f2f\u8ba9\u76f4\u884c\uff0c\u53f3\u8f6c\u8ba9\u5de6\u8f6c\uff0c\uff08\u65e0\u4fe1\u53f7\u706f\u65f6\uff09\u5747\u4e3a\u76f4\u884c\u53f3\u4fa7\u5148\u884c     - \u73af\u5c9b\u8def\u53e3\uff1a\u8fdb\u51fa\u5747\u4e3a\u53f3\u8f6c\uff08\u9006\u65f6\u9488\uff09\uff0c\u5916\u8ba9\u5185\uff0c\u8fdb\u8ba9\u51fa</li> <li>\u5b89\u5168\u901a\u884c</li> </ul>"},{"location":"driving/theory/#_9","title":"\u8d85\u8f66","text":"<ul> <li>\u5de6\u4fa7\u8d85\u8f66\uff0c\u63d0\u524d\u5f00\u542f\u5de6\u8f6c\u706f\uff0c\u53d8\u6362\u8fd1\u8fdc\u5149\u706f\uff08\u591c\u665a\uff09\u6216\u9e23\u7b1b\uff08\u767d\u5929\uff09\u4ee5\u63d0\u793a\u524d\u8f66\u3002</li> <li>\u7981\u6b62\u8d85\u8f66\uff1a     - \u524d\u8f66\u5728\u5de6\u8f6c\u3001\u6389\u5934\u3001\u8d85\u8f66\u65f6     - \u5bf9\u5411\u6765\u8f66\u6709\u4f1a\u8f66\u65f6     - \u524d\u8f66\u4e3a\u7d27\u6025\u4efb\u52a1\u7279\u79cd\u8f66\u8f86     - \u6ca1\u6709\u8d85\u8f66\u6761\u4ef6\u7684\u9053\u8def\uff08\u94c1\u9053\u8def\u53e3\u3001\u7a84\u8def\u7b49\uff09</li> <li>\u6821\u8f66\uff08\u5728\u6700\u53f3\u4fa7\u8f66\u9053\uff09\u505c\u9760\u65f6\uff1a     - \u5355\u8f66\u9053/\u4e24\u8f66\u9053\u4e0d\u80fd\u8d85\u8f66\uff0c\u5e94\u505c\u8f66\u7b49\u5f85\u3002     - \u4e09\u8f66\u9053\u53ef\u4ee5\u4ece\u6700\u5de6\u4fa7\u8f66\u9053\u8d85\u8f66\u3002</li> </ul>"},{"location":"driving/theory/#_10","title":"\u4f1a\u8f66","text":"<ul> <li>\u5728\u6ca1\u6709\u4e2d\u5fc3\u7ebf\u65f6\uff0c\u51cf\u901f\u9760\u53f3\u3002</li> <li>\u6709\u969c\u788d\u7684\u8f66\u9053\u8ba9\u884c\uff0c\u9664\u975e\u5df2\u7ecf\u9a76\u5165\u5bf9\u5411\u8f66\u9053\u3002</li> <li>\u4e0b\u5761\u8ba9\u884c\u4e0a\u5761\uff0c\u9664\u975e\u5df2\u7ecf\u5728\u4e2d\u9014\u3002\uff08\u4e0a\u5761\u66f4\u56f0\u96be\uff09</li> <li>\u9760\u5c71\u4f53\u7684\u8ba9\u8fdc\u79bb\u5c71\u4f53\u7684\u3002\uff08\u8fdc\u79bb\u5c71\u4f53\u7684\u5371\u9669\uff09</li> </ul>"},{"location":"driving/theory/#_11","title":"\u53d8\u6362\u8f66\u9053","text":"<ul> <li>\u63d0\u524d3s\u4ee5\u4e0a\u6253\u8f6c\u5411\u706f\u3002</li> <li>\u4e0d\u5f97\u4e00\u6b21\u53d8\u6362\u4e24\u6761\u8f66\u9053\u3002</li> <li>\u4e09\u6761\u8f66\u9053\u5de6\u53f3\u4e24\u4fa7\u8f66\u8f86\u540c\u65f6\u5411\u4e2d\u95f4\u8f66\u9053\u53d8\u6362\u65f6\uff0c\u5de6\u4fa7\u8ba9\u53f3\u4fa7\u3002\uff08\u9a7e\u9a76\u5458\u5b89\u5168\uff09</li> </ul>"},{"location":"driving/theory/#_12","title":"\u706f\u5149\uff06\u5587\u53ed","text":"<ul> <li>\u5371\u9669\u62a5\u8b66\u95ea\u5149\u706f=\u53cc\u95ea\u3002</li> <li>\u591c\u95f4\uff1a\u5e94\u5f00\u542f\u524d\u7167\u706f\uff0c\u793a\u5ed3\u706f\uff08\u4f4d\u7f6e\u706f\uff09\uff0c\u540e\u4f4d\u706f\u3002</li> <li>\u96fe\u5929&lt;200m\u80fd\u89c1\u5ea6\u989d\u5916\u5f00\u542f\u96fe\u706f\u3001&lt;100m\u5f00\u542f\u53cc\u95ea\u3001\u53ef\u591a\u7528\u5587\u53ed\u3002</li> <li>\u65e0\u8def\u706f\u591c\u8def\uff1a     - \u53ef\u4ee5\u5f00\u542f\u8fdc\u5149\u706f\uff0c\u4f46\u8fd1\u8ddd\u79bb\u8ddf\u8f66\u3001\u591c\u95f4\u4f1a\u8f66150\uff4d\u5916\uff0c\u8def\u53e330-100\u7c73\u9700\u8981\u5173\u8fdc\u5149\u6539\u8fd1\u5149\u3002     - \u901a\u8fc7\u65e0\u4fe1\u53f7\u706f\u8def\u53e3\u4f7f\u7528\u4ea4\u66ff\u8fd1\u8fdc\u5149\u793a\u610f\u3002</li> <li>\u96ea\u5730\uff1a\u767d\u5929\u4e5f\u8981\u5f00\u8fd1\u5149\u706f\uff0c\u4f46\u4e0d\u80fd\u7528\u8fdc\u5149\u53cd\u5149\uff08\u4e0d\u662f\u6b63\u5728\u4e0b\u96ea\u53ef\u89c6\u8ddd\u79bb\u4f4e\u5c31\u4e0d\u8981\u5f00\u96fe\u706f\uff09</li> <li>\u8f6c\u5f2f\u3001\u6389\u5934\u3001\u53d8\u9053\u3001\u8d85\u8f66\u3001\u505c\u8f66\uff1a\u5bf9\u5e94\u7684\u8f6c\u5411\u706f\u3002</li> <li>\u6025\u5f2f\u3001\u5761\u8def\u3001\u62f1\u6865\u3001\u65e0\u4fe1\u53f7\u706f\u8def\u53e3\u7b49\uff1a\u9e23\u7b1b\uff0c\u7981\u6b62\u9e23\u7b1b\u5219\u4ea4\u66ff\u8fd1\u8fdc\u5149\u793a\u610f\u3002</li> </ul>"},{"location":"driving/theory/#_13","title":"\u505c\u8f66","text":"<ul> <li>\u4e34\u65f6\u505c\u8f66\uff1a\u9a7e\u9a76\u4eba\u4e0d\u79bb\u5f00\u8f66\u8f86\u7684\u77ed\u6682\u505c\u7559\u3002</li> <li>\u53e35-\u7ad93\uff1a     - \u4ea4\u53c9\u8def\u53e3\u3001\u94c1\u8def\u9053\u53e3\u3001\u6025\u5f2f\u3001\u6865\u6881\u3001\u9661\u5761\u3001\u96a7\u9053\uff1a50m\u5185\u7981\u6b62\u505c\u8f66\u3002     - \u516c\u5171\u6c7d\u8f66\u7ad9\u3001\u52a0\u6cb9\u7ad9\u3001\u6d88\u9632\u7ad9\uff1a30m\u5185\u7981\u6b62\u505c\u8f66\u3002</li> <li>\u4e34\u65f6\u505c\u8f66\u5e94\u8be5\u8ddd\u79bb\u8def\u8fb930cm\u3002</li> <li>\u4e0b\u5761\u7a7a\u6863\u6ed1\u884c\u4e0d\u80fd\u7184\u706b\u3002</li> <li>\u6f2b\u6c34\u6865\uff1a\u4e00\u5b9a\u662f\u5148\u505c\u8f66\u89c2\u5bdf\uff0c\u518d\u7f13\u6162\u901a\u8fc7</li> </ul>"},{"location":"driving/theory/#_14","title":"\u9ad8\u901f\u516c\u8def","text":"<ul> <li>\u5c0f\u8f66\uff1a\u6162\u901f\u8f66\u905360-100\uff0c\u5feb\u901f\u8f66\u9053100-120\uff08\u4e09\u8f66\u9053\u5219\u7ec6\u5206\u4e3a60-90\uff0c90-120\uff0c110-120\uff09</li> <li>\u4e2d\u578b\u5ba2\u8f66\uff1a60-100\u3002</li> <li>\u6469\u6258\uff1a60-80\u3002</li> <li>\u6570\u5b57\u989c\u8272\uff1a\u767d\u8272=\u6700\u4f4e\u901f\u5ea6\uff0c\u9ec4\u8272=\u6700\u9ad8\u901f\u5ea6\uff0c\u9ed1\u8272=\u5efa\u8bae\u901f\u5ea6</li> <li>\u95f4\u9694\u81f3\u5c1150m\uff0c\u901f\u5ea6\u8d85\u8fc7100\u5219\u81f3\u5c11100m</li> <li>\u6076\u52a3\u5929\u6c14\u80fd\u89c1\u5ea6\uff1a\u5f00\u542f\u96fe\u706f\u3001\u8fd1\u5149\u706f\u3001\u793a\u5ed3\u706f\u3001\u524d\u540e\u4f4d\u706f     - &lt;200m\uff1a\u901f\u5ea6\u4f4e\u4e8e60\uff0c\u95f4\u9694\u81f3\u5c11100m     - &lt;100m\uff1a\u901f\u5ea6\u4f4e\u4e8e40\uff0c\u95f4\u9694\u81f3\u5c1150m\uff0c\u5f00\u542f\u5371\u9669\u62a5\u8b66\u95ea\u5149\u706f     - &lt;50m\uff1a\u901f\u5ea6\u4f4e\u4e8e20\uff0c\u5c3d\u5feb\u9a76\u79bb\u9ad8\u901f\uff0c\u5f00\u542f\u5371\u9669\u62a5\u8b66\u95ea\u5149\u706f</li> <li>\u531d\u9053\uff1a\u51fa\u5165\u53e3\u9644\u8fd1\u9760\u53f3\u4fa7\u7684\u5f15\u9053\uff0c\u9650\u901f40\u3002     - \u5165\u53e3\u5904\uff1a\u531d\u9053\u2014&gt;\u52a0\u901f\u8f66\u9053\uff0c\u5f00\u542f\u5de6\u8f6c\u706f\u3002     - \u51fa\u53e3\u5904\uff1a\u51cf\u901f\u8f66\u9053\u2014&gt;\u531d\u9053\uff0c\u5f00\u542f\u53f3\u8f6c\u706f\u3002</li> </ul>"},{"location":"driving/theory/#_15","title":"\u666e\u901a\u9053\u8def\u9ed8\u8ba4\u9650\u901f","text":"<p>\u6ca1\u6709\u901f\u5ea6\u6807\u5fd7\u65f6\u3010\u6839\u636e\u8f66\u9053\u6570\uff1a34-57-78\u3011</p> <ul> <li>\u65e0\u4e2d\u5fc3\u7ebf\u7684\uff1a\u57ce\u5e02\u9053\u8def30\uff0c\u666e\u901a\u516c\u8def40\uff08\u673a\u52a8\u8f66\u5728\u4e2d\u95f4\u901a\u884c\uff01\uff09</li> <li>\u540c\u5411\u5355\u8f66\u9053\uff1a\u57ce\u5e02\u9053\u8def50\uff0c\u666e\u901a\u516c\u8def70</li> <li>\u540c\u5411\u53cc\u8f66\u9053\u4ee5\u4e0a\uff1a\u57ce\u5e02\u9053\u8def70\uff0c\u666e\u901a\u516c\u8def80</li> <li>\u8fdb\u51fa\u975e\u673a\u52a8\u8f66\u9053\u3001\u901a\u8fc7\u94c1\u8def\u9053\u53e3\u3001\u6025\u8f6c\u5f2f\u3001\u7a84\u8def\u3001\u6076\u52a3\u5929\u6c14\u7b49\uff1a30</li> <li>\u7275\u5f15\u6545\u969c\u8f66\uff1a30</li> <li>\u62d6\u62c9\u673a\u3001\u7535\u74f6\u8f66\u3001\u673a\u68b0\u8f66\uff1a15</li> </ul>"},{"location":"driving/theory/#_16","title":"\u4ea4\u901a\u4e8b\u6545\u5904\u7406","text":"<ul> <li>\u673a\u52a8\u8f66\u4ea4\u901a\u4e8b\u6545\u8d23\u4efb\u5f3a\u5236\u4fdd\u9669=\u4ea4\u5f3a\u9669     - \u76ee\u7684\u662f\u5bf9\u7b2c\u4e09\u65b9\u53d7\u5bb3\u4eba\u8d54\u507f\u3002     - \u9700\u8981\u653e\u7f6e\u4fdd\u9669\u6807\u5fd7\uff0c\u6bcf\u5e74\u6839\u636e\u4e8b\u6545\u964d\u4f4e\u6216\u63d0\u9ad8\u8d39\u7528\u3002</li> <li>\u4e09\u79cd\u65b9\u6cd5\uff1a     - \u81ea\u884c\u534f\u5546\uff1a\u8f7b\u5fae\u4f24\u65e0\u4e89\u8bae\u65f6\u3002         - \u62a5\u8b66\u7684\u60c5\u51b5\uff1a\u6709\u4e89\u8bae\uff0c\u78b0\u649e\u5efa\u7b51\u7269\u6216\u516c\u5171\u8bbe\u65bd\u3001\u65e0\u68c0\u9a8c\u5408\u683c\u3001\u65e0\u4ea4\u5f3a\u9669\u3001\u9003\u9038\u3001\u65e0\u724c\u7167\u3001\u65e0\u9a7e\u7167\u3001\u996e\u9152\u3002     - \u4ea4\u8b66\u7b80\u6613\u7a0b\u5e8f\uff1a\u5f53\u573a\u8b66\u544a\u3001200\u4ee5\u5185\u7f5a\u6b3e\u3002     - \u4ea4\u8b66\u4e00\u822c\u7a0b\u5e8f\uff1a\u8c03\u67e5\u53d6\u8bc1\u3002</li> <li>\u8d23\u4efb\u786e\u5b9a     - \u5355\u65b9\u5168\u8d23\uff1a\u8ffd\u5c3e\u3001\u9006\u884c\u3001\u5012\u8f66\u3001\u6e9c\u8f66\uff08\u672a\u5f00\u542f\u624b\u5239\uff09\u3001\u5f00\u5173\u8f66\u95e8\u3001\u8fdd\u53cd\u4ea4\u901a\u4fe1\u53f7\u3001\u672a\u6309\u89c4\u5b9a\u8ba9\u884c\uff0c\u8d27\u8f66\u6389\u843d\u8d27\u7269\u3002     - \u5176\u4ed6\u60c5\u51b5\u540c\u7b49\u8d23\u4efb\u3002     - \u786e\u5b9a\u8d23\u4efb\u540e\u5411\u4fdd\u9669\u62a5\u6848\uff0c\u586b\u5199\u673a\u52a8\u8f66\u4ea4\u901a\u4e8b\u6545\u5feb\u901f\u5904\u7406\u534f\u8bae\u4e66\u3002</li> <li>\u673a\u52a8\u8f66\u4e0e\u884c\u4eba\u4e8b\u6545     - \u8f66\u9759\u6b62\u6216\u884c\u4eba\u6545\u610f\u78b0\u649e\u65f6\uff0c\u65e0\u8d23\u4efb\u3002     - \u8f66\u975e\u9759\u6b62\uff0c\u5373\u4f7f\u65e0\u8fc7\u9519\uff0c\u4e5f\u8981\u627f\u62c5&lt;10%\u8d54\u507f\u8d23\u4efb\u3002</li> <li>\u8f66\u8f86\u6545\u969c\u5e94\u5f00\u542f\u8b66\u793a\u95ea\u5149\u706f\uff0c\u65e0\u6cd5\u79fb\u52a8\u65f6\u767d\u592950\uff4d/\u591c\u95f4100\uff4d\u5904\u8bbe\u7f6e\u8b66\u544a\u6807\u5fd7\uff0c\u9ad8\u901f150m\u5916\u8bbe\u7f6e\u8b66\u544a\u6807\u5fd7\u3002</li> <li>\u6b7b\u4ea1\u4e8b\u6545\uff1a\u4e0d\u5f97\u79fb\u52a8\u8f66\u8f86\uff0c\u4fdd\u6301\u73b0\u573a\uff0c\u8bbe\u7f6e\u8b66\u793a\uff0c\u62e8\u6253120\u3002</li> <li>\u6cd5\u5f8b\u8d23\u4efb\uff1a     - \u91cd\u5927\u4e8b\u6545\uff08\u91cd\u4f24\u3001\u6b7b\u4ea1\u7b49\uff09\uff1a3\u5e74\u4ee5\u5185     - \u9003\u9038\uff1a3-7\u5e74     - \u9003\u9038\u81f4\u4eba\u6b7b\u4ea1\uff1a7-15\u5e74\u3002\uff08\u5f53\u573a\u6b7b\u4ea1\u540e\u9003\u9038\u7684\u4ecd\u7136\u662f3-7\u5e74\uff09</li> <li>\u53d73\u4e343\u4e893\u8c0310\u7f5a15\u886515\uff08\u5ba130\u6ee190\uff09     - \u4e8b\u540e\u62a5\u8b66\u3001\u8f66\u8f86\u8f6c\u8ba9\u767b\u8bb0\uff0c3\u5929\u5185\u53d7\u7406     - \u6536\u5230\u6b63\u5f0f\u8f66\u724c\u540e\uff0c\u4e34\u65f6\u8f66\u724c\u4fdd\u63013\u5929\u6709\u6548     - \u8c03\u89e3\u4e6610\u5929\u5185\u51fa\u5177\uff0c\u6709\u4e89\u8bae3\u5929\u5185\u63d0\u4ea4     - \u7f5a\u6b3e15\u5929\u5185\u4ea4\u9f50     - \u8865\u529e\u8f66\u724c\u9700\u898115\u5929\u3002     - \u9a7e\u7167\u671f\u6ee1\u66f4\u6362\u63d0\u524d90\u5929\uff0c\u5ba1\u9a8c&amp;\u53d8\u66f4\u4fe1\u606f\u63d0\u524d30\u5929\u3002</li> </ul>"},{"location":"driving/theory/#_17","title":"\u673a\u52a8\u8f66\u539f\u7406","text":"<ul> <li>\u53d1\u52a8\u673a     - \u5206\u7c7b\uff1a\u6c7d\u6cb9\u3001\u67f4\u6cb9\u3001\u6c14\u4f53\u71c3\u6599\u3002     - \u56db\u884c\u7a0b\u53d1\u52a8\u673a\uff1a\u8fdb\u6c14\u3001\u538b\u7f29\u3001\u505a\u529f\u3001\u6392\u6c14\u3002\u6bcf\u56db\u884c\u7a0b\u66f2\u8f74\u8f6c\u52a8\u4e24\u5468\u3002</li> <li>\u5e95\u76d8     - \u4f20\u52a8\u7cfb\u3010\u79bb\u5236\u52a0\u3011         - \u79bb\u5408\u5668\uff1a\u6700\u5de6\u4fa7\u8e0f\u677f\uff0c\u7528\u4e8e\u8d77\u6b65\u3001\u505c\u8f66\u3001\u6362\u6321\u3002\uff08\u81ea\u52a8\u6321\u6c7d\u8f66\u6ca1\u6709\uff01\uff09         - \u52a0\u901f\u8e0f\u677f\uff08\u6cb9\u95e8\uff09\uff1a\u6700\u53f3\u4fa7\u8e0f\u677f\uff0c\u6539\u53d8\u53d1\u52a8\u673a\u8f6c\u901f\uff08\u4e0d\u8e29\u65f6\u7684\u6700\u4f4e\u8f6c\u901f\u4e3a\u6020\u901f\uff09\u3002         - \u53d8\u901f\u5668\uff1a\u6539\u53d8\u6321\u4f4d\uff0c\u8c03\u6574\u9a71\u52a8\u8f6e\u7684\u8f6c\u77e9\u548c\u8f6c\u901f\u3002             - \u81ea\u52a8\u6321\uff1aP=\u9a7b\u8f66\uff0cR=\u5012\u8f66\uff0cN=\u7a7a\u6321\uff0cD=\u6b63\u5e38\u884c\u9a76\u6863\uff0c321=\u7f13\u5761\u5230\u9661\u5761\u524d\u8fdb\u6863\u3002             - \u62b5\u6321=\u4f4e\u901f\uff0c\u9002\u5408\u722c\u5761\uff0c\u9ad8\u6321=\u9ad8\u901f\uff0c\u9002\u5408\u5e73\u8def     - \u8f6c\u5411\u7cfb\uff1a\u8f6c\u5411\u76d8     - \u5236\u52a8\u7cfb\uff1a         - \u884c\u8f66\u5236\u52a8\uff08\u811a\u5239\uff09\uff1a\u4e2d\u95f4\u8e0f\u677f\uff08\u81ea\u52a8\u6321\u5219\u662f\u6700\u5de6\uff09\uff0c\u8e29\u4e0b\u4ee5\u5236\u52a8\u5239\u8f66\u3002         - \u9a7b\u8f66\u5236\u52a8\uff08\u624b\u5239\uff09\uff1a\u56fa\u5b9a\u8f66\u8f86\u9632\u6b62\u6e9c\u8f66\u3002     - \u884c\u9a76\u7cfb\uff1a\u8f66\u8f6e\u3001\u8f66\u6865\u3001\u8f66\u67b6\u3001\u60ac\u67b6</li> <li>\u7535\u5668     - \u7535\u6e90\uff1a\u84c4\u7535\u6c60\u3001\u53d1\u52a8\u673a     - \u7528\u7535\u8bbe\u5907\uff1a\u7167\u660e\u4fe1\u53f7\u88c5\u7f6e\u3001\u70b9\u706b\u5668\u7b49     - \u70b9\u706b\u8fc7\u7a0b\uff1aLOCK=\u5173\u95ed\u7535\u6e90\uff0cACC=\u63a5\u901a\u9644\u4ef6\u7535\u6e90\uff0cON=\u53d1\u52a8\u673a\u5de5\u4f5c\uff0cSTART=\u542f\u52a8\u673a\u70b9\u706b\uff0c\u81ea\u52a8\u5f39\u56deON</li> <li>\u82f1\u6587\u7f29\u5199     - \u524d\u65b9\u78b0\u649e\u9884\u8b66\uff1aForward Collision Warning (FCW)     - \u8f66\u8f86\u7275\u5f15\u529b\u63a7\u5236\u7cfb\u7edf\uff1aTraction Control System (TCS/ASR/TRC)     - \u968f\u52a8\u8f6c\u5411\u524d\u7167\u706f\u7cfb\u7edf\uff1aAdaptive Front-lighting System (AFS)     - \u81ea\u52a8\u5239\u8f66\u8f85\u52a9\u7cfb\u7edf\uff1aAutonomous Emergency Braking (AEB)     - \u4ea4\u901a\u6807\u5fd7\u8bc6\u522b\u7cfb\u7edf\uff1aTraffic Sign Recoginization (TSR)     - \u7535\u5b50\u5236\u52a8\u529b\u5206\u914d\u7cfb\u7edf\uff1aElectronic Brakeforce Distribution (EBD)     - \u8f66\u8eab\u7535\u5b50\u7a33\u5b9a\u63a7\u5236\u7cfb\u7edf\uff1aElectronic Stability Program (ESP)     - \u76f2\u70b9\u68c0\u6d4b\u7cfb\u7edf\uff1aBlind Spot Detection (BSD)     - \u5b9e\u65f6\u4ea4\u901a\u4fe1\u606f\uff1aTraffic Message Channel (TMC)     - \u81ea\u9002\u5e94\u5de1\u822a\uff1aAdaptive Cruise Control (ACC)</li> <li>\u81ea\u68c0\u706f\uff08\u5f00\u8f66\u540e\u4e0d\u7184\u706d\u5219\u8868\u793a\u6545\u969c\uff09     - ABS\u6307\u793a\u706f\uff1a\u5239\u8f66\u9632\u62b1\u6b7b\u7cfb\u7edf\uff08Anti-lock Braking System\uff09\uff0c\u7d27\u6025\u5236\u52a8\u65f6\u9632\u6b62\u8f66\u8f6e\u9501\u6b7b\uff08\u88ab\u5f3a\u529b\u5239\u8f66\u5bfc\u81f4\u505c\u8f6c\uff0c\u5bb9\u6613\u5bfc\u81f4\u4fa7\u6ed1\uff09\uff0c\u53ef\u4ee5\u7528\u529b\u8e0f\u5236\u52a8\uff0c\u66f4\u5bb9\u6613\u63a7\u5236\u65b9\u5411\uff0c\u4f46\u4e0d\u4e00\u5b9a\u80fd\u7f29\u77ed\u5236\u52a8\u8ddd\u79bb\u3002         - \u6e7f\u6ed1\u8def\u9762\uff08\u96e8\u96ea\u5929\uff09\u5236\u52a8\u504f\u79bb\u65b9\u5411\u65f6\uff0c\u4e0d\u8981\u7ee7\u7eed\u8e29\u5236\u52a8\u8e0f\u677f\uff0c\u9632\u6b62\u8f66\u8f6e\u9501\u6b7b\u3002     - \u5b89\u5168\u5e26\u3001\u8f66\u95e8\u3001\u673a\u6cb9\u3001\u7535\u6c60\u3001\u6c14\u56ca\u3001\u5239\u8f66\u76d8\u7b49     - \u8f66\u7a97\u5f62\u72b6\uff1a\u524d\u6247\u540e\u65b9     - \u7535\u6c60\u5f62\u72b6\uff1a\u5145\u7535\u7cfb\u7edf\u6545\u969c\uff0c\u4e0d\u662f\u84c4\u7535\u6c60\u6545\u969c\uff1b\uff08\u7535\u8f66\uff09\u91cd\u53e0\u7535\u6c60\uff1a\u4f4e\u8377\u7535\u72b6\u6001     - \u56db\u53f6\u98ce\u6247\uff1a\u51b7\u98ce\u6696\u6c14\u98ce\u6247\uff0c\u4e0d\u662f\u5236\u51b7/\u7a7a\u6c14\u5faa\u73af\u7b49\u3002</li> </ul>"},{"location":"driving/theory/#_18","title":"\u5176\u4ed6","text":"<ul> <li>\u88ab\u7275\u5f15\u673a\u52a8\u8f66\uff1a     - \u9664\u9a7e\u9a76\u5458\u5916\u4e0d\u5f97\u8f7d\u4eba     - \u5bbd\u5ea6\u5e94\u5c0f\u4e8e\u7275\u5f15\u8f66     - \u8f6f\u8fde\u63a5\u4fdd\u63014-10\u7c73     - \u5236\u52a8\u5931\u6548\u9700\u8981\u4f7f\u7528\u786c\u8fde\u63a5</li> <li>\u53d8\u66f4\u767b\u8bb0\uff1a\u6539\u88c5\u53d1\u52a8\u673a\u3001\u8f66\u8eab\u989c\u8272\u3001\u8f66\u67b6\u5747\u9700\u8981\u3002\u52a0\u88c5\u9632\u649e\u4e0d\u9700\u8981\u3002</li> <li>\u8003\u9a7e\u7167\u4f5c\u5f0a\u60c5\u8282\u4e25\u91cd\u6784\u6210\u72af\u7f6a\uff1a3-7\u5e74\u6709\u671f\u5f92\u5211+\u7f5a\u6b3e</li> <li>\u9152\u9a7e=20mg/100ml\uff1b\u9189\u9a7e=80mg/100ml</li> <li>\u6559\u7ec3\u8f66\u7981\u6b62\u4e0a\u9ad8\u901f\u3002</li> <li>\u4f53\u68c0\u6709\u6548\u671f\u662f6\u4e2a\u6708\u3002</li> <li>\u89c6\u529b\u8981\u6c42\uff1a\u5927\u8f665.0\uff0c\u5c0f\u8f664.9</li> <li>\u5b89\u5168\u5934\u6795\uff1a\u9632\u6b62\u8ffd\u5c3e\u635f\u4f24\u8116\u9888\uff0c\u5e94\u5bf9\u51c6\u9888\u90e8\u800c\u975e\u5934\u90e8\u3002</li> <li>\u4e0a\u8f66\u524d\uff1a\u9006\u65f6\u9488\u7ed5\u8f66\u68c0\u67e5\u8f66\u8f86\u3002</li> <li>\u505c\u8f66\u89c6\u8ddd\uff1a\u53cd\u5e94+\u5236\u52a8+\u5b89\u5168\u8ddd\u79bb\uff08\u4e0d\u5305\u542b\u542f\u52a8\u8ddd\u79bb\uff09</li> <li>\u6e05\u626b\u4f5c\u4e1a\u8f66\uff1a\u4e0d\u53d7\u5206\u9053\u884c\u9a76\u9650\u5236\u3002</li> <li>\u8865\u529e\u9a7e\u9a76\u8bc1\u671f\u95f4\uff0c\u6709\u8865\u529e\u8bc1\u660e\u4e5f\u4e0d\u80fd\u9a7e\u9a76\u3002</li> <li>\u65b9\u5411\u76d8\u8c03\u6574\uff1a\u5927\u98ce\u7a33\u4f4f\uff0c\u6ce5\u6cde\u987a\u65b9\u5411\uff0c\u5176\u4ed6\u53cd\u65b9\u5411\u3002</li> <li>\u73af\u5c9b\u4ea4\u53c9\u8def\u53e3\u53ef\u4ee5\u6389\u5934\u3002</li> <li>\u653e\u6c14\u964d\u4f4e\u80ce\u538b\u4e0d\u53ef\u4ee5\u9632\u6b62\u7206\u80ce\uff0c\u8fc7\u4f4e\u8fc7\u9ad8\u90fd\u5bb9\u6613\u7206\u80ce\u3002</li> <li>\u505c\u8f66\u4f4d\u989c\u8272\uff1a\u84dd\u8272\u514d\u8d39\uff0c\u767d\u8272\u6536\u8d39\uff0c\u9ec4\u8272\u4e13\u7528\u3002</li> <li>\u4f53\u68c0\uff1a\u6b8b\u75be\u4eba\u9700\u8981\u7701\u7ea7\u533b\u9662\uff0c\u666e\u901a\u4eba\u4e8c\u7ea7\u4ee5\u4e0a\u533b\u9662\uff08\u4e61\u9547\u3001\u793e\u533a\u3001\u4f53\u68c0\u4e2d\u5fc3\uff09</li> <li>\u9632\u6ed1\u94fe\uff1a\u53ea\u88c5\u9a71\u52a8\u8f6e\u3002</li> <li>\u4e0d\u4ea4\u4ea4\u5f3a\u9669\uff1a\u6263\u8f66\uff0c\u7f5a\u6b3e2\u500d\u4fdd\u8d39\u3002</li> <li>\u529e\u7406\u673a\u52a8\u8f66\u767b\u8bb0\uff1a\u5f53\u573a\u529e\u7406\u624b\u7eed\u3002</li> <li>\u4e00\u4e2a\u4eba\u7684\u4e24\u8f86\u8f66\u4e92\u6362\u53f7\u724c\uff1a\u540c\u8f96\u533a\u8f66\u7ba1\u6240\u767b\u8bb0\uff0c\u540c\u53f7\u724c\u79cd\u7c7b\uff0c\u975e\u8425\u8fd0\u3002\u9700\u8981\u5904\u7406\u5b8c\u6bd5\u6240\u6709\u8fdd\u6cd5\u884c\u4e3a\uff0c\u4e14\u4e00\u5e74\u53ea\u80fd\u6362\u4e00\u6b21\u3002</li> <li>\u9ad8\u901f\u4e0a\u98a0\u7c38\uff0c\u5e94\u8fc5\u901f\u964d\u4f4e\u8f66\u901f\u9632\u6b62\u7206\u80ce\u3010\u6b63\u786e\u3011</li> </ul>"},{"location":"godot/basics/","title":"Godot 4.2 Basics","text":""},{"location":"godot/basics/#concepts-and-classes","title":"Concepts and Classes","text":"<p>A Game is a loop (<code>MainLoop --&gt; SceneTree</code>) that iterates over time.</p> <p>A <code>SceneTree</code> object is used to manage the game by loading/switching scenes.</p> <p>A Scene is a tree of <code>Node</code> or scene instances. Scene is not a class! It's aimed for reuse and saved in tscn (text scene) files. </p> <ul> <li>You can have multiple instances from the same class (may be extended by the same script) in a scene to use different properties.</li> </ul> <ul> <li>Another scene could also be instantiated and added to a scene. This will instantiate all the nodes inside the child scene.</li> </ul> <p><code>Variant</code> is the dynamic type to hold any kind of data.</p> <p><code>Object</code> is the base class for (almost) everything.</p> <pre><code># Class tree of Object\nObject --&gt; RefCounted --&gt; Resource --&gt; Script/Texture/Shape2D...\n       \u22a2-&gt; MainLoop --&gt; SceneTree\n       \u22a2-&gt; ResourceLoader\n       \u22a2-&gt; Node --&gt; CanvasItem --&gt; Node2D --&gt; Sprite2D/...\n                |              \u22a2-&gt; Control  \n                \u22a2-&gt; Node3D \n                \u22a2-&gt; Viewport --&gt; Window \n                \u22a2-&gt; CanvasLayer\n</code></pre> <pre><code>### Object\n# general method for all notifications, like _enter_tree, _exit_tree, _ready, ...\nvoid _notification(int what) \n\n# call a method using its name and return its results, == method()\nVariant call(StringName method, ...) # ... are args to method\n\n# deferred call at idle time (at the end of frame)\n# always return null instead of the method's results!\nVariant call_deferred(StringName method, ...)\n\n# assign value to property using func\nvoid set(StringName property, Variant value)\n\n# assign value to property at idle time.\n# == call_deferred(set, property, value)\nvoid set_deferred(StringName property, Variant value)\n</code></pre> <p><code>RefCounted</code> inherits from <code>Object</code> to allow garbage-collection.</p> <p><code>Resource</code> is the base class for Serializable objects. (e.g., <code>Script</code>, <code>AudioEffect</code>)</p> <p><code>ResourceLoader</code> is a helper to load resource files. It's a built-in singleton.</p> <p><code>SceneTree</code> implements the game loop, and hold all scenes and nodes. It's a built-in singleton.</p> <pre><code>### SceneTree\nWindow root # the root node! Window is the default Viewport.\nNode current_scene\nbool paused = false\n</code></pre> <p><code>Veiwport</code> defines what is displayed in the screen. It's also the root node of the <code>SceneTree</code>, and all other scenes should be children of this node to be displayed.</p> <pre><code>### Scene tree\nSceneTree --&gt; root (Viewport) --&gt; Scene --&gt; Node\n</code></pre> <p><code>CanvasLayer</code> is for separate rendering of objects (its children) in 2D. </p> <p></p> <p><code>Node</code> is the smallest building block for the game. </p> <p>It implements editable properties, callbacks for the game loop, and <code>add_child</code> to build a tree.</p> <pre><code>### Node\nStringName name\n\n# constructor\nvoid _init()\n# notifications\nvoid _enter_tree()\nvoid _exit_tree()\nvoid _ready()\nvoid _process()\nvoid _physics_process()\n# input event handler\nvoid _input(InputEvent event)\nvoid _unhandled_input(InputEvent event)\n# enable/disable processing\nvoid set_process(bool enable)\nvoid set_physics_process(bool enable)\nvoid set_process_input(bool enable)\nvoid set_process_unhandled_input(bool enable)\n# check status\nbool is_node_ready()\nbool is_processing()\nbool is_physics_processing()\nbool is_in_group(StringName group)\nString get_class() # return class name\n# scenetree \nSceneTree get_tree() # get SceneTree\nViewport get_viewport() # get viewport, usually == get_tree().root\nNodePath get_path() # get absolute path of current node\n# other nodes\nvoid add_child(Node node, ...) # add a child node\nNode get_parent() # null if no parents\nNode get_node(NodePath path) # get node from path. Relative path is from this node, absolute path is from SceneTree.root\nbool has_node(NodePath path) # if contains a node\n# actions\nvoid queue_free() # safely delete this node at the end of frame, will delete all children too. Useful to clear a node.\n</code></pre> <p><code>CanvasItem</code>  is the abstract base class for all 2D things, including <code>Node2D</code> and <code>Control</code>.</p> <pre><code>###  CanvasItem\n# visibility of 2D objects\nbool visible = true\n# transform\nVector2 offset = Vector2(0, 0)\nfloat rotation = 0\nVector2 scale = Vector2(1, 1)\n# drawing order\nint z_index = 0 # in [-4096, 4096], higher values will be drawn forward\n\nvoid hide() # visible = false\nvoid show() # visible = true\n</code></pre> <p><code>Node2D</code> is the base class for 2D-related objects.</p> <p><code>Control</code> is the base class for GUI objects.</p> <p><code>Node3D</code> is the base class for 3D-related objects.</p>"},{"location":"godot/basics/#game-logic","title":"Game Logic","text":"<p>What happens on starting the game:</p> <ul> <li><code>OS</code> is created to handle operating system related things.</li> </ul> <ul> <li><code>SceneTree</code> is created, which contains the root <code>Viewport</code>.</li> </ul> <ul> <li>Children of <code>Viewport</code> (active scenes) enter the <code>SceneTree</code>.</li> </ul> <ul> <li>Active scene load its <code>Node</code>s in the tree order (parent-to-children).<ul> <li><code>Node._init()</code> is called to initialize the instance.</li> <li><code>Node._enter_tree()</code> is called before loading its children, so it's called from parent-to-child.</li> <li>After all Nodes are loaded, <code>Node._ready()</code> is called. The order is therefore reversed from child to parent.</li> </ul> </li> <li>The game loop starts, which iteratively calls:<ul> <li><code>Node._process(float delta)</code>. This happens as fast as possible, so the actual time delta is provided. Use <code>Node.set_process(bool enable)</code> to enable/disable it. Defaults to enabled if <code>_process()</code> is implemented (overridden).</li> <li><code>Node._physics_process()</code> for a fixed number of times every second (e.g., 60 FPS). Use <code>Node.set_physics_process(bool enable)</code> to enable/disable it.</li> </ul> </li> </ul> <ul> <li> <p>The active scene may be changed to another scene:</p> <ul> <li> <p>this is usually done in script:</p> <pre><code>func _level_completed():\n    # dynamic load at runtime\n    get_tree().change_scene_to_file('res://level2.tscn')\n\n# or preload at compile time\nvar level2 = preload('res://level2.tscn') # PackedScene\nfunc _level_completed():\n    get_tree().change_scene_to_packed(level2)\n</code></pre> </li> </ul> </li> </ul>"},{"location":"godot/basics/#gdscript","title":"GDScript","text":"<p><code>Script</code> is a kind of <code>Resource</code> to extend functionality of an <code>Object</code> by attaching to a Node.</p> <p>It will inherits (extends) the original class as a new class to add features. Each script represents a new class definition, and is saved in gd file.</p> <p>For each instance of a base class, we can attach different scripts (so they become different child classes) or the same scripts (the same child class).</p> <p>The grammar is almost pythonic, but:</p> <pre><code>### there is no need for `self`\n# just call the function directly (even from parent class).\nqueue_free() # if inherited from Node\n\n### literals\nfalse, true\nnull\n\n### variable declaration\nvar x # null by default, dynamic type\nvar x: int # static type (can only be int!)\nvar x = 1 # init to int, but still dynamic type\nvar x: int = 1 # static type\nvar x := 1 # static type (auto inferred as int)\n\nconst x = 1 # const variable\nstatic var x # static variable (shared among instances)\n\n# note that any static variables will cause the class to NEVER be freed! (ref: https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_basics.html#:~:text=Currently%2C%20due%20to%20a%20bug%2C%20scripts%20are%20never%20freed%2C%20even%20if%20%40static_unload%20annotation%20is%20used.)\n\n\n### different strings\n\"xxx\" # String, general use, copy-on-write\n&amp;\"xxx\" # StringName, immutable and unique, faster for comparison.\n^\"xxx\" # NodePath, pre-parsed to reference a node (or its resources and properties)\n\n### division \n5 / 2 == 2 # both operands are int, output is also int!\n5 / 2.0 == 2.5 # manual float conversion\n\n### short hand\n$NodePath # == get_node(\"NodePath\")\n%UniqueNode # == get_node(\"%UniqueNode\")\n\n### annotations (decorators)\n@export var x: int = 1 # export an integer\n@export_range(1, 100, 1) # export a slider to editor\nvar range: int = 50\n@export_file var f # string as path to file\n\n@onready var my_label = get_node(\"MyLabel\") # will defer initialization after ready.\n\n\n### code regions (to fold code quickly, only supported in built-in code editor...)\n#region Description\n...\n#endregion\n\n### array\nvar l = [1, 2, 3]\nvar len = l.size()\n\nl.append(4) # == l.push_back(4)\nl.push_front(5)\n\nl.erase(4) # remove by value\nl.remove_at(0) # remove by index\n\nvar i = l.find(2) # find by value, return index\nprint(2 in l) # test containing by `in`\nprint(l.count(2)) # count by value\n\nl.reverse()\nl.shuffle()\nl.clear()\n\n### dict\nvar d = {\"key\": 0}\nd.one = 1 # == d['one'] = 1\nprint(d[\"one\"])\nprint('one' in d) # containing test by `in`\n\n### for loop\nfor i in range(10): # range(s, e, i)\n    print(i)\nfor i in [1, 2, 3]: # array\n    print(i)\nd = {\"a\": 0, \"b\": 1}    \nfor key in d: # dict\n    print(d[key])\nl = [\"a\", \"b\"]\nfor x: String in l: # typed array\n    print(x)\n\n### function (Callable)\n# functions are first-class items (can be directly referenced by name, instead of by string)\n# however, we need to use func.call() when func is passed as an argument:\nfunc foo():\n    print('foo')\n\nfunc bar(f: Callable):\n    f.call() # cannot use f(), must use f.call()\n\nfunc _ready():\n    foo() # just use the () operator is OK.\n    bar()\n\n# gdscript DO NOT support named argument!\n# ref: https://github.com/godotengine/godot-proposals/issues/902\nbar(f=foo) # error!\n\n# lambda functions also need to use .call()\nvar foo = func(): print('foo')\nfoo.call() # cannot use foo()\n\n# lambda functions will capture local env\nvar x = 42\nvar my_lambda = func(): print(x)\nmy_lambda.call() # Prints \"42\"\nx = \"Hello\"\nmy_lambda.call() # Prints \"42\"\n\n### named class\n# by default, gdscript extends a class and will create an UNNAMED class, but we can also name it (even icon it)\n@icon(\"res://path/to/icon.png\")\nclass_name MyClass # after adding this line, you can found it in the editor!\nextends Node # if not speficied, will default to `extends RefCounted`\n\n# in another script, you can extend from your class too\nextends MyClass\n# if you don't define the class_name, you can also use path to extend\nextends \"res://src/MyClass.gd\"\n\n# use keyword `is` to check class\nconst myclass = preload(\"myscript.gd\") # load script (class definition) only once at compile time.\nif myclass is MyClass:\n    pass\nvar myinstance = myclass.new() # instantiate a class\n\nconst myscene = preload(\"myscene.tscn\") # PackedScene\nvar myscene_node = myscene.instantiate() # instantiate a scene\nadd_child(myscene_node) # add to current node\n\n# use super to call parent methods\nfunc not_overriding():\n    super.not_overriding()\n\n### set and get for inter-dependent properties\nvar milliseconds: int = 0\nvar seconds: int:\n    get:\n        return milliseconds / 1000\n    set(value):\n        milliseconds = value * 1000\n\n### assert\nassert(i == 0)\nassert(i == 0, 'i is not 0')\n\n### enums (a special constant)\n# unnamed\nenum {TILE_BRICK, TILE_FLOOR, TILE_SPIKE, TILE_TELEPORT}\n# Is the same as: const TILE_BRICK = 0; const TILE_FLOOR = 1\n\n# named\nenum State {STATE_IDLE, STATE_JUMP = 5, STATE_SHOOT} # Access values with State.STATE_IDLE, etc.\n# Is the same as: const State = {STATE_IDLE = 0, STATE_JUMP = 5, STATE_SHOOT = 6}\n</code></pre>"},{"location":"godot/basics/#user-input","title":"User Input","text":"<p>User input will propagate from-child-to-parent through the node tree until one node consumes it. </p> <p>Each single user input (press a key, click mouse) will be propagated separately as a sub-class of <code>InputEvent</code>:</p> <pre><code>Resource --&gt; InputEvent --&gt; InputEventFromWindow --&gt; InputEventWithModifiers --&gt; InputEventKey/InputEventMouse/InputEventGesture\n                                                 \u22a2-&gt; InputEventScreenDrag/InputEventScreenTouch\n                        \u22a2-&gt; InputEventAction\n                        \u22a2-&gt; InputEventShortcut\n                        \u22a2-&gt; InputEventJoypadButton/InputEventJoypadMotion                 \n</code></pre> <pre><code>### InputEvent\n\n# query action group press/release\nbool is_action_pressed(StringName action, bool allow_echo=false, bool exact_match=false)\nbool is_action_released(StringName action, bool allow_echo=false, bool exact_match=false)\n\n# key and mouse press/release\nbool is_pressed() const \nbool is_released() const\n\n# return event name\nString as_text() const\n\n# 0-1, for joypad strength\nfloat get_action_strength(StringName action, bool exact_match=false) const \n</code></pre> <p>Node should override <code>_input()</code> to handle targeted input. </p> <p><code>set_process_input(enable)</code> can be used to turn on/off input processing.</p> <p>The order of input processing:</p> <pre><code># firstly, all node can catch input\nNode._input()\n\n# secondly, GUI will catch input\n# GUI will not follow the child-to-parent order!\nControl._gui_input() \n\n# then, node will catch again for InputEventKey/JoypadButton/Shortcut, no mouse input!\nNode._shortcut_input()\n\n# node will catch InputEventKey again.\nNode._unhandled_key_input()\n\n# finally...\nNode._unhandled_input()\n</code></pre>"},{"location":"godot/basics/#event-and-poll","title":"Event and Poll","text":"<p>Event: input that only respond once, e.g., click mouse, press enter.</p> <p>We should use the <code>_input()</code> system and <code>InputEvent</code> class to handle events:</p> <pre><code>func _input(event):\n    if event.is_action_pressed(\"ui_left\"):\n        # turn left\n</code></pre> <p>Poll: input that happens as long as it's pressed. e.g., press left key to move until released.</p> <p>We need to constantly check the status in <code>_process()</code>, which can be done by a built-in Singleton <code>Input</code>.</p> <pre><code>func _physics_process(delta):\n    if Input.is_action_pressed(\"ui_left\"):\n        # move left\n        position.x += speed * delta\n</code></pre>"},{"location":"godot/basics/#mouse","title":"Mouse","text":"<p><code>InputEventWithModifiers</code>: modifier means keys like shift or alt, it can distinguish <code>Shift+Click</code> from <code>Click</code>.</p> <p><code>InputEventMouse</code> add <code>position</code> and <code>global_position</code> of mouse. Further it's inherited by:</p> <p><code>InputEventMouseButton</code> for button click / wheel scroll.</p> <pre><code>MouseButton button_index\nbool double_click\nbool pressed\n</code></pre> <pre><code>func _input(event):\n    if event is InputEventMouseButton:\n        if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:\n            print(\"Left button was clicked at \", event.position)\n        if event.button_index == MOUSE_BUTTON_WHEEL_UP and event.pressed:\n            print(\"Wheel up\")\n</code></pre> <p><code>InputEventMouseMotion</code> for drag.</p> <pre><code>float pressure\nVector2 relative\nVector2 velocity\n</code></pre> <pre><code>var dragging = false\nvar click_radius = 32 # Size of the sprite.\n\nfunc _input(event):\n    if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:\n        # note that even if the mouse is not on your node, it will still get propagated! \n        # we must detect if mouse is on our sprite.\n        if (event.position - $Sprite2D.position).length() &lt; click_radius:\n            # Start dragging if the click is on the sprite.\n            if not dragging and event.pressed:\n                dragging = true\n        # Stop dragging if the button is released.\n        if dragging and not event.pressed:\n            dragging = false\n\n    if event is InputEventMouseMotion and dragging:\n        # While dragging, move the sprite with the mouse.\n        $Sprite2D.position = event.position\n</code></pre>"},{"location":"godot/basics/#touch","title":"Touch","text":"<p><code>InputEventScreenTouch</code> is similar to <code>InputEventMouseButton</code>.</p> <p><code>InputEventScreenDrag</code> is similar to <code>InputEventMouseMotion</code>.</p> <p>To test touch input using PC, enable <code>Project settings &gt; Input Devices/Pointing &gt; Emulate Touch From Mouse</code></p>"},{"location":"godot/basics/#actions-keyboard-controller","title":"Actions (Keyboard &amp; Controller)","text":"<p>For keyboard/Joypad input, we majorly use <code>InputEventAction</code> through <code>InputMap</code>, which is more flexible:</p> <ul> <li>same code for different devices: left key &amp; joypad push to left.</li> <li>runtime reconfiguration.</li> <li>runtime programmatic triggering.</li> </ul> <p>To find all predefined user input (ui) names: <code>Project --&gt; Project Settings --&gt; Input Map (check Show built-in actions)</code></p> <p>Some commonly used input map names:</p> <ul> <li><code>ui_accept</code>: Enter, Space</li> <li><code>ui_cancel</code>: Escape</li> <li><code>ui_left/right/up/down</code>: Left/Right/Up/Down keys.</li> </ul> <p>Although <code>InputEventAction</code> is recommended, sometime you may want to use the <code>InputEventKey</code> specially for keyboard:</p> <pre><code>func _input(event):\n    if event is InputEventKey and event.pressed:\n        if event.keycode == KEY_T:\n            if event.shift_pressed:\n                print(\"Shift+T was pressed\")\n            else:\n                print(\"T was pressed\")\n</code></pre>"},{"location":"godot/basics/#quit-request","title":"Quit request","text":"<p>By default, when the window is force closed, godot will send <code>NOTIFICATION_WM_CLOSE_REQUEST</code> and auto quit safely.</p> <p>To send your own quit notification (e.g., in-game button to quit to desktop), use</p> <pre><code># notify and allow actions to finish (e.g., saving)\nget_tree().root.propagate_notification(NOTIFICATION_WM_CLOSE_REQUEST)\n\n# quit safely\nget_tree().quit()\n</code></pre>"},{"location":"godot/basics/#signals","title":"Signals","text":"<p>Signals are used to communicate between Nodes.</p> <p><code>Signal</code> is a variant class since Godot 4.0.</p> <p>We can use the editor GUI to connect signals: <code>Node --&gt; Signals</code> panel to see all the signals that a Node can send.</p> <p>Double-click a signal to connect it to another Node.</p> <p>Then, the another Node needs to implement a receiver function to catch the signal, which will be automatically created on connection, called <code>_on_&lt;node name&gt;_&lt;signal name&gt;()</code>.</p> <p>e.g., toggle processing when press a button:</p> <pre><code>func _on_button_pressed():\n    set_process(not is_processing())\n</code></pre> <p>We can also use script to connect signals.</p> <pre><code>### script of the node that receives signal\n\n# do connection after all nodes are ready.\nfunc _ready():\n    # get reference to the node that sends signal\n    var timer = get_node(\"Timer\") \n    # timeout is the signal name\n    timer.timeout.connect(_on_timer_timeout)\n\n# the receiver function\nfunc _on_timer_timeout():\n    visible = not visible\n</code></pre> <p>We can create custom signals using script.</p> <pre><code>### script of the node that sends signal\nextends Node2D\n\nsignal health_depleted # use signal keyword\nsignal health_changed(old_value, new_value) # signal can also have arguments!\nvar health = 10\n\nfunc take_damage(amount):\n    var old_health = health\n    health -= amount\n    if health &lt;= 0:\n        health_depleted.emit() # use emit() method to send \n    health_changed.emit(old_health, health) # emit with parameters\n</code></pre> <p>use coroutine to wait for signals:</p> <pre><code>func wait_confirmation(): # becomes a coroutine\n    await $Button.button_up # will pause until receives the signal\n    return true\n\nfunc _ready():\n    var confirmed = await wait_confirmation() # will pause\n    wait_confirmation() # won't pause!\n</code></pre>"},{"location":"godot/basics/#singletons-autoload","title":"Singletons (Autoload)","text":"<p>Singletons is a special Node that is always loaded, and can be referenced by all other Nodes.</p> <p>It is usually used to store global information used by multiple scenes.</p> <p><code>SceneTree</code> can also be viewed as a singleton.</p> <p>Use the editor <code>Project &gt; Project Settings &gt; Autoload</code> to declare a GDScript file (enter path or browse folder) as a singleton, and also assign a name.</p> <p>Then this script's variables can be referenced using its name in all other scripts!</p> <p>For example, we add a singleton named  <code>Global</code>:</p> <pre><code>### global.gd\nextends Node\n\nvar current_scene = null;\n\n# we still need to fetch other things in ready\nfunc _ready():\n    var root = get_tree().root\n    current_scene = root.get_child(root.get_child_count() - 1)\n\n# use singleton to manage scene changing\nfunc goto_scene(path):\n    # deferred call to avoid racing\n    call_deferred(\"_deferred_goto_scene\", path)\n\nfunc _deferred_goto_scene(path):\n    # deferred call is safe to free\n    current_scene.free()\n    # load a scene\n    var s = ResourceLoader.load(path) # PackedScene\n    #var s = load(path) # same, load is an alias of ResourceLoader.load\n    current_scene = s.instantiate() # Node\n    get_tree().root.add_child(current_scene) # activate it\n    get_tree().current_scene = current_scene\n</code></pre> <p>Then we can use <code>Global</code> singleton in other scripts:</p> <pre><code>### level1.gd\n\nfunc _level_completed():\n    # use Global to change scene\n    Global.goto_scene(\"res://level2.gd\")\n</code></pre>"},{"location":"godot/basics/#physics","title":"Physics","text":"<p>2D physics is basically about collision detection &amp; response.</p> <p>Four types of collision objects,  with inheritance tree as:</p> <pre><code># node\nNode2D --&gt; CollisionObject2D --&gt; Area2D\n       |                     \u22a2-&gt; PhysicsBody2D --&gt; StaticBody2D\n       |                                       \u22a2-&gt; RigidBody2D\n       |                                       \u22a2-&gt; CharacterBody2D\n       \u22a2-&gt; CollisionShape2D\n       \u22a2-&gt; CollisionPolygon2D\n\n# resource\nResource --&gt; PhysicsMaterial\n         \u22a2-&gt; Shape2D\n</code></pre> <p><code>CollisionObject2D</code> is an abstract class for 2D physics, which implements:</p> <pre><code>int collision_layer = 1 # appear in what layers\nint collision_mask = 1 # collide with what layers\n\nsignal mouse_entered\nsignal mouse_exited\n\nvoid _mouse_enter() virtual\nvoid _mouse_exit() virtual\n</code></pre> <p>Collision layer and mask can be used to setup which objects should collide with which objects. </p> <p>For example, we want mobs to collide with player (both check layer 1), but mobs should not collide with other mobs (uncheck mask 1 for mobs).</p> <p>We can assign names to layers in <code>Project Settings --&gt; Layer Names</code> for easy memorization.</p> <p><code>Area2D</code> (\"area\") implements detection and influence from/to other <code>CollisionObject2D</code>. However, area is not intended for physics simulation.</p> <p>For example: </p> <ul> <li>projectile that deals damage (can be detected), but triggers no physics (bouncing)</li> <li>\"detect\" area, so enemy can see everything enters the area.</li> <li>change of physics laws in this area (e.g., gravity).</li> </ul> <pre><code>Area2D[] get_overlapping_areas ( ) const\nNode2D[] get_overlapping_bodies ( ) const\nbool has_overlapping_areas ( ) const\nbool has_overlapping_bodies ( ) const\nbool overlaps_area ( Node area ) const\nbool overlaps_body ( Node body ) const\n</code></pre> <p><code>PhysicsBody2D</code> (\"body\") implements physics simulation. Body is usually not intended for detection.</p> <p>For example, <code>StaticBody2D</code> implements static objects (environment, like a wall, a platform).  <code>RigidBody2D</code> implements rigid body with a fixed shape (regular enemy, the sprite may animate, but collision box is rigid). <code>CharacterBody2D</code> implements detection, and is used for controllable characters.</p> <p>To correctly set up physics, we need to build node trees and connect signals correctly:</p> <p><code>CollisionObject2D</code> should be be parent of <code>CollisionShape2D</code> /<code>CollisionPolygon2D</code>  to define collision area:</p> <pre><code># player scene, can detect and influence\nPlayer (extends Area2D)\n\u22a2-&gt; Sprite2D \n\u22a2-&gt; CollisionShape2D \n    .shape = Shape2D \n\n# mob scene, can only influence\nMob (extends RigidBody2D)\n\u22a2-&gt; Sprite2D \n\u22a2-&gt; CollisionShape2D \n    .shape = Shape2D \n\n# Player should detect any collision from other body, so we connect the body_entered signal from Area2D and impl:\nsignal hit # further send out a signal\nfunc _on_body_entered(body):\n    hide() # Player disappears after being hit.\n    hit.emit()\n    # Must be deferred as we can't change physics properties on a physics callback.\n    $CollisionShape2D.set_deferred(\"disabled\", true)\n</code></pre> <p><code>CollisionShape2D</code> /<code>CollisionPolygon2D</code> should contain a <code>Shape2D</code> / polygon (<code>PackedVector2Array</code>) that defines the 2D shape:</p> <pre><code># CollisionShape2D\nShape2D shape\nbool disabled = false\nbool one_way_collision = false\n# CollisionPolygon2D\nPackedVectro2Array polygon\nbool disabled = false\nbool one_way_collision = false\n</code></pre> <p><code>Shape2D</code> is an abstract class for 2D shape <code>Resource</code> (not <code>Node</code>! it won't show in the node editor, but show as a property of <code>CollisionShape2D</code> /<code>CollisionPolygon2D</code>  in the inspector). </p>"},{"location":"godot/basics/#math","title":"Math","text":"<p>2D Coordinate system:</p> <pre><code>(0, 0) ------- +x\n|\n|\n|\n+y\n</code></pre> <pre><code># vector 2\nvar v = Vector2(2, 4)\nprint(v.x, v.y)\n\nv = v.normalized()\n\n# matrix 2x2\nvar t = Transform2D()\nprint(v.x.x, v.y.x,\n      v.x.y, v.y.y) # colomn-major!\n</code></pre> <p>3D Coordinate system: OpenGL convention.</p>"},{"location":"godot/basics/#importing-assets","title":"Importing Assets","text":"<p>Images will be imported as <code>Texture</code> by default.</p> <p>To ensure high-quality image, we have two approaches:</p> <ul> <li>Use a high base resolution (like 4K = 3840 x 2160) and high resolution texture images, then we can always mipmap to lower resolution if needed.</li> <li>Use a normal base resolution (1920 x 1080) and high resolution texture images, and adjust the <code>scale</code> to down-scale it.</li> </ul> <p>Usually we prefer the first approach, as it doesn't need to calculate scales.</p>"},{"location":"godot/basics/#groups","title":"Groups","text":"<p>Groups are a convenient container for nodes, which allows to:</p> <ul> <li>Get a list of nodes in a group.</li> <li>Call a method on all nodes in a group.</li> <li>Send a notification to all nodes in a group.</li> </ul> <p>In the editor, you can manage groups manually in <code>right panel &gt; nodes &gt; groups</code>.</p> <p>Or use script to manage groups:</p> <pre><code># add current node to group\nadd_to_group(\"guards\") # will create the group automatically\n\n# call method\nget_tree().call_group(\"guards\", \"enter_alert_mode\")\n\n# get all nodes in a group\nvar guards = get_tree().get_nodes_in_group(\"guards\")\n</code></pre>"},{"location":"godot/basics/#tween-animation","title":"Tween Animation","text":"<p><code>Tween</code> is inherited from <code>RefCounted</code>, and is used for interpolation-based animation (in-betweening), e.g., moving the position smoothly.</p> <p>Tween animations are played after <code>_process()</code>.</p> <p>Tweens are not designed to be reused, always create one when needed:</p> <pre><code>var tween;\n\n# must use this way to create!\ntween = create_tween() \n\n# zoom up by 2 in 1 second (object, property, final_val, duration)\ntween.tween_property($Sprite, \"scale\", Vector2(2, 2), 1) # this is called a tweener\n\n# idle for 1 second interval\ntween.tween_interval(1)\n\n# call a method after 1 second\ntween.tween_callback(myfunc).set_delay(1)\n\n# call a method in the way of property\nfunc myfunc(x, y): ...\ntween.tween_method(myfunc.bind(Y), X0, X1, duration) # use bind(Y) to set a default y\n</code></pre> <p>Tweeners will be executed one-after-one by default. To parallel-tween multiple objects or multiple properties, use:</p> <pre><code>var tween = create_tween()\ntween.tween_property(...)\ntween.parallel().tween_property(...) # parallel with the first one\ntween.parallel().tween_property(...) # parallel with the second one (and the first one)\n\n### or set_parallel by default\nvar tween = create_tween()\ntween.set_parallel()\n# all later tweeners  will be parallel \n</code></pre> <p>However, you should not allow multiple tweeners on the same property at the same time, this will be undefined behavior (race condition).</p>"},{"location":"godot/basics/#editor-tips","title":"Editor tips","text":"<ul> <li>When resize something in the scene viewer:<ul> <li><code>Shift</code> to keep aspect ratio.</li> <li><code>Control</code> to snap to grid</li> <li><code>Alt</code> and scale the 2D shapes so the anchor is centered.</li> </ul> </li> </ul>"},{"location":"godot/particles/","title":"Particles","text":""},{"location":"godot/particles/#particle-system","title":"Particle System","text":"<p>Another important system to create effects.</p> <p>Although Shaders are much more powerful, sometimes particle is just easier to use.</p>"},{"location":"godot/particles/#example","title":"Example","text":"<p>Explosion!</p>"},{"location":"godot/photoshop_basics/","title":"Photoshop basics","text":""},{"location":"godot/photoshop_basics/#editor","title":"Editor","text":"<p><code>Space + Left Mouse Drag</code>  to drag the canvas.</p> <p><code>Alt + Mouse Scroll</code> to scale.</p>"},{"location":"godot/photoshop_basics/#adjust-color-of-a-single-layer","title":"Adjust color of a single layer","text":"<ul> <li>\u9009\u4e2d\u56fe\u5c42</li> <li>\u56fe\u50cf &gt; \u8c03\u6574 &gt; \u8272\u76f8/\u9971\u548c\u5ea6</li> </ul>"},{"location":"godot/shader/","title":"Shader","text":"<p>There are different shader types:</p> <ul> <li>2D: <code>canvas_item</code> </li> <li>3D: <code>spatial</code></li> <li>Particle: <code>particles</code></li> </ul>"},{"location":"godot/shader/#2d-shader-canvasitem-shader","title":"2D Shader (CanvasItem Shader)","text":"<p>Custom Shader scripts are stored in <code>*.gdshader</code> files, using <code>GDShaere</code> DSL.</p> <p>To use custom shader, create it from inspector:</p> <p><code>CanvasItem &gt; Material &gt; New ShaderMaterial &gt; New Shader</code></p> <p>This will save a <code>gdshader</code> file, so we can edit it for custom shader effects.</p> <p>A CanvasItem Shader looks like:</p> <pre><code>shader_type canvas_item;\n\nvoid vertex() {\n    // Called for every vertex the material is visible on.\n}\n\nvoid fragment() {\n    // Called for every pixel the material is visible on.\n}\n\n//void light() {\n    // Called for every pixel for every light affecting the CanvasItem.\n    // Uncomment to replace the default light processing function with this one.\n//}\n</code></pre> <p>Language basics:</p> <pre><code>// types\nvoid\nbool bvec2 bvec3 bvec4\nint ivec2 ivec3 ivec4    \nfloat vec2 vec3 vec4 // access by .xyzw or .rgba or .stpq\nuint uvec2 uvec3 uvec4    \nmat2 mat3 mat4 // col-major! m[col][row]\n\n// built-ins\nCOLOR = vec4(1,1,1,1); // the output should be written to COLOR\nCOLOR = vec4(UV, 0.5, 1); // UV is vec2, varies from (0, 0) to (1, 1) from left-top to right-bottom.\nCOLOR = texture(TEXTURE, UV); // read from default texture (e.g., sprite2d)\nVERTEX += vec2(cos(TIME)*100.0, sin(TIME)*100.0); // VERTEX is the position of the draw center. TIME is just time.\n\n// uniforms\nuniform float blue = 1.0; // constant variables (uniforms)\nmaerial.set_shader_parameter(\"blue\", 2.0) // set uniforms from gdscript   \n\n// consts (slightly faster than uniforms, but cannot be configured)    \nconst float PI = 3.14159265358979323846;\n\n//// Implicit type casting is not allowed!\nfloat a = 2; // invalid\nfloat a = 2.0; // valid\nfloat a = float(2); // valid\n\nuint a = 2; // invalid, 2 is default to signed int.\nuint a = 2u; // valid\nuint a = uint(2); // valid\n\n//// construct vectors\nvec4 a = vec4(0.0, 1.0, 2.0, 3.0);\nvec4 a = vec4(vec2(0.0, 1.0), vec2(2.0, 3.0));\nvec4 a = vec4(vec3(0.0, 1.0, 2.0), 3.0);\nvec4 a = vec4(0.0); // (0.0, 0.0, 0.0, 0.0)\n\nmat2 m2 = mat2(vec2(1.0, 0.0), vec2(0.0, 1.0));\nmat3 m3 = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0));\nmat4 identity = mat4(1.0);\n\nmat3 basis = mat3(MODEL_MATRIX);\nmat4 m4 = mat4(basis); // small-to-big: others set as an Identity matrix!\nmat2 m2 = mat2(m4); // big-to-small: truncate left-top submatrix\n\n// swizzling\nvec4 a = vec4(0.0, 1.0, 2.0, 3.0);\nvec3 b = a.rgb; // Creates a vec3 with vec4 components.\nvec3 b = a.ggg; // Also valid; creates a vec3 and fills it with a single vec4 component.\nvec3 b = a.bgr; // \"b\" will be vec3(2.0, 1.0, 0.0).\nvec3 b = a.xyz; // Also rgba, xyzw are equivalent.\nvec3 b = a.stp; // And stpq (for texture coordinates).\nfloat c = b.w; // Invalid, because \"w\" is not present in vec3 b.\nvec3 c = b.xrt; // Invalid, mixing different styles is forbidden.\nb.rrr = a.rgb; // Invalid, assignment with duplication.\nb.bgr = a.rgb; // Valid assignment. \"b\"'s \"blue\" component will be \"a\"'s \"red\" and vice versa.\n\n// precision\nlowp vec4 a = vec4(0.0, 1.0, 2.0, 3.0); // low precision, usually 8 bits per component mapped to 0-1\nmediump vec4 a = vec4(0.0, 1.0, 2.0, 3.0); // medium precision, usually 16 bits or half float\nhighp vec4 a = vec4(0.0, 1.0, 2.0, 3.0); // high precision, uses full float or integer range (32 bit default)\n\n// array (c-like)\nfloat arr[3];\nfloat float_arr[3] = float[3] (1.0, 0.5, 0.0); // first constructor\nint int_arr[3] = int[] (2, 1, 0); // second constructor\nvec2 vec2_arr[3] = { vec2(1.0, 1.0), vec2(0.5, 0.5), vec2(0.0, 0.0) }; // third constructor\nbool bool_arr[] = { true, true, false }; // fourth constructor - size is defined automatically from the element count\nfor (int i = 0; i &lt; arr.length(); i++) { // .length()\n    // ...\n}\nconst vec3 v[1] = {vec3(1.0, 1.0, 1.0)}; // global array\n\n// struct (c-like)\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n};\n\nPointLight light = PointLight(vec3(0.0), vec3(1.0, 0.0, 0.0), 0.5);    \n\n// always use epsilon for float comparison\nconst float EPSILON = 0.0001;\nif (value &gt;= 0.3 - EPSILON &amp;&amp; value &lt;= 0.3 + EPSILON) {\n    // ...\n}\n\n// discard\ndiscard // fragment &amp; light shader can discard the color writing.\n\n// inout: pass by reference    \n// by default function params are only \"in\" for reading, but we can use inout to make it a reference.\nvoid sum2(int a, int b, inout int result) {\n    result = a + b;\n}\n\n//// varying: pass value from vertex to fragment &amp; light shader.\n// can only be assigned in vertex and fragment shader (not even in self-defined functions!)\nvarying float var_arr[3];\nvoid vertex() {\n    var_arr[0] = 1.0;\n    var_arr[1] = 0.0;\n}\nvoid fragment() {\n    ALBEDO = vec3(var_arr[0], var_arr[1], var_arr[2]); // red color\n}\n\n// varying values are usually interpolated from vertex to fragment shader, use `flat` or `smooth`(default) to change interpolation behaviour\nvarying flat vec3 color; // will use nearest color\n\n\n// global uniforms: configured from project settings -&gt; shader globals\nglobal uniform vec4 mycolor;\n\n// built-in math funcs\nradians(); degrees();\nsin(); cos(); tan(); ...\npow(); exp(); exp2(); log(); log2(); sqrt();\nabs(); sign(); floor(); round(); trunc(); ceil(); mod(); min(); max();\nisnan(); isinf(); \nlength(); distance(); dot(); cross(); normalize(); reflect(); inverse();\n\n// important shape functions\n// most float can also be vec type\nmix(float a, float b, float c); // linear interpolate, a * c + b * (1 - c)\nstep(float a, float b); // b &lt; a ? 0.0 : 1.0\nsmoothstep(float a, float b, float c); // hermite interpolate (smooth), always return 0.0 if c &lt; a, and 1.0 if c &gt; b!\n</code></pre>"},{"location":"godot/shader/#practices","title":"Practices","text":"<pre><code>// polar coordinates\nvoid fragment() {\n    vec2 st = UV; // we usually call texture coordinate st other than uv\n    st -= vec2(0.5); // rescale [0, 1] to [-0.5, 0.5]\n    float r = length(st) * 2.0; // radius, rescale to [0, 1]\n    float a = atan(st.y, st.x) + TIME; // angle, [-0.5PI, 0.5PI]\n    float f = smoothstep(-0.5, 0.5, cos(a * 13.0)); // create a blurry edge using smoothstep, 13 controls frequency\n    COLOR = vec4(vec3(f), 1.0);\n}\n\n// rotate 2d\nmat2 rotate2d(float _angle){\n    return mat2(vec2(cos(_angle),-sin(_angle)),\n                vec2(sin(_angle),cos(_angle)));\n}\n\n// white noise using fract and sin\n// we want pseudo-randomness, ie, given a position (st), the value is always fixed.\n// these magic numbers control the pattern\nfloat random1d(float x) {\n    return fract(sin(x) * 43758.5453123);\n}\nfloat random2d(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.1233))) * 43758.5453123);\n}\n\n// grid-like randomness using fract\nvoid fragment() {\n    vec2 st = UV;\n    st *= 10.0; // 10x10 grid\n    vec2 ipos = floor(st); // we are still using float after floor!\n    vec2 fpos = fract(st);\n    //COLOR = vec4(fpos, 0.0, 1.0); // show grid\n    COLOR = vec4(vec3(random2d(ipos)), 1.0);\n}\n\n// perlin noise (smoothed grid-like randomness)\nfloat perlin1d(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    return mix(random1d(i), random1d(i + 1.0), smoothstep(0.0, 1.0, f));\n}\n\nfloat perlin2d(in vec2 st) { // st should be UV * grid_frequency\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random2d(i);\n    float b = random2d(i + vec2(1.0, 0.0));\n    float c = random2d(i + vec2(0.0, 1.0));\n    float d = random2d(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f); // 2d smoothstep!\n    return a * (1.0 - u.x) * (1.0 - u.y) + b * u.x * (1.0 - u.y) + c * (1.0 - u.x) * u.y + d * u.x * u.y;\n}\n\n// simplex noise: more efficient\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289v2(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nfloat snoise(vec2 v) {\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x &gt; x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289v2(i);\n    vec3 p = permute(permute( i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n// Fractual Brownian Motion noise (sharper than perlin &amp; simplex, very useful for natural noise.)\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,8.233)))* 368.23);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm (in vec2 st, int octaves) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    // Loop of octaves\n    for (int i = 0; i &lt; octaves; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvoid fragment() {\n    vec2 st = UV * 5.0;\n    COLOR = vec4(vec3(fbm(st, 6)), 1.0);\n}\n</code></pre>"},{"location":"godot/shader/#example-shaders","title":"Example Shaders","text":"<p>See here: https://godotshaders.com/shader-tag/2d/</p> <p>Random zebra line: (example of Perlin noise)</p> <pre><code>shader_type canvas_item;\n\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 458.5453123);\n}\n\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( random( i + vec2(0.0,0.0) ),\n                     random( i + vec2(1.0,0.0) ), u.x),\n                mix( random( i + vec2(0.0,1.0) ),\n                     random( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rotate2d(float angle){\n    return mat2(vec2(cos(angle),-sin(angle)),\n                vec2(sin(angle),cos(angle)));\n}\n\nfloat lines(in vec2 pos, float b){\n    float scale = 10.0;\n    pos *= scale;\n    return smoothstep(0.0, .5+b*.5, abs((sin(pos.x*3.1415)+b*2.0))*.5);\n}\n\nvoid fragment() {\n    vec2 st = UV * 5.0;\n    st = rotate2d(TIME + noise(st)) * st;\n    COLOR = vec4(vec3(lines(st, 0.5)), 1.0);\n}\n</code></pre> <p>Circle with waving border:</p> <pre><code>shader_type canvas_item;\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)), dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(vec2(cos(_angle),-sin(_angle)),\n                vec2(sin(_angle),cos(_angle)));\n}\n\nfloat shape(vec2 st, float radius) {\n    st = vec2(0.5)-st;\n    float r = length(st)*2.0;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+TIME*2.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    m += noise(st+TIME*0.1)*.5;\n    //a *= 1.+abs(atan(TIME*0.2))*.1;\n    //a *= 1.+noise(st+TIME*0.1)*0.1;\n    f += sin(a*50.)*noise(st+TIME*.2)*.1;\n    f += (sin(a*20.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.007,r);\n}\n\nfloat shapeBorder(vec2 st, float radius, float width) {\n    return shape(st,radius) - shape(st,radius-width);\n}\n\nvoid fragment() {\n    vec2 st = UV;\n    COLOR = vec4(vec3(shape(st, 0.8)), 1.0);\n    //COLOR = vec4(vec3(shapeBorder(st, 0.8, 0.02)), 1.0);\n}\n</code></pre> <p>Rain:</p> <pre><code>shader_type canvas_item;\n\nuniform vec3 color: source_color = vec3(0.5);\nuniform float speed: hint_range(0.01, 10.0, 0.01) = 0.1;\nuniform float density: hint_range(1.0, 500.0, 1.0) = 100.0;\nuniform float compression: hint_range(0.1, 1.0, 0.01) = 0.2;\nuniform float trail_size: hint_range(5.0, 100.0, 0.1) = 50.0;\nuniform float brightness: hint_range(0.1, 10.0, 0.1) = 5.0;\n\nvoid fragment() {\n    vec2 uv = -UV;\n    float time = TIME * speed;\n    uv.x *= density;\n    vec2 duv = vec2(floor(uv.x), uv.y) * compression;\n    float offset = sin(duv.x);\n    float fall = cos(duv.x * 30.0);\n    float trail = mix(100.0, trail_size, fall);\n    float drop = fract(duv.y + time * fall + offset) * trail;\n    drop = 1.0 / drop;\n    drop = smoothstep(0.0, 1.0, drop * drop);\n    drop = sin(drop * PI) * fall * brightness;\n    float shape = sin(fract(uv.x) * PI);\n    drop *= shape * shape;\n    COLOR = vec4(color * drop, 1.0);\n}\n</code></pre> <p>Metal-like Highlight:</p> <pre><code>shader_type canvas_item;\nrender_mode blend_premul_alpha;\n\nuniform float Line_Smoothness : hint_range(0, 0.1) = 0.045;\nuniform float Line_Width : hint_range(0, 0.2) = 0.09;\nuniform float Brightness = 3.0;\nuniform float Rotation_deg : hint_range(-90, 90) = 30;\nuniform float Distortion : hint_range(1, 2) = 1.8;\nuniform float Speed = 0.7;\nuniform float Position : hint_range(0, 1) = 0;\nuniform float Position_Min = 0.25;\nuniform float Position_Max = 0.5;\nuniform float Alpha : hint_range(0, 1) = 1;\n\nvec2 rotate_uv(vec2 uv, vec2 center, float rotation, bool use_degrees){\n    float _angle = rotation;\n    if(use_degrees){\n        _angle = rotation * (3.1415926/180.0);\n    }\n    mat2 _rotation = mat2(\n        vec2(cos(_angle), -sin(_angle)),\n        vec2(sin(_angle), cos(_angle))\n    );\n    vec2 _delta = uv - center;\n    _delta = _rotation * _delta;\n    return _delta + center;\n}\n\nvoid fragment() {\n\n    vec2 center_uv = UV - vec2(0.5, 0.5);\n    float gradient_to_edge = max(abs(center_uv.x), abs(center_uv.y));\n    gradient_to_edge = gradient_to_edge * Distortion;\n    gradient_to_edge = 1.0 - gradient_to_edge;\n    vec2 rotaded_uv = rotate_uv(UV, vec2(0.5, 0.5), Rotation_deg, true);\n\n    float remapped_position;\n    {\n        float output_range = Position_Max - Position_Min;\n        remapped_position = Position_Min + output_range * Position;\n    }\n\n    float remapped_time = TIME * Speed + remapped_position;\n    remapped_time = fract(remapped_time);\n    {\n        float output_range = 2.0 - (-2.0);\n        remapped_time = -2.0 + output_range * remapped_time;\n    }\n\n    vec2 offset_uv = vec2(rotaded_uv.xy) + vec2(remapped_time, 0.0);\n    float line = vec3(offset_uv, 0.0).x;\n    line = abs(line);\n    line = gradient_to_edge * line;\n    line = sqrt(line);\n\n    float line_smoothness = clamp(Line_Smoothness, 0.001, 1.0);\n    float offset_plus = Line_Width + line_smoothness;\n    float offset_minus = Line_Width - line_smoothness;\n\n    float remapped_line;\n    {\n        float input_range = offset_minus - offset_plus;\n        remapped_line = (line - offset_plus) / input_range;\n    }\n    remapped_line = remapped_line * Brightness;\n    remapped_line = min(remapped_line, Alpha);\n    COLOR.rgb = vec3(COLOR.xyz) * vec3(remapped_line);\n    COLOR.a = remapped_line;\n}\n</code></pre> <p>Sway with wind:</p> <pre><code>// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d\n// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D\n//\n// speed - The speed of the wind movement.\n// minStrength - The minimal strength of the wind movement.\n// maxStrength - The maximal strength of the wind movement.\n// strengthScale - Scalefactor for the wind strength.\n// interval - The time between minimal and maximal strength changes.\n// detail - The detail (number of waves) of the wind movement.\n// distortion - The strength of geometry distortion.\n// heightOffset - The height where the wind begins to move. By default 0.0.\n\nshader_type canvas_item;\nrender_mode blend_mix;\n\n// Wind settings.\nuniform float speed = 1.0;\nuniform float minStrength : hint_range(0.0, 1.0) = 0.01;\nuniform float maxStrength : hint_range(0.0, 1.0) = 0.5;\nuniform float strengthScale = 100.0;\nuniform float interval = 3.5;\nuniform float detail = 1.0;\nuniform float distortion : hint_range(0.0, 1.0);\nuniform float heightOffset : hint_range(0.0, 1.0);\n\n// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this\nuniform float offset = 0; \n\n\nfloat getWind(vec2 vertex, vec2 uv, float time){\n    float diff = pow(maxStrength - minStrength, 2.0);\n    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;\n    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);\n\n    return wind; \n}\n\nvoid vertex() {\n    vec4 pos = MODEL_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);\n    float time = TIME * speed + offset;\n    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...\n    VERTEX.x += getWind(VERTEX.xy, UV, time);\n}\n</code></pre> <p>Fake Camera Perepective:</p> <pre><code>shader_type canvas_item;\n\n// Camera FOV\nuniform float fov : hint_range(1, 179) = 90;\nuniform bool cull_back = true;\nuniform float y_rot : hint_range(-180, 180) = 0.0;\nuniform float x_rot : hint_range(-180, 180) = 0.0;\n// At 0, the image retains its size when unrotated.\n// At 1, the image is resized so that it can do a full\n// rotation without clipping inside its rect.\nuniform float inset : hint_range(0, 1) = 0.0;\n// Consider changing this to a uniform and changing it from code\n\nvarying flat vec2 o;\nvarying vec3 p;\n\n// Creates rotation matrix\nvoid vertex(){\n    float sin_b = sin(y_rot / 180.0 * PI);\n    float cos_b = cos(y_rot / 180.0 * PI);\n    float sin_c = sin(x_rot / 180.0 * PI);\n    float cos_c = cos(x_rot / 180.0 * PI);\n\n    mat3 inv_rot_mat;\n    inv_rot_mat[0][0] = cos_b;\n    inv_rot_mat[0][1] = 0.0;\n    inv_rot_mat[0][2] = -sin_b;\n\n    inv_rot_mat[1][0] = sin_b * sin_c;\n    inv_rot_mat[1][1] = cos_c;\n    inv_rot_mat[1][2] = cos_b * sin_c;\n\n    inv_rot_mat[2][0] = sin_b * cos_c;\n    inv_rot_mat[2][1] = -sin_c;\n    inv_rot_mat[2][2] = cos_b * cos_c;\n\n\n    float t = tan(fov / 360.0 * PI);\n    p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);\n    float v = (0.5 / t) + 0.5;\n    p.xy *= v * inv_rot_mat[2].z;\n    o = v * inv_rot_mat[2].xy;\n\n    VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);\n}\n\nvoid fragment(){\n    if (cull_back &amp;&amp; p.z &lt;= 0.0) discard;\n    vec2 uv = (p.xy / p.z).xy - o;\n    COLOR = texture(TEXTURE, uv + 0.5);\n    COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);\n}\n</code></pre> <p>Dissolve:</p> <p>Need to create a NoiseTexture2D with Simplex Smooth noise.</p> <pre><code>shader_type canvas_item;\n\nuniform sampler2D dissolve_texture : source_color;\nuniform float dissolve_value : hint_range(0,1) = 0.5;\nuniform float burn_size: hint_range(0.0, 1.0, 0.01) = 0.04;\nuniform vec4 burn_color: source_color;\n\nvoid fragment(){\n    vec4 main_texture = texture(TEXTURE, UV);\n    vec4 noise_texture = texture(dissolve_texture, UV);\n\n    // This is needed to avoid keeping a small burn_color dot with dissolve being 0 or 1\n    // is there another way to do it?\n    float burn_size_step = burn_size * step(0.001, dissolve_value) * step(dissolve_value, 0.999);\n    float threshold = smoothstep(noise_texture.x-burn_size_step, noise_texture.x, dissolve_value);\n    float border = smoothstep(noise_texture.x, noise_texture.x + burn_size_step, dissolve_value);\n\n    COLOR.a *= threshold;\n    COLOR.rgb = mix(burn_color.rgb, main_texture.rgb, border);\n}\n</code></pre> <p>Lightning:</p> <pre><code>shader_type canvas_item;\n\nuniform vec3 effect_color: source_color = vec3(0.2, 0.3, 0.8);\nuniform float speed = 0.5;\n\n// fbm params\nuniform int octave_count: hint_range(1, 20) = 10;\nuniform float amp_start = 0.5;\nuniform float amp_coeff = 0.5;\nuniform float freq_coeff = 2.0;\n\n\nfloat hash12(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nvec2 hash22(vec2 uv) {\n    uv = vec2(dot(uv, vec2(127.1,311.7)),\n              dot(uv, vec2(269.5,183.3)));\n    return 2.0 * fract(sin(uv) * 43758.5453123) - 1.0;\n}\n\nfloat noise(vec2 uv) {\n    vec2 iuv = floor(uv);\n    vec2 fuv = fract(uv);\n    vec2 blur = smoothstep(0.0, 1.0, fuv);\n    return mix(mix(dot(hash22(iuv + vec2(0.0,0.0)), fuv - vec2(0.0,0.0)),\n                   dot(hash22(iuv + vec2(1.0,0.0)), fuv - vec2(1.0,0.0)), blur.x),\n               mix(dot(hash22(iuv + vec2(0.0,1.0)), fuv - vec2(0.0,1.0)),\n                   dot(hash22(iuv + vec2(1.0,1.0)), fuv - vec2(1.0,1.0)), blur.x), blur.y) + 0.5;\n}\n\nfloat fbm(vec2 uv) {\n    float value = 0.0;\n    float amplitude = amp_start;\n    for (int i = 0; i &lt; octave_count; i++) {\n        value += amplitude * noise(uv);\n        uv *= freq_coeff;\n        amplitude *= amp_coeff;\n    }\n    return value;\n}\n\nvoid fragment() {\n    vec2 uv = 2.0 * UV - 1.0;\n    uv += 2.0 * fbm(uv + TIME * speed) - 1.0;\n    float dist = abs(uv.x);\n    vec3 color = effect_color * mix(0.0, 0.05, hash12(vec2(TIME))) / dist;\n    COLOR = vec4(color, 1.0);\n}\n</code></pre>"},{"location":"godot/thread_safety/","title":"Thread safety","text":""},{"location":"godot/thread_safety/#thread-safety","title":"Thread Safety","text":"<p>A very annoying design of godot is that you need to be very careful about race conditions, especially when we are operating the scene through code dynamically. (which is very common in fact, unless you are doing a simple platformer.)</p> <p>Class instantiation is different from being \"ready\" to use in the scene tree. You may see tons of error like accessing a null object or method is not existent.</p> <p>A simplest case: I have a <code>Sprite2D</code> node created in the editor, it's easy to drag an image to its texture attribute. And everything is fine. However, if I want to instantiate this class, and then assign an image to its texture, it's becoming tricky:</p> <pre><code>class_name player \nextends Node2D\n\n# sub-node\n@onready var sprite = $Sprite2D\n</code></pre> <pre><code>var player_scene = load(\"res://player.tscn\")\n# dynamic instantiation\nvar player = player_scene.instantiate()\n# by now, the sub-nodes of player is NOT instantiated! \nplayer.sprite.texture = load(\"res://image.png\") # ERROR! player.sprite is still null\n\n# only after calling add_child, it becomes \"ready\" with all sub-nodes instantiated.\nadd_child(player)\nplayer.sprite.texture = load(\"res://image.png\") # now it works.\n</code></pre> <p>Godot has some APIs like <code>set_deferred</code> and <code>call_deferred</code>, but they are devils from the deepest hell and shall be avoided in any case. You can avoid them in 99% cases by correctly organizing the code lines.</p> <p>Use <code>Mutex</code> to control safe-accessing from multiple threads:</p> <pre><code>@onready var mutex = Mutex.new()\nvar counter = 0\n\n# protect modification of counter using mutex\nmutex.lock()\ncounter += 1\nmutex.unlock()\n</code></pre>"},{"location":"godot/tricks/","title":"Pitfalls &amp; Tricks","text":""},{"location":"godot/tricks/#panel","title":"Panel","text":"<p><code>Panel</code> is used to represent a box-like UI, e.g.</p> <ul> <li>background panel for other UI elements.</li> <li>a round-corner boundary, to show \"highlight\" effect.</li> </ul> <p>To change the look, we need to create a new <code>StyleBox</code> inside <code>Inspector &gt; Theme Overrides &gt; Styles &gt; Panel</code></p> <p></p>"},{"location":"godot/tricks/#mouse_enteredexited","title":"Mouse_entered/exited","text":"<p>Note that <code>mouse_exited</code> will be triggered if the mouse enter a child <code>Control/CollisionObject2D</code> element!</p> <p>To avoid this, we need to set <code>mouse filter</code> in Inspector:</p> <p></p> <ul> <li>Stop (default): not applying filter, i.e., it will trigger mouse signals normally.</li> </ul> <ul> <li>Ignore: ignore all mouse signals.</li> </ul>"},{"location":"godot/tricks/#visibleonscreennotifier2d","title":"VisibleOnScreenNotifier2D","text":"<pre><code>signal screen_exited()\n</code></pre> <p>Useful to delete objects out of screen.</p> <pre><code># node tree\nArea2D\n\u22a2-&gt; VisibleOnScreenNotifier2D \n\n# connect screen_exited to Area2D and impl:\nfunc _on_visible_on_screen_notifier_2d_screen_exited():\n    queue_free()\n</code></pre>"},{"location":"godot/tricks/#different-resolutions","title":"Different Resolutions","text":"<p>The base size can be set in <code>Project Settings --&gt; Display --&gt; Window --&gt; Size</code></p> <p>For high-resolution non-pixel desktop games, we can start from base size of 3840 x 2160 (4K).</p> <p>If you are developing with a smaller monitor, change <code>Window Width/Height Override</code> (need to check advanced settings) to a smaller size (like 1920x1080), so the debugging window won't go beyond your monitor.</p> <p>Then we need to allow resize (keep aspect ratio) the window by setting:</p> <ul> <li>Stretch mode = canvas_items</li> <li>Stretch aspect = expand</li> </ul> <p>Now your window start from 1920x1280 but renders high quality images and automatically downscale them!</p> <p>Correctly get window size:</p> <pre><code>var window = get_window()\n# actual size of current window\nprint(window.size) # e.g., 1920x1080\n# size before scaling\nprint(window.content_scale_size) # 3820x2160\n</code></pre>"},{"location":"godot/tricks/#steps-for-a-new-project","title":"Steps for a new project","text":"<ul> <li>Configure viewport resolution in <code>Project settings --&gt; Display --&gt; Window --&gt; Size</code> .</li> <li>Configure main scene in <code>Project settings --&gt; Application --&gt; Run</code>.</li> </ul>"},{"location":"godot/vfx/","title":"Visual Effects (VFX)","text":""},{"location":"graphics/101_rasterization/","title":"Rasterization","text":""},{"location":"graphics/101_rasterization/#visibility","title":"Visibility","text":"<p>When rasterize triangles, we need to solve the visibility/occlusion problem.</p>"},{"location":"graphics/101_rasterization/#z-buffer-algorithm","title":"Z-buffer algorithm","text":"<p>store an extra z-value for each pixel to represent the depth. (convention: positive, the larger the further, in fact it can be viewed as the depth.)</p> <pre><code>static bool insideTriangle(int x, int y, const Vector4f* _v){\n    Vector3f v[3];\n    for(int i=0;i&lt;3;i++)\n        v[i] = {_v[i].x(), _v[i].y(), 1.0};\n    Vector3f f0,f1,f2;\n    f0 = v[1].cross(v[0]);\n    f1 = v[2].cross(v[1]);\n    f2 = v[0].cross(v[2]);\n    Vector3f p(x,y,1.);\n    if((p.dot(f0)*f0.dot(v[2])&gt;0) &amp;&amp; (p.dot(f1)*f1.dot(v[0])&gt;0) &amp;&amp; (p.dot(f2)*f2.dot(v[1])&gt;0))\n        return true;\n    return false;\n}\n\nstatic std::tuple&lt;float, float, float&gt; computeBarycentric2D(float x, float y, const Vector4f* v){\n    float c1 = (x*(v[1].y() - v[2].y()) + (v[2].x() - v[1].x())*y + v[1].x()*v[2].y() - v[2].x()*v[1].y()) / (v[0].x()*(v[1].y() - v[2].y()) + (v[2].x() - v[1].x())*v[0].y() + v[1].x()*v[2].y() - v[2].x()*v[1].y());\n    float c2 = (x*(v[2].y() - v[0].y()) + (v[0].x() - v[2].x())*y + v[2].x()*v[0].y() - v[0].x()*v[2].y()) / (v[1].x()*(v[2].y() - v[0].y()) + (v[0].x() - v[2].x())*v[1].y() + v[2].x()*v[0].y() - v[0].x()*v[2].y());\n    float c3 = (x*(v[0].y() - v[1].y()) + (v[1].x() - v[0].x())*y + v[0].x()*v[1].y() - v[1].x()*v[0].y()) / (v[2].x()*(v[0].y() - v[1].y()) + (v[1].x() - v[0].x())*v[2].y() + v[0].x()*v[1].y() - v[1].x()*v[0].y());\n    return {c1,c2,c3};\n}\n\n// triangle rasterization\nvoid rst::rasterizer::rasterize_triangle(const Triangle&amp; t) {\n    auto v = t.v;\n\n    // Find out the bounding box of current triangle.\n    float min_x = std::min(v[0](0), std::min(v[1](0), v[2](0)));\n    float max_x = std::max(v[0](0), std::max(v[1](0), v[2](0)));\n\n    float min_y = std::min(v[0](1), std::min(v[1](1), v[2](1)));\n    float max_y = std::max(v[0](1), std::max(v[1](1), v[2](1)));\n\n    // iterate through the pixel and find if the current pixel is inside the triangle\n    for (int x = min_x; x &lt;= max_x; x++) {\n        for (int y = min_y; y &lt;= max_y; y++) {\n            if (insideTriangle(x, y, t.v)) {\n                // barycentric interpolation of depth (z)\n                auto[alpha, beta, gamma] = computeBarycentric2D(x, y, t.v);\n                float w_reciprocal = 1.0/(alpha / v[0].w() + beta / v[1].w() + gamma / v[2].w());\n                float interpolated_z = alpha * v[0].z() / v[0].w() + beta * v[1].z() / v[1].w() + gamma * v[2].z() / v[2].w();\n                interpolated_z *= w_reciprocal;\n\n                // update z_buffer \n                int ind = (height - 1 - y) * width + x;\n                if (depth_buf[ind] &gt; z_interpolated) {\n                    depth_buf[ind] = z_interpolated;\n                    // barycentric interpolate colors / normals / coords...\n                    auto interpolated_color = alpha * t.color[0] + beta * t.color[1] + gamma * t.color[2];\n                    auto interpolated_texcoords = alpha * t.tex_coords[0] + beta * t.tex_coords[1] + gamma * t.tex_coords[2];\n                    auto interpolated_normal = alpha * t.normal[0] + beta * t.normal[1] + gamma * t.normal[2];\n                    auto interpolated_v = alpha * t.v[0] + beta * t.v[1] + gamma * t.v[2];\n                    Eigen::Vector3f interpolated_shadingcoords = interpolated_v.head(3) / interpolated_v(3);\n\n                    auto pixel_color = shader_get_color(interpolated_color, interpolated_texcoords, interpolated_normal, interpolated_shadingcoords);\n                    // update color\n                    frame_buf[ind] = pixel_color;\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"graphics/102_shading/","title":"Shading","text":""},{"location":"graphics/102_shading/#blinn-phong-reflectance-model","title":"Blinn-Phong reflectance model","text":""},{"location":"graphics/102_shading/#ambient-term","title":"Ambient Term","text":"<p>Not depend on anything. Just a constant environment light.</p> \\[ \\displaylines{ L_a = k_aI_a } \\]"},{"location":"graphics/102_shading/#diffuse-term-lambertian","title":"Diffuse Term (Lambertian)","text":"<p>depend on light direction, independent of view direction.</p> \\[ \\displaylines{ L_d = k_d\\frac I {r^2} \\max(0, \\mathbf n\\cdot \\mathbf l) } \\] <p>where \\(k_d\\) is a coefficient, \\(\\frac I {r^2}\\) is the energy received at radius \\(r\\). \\(\\mathbf n\\cdot \\mathbf l = \\cos \\alpha\\) (assume unit vector.)</p>"},{"location":"graphics/102_shading/#specular-term-blinn-phong-the-highlight","title":"Specular Term (Blinn-Phong, the highlight)","text":"<p>depends on both light direction and view direction.</p> <p>Brighter near Mirror reflection direction (defined as \\(r\\))</p> \\[ \\displaylines{ \\mathbf h = \\frac {\\mathbf v + \\mathbf l} {||\\mathbf v + \\mathbf l||} \\\\ L_s = k_s \\frac I {r^2} \\max(0, \\mathbf n\\cdot \\mathbf h)^p } \\] <p>where \\(p\\) is a coefficient to control the highlight's area (the larger \\(p\\), the smaller highlight region).</p> <p>note we have \\(2&lt;n, h&gt; = &lt;v, r&gt;\\).</p> <pre><code>// example of blinn-phong shading with texture mapping.\nEigen::Vector3f texture_fragment_shader(const fragment_shader_payload&amp; payload)\n{\n\n    Eigen::Vector3f texture_color = payload.texture-&gt;getColor(payload.tex_coords(0), payload.tex_coords(1));\n\n    // coefficients\n    Eigen::Vector3f ka = Eigen::Vector3f(0.005, 0.005, 0.005);\n    Eigen::Vector3f kd = texture_color / 255.f;\n    Eigen::Vector3f ks = Eigen::Vector3f(0.7937, 0.7937, 0.7937);\n\n    // view direction\n    Eigen::Vector3f eye_pos{0, 0, 10};\n\n    // ambient intensity\n    Eigen::Vector3f amb_light_intensity{10, 10, 10};\n\n    // light source position and intensity\n    auto l1 = light{{30, 50, 20}, {500, 500, 500}};\n    auto l2 = light{{-30, 50, 0}, {500, 500, 500}};\n    std::vector&lt;light&gt; lights = {l1, l2};\n\n    // specular order\n    float p = 150;\n\n    // shading point's coordinate and normal.\n    Eigen::Vector3f point = payload.view_pos;\n    Eigen::Vector3f normal = payload.normal;\n\n    // output color\n    Eigen::Vector3f result_color = {0, 0, 0};\n\n    for (auto&amp; light : lights)\n    {\n        float r = (point - light.position).norm();\n        Eigen::Vector3f l = (light.position - point).normalized();\n        Eigen::Vector3f v = (eye_pos - point).normalized();\n        Eigen::Vector3f h = (v + l).normalized();\n\n        Eigen::Vector3f ambient = ka.cwiseProduct(amb_light_intensity);\n        Eigen::Vector3f diffuse = kd.cwiseProduct(light.intensity / (r * r)) * std::max(.0f, (float)normal.dot(l));\n        Eigen::Vector3f specular = ks.cwiseProduct(light.intensity / (r * r)) * powf(std::max(.0f, (float)normal.dot(h)), p);\n\n        result_color += ambient + diffuse + specular;\n    }\n\n    return result_color * 255.f;\n}\n</code></pre> <p></p>"},{"location":"graphics/102_shading/#shading-frequency","title":"Shading Frequency","text":""},{"location":"graphics/102_shading/#flat-shading-each-triangle","title":"Flat shading: Each Triangle","text":"<p>Direct shade each triangle. Not smooth.</p>"},{"location":"graphics/102_shading/#gouraud-shading-each-vertex","title":"Gouraud Shading: Each Vertex","text":"<p>DEF: vertex normal is defined as the average of surrounding face normals.</p> <ul> <li>compute vertex normals.</li> <li>compute color for each vertex.</li> <li>interpolate color for each pixel inside each triangle.</li> </ul>"},{"location":"graphics/102_shading/#phong-shading-each-pixel","title":"Phong Shading: Each Pixel","text":"<ul> <li>compute vertex normals.</li> <li>interpolate normals for each pixel inside each triangle.</li> <li>compute color for each pixel.</li> </ul>"},{"location":"graphics/102_shading/#barycentric-interpolation","title":"Barycentric Interpolation","text":"<p>Interpolate by area. suppose \\(X = (x, y)\\):</p> \\[ \\displaylines{ \\alpha = \\frac {S_{XBC}} {S_{ABC}}\\\\ \\beta = \\frac {S_{XAC}} {S_{ABC}} \\\\ \\gamma = \\frac {S_{XAB}} {S_{ABC}} } \\] <p>A practical version:</p> <p></p> <p>Properties:</p> <ul> <li>\\((x,y)\\) is inside \\(\\Delta ABC\\) if and only if \\(\\alpha, \\beta, \\gamma\\) are all non-negative.</li> </ul>"},{"location":"graphics/102_shading/#texture-mapping","title":"Texture Mapping","text":"<p>Each triangle copies a piece of texture image (2d, uv-space) to the surface (3d).</p> <ul> <li>Compute UV coordinate for each vertex.</li> <li>Interpolate UV coordinate for each pixel. (barycentric)</li> <li>Interpolate color at UV, and assign it to the pixel. (nearest, bilinear, bicubic)</li> </ul>"},{"location":"graphics/102_shading/#texture-can-affect-shading-bump-displacement-shading","title":"Texture can affect shading: (bump / displacement shading)","text":"<pre><code>// example code of bump &amp; displacement shading.\n\nEigen::Vector3f bump_fragment_shader(const fragment_shader_payload&amp; payload)\n{\n\n    Eigen::Vector3f ka = Eigen::Vector3f(0.005, 0.005, 0.005);\n    Eigen::Vector3f kd = payload.color;\n    Eigen::Vector3f ks = Eigen::Vector3f(0.7937, 0.7937, 0.7937);\n\n    auto l1 = light{{30, 50, 20}, {500, 500, 500}};\n    auto l2 = light{{-30, 50, 0}, {500, 500, 500}};\n\n    std::vector&lt;light&gt; lights = {l1, l2};\n    Eigen::Vector3f amb_light_intensity{10, 10, 10};\n    Eigen::Vector3f eye_pos{0, 0, 10};\n\n    float p = 150;\n\n    Eigen::Vector3f color = payload.color; \n    Eigen::Vector3f point = payload.view_pos;\n    Eigen::Vector3f normal = payload.normal;\n\n\n    float kh = 0.2, kn = 0.1;\n\n    Eigen::Vector3f t;\n    t &lt;&lt; normal(0) * normal(1) / sqrtf(normal(0) * normal(0) + normal(2) * normal(2)),\n         sqrtf(normal(0) * normal(0) + normal(2) * normal(2)),\n         normal(1) * normal(2) / sqrtf(normal(0) * normal(0) + normal(2) * normal(2));\n    Eigen::Vector3f b = normal.cross(t);\n    Eigen::Matrix3f tbn;\n    tbn &lt;&lt; t(0), b(0), normal(0),\n           t(1), b(1), normal(1),\n           t(2), b(2), normal(2);\n\n    auto color_uv = payload.texture-&gt;getColor(payload.tex_coords(0), payload.tex_coords(1));\n    auto color_uuv = payload.texture-&gt;getColor(payload.tex_coords(0) + 1.0f / payload.texture-&gt;width, payload.tex_coords(1));\n    auto color_uvv = payload.texture-&gt;getColor(payload.tex_coords(0), payload.tex_coords(1) + 1.0f / payload.texture-&gt;height);\n\n    float du = kh * kn * (color_uuv.norm() - color_uv.norm());\n    float dv = kh * kn * (color_uvv.norm() - color_uv.norm());\n\n    Eigen::Vector3f ln;\n    ln &lt;&lt; -du, -dv, 1;\n\n    normal = (tbn * ln).normalized();\n\n    Eigen::Vector3f result_color = {0, 0, 0};\n    result_color = normal;\n\n    return result_color * 255.f;\n}\n\n\nEigen::Vector3f displacement_fragment_shader(const fragment_shader_payload&amp; payload)\n{\n\n    Eigen::Vector3f ka = Eigen::Vector3f(0.005, 0.005, 0.005);\n    Eigen::Vector3f kd = payload.color;\n    Eigen::Vector3f ks = Eigen::Vector3f(0.7937, 0.7937, 0.7937);\n\n    auto l1 = light{{30, 50, 20}, {500, 500, 500}};\n    auto l2 = light{{-30, 50, 0}, {500, 500, 500}};\n\n    std::vector&lt;light&gt; lights = {l1, l2};\n    Eigen::Vector3f amb_light_intensity{10, 10, 10};\n    Eigen::Vector3f eye_pos{0, 0, 10};\n\n    float p = 150;\n\n    Eigen::Vector3f color = payload.color; \n    Eigen::Vector3f point = payload.view_pos;\n    Eigen::Vector3f normal = payload.normal;\n\n    float kh = 0.2, kn = 0.1;\n\n    Eigen::Vector3f t;\n    t &lt;&lt; normal(0) * normal(1) / sqrtf(normal(0) * normal(0) + normal(2) * normal(2)),\n         sqrtf(normal(0) * normal(0) + normal(2) * normal(2)),\n         normal(1) * normal(2) / sqrtf(normal(0) * normal(0) + normal(2) * normal(2));\n    Eigen::Vector3f b = normal.cross(t);\n    Eigen::Matrix3f tbn;\n    tbn &lt;&lt; t(0), b(0), normal(0),\n           t(1), b(1), normal(1),\n           t(2), b(2), normal(2);\n\n    auto color_uv = payload.texture-&gt;getColor(payload.tex_coords(0), payload.tex_coords(1));\n    auto color_uuv = payload.texture-&gt;getColor(payload.tex_coords(0) + 1.0f / payload.texture-&gt;width, payload.tex_coords(1));\n    auto color_uvv = payload.texture-&gt;getColor(payload.tex_coords(0), payload.tex_coords(1) + 1.0f / payload.texture-&gt;height);\n\n    float du = kh * kn * (color_uuv.norm() - color_uv.norm());\n    float dv = kh * kn * (color_uvv.norm() - color_uv.norm());\n\n    Eigen::Vector3f ln;\n    ln &lt;&lt; -du, -dv, 1;\n\n    normal = (tbn * ln).normalized();\n\n    Eigen::Vector3f result_color = {0, 0, 0};\n\n    for (auto&amp; light : lights)\n    {\n        float r = (point - light.position).norm();\n        Eigen::Vector3f l = (light.position - point).normalized();\n        Eigen::Vector3f v = (eye_pos - point).normalized();\n        Eigen::Vector3f h = (v + l).normalized();\n\n        Eigen::Vector3f ambient = ka.cwiseProduct(amb_light_intensity);\n        Eigen::Vector3f diffuse = kd.cwiseProduct(light.intensity / (r * r)) * std::max(.0f, (float)normal.dot(l));\n        Eigen::Vector3f specular = ks.cwiseProduct(light.intensity / (r * r)) * powf(std::max(.0f, (float)normal.dot(h)), p);\n\n        result_color += ambient + diffuse + specular;\n\n    }\n\n    return result_color * 255.f;\n}\n</code></pre>"},{"location":"graphics/103_geometry/","title":"Geometry","text":"<p>### Representation</p>"},{"location":"graphics/103_geometry/#implicit","title":"Implicit","text":"<p>abstract functions. (Signed Distance Function, SDF)</p> \\[ \\displaylines{ f(x, y, z) =  \\begin{cases} \\le0, \\text{inside} \\\\ &gt;0, \\text{outside} \\end{cases} } \\] <p>easy to test inside/outside, but hard to sample.</p>"},{"location":"graphics/103_geometry/#explicit","title":"Explicit","text":"<p>directly given as Meshes, Point Clouds, Voxels.</p> <p>Or 2d parameter maps (\\(f(u,v)\\rightarrow (x,y,z)\\))</p> <p>easy to sample, but hard to test inside/outside.</p>"},{"location":"graphics/103_geometry/#bezier-curves","title":"Bezier Curves","text":""},{"location":"graphics/103_geometry/#de-casteljau-algorithm","title":"De Casteljau Algorithm:","text":"<p>Given 4 control points, an interpolation parameter \\(t\\), and order \\(n\\), recursively linear interpolate each segment to generate new segments for \\(n\\) times.</p> <p></p> <p>This algorithm has a explicit algebra solution (the Bernstein form):</p> \\[ \\displaylines{ \\mathbf b^n(t) = \\sum_{j=0}^n\\mathbf b_j B^n_j(t) \\\\ B_i^n(t) = C_n^it^i(1-t)^{n-i} } \\] <p>In particular, for a $n=4 $ Bezier curve:</p> \\[ \\displaylines{ \\mathbf b^n(t) = \\mathbf b_0(1-t)^3 + \\mathbf b_13t(1-t)^2 + \\mathbf b_23t^2(1-t) + \\mathbf b_3 t^3 } \\] <p>Piece-wise cubic Bezier is the most common technique to represent curves.</p> <p>B-Splines (Basis Splines) is superset of Bezier Curves.</p> <p>Bezier Curve can be extended to Bezier Surface in 3D, and use separable 1D de Casteljau to solve.</p> <pre><code>// explicit solution for Bezier curve of n = 4.\nvoid algebra_bezier(const std::vector&lt;cv::Point2f&gt; &amp;points, cv::Mat &amp;window) \n{\n    auto &amp;p_0 = points[0];\n    auto &amp;p_1 = points[1];\n    auto &amp;p_2 = points[2];\n    auto &amp;p_3 = points[3];\n    for (double t = 0.0; t &lt;= 1.0; t += 0.001) \n    {\n        auto point = std::pow(1 - t, 3) * p_0 + \n                     3 * t * std::pow(1 - t, 2) * p_1 +\n                     3 * std::pow(t, 2) * (1 - t) * p_2 + \n                     std::pow(t, 3) * p_3;\n        window.at&lt;cv::Vec3b&gt;(point.y, point.x)[2] = 255;\n    }\n}\n\n// de Casteljau's algorithm for Bezier curve of any n.\nvoid recursive_bezier(const std::vector&lt;cv::Point2f&gt; &amp;control_points, cv::Mat &amp;window) \n{\n    for (double t = 0.0; t &lt; 1.0; t += 0.001) {\n        auto p = recursive_bezier_func(control_points, t);\n        window.at&lt;cv::Vec3b&gt;(p.y, p.x)[1] = 255;\n    }\n}\n\ncv::Point2f recursive_bezier_func(const std::vector&lt;cv::Point2f&gt; &amp;points, float t) \n{\n    // end recursion\n    if (points.size() == 1) return points[0];\n    // further recursion\n    std::vector&lt;cv::Point2f&gt; new_points;\n    for (size_t i = 1; i &lt; points.size(); i++) {\n        auto&amp; p0 = points[i - 1];\n        auto&amp; p1 = points[i];\n        new_points.push_back(p0 + (p1 - p0) * t);\n    }\n    return recursive_bezier_func(new_points, t);\n}\n</code></pre>"},{"location":"graphics/103_geometry/#mesh-operations","title":"Mesh Operations","text":""},{"location":"graphics/103_geometry/#subdivision-magnification","title":"Subdivision (Magnification)","text":"<p>Loop and add vertices.</p> <p></p>"},{"location":"graphics/103_geometry/#simplification","title":"Simplification","text":"<p>Collapse edges and minimize quadric error.</p> <p></p>"},{"location":"graphics/103_geometry/#shadow","title":"Shadow","text":"<p>A pixel NOT in shadow must be seen both by the light and camera.</p>"},{"location":"graphics/103_geometry/#two-pass-search-algorithm","title":"Two pass search algorithm:","text":"<ul> <li>compute depth from light to object.</li> <li>compute depth from camera to object.</li> <li>project camera-visible area to light. (shadow: light-occluded, not shadow: light-visible)</li> </ul> <p>problem: soft-shadow (penumbra) vs hard-shadow (umbra)</p>"},{"location":"graphics/104_raytracing/","title":"Ray Tracing","text":""},{"location":"graphics/104_raytracing/#why","title":"Why?","text":"<p>Rasterization Shading cannot handle global effect (e.g., soft shadow, multiple light sources, glossy reflection, indirect illumination).</p> <p>Ray-tracing is slow, but can generate high quality shades.</p>"},{"location":"graphics/104_raytracing/#whitted-style-ray-tracing","title":"Whitted-Style Ray Tracing","text":"<p>Cast ray and trace the route recursively.</p> <p></p> <p>A ray is defined by origin \\(\\mathbf o\\) and direction \\(\\mathbf d\\) as a function of time \\(t \\ge 0\\):</p> \\[ \\displaylines{ \\mathbf r(t) = \\mathbf o + t\\mathbf d } \\] <p>Ray-Surface intersection algorithm:</p> <ul> <li>Na\u00efve: Check intersection with each triangles. (slow!)</li> </ul> <ul> <li> <p>AABB (Axis-Aligned Bounding Boxes): </p> <p>first check if ray hit object bounding box, then check intersection with the object triangles.</p> <p>Need to pre-compute bounding boxes by spatial partitioning (uniform grid, KD-tree) / object partitioning (bounding volume hierarchy).</p> </li> </ul> <pre><code>// Moller Trumbore Algorithm: detect ray-triangle intersection \nbool rayTriangleIntersect(const Vector3f&amp; v0, const Vector3f&amp; v1, const Vector3f&amp; v2, const Vector3f&amp; orig,\n                          const Vector3f&amp; dir, float&amp; tnear, float&amp; u, float&amp; v)\n{\n    auto e1 = v1 - v0;\n    auto e2 = v2 - v0;\n    auto s = orig - v0;\n    auto s1 = crossProduct(dir, e2);\n    auto s2 = crossProduct(s, e1);\n\n    float k = 1.0f / dotProduct(s1, e1);\n    float tnear_ = k * dotProduct(s2, e2);\n    float u_ = k * dotProduct(s1, s);\n    float v_ = k * dotProduct(s2, dir);\n\n    // don't forget tnear_ &gt; 0 \n    if ((tnear_ &gt; 0) &amp;&amp; (u_ &gt; 0) &amp;&amp;  (v_ &gt; 0) &amp;&amp; (1 - u_ - v_ &gt;= 0)) {\n        tnear = tnear_;\n        u = u_;\n        v = v_;\n        return true;\n    }\n    else return false;\n}\n</code></pre>"},{"location":"graphics/104_raytracing/#bvh-bounding-volume-hierarchy","title":"BVH (Bounding Volume Hierarchy)","text":"<p>BVH partitions object directly, compared to KD-Tree/Oct-Tree/BSP-Tree that partitions space.</p> <p>BVH's bounding boxes may overlap in space, but each object is uniquely contained in bounding box.</p> <p></p>"},{"location":"graphics/104_raytracing/#basic-radiometry","title":"Basic Radiometry","text":"<p>Physically correct manner of light calculation.</p> <p>Radiant Energy: \\(Q [J=Joule]\\)</p> <p>Radiant Flux: \\(\\Phi = \\frac  {dQ} {dt} [W] [lm=lumen]\\)</p> <p>Radiant Intensity: \\(I(\\omega) = \\frac {d\\Phi} {d\\omega} [W/sr] [cd=candela]\\), power per solid angle.</p> <p>Irradiance: \\(E(x) = \\frac {d\\Phi(x)} {dA} [W/m^2] [lux]\\) power per unit area incident on  a surface point.</p> <p>Radiance/Luminance: \\(L(p, \\omega) = \\frac {d^2\\Phi(p, \\omega)} {d\\omega dA\\cos\\theta} [W/sr\\ m^2] [nit]\\) , power per unit solid angle per projected unit area. (or Irradiance per solid angle, or Intensity per projected unit area)</p> <ul> <li>Incident Radiance</li> <li>Exiting Radiance</li> </ul> <p>Irradiance \uff08\u8f90\u5c04\u7167\u5ea6\uff09 vs radiance \uff08\u8f90\u5c04\u4eae\u5ea6\uff09: </p> <p></p> <p>Bidirectional Reflectance Distribution Function (BRDF): how much light is reflected into each outgoing direction from each incoming direction.</p> <p></p> <p>The Reflection Equation:</p> <p></p> <p>The Rendering Equation:</p> <p></p>"},{"location":"graphics/104_raytracing/#path-tracing","title":"Path Tracing","text":"<p>Whitted-Style Ray Tracing's assumptions are too simple (in fact wrong).</p> <p>e.g. Glossy materials reflection, diffuse materials reflection.</p> <p>We can numerically solve the rendering function by Monte Carlo Integration.</p> <pre><code># Distributed Ray Tracing\nshade(p, wo)\n    Randomly choose N directions wi~pdf\n    Lo = 0.0\n    For each wi\n        Trace a ray r(p, wi)\n        If ray r hit the light\n            Lo += (1 / N) * L_i * f_r * cosine / pdf(wi)\n        Else If ray r hit an object at q\n            Lo += (1 / N) * shade(q, -wi) * f_r * cosine / pdf(wi)\n    Return Lo\n</code></pre> <p>But the #ray explodes after many bounces. Also, the recursion never ends (light never stop bouncing).</p> <p>So we decide to only choose one random direction each time, and use Russian Roulette (RR) method to randomly stop light bouncing.</p> <pre><code># Path Tracing (N == 1)\nshade(p, wo, P_RR) # P_RR is a parameter to control RR stop.\n    # Random stop \n    Randomly select ksi from U[0, 1].\n    If ksi &gt; P_RR\n        Return 0\n    # Random Path\n    Randomly choose ONE direction wi~pdf(w)\n    Trace a ray r(p, wi)\n        If ray r hit the light\n            Return L_i * f_r * cosine / pdf(wi)\n        Else If ray r hit an object at q\n            Return shade(q, -wi) * f_r * cosine / pdf(wi)\n</code></pre> <p>However, this randomness will be very noisy. </p> <p>So we trace multiple paths for each pixel and average them.</p> <pre><code>ray_generation(camPos, pixel)\n    Uniformly choose N sample positions within the pixel\n    pixel_radiance = 0.0\n    For each sample in the pixel\n        Shoot a ray r(camPos, cam_to_sample)\n        If ray r hit the scene at p\n            pixel_radiance += 1 / N * shade(p, sample_to_cam)\n    Return pixel_radiance\n</code></pre> <p>There are lots of other tricks, e.g., sampling the light, test if light is blocked, ... See the following implementation:</p> <pre><code>// Implementation of Path Tracing\nVector3f Scene::castRay(const Ray &amp;ray, int depth) const\n{\n    // recursion depth limit\n    if (depth &gt; this-&gt;maxDepth) {\n        return Vector3f(0.0f);\n    }\n    // find intersection of ray with scene\n    Intersection intersection = Scene::intersect(ray);\n    Material *m = intersection.m;\n    Object *hitObject = intersection.obj;\n    Vector3f hitColor = this-&gt;backgroundColor;\n    Vector2f uv;\n    uint32_t index = 0;\n    // if intersected\n    if (intersection.happened) {\n        // retrieve hitPoint \n        Vector3f hitPoint = intersection.coords;\n        Vector3f N = intersection.normal; // normal\n        Vector2f st; // st coordinates\n        hitObject-&gt;getSurfaceProperties(hitPoint, ray.direction, index, uv, N, st);\n\n        // prepare variables\n        Vector3f wo = -ray.direction; // light_out direction\n        Vector3f wi; // light_in direction\n        float light_prob; // light_in prob\n\n        // render!\n        switch (m-&gt;getType()) {\n            // only support DIFFUSE now...\n            case DIFFUSE:\n            {\n                /// direct light: sample light sources\n                Intersection light_pos;\n                sampleLight(light_pos, light_prob);\n                Vector3f lightPoint = light_pos.coords;\n                Vector3f lightIntensity = light_pos.emit;\n                Vector3f lightN = light_pos.normal;\n                // test if light is blocked.\n                wi = normalize(hitPoint - lightPoint);\n                Ray ray_light2hit(lightPoint, wi);\n                Intersection light2hit_isect = Scene::intersect(ray_light2hit);\n                Vector3f directColor(0.0f);\n                // if not blocked (the precsion is necessary! 1e-2 is good, but 1e-6 will cause noises)\n                if ((light2hit_isect.coords - hitPoint).norm() &lt;= 1e-2) {\n                    Vector3f f_r = m-&gt;eval(wi, wo, N);\n                    float cos_theta = dotProduct(N, -wi);\n                    float cos_theta2 = dotProduct(lightN, wi);\n                    float dist = powf((lightPoint - hitPoint).norm(), 2);\n                    // L_i * f_r * cos \\theta * cos \\theta' / |x'-p|^2 / pdf_light\n                    directColor = lightIntensity * f_r * cos_theta * cos_theta2 / dist / light_prob;\n                }\n\n                /// indirect light: Random Russian Roulette\n                Vector3f indirectColor(0.0f);\n                // start RR\n                float ksi = get_random_float();\n                // if RR passed\n                if (ksi &lt;= RussianRoulette) {\n                    // sample light_in direction\n                    wi = -m-&gt;sample(ray.direction, N);\n                    light_prob = m-&gt;pdf(wi, wo, N);\n                    // test light intersection\n                    Ray ray_rr(hitPoint, -wi);\n                    Intersection rr_isect = Scene::intersect(ray_rr);\n                    // if intersected\n                    if (rr_isect.happened) {\n                        // with non-emit surface\n                        if (!rr_isect.obj-&gt;hasEmit()) {\n                            // recursive call to find the intensity !\n                            Vector3f rrIntensity = castRay(ray_rr, depth+1);\n                            Vector3f f_r = m-&gt;eval(wi, wo, N);\n                            float cos_theta = dotProduct(N, -wi);\n                            // L_i * f_r * cos \\theta / light_prob / RR_prob\n                            indirectColor = rrIntensity * f_r * cos_theta / light_prob / RussianRoulette;\n                        }\n                    }\n                }\n\n                /// if self-emitting\n                Vector3f selfColor(0.0f);\n                if (m-&gt;hasEmission()) {\n                    selfColor = m-&gt;getEmission();\n                }\n\n                // final color\n                hitColor = directColor + indirectColor + selfColor;\n                break;\n            }\n        }\n    }\n    return hitColor;\n}\n</code></pre>"},{"location":"graphics/105_material/","title":"Material","text":"<p>Material == BRDF</p>"},{"location":"graphics/105_material/#diffuse-lambertian-material","title":"Diffuse (Lambertian) Material","text":""},{"location":"graphics/105_material/#glossy-material","title":"Glossy Material","text":""},{"location":"graphics/105_material/#ideal-reflective-refractive-material","title":"Ideal Reflective / Refractive Material","text":""},{"location":"graphics/105_material/#microfacet-theory","title":"Microfacet Theory","text":""},{"location":"graphics/105_material/#anisotropic-materials","title":"Anisotropic Materials","text":""},{"location":"graphics/105_material/#properties-of-brdf","title":"Properties of BRDF","text":"<ul> <li>Non-negativity</li> <li>Linearity</li> <li>Reciprocity Principle</li> <li>Energy Conservation</li> </ul>"},{"location":"graphics/opengl_advanced/","title":"Opengl advanced","text":""},{"location":"graphics/opengl_advanced/#depth-test","title":"Depth test","text":"<ul> <li> <p>Depth buffer: if we enable depth test, we should create a depth buffer to save the depth values.</p> <pre><code>// enable\nglEnable(GL_DEPTH_TEST);\n// clear\nglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n//// however, if you want read-only depth buffer:\nglDepthMask(GL_FALSE);\n</code></pre> <p>By default, the depth buffer precision is 24-bit. (don't ask why...)</p> </li> </ul> <ul> <li> <p>Traditional Depth test runs after fragment shader. It compares with the z value of <code>gl_FragCoord</code> which is the 3d location of the current pixel, and only render the fragment color if <code>gl_FragCoord.z &lt; buffer.z</code>.</p> <p>Now most GPUs support Early depth testing (hardware feature). It runs before fragment shader, and avoid calling fragment shader if it is occluded (so as to save time!). But to enable early depth testing, you must not manually set <code>gl_FragCoord.z</code> value in fragment shader.</p> </li> </ul> <ul> <li> <p>set depth comparator.</p> <pre><code>// default less pass, keep smaller depth (so discard larger depth)\nglDepthFunc(GL_LESS);\n// always pass, so it renders in the drawing order.\nglDepthFunc(GL_ALWAYS);\n// greater pass (used for inversed depth)\nglDepthFunc(GL_GREATER);\n// others:\nglDepthFunc(GL_NEVER); // reverse drawing order\nglDepthFunc(GL_EQUAL);\nglDepthFunc(GL_NOTEQUAL);\nglDepthFunc(GL_LEQUAL);\nglDepthFunc(GL_GEQUAL);\n</code></pre> </li> </ul> <ul> <li> <p>depth precision: </p> <p>z buffer's depth range is \\([0, 1]\\), which is mapped from the frustum depth \\([near, far]\\).</p> <p>This mapping is NON-linear, because we want more precision in nearer distance, while less precision in further distance.</p> </li> </ul> \\[ \\displaylines{   z' = \\frac {1/z - 1/near} {1/far - 1/near} } \\] <p>To visualize z buffer, just set it as the <code>FragColor</code>:</p> <pre><code>//// fragment shader to display non-linear depth\nvoid main() {\n    FragColor = vec4(vec3(gl_FragCoord.z), 1.0);\n}\n\n//// if we want to restore the linear depth:\nfloat near = 0.1;\nfloat far = 100.0;\nfloat linearize(float depth) {\n    return (near * far) / (far + depth * (near - far)); // [0, 1] --&gt; [near, far]\n}\nvoid main() {\n    FragColor = vec4(vec3(linearize(gl_FragCoord.z) / far), 1.0);\n}\n</code></pre> <ul> <li> <p>z-fighting: if two triangles are tightly placed, z-buffer maybe not precise enough to determine which is in the front and switching between the two triangles, resulting in strange visual effect.</p> <p>There is no real solution for this (maybe set 32-bit depth buffer), so never place two triangles too close!</p> </li> </ul>"},{"location":"graphics/opengl_advanced/#stencil-test","title":"Stencil test (\u6a21\u677f\u6d4b\u8bd5)","text":"<ul> <li> <p>Stencil can be viewed as a mask, so we have more control on where to draw. For example, we can use it to highlight the edge of an object.</p> <p>Stencil test runs after fragment shader and before depth test.</p> <pre><code>vertex shader --&gt; (early depth test) --&gt; fragment shader --&gt; stencil test --&gt; (depth test)\n</code></pre> </li> </ul> <ul> <li>We need a stencil buffer too. By default it is 8-bit, so we can set at most 256 values for stencil test.</li> </ul> <ul> <li> <p>Enable and clear:</p> <pre><code>// enable, by default stencil is initailized to 1.\nglEnable(GL_STENCIL_TEST);\n// clear\nglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);\n\n// set stencil read-only\nglStencilMask(0x00);\n// re-enable write\nglStencilMask(0xFF);\n</code></pre> </li> </ul> <ul> <li> <p>stencil comparator. similar to depth comparator.</p> <pre><code>// draw only if (stencil &amp; 0xFF) == 1\n// accept same comparators as depth. (ALWAYS, LESS, GREATER, EQUAL, ...)\n// `0xFF` is an AND mask, usually we just use 0xFF (all 1).\nglStencilFunc(GL_EQUAL, 1, 0xFF)\n</code></pre> </li> </ul> <ul> <li> <p>update stencil.</p> <pre><code>// define actions for three cases: (stencil failed, depth failed, both passed)\n// values accept:\n// GL_KEEP: do not change stencil\n// GL_ZERO: s = 0\n// GL_REPLACE: set stentil to the ref value in glStencilFunc (the 1 in previous example)\n// GL_INCR: s = s + 1 if s != 0xFF else s\n// GL_INCR_WRAP: s = (s + 1) % 0xFF\n// GL_DECR: s = s - 1 if s != 0 else s\n// GL_DECR_WRAP: s = (s - 1 + 0xFF) % 0xFF\n// GL_INVERRT: s = ~s\nglStencilOp(sfail, dpfail, dppass); // default is (GL_KEEP, GL_KEEP, GL_KEEP)\n</code></pre> </li> </ul> <ul> <li> <p>example: draw the edge of an object. (outlining)</p> <pre><code>// enable stencil test\nglEnable(GL_STENCIL_TEST);\n// set stencil to 1 (see the next line) if both passed\nglStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);\n// always pass stencil\nglStencilFunc(GL_ALWAYS, 1, 0xFF);\n// enable write stencil\nglStencilMask(0xFF); \n// draw the object with a normal shader\nnormalShader.use();\nDrawObject(); // now, s = 1 for the object area.\n\n// pass stencil only if not in object area.\nglStencilFunc(GL_NOTEQUAL, 1, 0xFF);\n// disable write stencil\nglStencilMask(0x00); \n// disable depth test (since we are going to draw edges)\nglDisable(GL_DEPTH_TEST);\n// draw the edge with another shader.\nshaderSingleColor.use(); \nDrawObjectEnlarged(); // we need to manually scale the object so it looks like an edge...\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_advanced/#blending","title":"Blending","text":"<ul> <li>alpha blending allows drawing (full or partial) transparent objects.</li> </ul> <ul> <li> <p>discarding fully transparent fragments:</p> <p>First, use RGBA texture instead of RGB.</p> <pre><code>glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);\n\n// also, better set wrap mode to CLAMP_TO_EDGE\n// in case the texture top is transparent while bottom is not and the interpolation looks strange.\nglTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\nglTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n</code></pre> <p>Second, modify the fragment shader:</p> <pre><code>#version 330 core\nout vec4 FragColor;\nin vec2 TexCoords;\n\nuniform sampler2D texture1;\n\nvoid main() {             \n    // do not append 1, since texture1 is now RGBA\n    vec4 texColor = texture(texture1, TexCoords);\n    // discard fragment if a &lt; 0.1\n    if (texColor.a &lt; 0.1) discard;\n    FragColor = texColor;\n}\n</code></pre> </li> </ul> <ul> <li> <p>blending partially transparent object.</p> <p>We need to enable blend by:</p> <pre><code>// enable alpha blending\nglEnable(GL_BLEND);\n\n// set how to blend \n// accepts parameters (src_rgb, dst_rgb, [src_a, rgb_a])\n// GL_ZERO, GL_ONE\n// GL_SRC_COLOR, GL_DST_COLOR\n// GL_ONE_MINUS_SRC_COLOR, GL_ONE_MINUS_DST_COLOR\n// GL_SRC_ALPHA, GL_DST_ALPHA\n// GL_ONE_MINUS_SRC_ALPHA, GL_ONE_MINUS_DST_ALPHA\n// the most usual case we want is:\n// rgba = src.a * src.rgba + (1 - src.a) * bg.rgba\nglBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); \n\n// another usual case for separate setting rgb and a:\n// rgb = src.a * src.rgb + (1 - src.a) * bg.rgb\n// a = 1 * src.a + 0 * bg.a = src.a\nglBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ZERO);\n\n// if you don't want to ADD (who knows why)\nglBlendEquation(GL_FUNC_ADD); // default, src + dst\nglBlendEquation(GL_FUNC_SUBTRACT); // src - dst\nglBlendEquation(GL_FUNC_REVERSE_SUBTRACT); // dst - src\n</code></pre> </li> </ul> <ul> <li> <p>draw order matters!</p> <p>depth test won't check transparency! So we must draw transparent objects from furthest to nearest.</p> <p>The usual practice is:</p> <ul> <li>draw all opaque objects.</li> <li>draw all transparent objects from furthest to nearest.</li> </ul> <p>How to sort is a difficult topic, but for simple plane-like object, we can:</p> <pre><code>std::map&lt;float, glm::vec3&gt; sorted;\nfor (unsigned int i = 0; i &lt; windows.size(); i++) {\n    float distance = glm::length(camera.Position - windows[i]);\n    sorted[distance] = windows[i];\n}\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_advanced/#face-culling","title":"Face Culling","text":"<ul> <li>A way to discard occluded faces (back facing), so we can save computation time.</li> </ul> <ul> <li> <p>Winding order of triangles:</p> <p></p> <p>The vertex order of a face defines its winding order. OpenGL use this to determine whether a triangle is front-facing or back-facing. So we must provide correct face vertex orders if we want to use face culling!</p> </li> </ul> <ul> <li> <p>enable it:</p> <pre><code>// enable\nglEnable(GL_CULL_FACE);\n// set cull mode\nglCullFace(GL_BACK); // default, other choices are GL_FRONT, GL_FRONT_AND_BACK.\n// set front face definition\nglFrontFace(GL_CCW); // default, CCW = counter-clock-wise. other choice is GL_CW,\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_advanced/#frame-buffer-object-fbo","title":"Frame Buffer Object (FBO)","text":"<ul> <li>OpenGL use frame buffers to store color, depth, stencil, ... GLFW creates default color buffer, depth buffer, stencil buffer for us to use. </li> </ul> <ul> <li>The default frame buffer (which renders to the screen) is created automatically with OpenGL context, and has the id <code>0</code>.</li> </ul> <ul> <li> <p>Create frame buffer</p> <pre><code>// gen fbo\nunsigned int fbo;\nglGenFramebuffers(1, &amp;fbo);\n// bind frame buffer\nglBindFramebuffer(GL_FRAMEBUFFER, fbo);\n// we need to make frame buffer complete (add an attachment)\n// how to check if complete:\nif (glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE) {  \n    // frame buffer can be used now. \n}\n// rebind to screen buffer (0)\nglBindFramebuffer(GL_FRAMEBUFFER, 0);\n// delete frame buffer\nglDeleteFramebuffers(1, &amp;fbo); // 1 means we delete one frame buffer. (size)\n</code></pre> </li> </ul> <ul> <li> <p>attachment</p> <p>we have two choices: texture or render buffer.</p> <ul> <li> <p>texture attachment: </p> <p>so we can render to a texture, and use it later!</p> <pre><code>// create a color texture\nunsigned int texture;\nglGenTextures(1, &amp;texture);\nglBindTexture(GL_TEXTURE_2D, texture);\n// we pass in NULL data, since it is now empty.\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 800, 600, 0, GL_RGB, GL_UNSIGNED_BYTE, NULL);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n//// bind it to frame buffer\n// `GL_FRAMEBUFFER` is the target.\n// `GL_COLOR_ATTACHMENT0` means it's a color attachment.\n// `GL_TEXTURE_2D` means the texture type.\n// `texture` is the texture object.\n// `0` is Mipmap level, just use 0.\nglFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texture, 0);\n\n//// bind a depth texture (24 bit)\nglTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT24, 800, 600, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);\nglFramebufferTexture(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, texture, 0);\n\n//// bind a stencil texture (8 bit) [not recommended, always use depth+stencil]\n\n//// bind a depth+stencil texture (24 + 8 = 32 bit)\nglTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH24_STENCIL8, 800, 600, 0, GL_DEPTH_STENCIL, GL_UNSIGNED_INT_24_8, NULL);\nglFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D, texture, 0);\n</code></pre> </li> </ul> <ul> <li> <p>Renderbuffer object (RBO) attachment: </p> <p>optimized for offscreen rendering, but is write-only, and can only be read with <code>glReadPixels</code>.</p> <p>In brief, if you want to sample from the attachment, use normal texture. If you don't need to sample, use RBO.</p> <pre><code>// gen rbo\nunsigned int rbo;\nglGenRenderbuffers(1, &amp;rbo);\n// bind buffer\nglBindRenderbuffer(GL_RENDERBUFFER, rbo);\n// allocate memory (like glTexImage2D, for example we use depth+stencil.)\nglRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, 800, 600);\n// bind to frame buffer\nglFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_RENDERBUFFER, rbo);\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>render to frame buffer (attachment)</p> <p>Instead of rendering to the screen directly, </p> <pre><code>// create framebuffer\nunsigned int framebuffer;\nglGenFramebuffers(1, &amp;framebuffer);\nglBindFramebuffer(GL_FRAMEBUFFER, framebuffer);\n// we first attach a texture for color.\nunsigned int texColorBuffer;\nglGenTextures(1, &amp;texColorBuffer);\nglBindTexture(GL_TEXTURE_2D, texColorBuffer);\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 800, 600, 0, GL_RGB, GL_UNSIGNED_BYTE, NULL);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\nglBindTexture(GL_TEXTURE_2D, 0);\nglFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texColorBuffer, 0);  \n// we then attach a RBO for depth + stencil.\nunsigned int rbo;\nglGenRenderbuffers(1, &amp;rbo);\nglBindRenderbuffer(GL_RENDERBUFFER, rbo); \nglRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, 800, 600);  \nglBindRenderbuffer(GL_RENDERBUFFER, 0);\nglFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_RENDERBUFFER, rbo);\n// check completeness\nif(glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)\n    std::cout &lt;&lt; \"ERROR::FRAMEBUFFER:: Framebuffer is not complete!\" &lt;&lt; std::endl;\n// rebind to screen (or unbind framebuffer)\nglBindFramebuffer(GL_FRAMEBUFFER, 0);\n</code></pre> <p>We need a quad shader to draw the rectangle texture to screen.</p> <pre><code>// vertex shader\n#version 330 core\nlayout (location = 0) in vec2 aPos;\nlayout (location = 1) in vec2 aTexCoords;\n\nout vec2 TexCoords;\n\nvoid main() {\n    gl_Position = vec4(aPos.x, aPos.y, 0.0, 1.0); \n    TexCoords = aTexCoords;\n}\n</code></pre> <pre><code>// frag shader\n#version 330 core\nout vec4 FragColor;\n\nin vec2 TexCoords;\n\nuniform sampler2D screenTexture;\n\nvoid main() { \n    FragColor = texture(screenTexture, TexCoords);\n}\n</code></pre> <p>Render two passes (first render to framebuffer, second render to screen)</p> <pre><code>// render scene to our framebuffer\nglBindFramebuffer(GL_FRAMEBUFFER, framebuffer);\nglClearColor(0.1f, 0.1f, 0.1f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n// draw scene\nglEnable(GL_DEPTH_TEST);\nDrawScene();    \n\n// render our framebuffer to screen\nglBindFramebuffer(GL_FRAMEBUFFER, 0);\nglClearColor(1.0f, 1.0f, 1.0f, 1.0f); \nglClear(GL_COLOR_BUFFER_BIT);\n// draw quad\nglDisable(GL_DEPTH_TEST); // since we only draw a quad.\nQuadScreenShader.use();\nglBindVertexArray(quadVAO);\nglBindTexture(GL_TEXTURE_2D, texColorBuffer);\nglDrawArrays(GL_TRIANGLES, 0, 6);  \n</code></pre> </li> </ul> <ul> <li> <p>post processing.</p> <p>An advantage of using frame buffer is to post-process rendered image before print to screen.</p> <p>These effects can be applied in the quad fragment shader.</p> <p>For example, apply custom kernel convolution:</p> <pre><code>const float offset = 1.0 / 300.0;  \n\nvoid main() {\n    vec2 offsets[9] = vec2[](\n        vec2(-offset,  offset), // \u5de6\u4e0a\n        vec2( 0.0f,    offset), // \u6b63\u4e0a\n        vec2( offset,  offset), // \u53f3\u4e0a\n        vec2(-offset,  0.0f),   // \u5de6\n        vec2( 0.0f,    0.0f),   // \u4e2d\n        vec2( offset,  0.0f),   // \u53f3\n        vec2(-offset, -offset), // \u5de6\u4e0b\n        vec2( 0.0f,   -offset), // \u6b63\u4e0b\n        vec2( offset, -offset)  // \u53f3\u4e0b\n    );\n\n    // sharpen edges\n    float kernel[9] = float[](\n        -1, -1, -1,\n        -1,  9, -1,\n        -1, -1, -1\n    );\n\n    vec3 sampleTex[9];\n    for(int i = 0; i &lt; 9; i++)\n    {\n        sampleTex[i] = vec3(texture(screenTexture, TexCoords.st + offsets[i]));\n    }\n    vec3 col = vec3(0.0);\n    for(int i = 0; i &lt; 9; i++)\n        col += sampleTex[i] * kernel[i];\n\n    FragColor = vec4(col, 1.0);\n}\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_advanced/#cube-map","title":"Cube map","text":"<ul> <li> <p>A cube map is another type of texture, which contains six 2D texture that makes a box. Cube maps can be helpful for environment texture (such as the sky box), and we can use a direction vector to sample it (like sampling a sphere).</p> <p></p> </li> </ul> <ul> <li> <p>Create a cube map from 6 2D textures:</p> <pre><code>// gen CUBE_MAP\nunsigned int textureID;\nglGenTextures(1, &amp;textureID);\nglBindTexture(GL_TEXTURE_CUBE_MAP, textureID);\n// copy data\nint width, height, nrChannels;\nunsigned char *data;  \nfor(unsigned int i = 0; i &lt; textures_faces.size(); i++)\n{\n    data = stbi_load(textures_faces[i].c_str(), &amp;width, &amp;height, &amp;nrChannels, 0);\n    glTexImage2D(\n        // this loops the six faces (POSITIVE_X, NEGATIVE_X, POSITIVE_Y, ...)\n        GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, \n        0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data\n    );\n}\n// set parameter\nglTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\nglTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\nglTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\nglTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\nglTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);\n</code></pre> <p>use it in fragment shader:</p> <pre><code>#version 330 core\nout vec4 FragColor;\nin vec3 TexCoords;\n\nuniform samplerCube skybox;\n\nvoid main() {    \n    FragColor = texture(skybox, TexCoords);\n}\n</code></pre> <p>we usually render skybox as the first object and disable depth test, so it is always covered by later objects.</p> <pre><code>// draw skybox\nglDepthMask(GL_FALSE);\nskyboxShader.use();\nglBindVertexArray(skyboxVAO);\nglBindTexture(GL_TEXTURE_CUBE_MAP, cubemapTexture);\nglDrawArrays(GL_TRIANGLES, 0, 36);\nglDepthMask(GL_TRUE);\n// draw other objs\n</code></pre> <p>Optimization trick by early depth testing:</p> <p>We can render skybox at last, and use a trick to set the z always to 1.</p> <pre><code>void main() {\n    TexCoords = aPos;\n    vec4 pos = projection * view * vec4(aPos, 1.0);\n    gl_Position = pos.xyww; // z = w, after perspective division, z = 1\n}\n</code></pre> </li> </ul> <ul> <li> <p>environment mapping.</p> <p>We can reflect or refract environment texture to objects to make the scene more realistic.</p> <ul> <li> <p>Reflection</p> <p>Change the object's shader, so it reflects the skybox:</p> <pre><code>#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec3 aNormal;\n\nout vec3 Normal;\nout vec3 Position;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main() {\n    // note the correct way to transform normal!\n    Normal = mat3(transpose(inverse(model))) * aNormal;\n    Position = vec3(model * vec4(aPos, 1.0));\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n}\n</code></pre> <pre><code>#version 330 core\nout vec4 FragColor;\n\nin vec3 Normal;\nin vec3 Position;\n\nuniform vec3 cameraPos;\nuniform samplerCube skybox;\n\nvoid main() {             \n    vec3 I = normalize(Position - cameraPos);\n    vec3 R = reflect(I, normalize(Normal)); // built in func to calculate light direction after reflection at normal.\n    FragColor = vec4(texture(skybox, R).rgb, 1.0);\n}\n</code></pre> </li> </ul> <ul> <li> <p>Refraction</p> <p>similar to reflection.</p> <pre><code>void main() {             \n    float ratio = 1.00 / 1.52;\n    vec3 I = normalize(Position - cameraPos);\n    vec3 R = refract(I, normalize(Normal), ratio); // built in\n    FragColor = vec4(texture(skybox, R).rgb, 1.0);\n}\n</code></pre> </li> </ul> <p>However, these reflection / refraction effect are static. (It only reflect / refract the environment texture, but not other objects.)</p> <p>To achieve dynamic environment mapping, we need to frame buffer all reflective faces and then render it to the object!</p> </li> </ul>"},{"location":"graphics/opengl_advanced/#advanced-glsl","title":"Advanced GLSL","text":"<ul> <li> <p>set the point size.</p> <pre><code>// need to enable it.\nglEnable(GL_PROGRAM_POINT_SIZE);\n</code></pre> <p>use in vertex shader:</p> <pre><code>void main() {\n    gl_Position = projection * view * model * vec4(aPos, 1.0);    \n    gl_PointSize = gl_Position.z; // float, further points are larger.\n}\n</code></pre> </li> </ul> <ul> <li> <p>get fragment coordinate:</p> <pre><code>void main() {             \n    if (gl_FragCoord.x &lt; 400) // vec3, Read-only!\n        FragColor = vec4(1.0, 0.0, 0.0, 1.0); // left helf screen is Red\n    else\n        FragColor = vec4(0.0, 1.0, 0.0, 1.0); // right half screen is Green\n}\n</code></pre> </li> </ul> <ul> <li> <p>manually set fragment depth</p> <pre><code>void main() {\n    gl_FragDepth = 0.0; // float, writable, default value is gl_FragCoord.z \n}\n</code></pre> <p>This will disable early depth testing !!!</p> </li> </ul> <ul> <li> <p>get face direction</p> <pre><code>void main() {             \n    // use different texture for front and back faces.\n    if(gl_FrontFacing) // bool, is front-facing\n        FragColor = texture(frontTexture, TexCoords);\n    else\n        FragColor = texture(backTexture, TexCoords);\n}\n</code></pre> </li> </ul> <ul> <li> <p>interface block</p> <p>like define a struct for in / out.</p> <pre><code>#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec2 aTexCoords;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\n// define a block \nout VS_OUT {\n    vec2 TexCoords;\n} vs_out; // initialize it.\n\nvoid main() {\n    gl_Position = projection * view * model * vec4(aPos, 1.0);    \n    vs_out.TexCoords = aTexCoords;\n}  \n</code></pre> <pre><code>#version 330 core\nout vec4 FragColor;\n\n// recieve a block, must have the same definition !\nin VS_OUT {\n    vec2 TexCoords;\n} fs_in; // but the instance name can change.\n\nuniform sampler2D texture;\n\nvoid main() {             \n    FragColor = texture(texture, fs_in.TexCoords);   \n}\n</code></pre> </li> </ul> <ul> <li> <p>Uniform Buffer Object (UBO)</p> <p>like define a struct tor uniform. </p> <pre><code>#version 330 core\nlayout (location = 0) in vec3 aPos;\n\nlayout (std140) uniform Matrices {\n    mat4 projection;\n    mat4 view;\n};\nuniform mat4 model;\n\nvoid main() {\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n}\n</code></pre> <pre><code>unsigned int uniformBlockIndexRed    = glGetUniformBlockIndex(shaderRed.ID, \"Matrices\");\nunsigned int uniformBlockIndexGreen  = glGetUniformBlockIndex(shaderGreen.ID, \"Matrices\");\nunsigned int uniformBlockIndexBlue   = glGetUniformBlockIndex(shaderBlue.ID, \"Matrices\");\nunsigned int uniformBlockIndexYellow = glGetUniformBlockIndex(shaderYellow.ID, \"Matrices\");  \n\nglUniformBlockBinding(shaderRed.ID,    uniformBlockIndexRed, 0);\nglUniformBlockBinding(shaderGreen.ID,  uniformBlockIndexGreen, 0);\nglUniformBlockBinding(shaderBlue.ID,   uniformBlockIndexBlue, 0);\nglUniformBlockBinding(shaderYellow.ID, uniformBlockIndexYellow, 0);\n\nunsigned int uboMatrices\nglGenBuffers(1, &amp;uboMatrices);\nglBindBuffer(GL_UNIFORM_BUFFER, uboMatrices);\nglBufferData(GL_UNIFORM_BUFFER, 2 * sizeof(glm::mat4), NULL, GL_STATIC_DRAW);\nglBindBuffer(GL_UNIFORM_BUFFER, 0);\nglBindBufferRange(GL_UNIFORM_BUFFER, 0, uboMatrices, 0, 2 * sizeof(glm::mat4));\n\nglm::mat4 projection = glm::perspective(glm::radians(45.0f), (float)width/(float)height, 0.1f, 100.0f);\nglBindBuffer(GL_UNIFORM_BUFFER, uboMatrices);\nglBufferSubData(GL_UNIFORM_BUFFER, 0, sizeof(glm::mat4), glm::value_ptr(projection));\nglBindBuffer(GL_UNIFORM_BUFFER, 0);\n\nglm::mat4 view = camera.GetViewMatrix();           \nglBindBuffer(GL_UNIFORM_BUFFER, uboMatrices);\nglBufferSubData(GL_UNIFORM_BUFFER, sizeof(glm::mat4), sizeof(glm::mat4), glm::value_ptr(view));\nglBindBuffer(GL_UNIFORM_BUFFER, 0);\n\n// ... \u7ed8\u5236\u7ea2\u8272\u7acb\u65b9\u4f53\nglBindVertexArray(cubeVAO);\nshaderRed.use();\nglm::mat4 model;\nmodel = glm::translate(model, glm::vec3(-0.75f, 0.75f, 0.0f));  // \u79fb\u52a8\u5230\u5de6\u4e0a\u89d2\nshaderRed.setMat4(\"model\", model);\nglDrawArrays(GL_TRIANGLES, 0, 36);        \n// ... \u7ed8\u5236\u7eff\u8272\u7acb\u65b9\u4f53\n// ... \u7ed8\u5236\u84dd\u8272\u7acb\u65b9\u4f53\n// ... \u7ed8\u5236\u9ec4\u8272\u7acb\u65b9\u4f53 \n</code></pre> </li> </ul>"},{"location":"graphics/opengl_advanced/#geometry-shader","title":"Geometry Shader","text":"<ul> <li> <p><code>Vertex Shader --&gt; [Geometry Shader] --&gt; Fragment Shader</code></p> <p>Geometry shader operates on the set of vertices for the fragment (point, lines, or triangles), and can even change the fragment type (e.g., input is point, but output is line.)</p> <p>The following example renders a point (x, y) into a horizontal line segment (x-0.1, y) to (x+0.1, y).</p> <pre><code>#version 330 core\n\n// define the input (type)\n// accepts: points, lines, lines_adjacency, triangles, triangles_adjacency.    \n// e.g., we render points.\nlayout (points) in;\n\n// define the output (type and max_vertices)\n// accepts: points, line_strip, triangle_strip \n// strip means an array, e.g., line_strip with max_vertices = 6 means 3 lines.\n// e.g., we render points into lines.\nlayout (line_strip, max_vertices = 2) out;\n\nvoid main() {    \n    /* gl_in[] is a built in struct like:\n    in gl_Vertex\n    {\n        vec4  gl_Position;\n        float gl_PointSize;\n        float gl_ClipDistance[];\n    } gl_in[];\n  */\n    gl_Position = gl_in[0].gl_Position + vec4(-0.1, 0.0, 0.0, 0.0); \n    EmitVertex(); // set output vertex 1\n\n    gl_Position = gl_in[0].gl_Position + vec4( 0.1, 0.0, 0.0, 0.0);\n    EmitVertex(); // set output vertex 2\n\n    EndPrimitive(); // set output line strip\n}\n</code></pre> <p>call it with:</p> <pre><code>// compile and link\ngeometryShader = glCreateShader(GL_GEOMETRY_SHADER);\nglShaderSource(geometryShader, 1, &amp;gShaderCode, NULL);\nglCompileShader(geometryShader);  \n...\nglAttachShader(program, geometryShader);\nglLinkProgram(program);\n\n// call\nglDrawArrays(GL_POINTS, 0, 4);\n</code></pre> </li> </ul> <ul> <li> <p>example: explode!</p> <p>use geometry shader to move each triangle along its face normal for a distance.</p> <pre><code>#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 2) in vec2 aTexCoords;\n\n// pass texCoords to geom shader\nout VS_OUT {\n    vec2 texCoords;\n} vs_out;\n\nuniform mat4 projection;\nuniform mat4 view;\nuniform mat4 model;\n\nvoid main()\n{\n    vs_out.texCoords = aTexCoords;\n    gl_Position = projection * view * model * vec4(aPos, 1.0); \n}\n</code></pre> <pre><code>#version 330 core\nlayout (triangles) in;\nlayout (triangle_strip, max_vertices = 3) out;\n\n// recieve texCoords from vert shader.\n// note we call it gs_in[], not the built in gl_in[]\nin VS_OUT {\n    vec2 texCoords;\n} gs_in[];\n\n// pass texCoords to frag shader.\nout vec2 TexCoords; \n\nuniform float time; // shader.setFloat(\"time\", glfwGetTime());\n\nvec4 explode(vec4 position, vec3 normal) {\n    float magnitude = 2.0;\n    vec3 direction = normal * ((sin(time) + 1.0) / 2.0) * magnitude; // vary with time.\n    return position + vec4(direction, 0.0);\n}\n\nvec3 GetNormal() {\n   vec3 a = vec3(gl_in[0].gl_Position) - vec3(gl_in[1].gl_Position);\n   vec3 b = vec3(gl_in[2].gl_Position) - vec3(gl_in[1].gl_Position);\n   return normalize(cross(a, b));\n}\n\nvoid main() {    \n    // face normal for the current triangle\n    vec3 normal = GetNormal();\n\n    // explode three vertices\n    gl_Position = explode(gl_in[0].gl_Position, normal);\n    TexCoords = gs_in[0].texCoords;\n    EmitVertex();\n\n    gl_Position = explode(gl_in[1].gl_Position, normal);\n    TexCoords = gs_in[1].texCoords;\n    EmitVertex();\n\n    gl_Position = explode(gl_in[2].gl_Position, normal);\n    TexCoords = gs_in[2].texCoords;\n    EmitVertex();\n\n    EndPrimitive();\n}\n</code></pre> <pre><code>#version 330 core\nout vec4 FragColor;\n\n// recieve from geom shader.\nin vec2 TexCoords;\n\nuniform sampler2D texture_diffuse1;\n\nvoid main() {\n    FragColor = texture(texture_diffuse1, TexCoords);\n}\n</code></pre> </li> </ul> <ul> <li> <p>example: draw normals.</p> <pre><code>#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec3 aNormal;\n\nout VS_OUT {\n    vec3 normal;\n} vs_out;\n\nuniform mat4 projection;\nuniform mat4 view;\nuniform mat4 model;\n\nvoid main() {\n    gl_Position = projection * view * model * vec4(aPos, 1.0); \n    mat4 normalMatrix = mat4(transpose(inverse(view * model)));\n  vs_out.normal = projection * normalMatrix * vec4(aNormal, 0.0);\n}\n</code></pre> <pre><code>#version 330 core\nlayout (triangles) in;\nlayout (line_strip, max_vertices = 6) out;\n\nin VS_OUT {\n    vec3 normal;\n} gs_in[];\n\nconst float MAGNITUDE = 0.4;\n\nvoid GenerateLine(int index) {\n    gl_Position = gl_in[index].gl_Position;\n    EmitVertex();\n    gl_Position = gl_in[index].gl_Position + vec4(gs_in[index].normal, 0.0) * MAGNITUDE;\n    EmitVertex();\n    EndPrimitive();\n}\n\nvoid main() {\n    GenerateLine(0); // \u7b2c\u4e00\u4e2a\u9876\u70b9\u6cd5\u7ebf\n    GenerateLine(1); // \u7b2c\u4e8c\u4e2a\u9876\u70b9\u6cd5\u7ebf\n    GenerateLine(2); // \u7b2c\u4e09\u4e2a\u9876\u70b9\u6cd5\u7ebf\n}\n</code></pre> <pre><code>#version 330 core\nout vec4 FragColor;\n\nvoid main() {\n    FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n}\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_advanced/#instancing","title":"Instancing","text":"<ul> <li>Instancing aims to draw multiple instances of the same object within one GPU call, instead of use a for loop, so we can save CPU/GPU communication cost.</li> </ul> <ul> <li>We use <code>gl_InstanceID</code> in the vertex shader to get which instance are we drawing, so we can manipulate each instance!</li> </ul> <ul> <li> <p>Use <code>uniform</code> to manipulate instance:</p> <pre><code>#version 330 core\nlayout (location = 0) in vec2 aPos;\nlayout (location = 1) in vec3 aColor;\n\nout vec3 fColor;\n\n// define the offset for each instance\nuniform vec2 offsets[100];\n\nvoid main() {\n    // gl_InstanceID starts from 0\n    vec2 offset = offsets[gl_InstanceID];\n    gl_Position = vec4(aPos + offset, 0.0, 1.0);\n    fColor = aColor;\n}\n</code></pre> <p>draw 100 instances in one command:</p> <pre><code>// draw with `glDrawArraysInstanced / glDrawElementsInstanced\n// `100` means we draw 100 instances.\nglDrawArraysInstanced(GL_TRIANGLES, 0, 6, 100);\n</code></pre> <p>However, the amount of data we can send to uniform is limited, but we may want to draw hundreds or thousands of instances (very usual). Then we can use instanced array instead:</p> </li> </ul> <ul> <li> <p>Use Instanced Array to manipulate instance.</p> <p>Instanced Array is a vertex attribute, and will change between different instances.</p> <pre><code>#version 330 core\nlayout (location = 0) in vec2 aPos;\nlayout (location = 1) in vec3 aColor;\nlayout (location = 2) in vec2 aOffset; // the offset attribute.\n\nout vec3 fColor;\n\nvoid main() {\n    // we don't need gl_InstanceID now.\n    gl_Position = vec4(aPos + aOffset, 0.0, 1.0);\n    fColor = aColor;\n}\n</code></pre> <p>Now we move the offset to VBO:</p> <pre><code>unsigned int instanceVBO;\nglGenBuffers(1, &amp;instanceVBO);\nglBindBuffer(GL_ARRAY_BUFFER, instanceVBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(glm::vec2) * 100, &amp;translations[0], GL_STATIC_DRAW);\nglBindBuffer(GL_ARRAY_BUFFER, 0);\n\nglEnableVertexAttribArray(2);\nglBindBuffer(GL_ARRAY_BUFFER, instanceVBO);\nglVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);\nglBindBuffer(GL_ARRAY_BUFFER, 0);   \n\n// tell OpenGL when to switch to the next instance\n// `2` means attr at location = 2 is the change target \n// `1` means switch every one instance. // default is 0, so never change instance.\nglVertexAttribDivisor(2, 1);\n</code></pre> </li> </ul> <ul> <li> <p>example: astroids.</p> <pre><code>#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 2) in vec2 aTexCoords;\nlayout (location = 3) in mat4 instanceMatrix; // each instance has different transform.\n\nout vec2 TexCoords;\n\nuniform mat4 projection;\nuniform mat4 view;\n\nvoid main() {\n    gl_Position = projection * view * instanceMatrix * vec4(aPos, 1.0); \n    TexCoords = aTexCoords;\n}\n</code></pre> <pre><code>// VBO\nunsigned int buffer;\nglGenBuffers(1, &amp;buffer);\nglBindBuffer(GL_ARRAY_BUFFER, buffer);\nglBufferData(GL_ARRAY_BUFFER, amount * sizeof(glm::mat4), &amp;modelMatrices[0], GL_STATIC_DRAW);\n\nfor(unsigned int i = 0; i &lt; rock.meshes.size(); i++)\n{\n    unsigned int VAO = rock.meshes[i].VAO;\n    glBindVertexArray(VAO);\n\n    GLsizei vec4Size = sizeof(glm::vec4);\n    glEnableVertexAttribArray(3); \n    glVertexAttribPointer(3, 4, GL_FLOAT, GL_FALSE, 4 * vec4Size, (void*)0);\n    glEnableVertexAttribArray(4); \n    glVertexAttribPointer(4, 4, GL_FLOAT, GL_FALSE, 4 * vec4Size, (void*)(vec4Size));\n    glEnableVertexAttribArray(5); \n    glVertexAttribPointer(5, 4, GL_FLOAT, GL_FALSE, 4 * vec4Size, (void*)(2 * vec4Size));\n    glEnableVertexAttribArray(6); \n    glVertexAttribPointer(6, 4, GL_FLOAT, GL_FALSE, 4 * vec4Size, (void*)(3 * vec4Size));\n\n    glVertexAttribDivisor(3, 1);\n    glVertexAttribDivisor(4, 1);\n    glVertexAttribDivisor(5, 1);\n    glVertexAttribDivisor(6, 1);\n\n    glBindVertexArray(0);\n}  \n\n// draw\ninstanceShader.use();\nfor(unsigned int i = 0; i &lt; rock.meshes.size(); i++)\n{\n    glBindVertexArray(rock.meshes[i].VAO);\n    glDrawElementsInstanced(\n        GL_TRIANGLES, rock.meshes[i].indices.size(), GL_UNSIGNED_INT, 0, amount\n    );\n}\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_advanced/#anti-aliasing-aa","title":"Anti-aliasing (AA)","text":"<ul> <li>SSAA: super-resolution, render at a larger resolution and then resize. Very expensive, do not use.</li> </ul> <ul> <li> <p>MSAA: multi-sampling.</p> <p>The most common and simple AA supported by OpenGL. It is implemented in hardware, we only call the fragment shader once, but assign the result to all covered samples. So with <code>ms_rate = M</code>, the time is still \\(O(HW)\\), but the space is \\(O(MHW)\\).</p> <p>To use it, we need to change the default texture:</p> <pre><code>// enable multisample\nglEnable(GL_MULTISAMPLE);\n// use Multisample texture.\nglBindTexture(GL_TEXTURE_2D_MULTISAMPLE, tex);\n// `4` means we use 4 samples at each fragment, usually enough.\n// `GL_TRUE` says we use same sample position and count for each fragment. \nglTexImage2DMultisample(GL_TEXTURE_2D_MULTISAMPLE, 4, GL_RGB, width, height, GL_TRUE);\nglBindTexture(GL_TEXTURE_2D_MULTISAMPLE, 0);\nglFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D_MULTISAMPLE, tex, 0);\n\n// similar for multisample renderbuffer \nglRenderbufferStorageMultisample(GL_RENDERBUFFER, 4, GL_DEPTH24_STENCIL8, width, height);\n</code></pre> <p>However, multi-sampling texture doesn't support post-processing or display. We need to cast it back to a normal texture:</p> <pre><code>glBindFramebuffer(GL_READ_FRAMEBUFFER, multisampledFBO);\nglBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);\nglBlitFramebuffer(0, 0, width, height, 0, 0, width, height, GL_COLOR_BUFFER_BIT, GL_NEAREST);\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_basics/","title":"OpenGL","text":"<p>A definition of a set of APIs to call GPU to render images.</p> <p>Kudos to learnopengl !</p>"},{"location":"graphics/opengl_basics/#versions","title":"Versions","text":"<ul> <li>OpenGL &lt; 3.3: Legacy, not used now. Use fixed pipeline.</li> <li>OpenGL &gt;= 3.3: Modern. Use programmable pipeline (shaders).</li> <li>OpenGL ES: for embedded systems and webGL. (1.1 for fixed pipeline, 2.0 for programmable pipeline.)</li> <li>Vulkan (OpenGL 5, next generation GL.)</li> <li>DirectX (Not OpenGL, Windows's graphic library.)</li> </ul>"},{"location":"graphics/opengl_basics/#apis","title":"APIs","text":"<p>The way OpenGL works is like a state machine. We always call it Sequentially.</p>"},{"location":"graphics/opengl_basics/#window","title":"Window","text":"<ul> <li><code>glViewport(0, 0, 800, 600)</code>: init a window of size (800, 600).</li> <li><code>glClearColor(r, g, b, a)</code>: set the color used to clear the window (fill with this color after clear)</li> <li><code>glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)</code>: clear the window in act.</li> </ul>"},{"location":"graphics/opengl_basics/#triangles","title":"Triangles","text":"<ul> <li> <p>VBO = Vertex Buffer Object, used to save triangle vertices (coordinates).</p> <pre><code>unsigned int VBO;\n// create VBO object (we cannot access the object directly, we only have its id.)\nglGenBuffers(1, &amp;VBO); \n// bind array buffer (use this VBO buffer as ARRAY_BUFFER)\nglBindBuffer(GL_ARRAY_BUFFER, VBO); \n// copy data from vertices to buffer. \n// GL_STATIC_DRAW == const, which means vertices will (almost) never change.\n// GL_DYNAMIC_DRAW/GL_STREAM_DRAW: the data may change frequently, so better write it to faster memory.\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); \n</code></pre> </li> </ul> <ul> <li> <p>Vertex Shader: operate on vertices, should set <code>gl_Position</code>.</p> <p>Write the shader first.</p> <pre><code>// use OpenGL 3.3 core mode\n#version 330 core \n\n// define input (keyword `in`)\n// `layout (location = 0)` means aPos is passed in as the first parameter (like in a function)\nlayout (location = 0) in vec3 aPos;\n\n// the program\nvoid main() {\n    // the output (MUST!), tell OpenGL the current vertex's position. \n    // `gl_Position` is a keyword. It's vec4, and the last number is used in perspective division (x, y, z, w) -&gt; (x/w, y/w, z/w), usually we just use w = 1.\n    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n}\n</code></pre> <p>Then bind it with OpenGL:</p> <pre><code>unsigned int vertexShader;\n// we create vertex shader.\nvertexShader = glCreateShader(GL_VERTEX_SHADER);\n// pass in the source code.\nglShaderSource(vertexShader, 1, &amp;vertexShaderSource, NULL);\n// compile it.\nglCompileShader(vertexShader);\n\n// debug shader compilation:\nint  success;\nchar infoLog[512];\nglGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);\nif(!success) {\n    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n    std::cout &lt;&lt; \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" &lt;&lt; infoLog &lt;&lt; std::endl;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Fragment Shader (or Pixel Shader): handles each pixel (rasterization).</p> <p>Write the source:</p> <pre><code>#version 330 core\n\n// define output (keyword `out`)\n// we can define any output! But we need to tell OpenGL how to interpret them later (glVertexAttribPointer)\n// usually we want to output the color of the pixel.    \nout vec4 FragColor;\n\nvoid main() {\n    // just use a constant color. \n    // In GLSL, color range is [0, 1] float.\n    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n} \n</code></pre> <p>Bind with OpenGL:</p> <pre><code>unsigned int fragmentShader;\nfragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\nglShaderSource(fragmentShader, 1, &amp;fragmentShaderSource, NULL);\nglCompileShader(fragmentShader);\n</code></pre> </li> </ul> <ul> <li> <p>Shader Program: the final program that links all shaders.</p> <pre><code>unsigned int shaderProgram;\nshaderProgram = glCreateProgram();\n// attach the two shaders\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\n// link them\nglLinkProgram(shaderProgram);\n// delete shaders (since we don't need them now)\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n// activate the program\nglUseProgram(shaderProgram);\n\n\n// debug link error\nglGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);\nif(!success) {\n    glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n    ...\n}\n</code></pre> </li> </ul> <ul> <li> <p>Link vertex attribute: tell OpenGL the output of our fragment shader.</p> <pre><code>// tell OpenGL how to interpret fragment shader's `out`s.\n// `0` refers to `layout (location = 0)`, so we are telling the first `out`.\n// `3` means size of the attribute, here vec3\n// `GL_FLOAT` means datatype.\n// `GL_FALSE` means we do not normalize the out. (`GL_TRUE` will normalize it to [-1, 1] or [0, 1] if unsigned. but we usually do normalization in the shader manually.)\n// `3 * sizeof(float)` is the stride for current attr. If we have multiple `out`s, this should be the size of all `out`s !\n// `(void*)0` is the offset for current attr. If we have multiple `out`s, this should be the size of previous `out`s.\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n\n// enable the attr at location 0. by defult it's disabled.\nglEnableVertexAttribArray(0);\n</code></pre> </li> </ul> <ul> <li> <p>VAO = Vertex Array Object. It saves the vertex attribute pointers, to make it easy to switch between different VBOs.</p> <p>Without VAO, we have to define vertex attribute every time before we draw:</p> <pre><code>//// these may run multiple times\nglUseProgram(shaderProgram);\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\nglDrawArrays(GL_TRIANGLES, 0, 3); // any draw function\n</code></pre> <p></p> <pre><code>//// these are run only once at initilization!\n// generate VAO object.\nunsigned int VAO;\nglGenVertexArrays(1, &amp;VAO);\n// bind VAO.\nglBindVertexArray(VAO);\n// bind VBO and copy data.\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// tell vertex attr\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n//// these may run multiple times\nglUseProgram(shaderProgram);\n// bind VAO\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 3); // any draw function\n// unbind VAO\nglBindVertexArray(0);\n</code></pre> </li> </ul> <ul> <li> <p>EBO/IBO = Element / Index Buffer Object. This is used to avoid drawing repeated vertices (e.g., for a rectangle composed of two triangles, we don't want to draw the diagonal line twice.)</p> <pre><code>float vertices[] = {\n    0.5f, 0.5f, 0.0f,   // \u53f3\u4e0a\u89d2\n    0.5f, -0.5f, 0.0f,  // \u53f3\u4e0b\u89d2\n    -0.5f, -0.5f, 0.0f, // \u5de6\u4e0b\u89d2\n    -0.5f, 0.5f, 0.0f   // \u5de6\u4e0a\u89d2\n};\n\n// the faces, in fact.\nunsigned int indices[] = { \n    0, 1, 3, // \u7b2c\u4e00\u4e2a\u4e09\u89d2\u5f62\n    1, 2, 3  // \u7b2c\u4e8c\u4e2a\u4e09\u89d2\u5f62\n};\n\n// create EBO object\nunsigned int EBO;\nglGenBuffers(1, &amp;EBO);\n// bind buffer and copy data\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n// draw\n// `glDrawElements` draw from EBO, so we won't draw repeated vertices.\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n</code></pre> <p>Similarly, EBO can be bound to VAO for easy switching.</p> <p></p> <pre><code>//// these are run only once at initilization!\n// generate VAO object.\nunsigned int VAO;\nglGenVertexArrays(1, &amp;VAO);\n// bind VAO.\nglBindVertexArray(VAO);\n// bind VBO and copy data.\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// bind EBO and copy data.\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n// tell vertex attr\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n//// these may run multiple times\nglUseProgram(shaderProgram);\n// bind VAO (also EBO!)\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 3); // any draw function\n// unbind VAO\nglBindVertexArray(0);\n</code></pre> </li> </ul> <ul> <li> <p>wireframe mode.</p> <pre><code>// start wireframe mode\nglPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n// return to default fill mode\nglPolygonMode(GL_FRONT_AND_BACK, GL_FILL)\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_basics/#shaders","title":"Shaders","text":"<p>GLSL (OpenGL Shading Language): Small c-like programs to describe Vertex &amp; Fragment Shaders.</p> <ul> <li> <p>datatype:</p> <pre><code>//// vectors\nvecn v; // float32, n = 1,2,3,4\ndvecn v; // float64\nivecn v; // int32\nuvecn v; // uint32\n\nv.x; v.y; v.z; v.w; // get each scalar.\n\n// init\nvec2 v = vec2(0.0, 1.0);\nvec4 w = vec4(v, 2.0, 3.0);\nvec4 u = vec4(v.xyz, 1.0);\n\n// swizzling\nvec2 a;\nvec4 b = a.xyxx;\nvec3 c = b.zyw;\nvec4 d = a.xxxx + c.yxzy;\n\n// color mixing by elementwise multiply\nvec4 a = vec4(1.0, 2.0, 3.0, 4.0);\nvec4 b = vec4(0.1, 0.2, 0.3, 0.4);\nvec4 c = a * b; // vec4(0.1, 0.4, 0.9, 1.6)\nc = clamp(c, 0.0, 1.0); // vec4(0.1, 0.4, 0.9, 1.0)\n\n// other functions\nvec3 nn = normalize(n.xyz);\nvec3 c = normalize(a - b);\nfloat d = max(dot(dir1, dir2), 0.0);\n\n//// matrices\nmatn m; // float32, m = 2,3,4\n\nmat4 m;\nvec4 x = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 y = m * x; // x is treated as a column vector! [4,4] @ [4,1] = [4,1]\n\n//// struct\nstruct mat {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n}\n\nmat m; // new\nm.ambient; // access\n</code></pre> </li> </ul> <ul> <li> <p>input &amp; output</p> <p>We can pass parameters from Vertex Shader to Fragment Shader:</p> <pre><code>//// vertex shader\n#version 330 core\n\n// input\nlayout (location = 0) in vec3 aPos;\n\n// output to frag shader\nout vec4 vertexColor;\n\nvoid main() {\n    gl_Position = vec4(aPos, 1,0);\n    // assign value \n    vertexColor = vec4(0.5, 0.0, 0.0, 1.0);\n}\n</code></pre> <p>and receive it with:</p> <pre><code>//// fragment shader\n#version 330 core\n\n// recieve input (should have the same type and name !!!)\n// vertexColor is barycentric-interpolated at the current pixel.\nin vec4 vertexColor; \n// output to further pipeline.\nout vec4 FragColor;\n\nvoid main() {\n    FragColor = vertexColor;\n}\n</code></pre> </li> </ul> <ul> <li> <p>uniform (global variable passed from OpenGL directly)</p> <pre><code>//// fragment shader\n#version 330 core\nout vec4 FragColor;\n\n// define uniforms, should be set in OpenGL code\n// since we link all shaders, do not use same uniform names at vert &amp; frag shaders !\nuniform vec4 ourColor; \n\nvoid main() {\n    FragColor = ourColor;\n}\n</code></pre> <p>and we can set it with:</p> <pre><code>// locate the uniform with name\nint vertexColorLocation = glGetUniformLocation(shaderProgram, \"ourColor\");\n// must first use program!\nglUseProgram(shaderProgram);\n// set uniform (4f means 4 float values)\n// glUniform[ni, nf, nui, fv]\nglUniform4f(vertexColorLocation, 0.0f, 1.0f, 0.0f, 1.0f);\n\n/// to set uniform for a struct, just use the name \"a.b\"\nint ambientLocation = glGetUniformLocation(shaderProgram, \"material.ambient\");\nglUniform3f(vertexColorLocation, 0.1f, 0.1f, 0.1f);\n</code></pre> <p>\u5982\u679c\u4f60\u58f0\u660e\u4e86\u4e00\u4e2auniform\u5374\u5728GLSL\u4ee3\u7801\u4e2d\u6ca1\u7528\u8fc7\uff0c\u7f16\u8bd1\u5668\u4f1a\u9759\u9ed8\u79fb\u9664\u8fd9\u4e2a\u53d8\u91cf\uff0c\u5bfc\u81f4\u6700\u540e\u7f16\u8bd1\u51fa\u7684\u7248\u672c\u4e2d\u5e76\u4e0d\u4f1a\u5305\u542b\u5b83!</p> </li> </ul> <ul> <li> <p>example of more inputs.</p> <p>shaders:</p> <pre><code>//// vertex shader\n#version 330 core\nlayout (location = 0) in vec3 aPos;   // pos\nlayout (location = 1) in vec3 aColor; // color\n\nout vec3 vertexColor; // output to fragment shader\n\nvoid main() {\n    gl_Position = vec4(aPos, 1.0);\n    vertexColor = aColor;\n}\n</code></pre> <pre><code>//// fragment shader\n#version 330 core\nout vec4 FragColor;  \nin vec3 vertexColor; // interpolated at current pixel, not the exact vertex color!\n\nvoid main() {\n    FragColor = vec4(vertexColor, 1.0);\n}\n</code></pre> <p>vertex attributes:</p> <pre><code>// pos, note the stride!\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n// color, note the offset!\nglVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3* sizeof(float)));\nglEnableVertexAttribArray(1);\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_basics/#textures","title":"Textures","text":"<ul> <li> <p>Texture can be mapped with UVs. </p> <p>The range of UV is always [0, 1], if we use out of range UV, the default warp behavior is to REPEAT the texture (equal to modulo the UV). But we can set different behavior at each axis (UV axes are called <code>s,t,r</code>, corresponding to <code>x,y,z</code>):</p> <pre><code>// set different warp behavior\n// `GL_TEXTURE_2D` means we use 2D texture\n// `GL_TEXTURE_WRAP_[S/T]` set the axis.\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); // default\n\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);\n\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE); \n\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER); // constant, need to set additional border color.\nfloat borderColor[] = { 1.0f, 1.0f, 0.0f, 1.0f };\nglTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);\n</code></pre> </li> </ul> <ul> <li> <p>Texture filtering (interpolation)</p> <pre><code>// set different filtering method\n// `GL_TEXTURE_MIN_FILTER` means the minify behavior\n// `GL_TEXTURE_MAG_FILTER` means the magnify behavior\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST); // default\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n</code></pre> <p>Mipmap filtering: Mipmap is a image pyramid at multiple resolutions. OpenGL use Mipmap to choose the proper texture resolution, to save memory and improve realism (use low resolution texture at far distance).</p> <p></p> <pre><code>// best practice in set mipmap filtering.\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR); // for minify, use mipmap for low-resolution.\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); // for magnify, do not use mipmap since we cannot super-resolution the texture.\n</code></pre> <p>OpenGL can automatically generate Mipmap with any input texture (see later load texture).</p> </li> </ul> <ul> <li> <p>load texture</p> <pre><code>// gen texture object\nunsigned int texture;\nglGenTextures(1, &amp;texture);\n// bind current texture\nglBindTexture(GL_TEXTURE_2D, texture);\n// copy data\n// `GL_TEXTURE_2D` means we use 2d texture.\n// `0` set the mipmap level, we use 0 for the original resolution.\n// `GL_RGB` is the texture data format. (other possibles are GL_RGBA, ...)\n// `width, height` are the image size.\n// `0` is always 0 (historical reason)\n// `GL_RGB` is the input texture data format.\n// `data` is the image data (in char array).\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);\n// generate mipmap\nglGenerateMipmap(GL_TEXTURE_2D);\n// free the data\nfree(data);\n</code></pre> <p>usually we should flip y axis of the image, because OpenGL use (0,0) at left-bottom, while most image loaders use (0,0) at left-top.</p> </li> </ul> <ul> <li> <p>apply texture</p> <p>we need another vertex-level input, the texture UVs.</p> <pre><code>float vertices[] = {\n//     ---- \u4f4d\u7f6e ----       ---- \u989c\u8272 ----     - \u7eb9\u7406\u5750\u6807 -\n     0.5f,  0.5f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 1.0f,   // \u53f3\u4e0a\n     0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,   // \u53f3\u4e0b\n    -0.5f, -0.5f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f,   // \u5de6\u4e0b\n    -0.5f,  0.5f, 0.0f,   1.0f, 1.0f, 0.0f,   0.0f, 1.0f    // \u5de6\u4e0a\n};\n</code></pre> <p>declare it with:</p> <pre><code>glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));\nglEnableVertexAttribArray(2);\n</code></pre> <p>input to vertex shader:</p> <pre><code>#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec3 aColor;\nlayout (location = 2) in vec2 aTexCoord; // UV\n\nout vec3 ourColor;\nout vec2 TexCoord; // pass to frag shader\n\nvoid main() {\n    gl_Position = vec4(aPos, 1.0);\n    ourColor = aColor;\n    TexCoord = aTexCoord;\n}\n</code></pre> <p>use it in fragment shader:</p> <pre><code>#version 330 core\nout vec4 FragColor;\n\nin vec3 ourColor;\nin vec2 TexCoord; // catch it (also barycentric interpolated!)\n\n// texture should be a uniform. \n// sampler[nD] is a built in datatype for texture.\n// it use the default texture automatically (0), so we don't need to glUniform it since we only have one texture.\nuniform sampler2D ourTexture;\n\nvoid main() {\n    // texture() is a build in function. It performs interpolation at TexCoord on ourTexture.\n    FragColor = texture(ourTexture, TexCoord);\n}\n</code></pre> <p>finally, draw it:</p> <pre><code>// bind texture!\n// glActiveTexture(GL_TEXTURE0); // this is run automatically, it assigns GL_TEXTURE0 to the uniform sampler2D.\nglBindTexture(GL_TEXTURE_2D, texture);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n</code></pre> </li> </ul> <ul> <li> <p>texture unit: To use multiple textures in one shader, we need to introduce texture unit.</p> <p>The default texture unit is <code>GL_TEXTURE0</code>, and OpenGL provides <code>GL_TEXTURE1, ..., GL_TEXTURE15</code>.</p> <p>We can also use add to get next texture, e.g., <code>GL_TEXTURE0 + 1</code> equals <code>GL_TEXTURE1</code>.</p> <p>examples of using multiple textures:</p> <pre><code>//// fragment shader\n#version 330 core\n...\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvoid main() {\n    // mix(a, b, x) = (1 - x) * a + x * b\n    FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);\n}\n</code></pre> <p>bind texture sequentially:</p> <pre><code>// create texture, etc\nunsigned int texture1, texture2;\n... \n//// only run once at initialization    \n// set uniforms (now we have to glUniform it)\nglUniform1i(glGetUniformLocation(shaderProgram, \"texture1\"), 0);\nglUniform1i(glGetUniformLocation(shaderProgram, \"texture2\"), 1);\n\n//// should run everytime we draw\n// bind texture    \nglActiveTexture(GL_TEXTURE0);\nglBindTexture(GL_TEXTURE_2D, texture1);\nglActiveTexture(GL_TEXTURE1);\nglBindTexture(GL_TEXTURE_2D, texture2);\n// draw\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_basics/#transformations","title":"Transformations","text":"<ul> <li> <p>we pass in transformations as <code>mat4</code> simply:</p> <pre><code>//// vertexShader\n#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec2 aTexCoord;\n\nout vec2 TexCoord;\n\n// the transform\nuniform mat4 transform;\n\nvoid main() {\n    gl_Position = transform * vec4(aPos, 1.0f);\n    TexCoord = vec2(aTexCoord.x, 1.0 - aTexCoord.y);\n}\n</code></pre> <p>assign it:</p> <pre><code>unsigned int transformLoc = glGetUniformLocation(shaderProgram, \"transform\");\n// `transformLoc` is the id.\n// `1` means we send one matrix.\n// `GL_FALSE` means do not transpose (OpenGL use column-major format! If we pass a numpy array, we should set GL_TRUE, but we prefer to still use GL_FALSE and manually transpose the numpy array instead.)\n// `glm::value_ptr(trans)` is the data, glm is also column-major.\nglUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(trans));\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_basics/#coordinate-system","title":"Coordinate system","text":"<ul> <li>OpenGL use Left-hand coordinate system.</li> </ul> <ul> <li> <p>The usual coordinate system transformations:</p> <p></p> </li> </ul> <ul> <li>NDC (Normalized Device Coordinate): range in [-1, 1], coordinates outside will be simply out of screen and not rendered. It is used in the CLIP space where perspective division is performed.</li> </ul> <ul> <li> <p>Projection.</p> <ul> <li>Orthogonal.</li> <li>Perspective.</li> </ul> </li> </ul> <ul> <li> <p>Z-buffer: display only the nearest triangle if multiple triangles overlapped.</p> <p>By default it is disabled, we usually enable it with:</p> <pre><code>// at initialization\nglEnable(GL_DEPTH_TEST);\n\n// need to clear Z-buffer at the beginning of each render loop!\nglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_basics/#camera","title":"Camera","text":"<ul> <li> <p>Yaw\uff08\u504f\u822a\u89d2\uff09, Pitch\uff08\u4fef\u4ef0\u89d2\uff09, Roll\uff08\u6eda\u8f6c\u89d2\uff09: \u4ee5\u81ea\u5df1\u4e3a\u4e2d\u5fc3\u7684\u4e09\u8f6c\u8f74\u3002</p> <p></p> </li> </ul>"},{"location":"graphics/opengl_basics/#a-complete-program-example-in-c","title":"A complete program example in C++","text":"<pre><code>#version 330 core\nout vec4 FragColor;\n\nin vec2 TexCoord;\n\n// texture samplers\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvoid main()\n{\n    // linearly interpolate between both textures (80% container, 20% awesomeface)\n    FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);\n}\n</code></pre> <pre><code>#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec2 aTexCoord;\n\nout vec2 TexCoord;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0f);\n    TexCoord = vec2(aTexCoord.x, aTexCoord.y);\n}\n</code></pre> <pre><code>#include &lt;glad/glad.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;stb_image.h&gt;\n\n#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n#include &lt;glm/gtc/type_ptr.hpp&gt;\n\n#include &lt;learnopengl/shader_m.h&gt;\n\n#include &lt;iostream&gt;\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow *window);\n\n// settings\nconst unsigned int SCR_WIDTH = 800;\nconst unsigned int SCR_HEIGHT = 600;\n\nint main()\n{\n    // glfw: initialize and configure\n    // ------------------------------\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n#ifdef __APPLE__\n    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n#endif\n\n    // glfw window creation\n    // --------------------\n    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, \"LearnOpenGL\", NULL, NULL);\n    if (window == NULL)\n    {\n        std::cout &lt;&lt; \"Failed to create GLFW window\" &lt;&lt; std::endl;\n        glfwTerminate();\n        return -1;\n    }\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n    // glad: load all OpenGL function pointers\n    // ---------------------------------------\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    {\n        std::cout &lt;&lt; \"Failed to initialize GLAD\" &lt;&lt; std::endl;\n        return -1;\n    }\n\n    // configure global opengl state\n    // -----------------------------\n    glEnable(GL_DEPTH_TEST);\n\n    // build and compile our shader zprogram\n    // ------------------------------------\n    Shader ourShader(\"6.2.coordinate_systems.vs\", \"6.2.coordinate_systems.fs\");\n\n    // set up vertex data (and buffer(s)) and configure vertex attributes\n    // ------------------------------------------------------------------\n    float vertices[] = {\n        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n         0.5f, -0.5f, -0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n        -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n\n        -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n\n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f\n    };\n    unsigned int VBO, VAO;\n    glGenVertexArrays(1, &amp;VAO);\n    glGenBuffers(1, &amp;VBO);\n\n    glBindVertexArray(VAO);\n\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\n    // position attribute\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n    // texture coord attribute\n    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n\n\n    // load and create a texture \n    // -------------------------\n    unsigned int texture1, texture2;\n    // texture 1\n    // ---------\n    glGenTextures(1, &amp;texture1);\n    glBindTexture(GL_TEXTURE_2D, texture1);\n    // set the texture wrapping parameters\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n    // set texture filtering parameters\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n    // load image, create texture and generate mipmaps\n    int width, height, nrChannels;\n    stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.\n    unsigned char *data = stbi_load(FileSystem::getPath(\"resources/textures/container.jpg\").c_str(), &amp;width, &amp;height, &amp;nrChannels, 0);\n    if (data)\n    {\n        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);\n        glGenerateMipmap(GL_TEXTURE_2D);\n    }\n    else\n    {\n        std::cout &lt;&lt; \"Failed to load texture\" &lt;&lt; std::endl;\n    }\n    stbi_image_free(data);\n    // texture 2\n    // ---------\n    glGenTextures(1, &amp;texture2);\n    glBindTexture(GL_TEXTURE_2D, texture2);\n    // set the texture wrapping parameters\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n    // set texture filtering parameters\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n    // load image, create texture and generate mipmaps\n    data = stbi_load(FileSystem::getPath(\"resources/textures/awesomeface.png\").c_str(), &amp;width, &amp;height, &amp;nrChannels, 0);\n    if (data)\n    {\n        // note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA\n        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);\n        glGenerateMipmap(GL_TEXTURE_2D);\n    }\n    else\n    {\n        std::cout &lt;&lt; \"Failed to load texture\" &lt;&lt; std::endl;\n    }\n    stbi_image_free(data);\n\n    // tell opengl for each sampler to which texture unit it belongs to (only has to be done once)\n    // -------------------------------------------------------------------------------------------\n    ourShader.use();\n    ourShader.setInt(\"texture1\", 0);\n    ourShader.setInt(\"texture2\", 1);\n\n\n    // render loop\n    // -----------\n    while (!glfwWindowShouldClose(window))\n    {\n        // input\n        // -----\n        processInput(window);\n\n        // render\n        // ------\n        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // also clear the depth buffer now!\n\n        // bind textures on corresponding texture units\n        glActiveTexture(GL_TEXTURE0);\n        glBindTexture(GL_TEXTURE_2D, texture1);\n        glActiveTexture(GL_TEXTURE1);\n        glBindTexture(GL_TEXTURE_2D, texture2);\n\n        // activate shader\n        ourShader.use();\n\n        // create transformations\n        glm::mat4 model         = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first\n        glm::mat4 view          = glm::mat4(1.0f);\n        glm::mat4 projection    = glm::mat4(1.0f);\n        model = glm::rotate(model, (float)glfwGetTime(), glm::vec3(0.5f, 1.0f, 0.0f));\n        view  = glm::translate(view, glm::vec3(0.0f, 0.0f, -3.0f));\n        projection = glm::perspective(glm::radians(45.0f), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);\n        // retrieve the matrix uniform locations\n        unsigned int modelLoc = glGetUniformLocation(ourShader.ID, \"model\");\n        unsigned int viewLoc  = glGetUniformLocation(ourShader.ID, \"view\");\n        // pass them to the shaders (3 different ways)\n        glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));\n        glUniformMatrix4fv(viewLoc, 1, GL_FALSE, &amp;view[0][0]);\n        // note: currently we set the projection matrix each frame, but since the projection matrix rarely changes it's often best practice to set it outside the main loop only once.\n        ourShader.setMat4(\"projection\", projection);\n\n        // render box\n        glBindVertexArray(VAO);\n        glDrawArrays(GL_TRIANGLES, 0, 36);\n\n\n        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)\n        // -------------------------------------------------------------------------------\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n\n    // optional: de-allocate all resources once they've outlived their purpose:\n    // ------------------------------------------------------------------------\n    glDeleteVertexArrays(1, &amp;VAO);\n    glDeleteBuffers(1, &amp;VBO);\n\n    // glfw: terminate, clearing all previously allocated GLFW resources.\n    // ------------------------------------------------------------------\n    glfwTerminate();\n    return 0;\n}\n\n// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly\n// ---------------------------------------------------------------------------------------------------------\nvoid processInput(GLFWwindow *window)\n{\n    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n}\n\n// glfw: whenever the window size changed (by OS or user resize) this callback function executes\n// ---------------------------------------------------------------------------------------------\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)\n{\n    // make sure the viewport matches the new window dimensions; note that width and \n    // height will be significantly larger than specified on retina displays.\n    glViewport(0, 0, width, height);\n}\n</code></pre>"},{"location":"graphics/opengl_lighting/","title":"Opengl lighting","text":""},{"location":"graphics/opengl_lighting/#color","title":"Color","text":"<ul> <li> <p>Why multiply mixes color:</p> <pre><code>glm::vec3 lightColor(1.0f, 1.0f, 1.0f); // white light\nglm::vec3 toyColor(1.0f, 0.5f, 0.31f); // defines the reflections\nglm::vec3 result = lightColor * toyColor; // = (1.0f, 0.5f, 0.31f); Red is totally reflected, Green is 50% reflected, ...\n\nglm::vec3 lightColor(0.0f, 1.0f, 0.0f); // green light\nglm::vec3 toyColor(1.0f, 0.5f, 0.31f);\nglm::vec3 result = lightColor * toyColor; // = (0.0f, 0.5f, 0.0f); No Red &amp; Blue light to reflect.\n</code></pre> </li> </ul> <ul> <li> <p>Let there be light!</p> <p>Create a light VAO:</p> <pre><code>unsigned int lightVAO;\nglGenVertexArrays(1, &amp;lightVAO);\nglBindVertexArray(lightVAO);\n// \u53ea\u9700\u8981\u7ed1\u5b9aVBO\u4e0d\u7528\u518d\u6b21\u8bbe\u7f6eVBO\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u7bb1\u5b50\u7684VBO\u6570\u636e\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u6b63\u786e\u7684\u7acb\u65b9\u4f53\u9876\u70b9\u6570\u636e\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\n// \u8bbe\u7f6e\u706f\u7acb\u65b9\u4f53\u7684\u9876\u70b9\u5c5e\u6027\uff08\u5bf9\u6211\u4eec\u7684\u706f\u6765\u8bf4\u4ec5\u4ec5\u53ea\u6709\u4f4d\u7f6e\u6570\u636e\uff09\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n</code></pre> </li> </ul>"},{"location":"graphics/opengl_lighting/#gamma-correction","title":"gamma correction","text":""},{"location":"graphics/pbr/","title":"Pbr","text":""},{"location":"graphics/pbr/#physically-based-rendering","title":"Physically-based Rendering","text":"<ul> <li>notations:<ul> <li>\\(\\mathbf p\\) is the shading point.</li> <li>\\(\\omega_o\\) is the outgoing view direction (shading point to eye)</li> <li>\\(\\omega_i\\) is the outgoing lighting direction (shading point to light)</li> <li>\\(\\mathbf n\\) is the normal vector</li> <li>\\(\\mathbf t = 2(\\mathbf n \\cdot \\omega_o) \\mathbf n - \\omega_o\\) is the reflective direction</li> <li>\\(\\mathbf h=\\frac {w_i + w_o} {||w_i + w_o||}\\) is the halfway vector (different from \\(\\mathbf n\\) !)</li> <li>\\(m\\) is the metalness</li> <li>\\(\\rho\\) is the roughness</li> <li>\\(\\mathbf a\\) is the ambient color (base color)</li> <li>\\(s(\\omega_i)\\) is the occlusion probability from the shading point to light.</li> </ul> </li> <li>rendering Equation:</li> </ul> \\[ \\displaylines{ \\mathbf c(\\mathbf \\omega_o) = \\int_\\Omega L(\\omega_i)f(\\omega_i, \\omega_o)(\\omega_i \\cdot \\mathbf n)d \\omega_i } \\] <ul> <li> <p>micro-facet BRDF (Cook-Torrance 1982):   $$   f(\\omega_i, \\omega_o) = (1 - m) \\frac {\\mathbf a} {\\pi} + \\frac {DFG} {4(\\omega_i \\cdot \\mathbf n)(\\omega_o \\cdot \\mathbf n)}   $$   The BRDF can be divided into diffuse + specular terms, where the specular term includes:</p> <ul> <li>F = Fresnel term</li> </ul> \\[ F_0 = m * \\mathbf a + (1 - m) * 0.04 \\\\ F = F_0 + (1 - F_0)(1-(\\mathbf h \\cdot \\omega_o))^5 \\] <ul> <li>G = Geometry term (Schlick-GGX)   $$   k = \\rho^4 / 2 \\   g(\\mathbf v) = \\frac {\\mathbf n \\cdot \\mathbf v} {k + (1 - k)\\mathbf n \\cdot \\mathbf v}\\   G = g(\\omega_o) g(\\omega_i)   $$</li> </ul> <ul> <li>D = Normal Distribution (Trowbridge-Reitz GGX)   $$   \\alpha = \\rho^2 \\   D = \\frac {\\alpha^2} {\\pi((\\mathbf n \\cdot \\mathbf h)(\\alpha^2 - 1) + 1)^2}   $$</li> </ul> </li> </ul> <ul> <li>split-sum approximation (Karis and Games 2013)   $$   \\int_\\Omega L(\\omega_i)\\frac {DFG} {4(\\omega_i \\cdot \\mathbf n)(\\omega_o \\cdot \\mathbf n)} (\\omega_i \\cdot \\mathbf n)d \\omega_i \\    = \\int_\\Omega L(\\omega_i)Dd\\omega_i \\int_\\Omega \\frac {DFG} {4(\\omega_o \\cdot \\mathbf n)} d \\omega_i \\   $$</li> </ul> <ul> <li> <p>lighting representation   $$   L(\\omega_i) = (1 - s(\\omega_i)) g_\\text{direct}(\\omega_i) +  s(\\omega_i) g_\\text{indirect}(\\omega_i, \\mathbf p) \\   s(\\omega_i) = g_\\text{occ}(\\omega_i, \\mathbf p)   $$</p> <ul> <li>direct term (from light): only dependent on the outgoing light direction.</li> <li>indirect term (from other reflective surfaces): also dependent on the current shading point.</li> </ul> </li> </ul>"},{"location":"graphics/pbr/#metallicroughness-vs-specularglossiness","title":"Metallic/Roughness v.s. Specular/Glossiness","text":"<p>Except for the common metallic-roughness model, there is also specular-glossiness model for PBR (e.g., Unity).</p> <p>Both models can be converted between: https://kcoley.github.io/glTF/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/examples/convert-between-workflows/</p> \\[ \\displaylines{ glossiness = 1 - roughness \\\\ diffuse = (1 - metallic) * basecolor \\\\  specular = metallic * basecolor \\\\ } \\] <p>A detailed documentation can be found: https://kcoley.github.io/glTF/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/</p>"},{"location":"graphics/prt/","title":"PRT","text":""},{"location":"graphics/prt/#spherical-harmonics-sh","title":"Spherical Harmonics (SH)","text":"<ul> <li>Basis Functions: A set of orthonormal functions used to represent other functions via linear combination (like Polynomial series and Fourier series.).</li> </ul> <ul> <li> <p>SH is A set of 2D basis functions \\(B_i(\\omega) = Y_l^m(\\theta,\\phi)\\) defined on the sphere. (as an analogue to 1D Fourier series.)</p> <p>the exact form is complicated:  $$ {\\displaystyle Y_{\\ell }^{m}(\\theta ,\\ \\varphi )=(-1)^{m}{\\sqrt {{(2\\ell +1) \\over 4\\pi }{(\\ell -|m|)! \\over (\\ell +|m|)!}}}\\,P_{\\ell }^{m}(\\cos {\\theta })\\,e^{im\\varphi }\\,!} \\   P_{\\ell }^{m}(x)=(1-x^{2})^{{|m|/2}}\\ {\\frac  {d^{{|m|}}}{dx^{{|m|}}}}P_{\\ell }(x)\\, \\   P_{\\ell }(x)={1 \\over 2^{\\ell }\\ell !}{d^{\\ell } \\over dx^{\\ell }}(x^{2}-1)^{l} $$</p> <p></p> </li> </ul> <ul> <li>For any function \\(f\\) defined on the sphere, we can represent it with a linear combination of SHs (usually truncated):</li> </ul> \\[ \\displaylines{   f(\\omega) = \\sum_ic_iB_i(\\omega) } \\] <p>SH property (orthonormal):</p> \\[ \\displaylines{   \\int_\\Omega B_i(\\omega)B_j(\\omega) = 0, i\\ne j \\\\   \\int_\\Omega B_i(\\omega)B_j(\\omega) = 1, i= j \\\\ } \\] <p>SH property (projection): the coefficient can be obtained with:</p> \\[ \\displaylines{   c_i = \\int_\\Omega f(\\omega)B_i(\\omega)d\\omega } \\] <ul> <li> <p>9 Parameter Approximation:</p> <p>Use the first 3 orders of SH (9 parameters) is enough for approximating diffuse BRDF.</p> <p></p> </li> </ul>"},{"location":"graphics/prt/#precomputed-radiance-transfer","title":"Precomputed Radiance Transfer","text":"<ul> <li> <p>Basic idea:</p> <ul> <li>Assume the scene is static, so only light conditions can vary.</li> </ul> <ul> <li>view the rendering function as lighting and light transport (or bounce, in fact the visibility &amp; BRDF).</li> </ul> </li> </ul> \\[ \\displaylines{     L(o) = \\int_\\Omega \\underbrace{L(i)}_{\\text{lighting}}\\underbrace{V(i)\\rho(i, o)\\max(0, n \\cdot i)}_{\\text{light transport}}di } \\] <p>* approximate lighting with SH.</p> <pre><code>* For the diffuse case, BRDF is constant so $\\rho(i,o) = \\rho$ :\n  $$\n  L = L(o) = \\rho\\int_\\Omega {L(i)} V(i)\\max(0, n \\cdot i) di \\\\\n        \\approx \\rho\\int_\\Omega \\sum c_jB_j(i)V(i)\\max(0, n \\cdot i) di \\\\\n        = \\rho\\sum c_j\\underbrace{\\int_\\Omega B_j(i)V(i)\\max(0, n \\cdot i) di}_{T_j \\text{ (pre-compute!)}} \\\\\n        =\\rho\\sum c_j T_j\n  $$\n    We need to save a vector $T_j$ for each point.\n\n    Another way to calculate it (with a more formal rendering function):\n  $$\n  L_o(p,o)=\\int_\\Omega L_i(p,i)f_r(p,i,o)\\cos\\theta_iV(p,i)di \\\\\n        \\approx \\int_\\Omega \\sum_pc_pB_p(i)\\sum_qd_qB_q(i)di \\\\\n        = \\sum_p\\sum_qc_qd_p\\int_\\Omega B_p(i)B_q(i)di \\\\\n        = \\sum_jc_jd_j\n  $$\n\n* For the glossy case, BRDF is not constant and is dependent on $(i,o)$.\n  $$\n  L(o) = \\int_\\Omega {L(i)} V(i)\\rho(i,o)\\max(0, n \\cdot i) di \\\\\n        \\approx \\sum_j c_jT_j(o) \\\\\n        \\approx \\sum_jc_j\\sum_kt_{j,k}B_k(o)\n  $$\n    Now we need to save a matrix for each point.\n</code></pre> <ul> <li> <p>SH property (rotation): any rotated SH basis function, can be represented with a linear combination of basis functions of the same level. </p> <p>So to rotate the lighting, we don't need to re-compute \\(T_j\\), but apply the rotation on \\(T_j\\).    </p> </li> </ul> <ul> <li>With PRT, rendering at each point is reduced to a dot product between a vector and another vector (diffuse) or matrix (glossy), and can be easily implemented in real-time. </li> </ul>"},{"location":"graphics/python_moderngl/","title":"moderngl","text":"<p><code>moderngl</code> supports OpenGL &gt;= 3.3.</p>"},{"location":"graphics/python_moderngl/#install","title":"install","text":"<pre><code>pip install moderngl # only headless\npip install moderngl-window # for window creation\n</code></pre>"},{"location":"graphics/python_moderngl/#troubles","title":"troubles","text":"<p>version <code>5.6</code> just fails: (maybe caused by the new <code>glcontext</code>)</p> <pre><code>(torch) tang@CIS5:~/projects/nerf_pl$ python  -m moderngl\nTraceback (most recent call last):\n  File \"/home/tang/anaconda3/envs/torch/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"/home/tang/anaconda3/envs/torch/lib/python3.6/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/home/tang/anaconda3/envs/torch/lib/python3.6/site-packages/moderngl/__main__.py\", line 50, in &lt;module&gt;\n    main()\n  File \"/home/tang/anaconda3/envs/torch/lib/python3.6/site-packages/moderngl/__main__.py\", line 33, in main\n    ctx = moderngl.create_standalone_context()\n  File \"/home/tang/anaconda3/envs/torch/lib/python3.6/site-packages/moderngl/context.py\", line 1664, in create_standalone_context\n    ctx.mglo, ctx.version_code = mgl.create_context(glversion=require, mode=mode, **settings)\nSystemError: &lt;built-in function create_context&gt; returned NULL without setting an error\n</code></pre> <p>however, version<code>5.5</code> is OK.</p>"},{"location":"graphics/python_moderngl/#example","title":"example","text":"<pre><code>import struct\nimport moderngl\n\nctx = moderngl.create_context(standalone=True)\n\nprogram = ctx.program(\n    vertex_shader=\"\"\"\n    #version 330\n\n    // Output values for the shader. They end up in the buffer.\n    out float value;\n    out float product;\n\n    void main() {\n        // Implicit type conversion from int to float will happen here\n        value = gl_VertexID;\n        product = gl_VertexID * gl_VertexID;\n    }\n    \"\"\",\n    # What out varyings to capture in our buffer!\n    varyings=[\"value\", \"product\"],\n)\n\nNUM_VERTICES = 10\n\n# We always need a vertex array in order to execute a shader program.\n# Our shader doesn't have any buffer inputs, so we give it an empty array.\nvao = ctx.vertex_array(program, [])\n\n# Create a buffer allocating room for 20 32 bit floats\nbuffer = ctx.buffer(reserve=NUM_VERTICES * 8)\n\n# Start a transform with buffer as the destination.\n# We force the vertex shader to run 10 times\nvao.transform(buffer, vertices=NUM_VERTICES)\n\n# Unpack the 20 float values from the buffer (copy from graphics memory to system memory).\n# Reading from the buffer will cause a sync (the python program stalls until the shader is done)\ndata = struct.unpack(\"20f\", buffer.read())\nfor i in range(0, 20, 2):\n    print(\"value = {}, product = {}\".format(*data[i:i+2]))\n</code></pre>"},{"location":"graphics/python_moderngl/#context","title":"Context","text":"<p>the GL Context, all the operations are called in this context.</p> <pre><code># create\nctx = moderngl.create_context()\n\n# clear the bound framebuffer\nctx.clear(red=0, green=0, blue=0, alpha=0, depth=1, ...)\n\n# viewport\nctx.viewport = (0, 0, 640, 360)\n\n# opengl version\nctx.version_code\n</code></pre>"},{"location":"graphics/python_moderngl/#primitive-modes","title":"Primitive Modes","text":"<pre><code>ctx.POINTS\nctx.LINES\nctx.LINE_LOOP\nContext.LINE_STRIP\nContext.TRIANGLES\n...\n</code></pre>"},{"location":"graphics/python_moderngl/#program","title":"program","text":"<p><code>shader</code> programs.</p> <pre><code>program = ctx.program(\n    vertex_shader=\"\"\"\n    #version 330\n\n    out float value;\n    out float product;\n\n    void main() {\n        value = gl_VertexID;\n        product = gl_VertexID * gl_VertexID;\n    }\n    \"\"\",\n    varyings=[\"value\", \"product\"],\n)\n</code></pre>"},{"location":"graphics/python_moderngl/#buffer-vbo","title":"buffer (vbo)","text":"<p>OpenGL objects that stores an array in GPU allocated by the context.</p> <p>can be used to store vertex, pixel, or framebuffer data.</p> <pre><code>vbo = ctx.buffer(data=None, reverse=0, dynamic=False)\n\nvbo.write(data, offset=0)\nvbo.clear(size=-1, offset=0) # -1 means all\nvbo.release()\n\nvbo.size\nvbo.ctx\n</code></pre>"},{"location":"graphics/python_moderngl/#vertex_array-vao","title":"vertex_array (vao)","text":"<p>describes how <code>buffer</code> is read by <code>shader</code>. </p> <pre><code># Simple version with a single buffer\nvao = ctx.vertex_array(program, buffer, \"in_position\", \"in_normal\")\n\nvao.render(mode=None, vertices=-1) # None --&gt; TRIANGLES\nvao.release()\n\nvao.mode\nvao.program\nvao.extra\n</code></pre>"},{"location":"graphics/python_moderngl/#texture","title":"Texture","text":"<p>texture contains one or more images of the same format, can be the source access from a shader, or a render target.</p> <pre><code># create\nctx.texture(size, components, data=None, samples=0, alignment=1, dtype='f1')\n\n# Reading pixel data into a bytearray\ndata = bytearray(4)\ntexture = ctx.texture((2, 2), 1)\ntexture.read_into(data)\n\n# Reading pixel data into a buffer\ndata = ctx.buffer(reserve=4)\ntexture = ctx.texture((2, 2), 1)\ntexture.read_into(data)\n\n# Write data from a moderngl Buffer\ndata = ctx.buffer(reserve=4)\ntexture = ctx.texture((2, 2), 1)\ntexture.write(data)\n\n# Write data from bytes\ndata = b'\u00ff\u00ff\u00ff\u00ff'\ntexture = ctx.texture((2, 2), 1)\ntexture.write(data)\n\n# Write to a sub-section of the texture using viewport\ntexture = ctx.texture((100, 100), 4)\n# Fill the lower left 50x50 pixels with new data\ntexture.write(data, viewport=(0, 0, 50, 50))\n</code></pre>"},{"location":"language/french/","title":"French","text":""},{"location":"language/french/#alphabet","title":"Alphabet","text":"<p>Also 26 characters, but pronounce a little different from English</p> A B C D E F G H I J K L M a be (bi) se (sei) de (di) \u0259 (er) \u025bf (aif) \u0292e (zhei) a\u0283 (ashi) i (yi) \u0292i (zhei) ka (ga) \u025bl (ailer) \u025bm (aimu) N O P Q R S T U V W X Y Z \u025bn (ainu) o pe ky (qui) \u025br (aiher) \u025bs te y (yu) ve dubl\u0259 ve iks igr\u025bk z\u025bd <p>Vowels: <code>a, e, i, o, u, y</code></p> <p>Other notations:</p> <ul> <li>\u5c16\u97f3\u7b26\uff08\u95ed\u97f3\u7b26\uff09\uff1a\u00e9</li> </ul> <ul> <li>\u949d\u97f3\u7b26\uff08\u5f00\u97f3\u7b26\uff09\uff1a\u00e0\uff0c\u00e8\uff0c\u00f9</li> </ul> <ul> <li>\u957f\u97f3\u7b26\uff1a\u00e2\uff0c\u00ea\uff0c\u00ee\uff0c\u00f4\uff0c\u00fb</li> </ul> <ul> <li>\u5206\u97f3\u7b26\uff1a\u00eb\uff0c\u00ef\uff0c\u8868\u793a\u6b64\u5143\u97f3\u9700\u8981\u548c\u524d\u9762\u7684\u97f3\u8282\u5206\u5f00\u8bfb</li> </ul> <ul> <li>\u53d8\u97f3\u7b26\uff08\u8f6f\u97f3\u7b26\uff09\uff1a\u00c7</li> </ul>"},{"location":"language/french/#pronounciation","title":"Pronounciation","text":"<ul> <li>a\uff0c\u00e0\uff0c\u00e2\u53d1\u97f3\u76f8\u540c\uff0c\u57fa\u672c\u53ea\u8bfb[a]</li> <li>e\u5728\u8f85\u97f3\u5b57\u6bcd\u524d\u901a\u5e38\u8bfb\u4f5c[\u025b]</li> <li>\u00e8\uff0c\u00ea\uff0c\u00eb\u901a\u5e38\u8bfb\u4f5c[\u025b]\uff0c\u4f46\u00e9\u8bfb\u4f5c[e]</li> <li>ai\uff0ca\u00ee\uff0cei\u901a\u5e38\u8bfb\u4f5c[\u025b]</li> <li>-et\u5728\u8bcd\u672b\u8bfb\u4f5c[\u025b]\uff0c\u4f46-er, -ez\u5728\u8bcd\u672b\u8bfb[e]</li> <li>-es\u5728\u5355\u97f3\u8282\u8bcd\u672b\u8bfb[e]\uff0c\u5982les, des, ces, mes</li> <li>gu\u8bfb\u4f5c[g]</li> <li>qu\u8bfb\u4f5c[k]\uff0c\u5982qui\u8bfb\u4f5c[ki]</li> </ul> <ul> <li>\u8bcd\u672b\u7684e\u4ee5\u53cas\uff0ct\uff0cp\uff0cx\uff0cd\u7b49\u8f85\u97f3\u901a\u5e38\u4e0d\u53d1\u97f3\u3002</li> <li>\u8bcd\u672b\u7684r\uff0cl\uff0cc\uff0cf\uff0cq\uff0c-ct\u901a\u5e38\u53d1\u97f3\u3002</li> <li>\u76f8\u540c\u4e24\u4e2a\u8f85\u97f3\u5b57\u6bcd\u53ea\u53d1\u4e00\u4e2a\u97f3\u3002</li> <li>h\u6c38\u8fdc\u4e0d\u53d1\u97f3\uff0c\u5373\u4f7f\u662f\u5728\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u3002</li> <li>i\uff0c\u00ee\uff0c\u00ef\u90fd\u8bfb[i]</li> <li>y\u8bfb\u4f5c[i]\uff0c\u5982type\u8bfb[tip]</li> </ul> <ul> <li>ou\uff0co\u00f9\uff0co\u00fb\u8bfb\u4f5c[u] (wu)</li> </ul> <ul> <li>u, \u00fb\u8bfb\u4f5c[y] (yu)</li> <li>\u91cd\u97f3\u4e00\u822c\u5728\u6700\u540e\u4e00\u4e2a\u97f3\u8282\uff0c\u4e14\u4e0d\u660e\u663e\u3002</li> </ul>"},{"location":"language/french/#words","title":"Words","text":"<p>Bonjour\uff1a\u4f60\u597d\uff08\u665a\u4e0a\u4ee5\u5916\u7684\u6253\u62db\u547c\uff09</p> <p>Bonsoir\uff1a\u665a\u4e0a\u597d</p> <p>Salut\uff1a\u4f60\u597d\uff08\u4eb2\u5bc6\uff0c\u4e5f\u53ef\u4ee5\u8868\u793a\u518d\u89c1\uff09</p> <p>\u00c7a va\uff1f\uff1a\u4f60\u597d\u5417\uff1f\uff08\u4eb2\u5bc6\uff09</p> <p>Merci\uff1a\u8c22\u8c22</p> <p>tr\u00e8s: \u975e\u5e38</p> <p>bien\uff1a\u597d</p> <p>oui/non: yes/no</p> <p>pomme: apple</p>"},{"location":"language/french/#numbers","title":"Numbers:","text":"<p>0-10: z\u00e9ro, un/une (\u9634/\u9633), deux, trois, quatre, cinq, six, sept, huit, neuf, dix</p> <p>11-20: onze, douze, treize, quatorze, quinze, seize, dix-sept, dix-huit, dix-neuf, vingt</p>"},{"location":"language/french/#grammar","title":"Grammar","text":"<ul> <li>\u5355\u590d\u6570\uff1a\u901a\u5e38\u52a0s\uff0c-eau\u5219\u52a0x\uff0c\u90fd\u4e0d\u53d1\u97f3</li> </ul> <ul> <li>\u51a0\u8bcd\uff1a<ul> <li>un/une: a\uff0c\u4e0d\u5b9a\u51a0\u8bcd\u5355\u6570</li> <li>des\uff1a\u4e0d\u5b9a\u51a0\u8bcd\u590d\u6570</li> <li>le: the\uff0c\u5b9a\u51a0\u8bcd\u5355\u6570</li> <li>les\uff1athe\uff0c\u5b9a\u51a0\u8bcd\u590d\u6570</li> </ul> </li> </ul> <ul> <li> <p>de: of</p> <p>le stylo de Charles: the pen of Charles</p> </li> </ul>"},{"location":"language/german/","title":"German","text":""},{"location":"language/german/#german","title":"German","text":""},{"location":"language/german/#alphabet","title":"Alphabet","text":"<ul> <li>CDEGPTW: add [e]</li> <li>W sounds like V, while V sounds like F.</li> <li>R is like [ehrrrr]</li> </ul> <ul> <li>S+vowel sounds like [z]</li> </ul>"},{"location":"language/german/#greetings","title":"Greetings","text":"<p>Hallo: Hello</p> <p>Guten Tag: Good Day (formal)</p> <p>Guten Morgen/Abend/Nacht: Good Morning/Evening/(Mid)Night</p>"},{"location":"latex/chinese/","title":"LaTeX for Chinese","text":"<p>use <code>XeLaTeX</code> compiler.</p> <pre><code>\\documentclass{article}\n\n\\usepackage[utf8]{inputenc} % input encoding\n\\usepackage{xeCJK} % CN: chinese support\n\\usepackage{indentfirst} % CN: indent first paragraph\n\n\\usepackage[top=1in,bottom=1in,left=1.25in,right=1.25in]{geometry} % page margin\n\\usepackage{amsmath,amsfonts,amssymb} % math\n\\usepackage{graphicx} % figures\n\\usepackage{hyperref} % hyperlinks\n\n\\usepackage{caption} % subfig\n\\usepackage{subcaption} %subfig\n\n\\renewcommand{\\refname}{\u53c2\u8003\u6587\u732e}\n\\renewcommand{\\figurename}{\u56fe}\n\\renewcommand{\\tablename}{\u8868}\n\n\\title{\u9898\u76ee}\n\\author{\u4f5c\u8005}\n\\date{\u65e5\u671f}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{\u4ecb\u7ecd}\n\n\\bibliographystyle{ieee_fullname}\n\\bibliography{ref}\n\n\\end{document}\n</code></pre>"},{"location":"latex/template/","title":"LaTeX Templates","text":""},{"location":"latex/template/#article","title":"Article","text":"<pre><code>\\documentclass{article}\n\n\\usepackage[utf8]{inputenc}\n\n\\usepackage[top=1in,bottom=1in,left=1.25in,right=1.25in]{geometry} % page margin\n\\usepackage{amsmath,amsfonts,amssymb} % math\n\\usepackage{graphicx} % figures\n\\usepackage{hyperref} % auto hyperlinks\n\n\\usepackage{url} % usage: \\url{http://}\n\n\\usepackage{caption} % subfig\n\\usepackage{subcaption} %subfig\n\n\\usepackage{multicol}\n\n\n\\title{title}\n\\author{author}\n\\date{\\today}\n\n\\begin{document}\n\\maketitle\n\n\\section{Introduction}\n\\input{introduction}\n\n\\bibliographystyle{unsrt}  % unsrt.bst\n\\bibliography{references} \n\n\\end{document}\n</code></pre>"},{"location":"latex/tutorial/","title":"LaTeX tutorial","text":""},{"location":"latex/tutorial/#compiler","title":"Compiler","text":"<ul> <li> <p>LaTeX </p> <p>only support <code>.eps, .ps</code> image formats.</p> </li> </ul> <ul> <li> <p>pdfLaTeX (default choice for English)</p> <p>supports <code>.png, .jpg, .pdf</code> image formats. </p> </li> </ul> <ul> <li> <p>XeLaTeX &amp; LuaLaTeX (if use Chinese)</p> <p>UTF-8 support. </p> <p>supports <code>.png, .jpg, .pdf</code> image formats. </p> <p>XeLaTeX supports <code>pstricks</code>(draw images with code), but LuaLaTeX doesn't.</p> </li> </ul>"},{"location":"latex/tutorial/#misc","title":"Misc.","text":"<ul> <li> <p>document class</p> <pre><code>\\documentclass{article}\n\\documentclass[a4paper,10pt]{article} % 10pt fontsize\n\\documentclass[a4paper,10pt,twoside]{article} % two-sided\n</code></pre> </li> </ul> <ul> <li> <p>page margin</p> <pre><code>\\usepackage{fullpage} % use 1in margin\n\n% or\n\\usepackage[top=1in,bottom=1in,left=1.25in,right=1.25in]{geometry}\n</code></pre> </li> </ul> <ul> <li> <p>explicit new paragraph</p> <pre><code>paragraph1 \\par\nparagraph2\n\n% same to\nparagraph1\n\nparagraph2\n</code></pre> </li> </ul> <ul> <li> <p>show frame</p> <pre><code>\\usepackage{showframe}\n\\renewcommand*\\ShowFrameColor{\\color{red}}\n</code></pre> </li> </ul> <ul> <li> <p>define new command</p> <pre><code>% \\newcommand{cmd}[args][opt]{def}\n\\newcommand{\\water}{H$_2$O}\n\nthe formula of water is \\water.\n\\water\\ is the formula of water. % latex ignore space after command, so a \\space is needed.\n\n\\newcommand{\\R}{\\mathbb{R}}\nuse \\R.\n\n\\newcommand{\\bb}[1]{\\mathbb{#1}}\nuse \\bb{R}.\n\n% \\renewcommand{cmd}[args][opt]{def}, cmd must have been defined.\n% usually used to change default behaviour.\n\\renewcommand{\\familydefault}{\\sfdefault}\n</code></pre> </li> </ul> <ul> <li> <p>force space</p> <pre><code>% manual adjust\n\\vspace{-1in}\n</code></pre> </li> </ul> <ul> <li> <p>text justification:</p> <pre><code>\\begin{center} ... \\end{center}\n\\begin{flushright} ... \\end{flushright}\n\\begin{flushleft} ... \\end{flushleft}\n</code></pre> </li> </ul> <ul> <li> <p>paragraph indentation</p> <pre><code>\\noindent % no indent for this paragraph\n</code></pre> </li> </ul> <ul> <li> <p>text decorations</p> <pre><code>\\textbf{text}\n\\underline{text}\n\\textit{text}\n\\texttt{text} % type\n</code></pre> </li> </ul> <ul> <li> <p>font size</p> <pre><code>\\tiny{text}\n\\scriptsize{text}\n\\footnotesize{text}\n\\small{text}\n\\normalsize{text}\n\\large{text}\n\\Large{text}\n\\LARGE{text}\n\\huge{text}\n\\Huge{text}\n</code></pre> </li> </ul> <ul> <li> <p>font family</p> <pre><code>% set default family\n\\renewcommand{\\familydefault}{\\sfdefault}\n</code></pre> </li> </ul> <ul> <li> <p>page size</p> <pre><code>\\usepackage[a4paper, total={6in, 8in}]{geometry}\n</code></pre> </li> </ul> <ul> <li> <p>list</p> <pre><code>% unordered\n\\begin{itemize}\n  \\item one\n  \\item two\n\\end{itemize}\n\n% ordered\n\\begin{enumerate}\n  \\item first\n  \\item second\n\\end{enumerate}\n</code></pre> </li> </ul> <ul> <li> <p>marks</p> <pre><code>\\usepackage{amssymb}\n\\checkmark\n\n% or:\n\\usepackage{pifont}\n\\newcommand{\\cmark}{\\ding{51}}\n\\newcommand{\\xmark}{\\ding{55}}\n</code></pre> </li> </ul>"},{"location":"latex/tutorial/#mathematics","title":"Mathematics","text":""},{"location":"latex/tutorial/#mode","title":"Mode","text":"<ul> <li>Inline: <code>$inline math$</code></li> </ul> <ul> <li> <p>Display: </p> <pre><code>% unnumbered\n\\[E = mc^2\\]\n\n\\begin{equation*} % asterisk = no number\nE = mc^2\n\\end{equation*}\n\n% numbered\n\\begin{equation}\nE = mc^2\n\\end{equation}\n</code></pre> </li> </ul>"},{"location":"latex/tutorial/#parentheses","title":"parentheses","text":"<pre><code>% use \\left and \\right to auto-adjust size\n\\begin{equation}\nF = G \\left( \\frac{m_1 m_2}{r^2} \\right)\n\\end{equation}\n\n% vertical bar in set\n\\begin{equation}\ns = \\left\\{ x \\middle| x &lt; 10 \\right\\}\n\\end{equation}\n\n% invisible \\right for multi-lines \n% \\notag: treat as one equation\n\\begin{align}\ns &amp; = \\left\\{ x \\middle| x &lt; 10 \\notag \\right. \\\\\n  &amp;   \\left. \\&amp; y &lt; 10 \\right\\}\n\\end{align}\n</code></pre>"},{"location":"latex/tutorial/#align-package-amsmath","title":"Align (package amsmath)","text":"<pre><code>% auto-wrap\n\\begin{multline}\np(x) = 3x^6 + 14x^5y + 590x^4y^2 + 19x^3y^3\\\\ \n- 12x^2y^4 - 12xy^5 + 2y^6 - a^3b^3\n\\end{multline}\n\n% use &amp; to align\n\\begin{align*} \n2x - 5y &amp;=  8 \\\\ \n3x + 9y &amp;=  -12\n\\end{align*}\n\n% just center multiple formulas\n\\begin{gather*} \n2x - 5y =  8 \\\\ \n3x^2 + 9y =  3a + c\n\\end{gather*}\n</code></pre>"},{"location":"latex/tutorial/#matrices","title":"Matrices","text":"<pre><code>% () parenthesis\n\\begin{pmatrix}\n1 &amp; 2 &amp; 3\\\\\na &amp; b &amp; c\n\\end{pmatrix}\n\n% [] bracket\n\\begin{bmatrix}\n1 &amp; 2 &amp; 3\\\\\na &amp; b &amp; c\n\\end{bmatrix}\n\n% {} braces\n\\begin{Bmatrix}\n1 &amp; 2 &amp; 3\\\\\na &amp; b &amp; c\n\\end{Bmatrix}\n\n% inline\n$\\begin{pmatrix}\n  a &amp; b\\\\ \n  c &amp; d\n\\end{pmatrix}$ \n\n$\\big(\\begin{smallmatrix}\n  a &amp; b\\\\\n  c &amp; d\n\\end{smallmatrix}\\big)$\n</code></pre>"},{"location":"latex/tutorial/#spacings","title":"spacings","text":"<pre><code>\\! % -3/18 quad\n\n% normal spacing\n\n\\, \\; \\: % 3,4,5/18 quad\n\\  % space in normal text\n\\quad % space equal to current font size \n\\qquad % 2 quad\n</code></pre>"},{"location":"latex/tutorial/#fonts","title":"fonts","text":"<pre><code>\\usepackage{amssymb} \n\\usepackage{amsfont}\n\n\\begin{align*}\nRQSZ \\\\\n\\mathcal{RQSZ} \\\\\n\\mathfrak{RQSZ} \\\\\n\\mathbb{RQSZ}\n\\end{align*}\n</code></pre>"},{"location":"latex/tutorial/#bibliography","title":"Bibliography","text":"<pre><code>\\bibliography{ref} % ref.bib\n\\bibliographystyle{ieeetr} % ieeetr.bst\n</code></pre>"},{"location":"latex/tutorial/#bib-file","title":"<code>.bib</code> file","text":"<pre><code>@book{DUMMY:1,\nAUTHOR=\"Who\",\nTITLE={\"Chat\"},\nYEAR=\"3200\",\n}\n</code></pre>"},{"location":"latex/tutorial/#bst-file","title":"<code>.bst</code> file","text":"<p>Bibliography style file.</p>"},{"location":"latex/tutorial/#figures","title":"Figures","text":"<pre><code>\\usepackage{graphicx}\n\n% simply insert\n\\includegraphics{universe.png}\n\n% size\n\\includegraphics[scale=1.5]{lion-logo}\n\\includegraphics[width=\\textwidth]{lion-logo}\n\\includegraphics[width=3cm, height=4cm]{lion-logo}\n\n% positioning\n% h[ere], t[op], b[ottom], p[age]\n% h!: override and force here.\n\\begin{figure}[h]\n    \\centering % default is left\n    \\includegraphics[width=8cm]{Plot}\n\\end{figure}\n\n% wrap figure alignment {l}, {r}\n\\begin{wrapfigure}{l}{0.25\\textwidth} % wrap image in text\n    \\centering \n    \\includegraphics[width=0.25\\textwidth]{contour}\n\\end{wrapfigure}\n\n% caption &amp; label\n\\begin{figure}[h]\n    \\centering\n    \\includegraphics[width=0.25\\textwidth]{mesh}\n    \\caption{a nice plot}\n    \\label{fig:mesh1}\n\\end{figure}\n\n% subfigures\n\\begin{figure}[h]\n\n\\begin{subfigure}{0.5\\textwidth}\n    \\includegraphics[width=0.9\\linewidth, height=5cm]{lion-logo} \n    \\caption{Caption1}\n    \\label{fig:subim1}\n\\end{subfigure}\n\n\\begin{subfigure}{0.5\\textwidth}\n    \\includegraphics[width=0.9\\linewidth, height=5cm]{mesh}\n    \\caption{Caption 2}\n    \\label{fig:subim2}\n\\end{subfigure}\n\n\\caption{Caption for this figure with two images}\n\\label{fig:image2}\n\\end{figure}\n</code></pre>"},{"location":"latex/tutorial/#tables","title":"Tables","text":"<pre><code>% regular table\n\\begin{table}[h]\n    \\small % fontsize\n    \\centering % centering\n    \\begin{tabular}{ccc} % 3 columns, no vertical lines\n        \\shline % thicker horizontal line\n        Method &amp; SSC mIoU(\\%) &amp; SC IoU(\\%) \\\\\n        \\hline% horizontal line\n        Baseline (Euclidean) &amp; - &amp; - \\\\\n        Cosine similarity &amp; - &amp; - \\\\\n        SWFP w/o supervision &amp; - &amp; - \\\\\n        SWFP w/ supervision &amp; - &amp; - \\\\\n        \\shline\n    \\end{tabular}\n    \\caption{Ablation study on the type of Feature Propagation Modules.}\n    \\label{tab:ablation_fp}\n\\end{table}\n\n% set column width explicitly\n% p{width}  Top-aligned cells width fixed width\n% m{width}  Middle-aligned cells width fixed width\n% b{width}  Bottom-aligned cells with fixed width\n\n\\begin{tabular}{p{0.1\\textwidth}p{0.8\\textwidth}}\n\\end{tabular}\n\n% multirow\n\\begin{tabular}{p{0.2\\textwidth}&gt;{\\centering}p{0.2\\textwidth}&gt;{\\centering}p{0.2\\textwidth}&gt;{\\centering\\arraybackslash}p{0.2\\textwidth}}\n\\hline\n\\multirow{2}{*}{Country}&amp;\\multicolumn{2}{c}{Population}&amp;\\multirow{2}{*}{Change (\\%)}\\\\\\cline{2-3}\n&amp;2016&amp;2017&amp;\\\\\n\\hline\n\\end{tabular}\n\n% multicol\n</code></pre>"},{"location":"latex/tutorial/#errors","title":"Errors","text":"<ul> <li> <p><code>undefined control sequence</code></p> <p>one of the commands is not defined. e.g. <code>\\R</code>, <code>\\Zlpha</code></p> </li> </ul>"},{"location":"latex/tutorial/#lengths","title":"Lengths","text":""},{"location":"latex/tutorial/#units","title":"Units","text":"<ul> <li>pt: point, 1pt = 0.3515mm</li> <li>mm: milimeter</li> <li>cm: centimeter</li> <li>in: inch</li> <li>ex: height of an 'x' in current font</li> <li>em: width of an 'M' in current font.</li> </ul>"},{"location":"latex/tutorial/#constants","title":"Constants","text":"<pre><code>% two-column \n\\columnsep\n\\columnwidth\n\n% line\n\\linewidth\n\\baselineskip % vertical space between lines\n\n% the whole paper\n\\paperwidth\n\\paperheight\n\n% paragraph\n\\parindent \n\\parskip \n\n% only the textarea\n\\textwidth\n\\textheight\n\n% margin\n\\topmargin\n\\evensidemargin\n\\oddsidemargin\n</code></pre>"},{"location":"latex/tutorial/#example","title":"Example","text":"<pre><code>% set figure length\n\\includegraphics[width=15ex]{figs/tmp.png\n\\includegraphics[width=\\textwidth]{figs/tmp.png} % auto scale\n\n% setlength command\n\\seglength{\\columnsep} {1in}\n</code></pre>"},{"location":"linux/advanced_bash/","title":"Advanced bash","text":""},{"location":"linux/advanced_bash/#brace-expansion","title":"brace expansion","text":"<p>https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html</p> <pre><code>echo a{b,c}d\n# abd acd\n\nmkdir tmp/{a,b}/c\n# tmp/a/c, tmp/b/c\n</code></pre>"},{"location":"linux/advanced_bash/#run-interrupt-parallel-commands","title":"run &amp; interrupt parallel commands","text":"<p>https://stackoverflow.com/questions/3004811/how-do-you-run-multiple-programs-in-parallel-from-a-bash-script</p> <pre><code># start three progx in parallel, and make sure these can be killed in one ctrl-c\n(trap 'kill 0' SIGINT; \nprog1 &amp; \nprog2 &amp; \nprog3\n)\n</code></pre> <p><code>kill 0</code>:  a special command to kill all processes in the current group (usually this means all programs started in the current shell).</p> <p>The <code>trap</code> command will wait until caught the signal <code>SIGING</code> and then call the command <code>kill 0</code>, another example:</p> <pre><code># Run something important, no Ctrl-C allowed.\n# \"\" means run nothing, thus ignore the signal.\ntrap \"\" SIGINT\nimportant_command\n\n# Less important stuff from here on out, Ctrl-C allowed.\n# - is used to reset the default behaviour\ntrap - SIGINT\nnot_so_important_command\n</code></pre>"},{"location":"linux/alternatives/","title":"update-alternatives","text":""},{"location":"linux/alternatives/#gcc-example","title":"gcc example","text":"<pre><code># install gcc/g++ 7\nsudo apt-get install -y software-properties-common\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test\nsudo apt update\nsudo apt install g++-7 -y\n\n# clear \nsudo update-alternatives --remove-all gcc \nsudo update-alternatives --remove-all g++\n\n# install (50/60 is the priority for auto mode)\n# slave g++ to gcc, so we only need to config gcc once.\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 \\\n                         --slave /usr/bin/g++ g++ /usr/bin/g++-7 \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 \\\n                         --slave /usr/bin/g++ g++ /usr/bin/g++-5 \n\n# config\nsudo update-alternatives --config gcc\n</code></pre>"},{"location":"linux/apt_dpkg/","title":"package install","text":""},{"location":"linux/apt_dpkg/#apt-package-manager","title":"apt package manager","text":"<pre><code>sudo apt install &lt;pkg&gt;\n</code></pre> <p>This will install to <code>/usr/bin</code></p> <pre><code>sudo apt remove &lt;pkg&gt; # just remove the binary, if re-installed, your configurations will be restored.\nsudo apt purge &lt;pkg&gt; # also clear everything, e.g., configuration files\n\nsudo apt show &lt;pkg&gt; # show information\n\nsudo apt list --installed\nsudo apt list --upgradable\n\napt search &lt;pkgname&gt;\n# e.g. apt search ^libxxx*\n</code></pre> <p>apt will read &amp; download sources from <code>/etc/apt/sources.list</code></p> <p>We recommend to use the TUNA mirror.</p>"},{"location":"linux/apt_dpkg/#build-from-source","title":"build from source","text":"<pre><code>wget &lt;pkg_source.tar.gz&gt;\ntar -zxvf &lt;pkg_source.tar.gz&gt;\ncd &lt;pkg_source&gt;\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n</code></pre> <p>This will install to <code>/usr/local/bin</code></p>"},{"location":"linux/apt_dpkg/#ppa","title":"PPA","text":"<p>Personal Package Achieve. To install unofficial softwires by <code>apt</code>.</p> <pre><code>sudo add-apt-repository ppa:dr-akulavich/lighttable\nsudo apt update\nsudo apt install lighttable-installer\n</code></pre> <p>This will add the PPA into <code>/etc/apt/sources.list.d</code>, which is included into <code>/etc/apt/sources.list</code>  for <code>apt update</code> to find it.</p> <p>To remove PPA and installed packages, we need <code>synaptic</code>:</p> <pre><code>sudo apt install synaptic\n</code></pre> <p>Then we can use the GUI to remove them.</p> <p>Also, we can just remove them in CLI:</p> <pre><code>sudo rm /etc/atp/sources.list.d/xxx.list*\n</code></pre> <p>Remove trusted GPG keys:</p> <pre><code># list keys\n$ sudo apt-key list\n/etc/apt/trusted.gpg\n--------------------\npub   1024D/437D05B5 2004-09-12\nuid                  Ubuntu Archive Automatic Signing Key &lt;ftpmaster@ubuntu.com&gt;\nsub   2048g/79164387 2004-09-12\n\npub   4096R/C0B21F32 2012-05-11\nuid                  Ubuntu Archive Automatic Signing Key (2012) &lt;ftpmaster@ubuntu.com&gt;\n\npub   4096R/EFE21092 2012-05-11\nuid                  Ubuntu CD Image Automatic Signing Key (2012) &lt;cdimage@ubuntu.com&gt;\n\npub   1024D/FBB75451 2004-12-30\nuid                  Ubuntu CD Image Automatic Signing Key &lt;cdimage@ubuntu.com&gt;\n\npub   2048R/BE1229CF 2015-10-28\nuid                  Microsoft (Release signing) &lt;gpgsecurity@microsoft.com&gt;\n\n/etc/apt/trusted.gpg.d/graphics-drivers_ubuntu_ppa.gpg\n------------------------------------------------------\npub   4096R/1118213C 2015-08-12\nuid                  Launchpad PPA for Graphics Drivers Team\n\n/etc/apt/trusted.gpg.d/microsoft.gpg\n------------------------------------\npub   2048R/BE1229CF 2015-10-28\nuid                  Microsoft (Release signing) &lt;gpgsecurity@microsoft.com&gt;\n\n# to delete \n$ sudo apt-key del BE1229CF\n</code></pre>"},{"location":"linux/apt_dpkg/#unmet-dependencies","title":"unmet dependencies","text":"<p>Sometimes we meet errors like:</p> <pre><code>$ sudo apt-get install xorg\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\n\nThe following packages have unmet dependencies:\n xorg : Depends: xserver-xorg (&gt;= 1:7.7+13ubuntu3)\n        Depends: libgl1-mesa-glx but it is not going to be installed or\n                 libgl1\n        Depends: libglu1-mesa but it is not going to be installed\n        Depends: x11-utils\nE: Unable to correct problems, you have held broken packages.\n</code></pre> <p>This is mainly caused by a package is installed from PPA, and we should downgrade it.</p> <p>We can use <code>aptitude</code> for further information.</p> <pre><code>$ sudo apt install aptitiude\n$ sudo aptitude install xserver-xorg-core\nThe following NEW packages will be installed:\n  libgl1-mesa-glx{ab} xserver-xorg-core\n0 packages upgraded, 2 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 1,467 kB of archives. After unpacking 4,545 kB will be used.\nThe following packages have unmet dependencies:\n libgl1-mesa-glx : Depends: libglapi-mesa (= 11.2.0-1ubuntu2) but 17.2.8-0ubuntu0~16.04.1 is installed.\nThe following actions will resolve these dependencies:\n\n     Keep the following packages at their current version:\n1)     libgl1-mesa-glx [Not Installed]\n2)     xserver-xorg-core [Not Installed]\n</code></pre> <p>Highlight: Depends: libglapi-mesa (= 11.2.0-1ubuntu2) but 17.2.8-0ubuntu0~16.04.1 is installed. </p> <p>We can manually downgrade by:</p> <pre><code>sudo apt install libglapi-mesa=11.2.0-1ubuntu2\nsudo apt install xorg # ok!\n</code></pre> <p>Or, <code>aptitude</code> will suggest you how to repair, just type <code>n</code> to select the preferred solution and type <code>Y</code>.</p>"},{"location":"linux/awk/","title":"AWK","text":"<pre><code># reserved name\n$0: the whole line\n$1, $2, ... : cells in a line\nFS: field separator, defaults to ' '\nRS: record separator, defaults to '\\n'\nNF: number of field\nNR: number of record\nOFS: output field separator, defaults to ' '\nORS: output record separator, defaults to '\\n'\n\n# FS\nawk -F '[[:space:]+]' # default\nawk -F ':' # :+ (one or more)\nawk -F '[ ,]+'\n\n# print\nawk '{print \"a\" \"b\" \"c\" $1}'\nawk '{print $3\" \"$7}'\n\n# if\nawk '{if(NR&gt;=20 &amp;&amp; NR&lt;=30){print $1}}'\n\n# operator\n# same as C/C++\n\n# regex\nawk 'if($0~/pattern/){}'\nawk '/pattern/{}' # ditto\nawk 'if($0 !~ /pattern/){}'\n\n\n# bool\nawk '($1==\"root\"){}'\n\n# variable\n# inited to 0\nawk 'BEGIN{print a++,++a}' # 0 2\nawk 'BEGIN{a=\"20b4\";print a++,++a}' # 20 22\n\n# BEGIN END\nawk 'BEGIN{count=0;} {count++;} END{print count;}'\n\n# code file\nawk -f code.txt data.txt\n\n## Applications\n# paragraph\nawk 'BEGIN{FS=\"\\n\";RS=\"\"}'\n# mean number of column\nawk '{total += $1; count++} END {print total/count}' log.txt\n</code></pre>"},{"location":"linux/awk/#references","title":"References","text":""},{"location":"linux/bash/","title":"bash","text":"<ul> <li>options<ul> <li><code>--</code>: disable further option processing.</li> <li><code>-i</code>: interactive</li> <li><code>-l</code>: login-shell</li> </ul> </li> <li><code>man [command]</code> : show manual for command </li> <li><code>apropos [reg-exp]</code>: search in the DESCRIPTION field of all manuals.</li> </ul> <ul> <li>shortcuts<ul> <li><code>ctrl-w</code> delete last word</li> <li><code>ctrl-a/e</code>: move cursor to the beginning/ending.</li> <li><code>ctrk-l</code>: clear screen</li> <li><code>alt-b/f</code>: move cursor word-wise</li> <li><code>alt-#</code>: comment the current command and run it.</li> </ul> </li> <li><code>!$</code> the parameters from the last command.</li> <li><code>pgrep -a [pattern]</code>: list processes matching pattern. (a means list-all)<ul> <li>similar to <code>ps aux | grep [pattern]</code></li> </ul> </li> <li><code>pkill [pattern]</code>: kill processes matching pattern.</li> </ul> <ul> <li> <p>traceback bash error:</p> <pre><code>set -euo pipefail\ntrap \"echo 'error: Script failed: see failed command above'\" ERR\n</code></pre> </li> </ul> <ul> <li> <p>locally move working directory:</p> <pre><code># do something in current dir\n(cd /some/other/dir &amp;&amp; other-command)\n# continue in original dir\n</code></pre> </li> </ul> <ul> <li> <p>login shells v.s. non-login shells</p> <ul> <li><code>/etc/profile, ~/.profile, ~/.bash_profile</code>: for login shells (the first process that executes under your user ID, e.g., by <code>su</code> or <code>ssh</code>)</li> <li><code>~/.bashrc</code>: for interactive non-login shells (shells started in an existing session).</li> </ul> </li> </ul> <ul> <li><code>sudo -u [user]</code>: run command as user.</li> </ul> <ul> <li> <p><code>repren</code>: batch rename</p> <ul> <li>[tbc]</li> </ul> </li> </ul> <ul> <li> <p>the fastest way to delete large amount of files:</p> <pre><code>mkdir empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; rmdir some-dir\n</code></pre> </li> </ul> <ul> <li><code>tac</code>: reversed <code>cat</code></li> </ul> <ul> <li><code>ncdu</code>: n-curses version <code>du</code>.</li> </ul> <ul> <li><code>tar xf &lt;file&gt;</code>: one command to uncompress all kind of <code>tar/tar.xz/tar.gz</code></li> </ul>"},{"location":"linux/cadaver/","title":"cadaver","text":""},{"location":"linux/cadaver/#webdav-web-distributed-authoring-and-versioning","title":"WebDAV (Web Distributed Authoring and Versioning)","text":"<p>an extension of the Hypertext Transfer Protocol (HTTP) that allows clients to perform remote Web content authoring operations.</p>"},{"location":"linux/cadaver/#cadaver_1","title":"cadaver","text":"<p>A command-line WebDAV client for Unix.</p> <p>Use <code>cadaver</code> to backup data:</p> <ul> <li> <p>Setup WebDAV key</p> <p>use <code>jianguoyun</code> to register an application key.</p> </li> </ul> <ul> <li> <p>install <code>cadaver</code></p> <pre><code>sudo apt install cadaver\n</code></pre> </li> </ul> <ul> <li> <p>configurations for <code>no-passwd</code> login</p> <p>edit <code>~/.netrc</code></p> <pre><code>machine dav.jianguoyun.com\nlogin &lt;email&gt;\npassword &lt;passwd&gt;\n</code></pre> </li> </ul> <ul> <li> <p>automatic script </p> <p>edit <code>/root/backup/backup</code> and <code>chmod 777</code></p> <pre><code>#! /bin/bash\n\nmysqldump db &gt; /root/backup/db.sql\ncadaver https://dav.jianguoyun.com/dav/ &lt; /root/backup/backup_command.txt\n</code></pre> <p>edit <code>/root/backup/backup_command.txt</code></p> <pre><code>cd hawia\nput /root/backup/db.sql\nbye\n</code></pre> </li> </ul> <ul> <li> <p>setup crontab</p> <pre><code>cp /root/backup/backup /etc/cron.daily/\n</code></pre> </li> </ul>"},{"location":"linux/cmake/","title":"cmake","text":""},{"location":"linux/cmake/#update-cmake-to-320-on-ubuntu1604","title":"update cmake to 3.20 on ubuntu16.04","text":"<pre><code>wget -c https://github.com/Kitware/CMake/releases/download/v3.20.4/cmake-3.20.4.tar.gz\ntar -zxvf cmake-3.20.4.tar.gz\ncd cmake-3.20.4\n./bootstrap\nmake -j$(nproc)\nsudo make install\n</code></pre>"},{"location":"linux/conda/","title":"conda","text":""},{"location":"linux/conda/#install","title":"install","text":"<p>download the runfile from here, then simply run it with bash.</p> <ul> <li>update: <code>condas update conda</code></li> <li>uninstall: <code>rm -rf ~/anaconda</code></li> </ul>"},{"location":"linux/conda/#envs","title":"envs","text":"<pre><code># list all envs (not `conda env ls`)\nconda env list\n\n# create (not `conda env create`!)\n# -n is short for --name\nconda create -n &lt;name&gt; python=3.7 \n\n# dump env to file \n# not recommended though, it lists all packages with the exact version, but mostly we want a more concise one...\nconda list --explicit &gt; env.txt\n\n# create from file (note the `env` here...)\nconda env create --file env.txt\n\n# clone\nconda create --clone &lt;env&gt; --name &lt;name&gt;\n\n# delete (note the `env` here...)\nconda env remove -n &lt;name&gt;\n</code></pre>"},{"location":"linux/conda/#conda-file-locations","title":"conda file locations","text":"<p>In <code>.bashrc</code>:</p> <pre><code># auto matically added.\n# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/home/tang/anaconda3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/home/tang/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/home/tang/anaconda3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/home/tang/anaconda3/bin:$PATH\"\n    fi  \nfi\nunset __conda_setup\n# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;\n\n# if you want to use the anaconda libs instead of global libs:\nexport LD_LIBRARY_PATH=\"/home/tang/anaconda3/lib:${LD_LIBRARY_PATH}\"\n</code></pre> <p>The directory structures:</p> <pre><code>### the installed binaries and libraries\n# global\n~/anaconda3/bin\n~/anaconda3/lib\n# for each env\n~/anaconda3/envs/&lt;name&gt;/lib\n~/anaconda3/envs/&lt;name&gt;/bin\n\n### the installed python packages for each env\n~/anaconda3/envs/&lt;name&gt;/lib/python3.7/site-packages\n</code></pre>"},{"location":"linux/conda/#package-management","title":"package management","text":"<pre><code># install\nconda install &lt;pkg&gt; # from conda source.\npip install &lt;pkg&gt; # from pip source, but also only install to the current env\n\n# list \nconda list\n\n# update\nconda update &lt;pkg&gt;\n\n# uninstall\nconda uninstall &lt;pkg&gt;\n\n# search\nconda search &lt;pkg&gt;\n\n# export to / install from a text file\nconda list --explicit &gt; env.txt\nconda env create --file env.txt\n</code></pre>"},{"location":"linux/cron/","title":"crontab","text":""},{"location":"linux/cron/#config-files","title":"config files","text":"<pre><code># system cron jobs\n/etc/crontab\n\n/var/spool/cron.d/*\n\n/ect/cron.d/*\n\n# put a shell script under these folders will automatically do the job:\n/ect/cron.hourly/*\n/ect/cron.daily/*\n/ect/cron.weekly/*\n/ect/cron.monthly/*\n</code></pre> <p>Config formats:</p> <pre><code># each field supports single number, lists, intervals:\n# minute hour day-of-month month day-of-week command\n\n30 17 * * 1 cmd # every Monday 17:30\n0,30 17 * * 1 cmd # every Monday 17:00 and 17:30\n*/15 * * * * cmd # every 15 minutes\n\n# note day-of-week: 0=Sunday, 1=Monday, ... , 6=Saturday.\n\n# special strings:\n@reboot cmd # run once at startup\n@hourly cmd # 0 * * * *\n@daily cmd # 0 0 * * *\n@weekly cmd # 0 0 * * 0\n@monthly cmd # 0 0 1 * *\n@yearly cmd # 0 0 1 1 *\n</code></pre>"},{"location":"linux/cron/#cron-deamon","title":"cron deamon","text":"<pre><code>systemctl status cron\nsystemctl stop cron\nsystemctl restart cron\n</code></pre>"},{"location":"linux/cron/#cron-command","title":"cron command","text":"<pre><code>crontab &lt;file&gt; # use file to readin jobs.\ncrontab -e # edit per-user cron jobs\ncrontab -l # list cron jobs\ncrontab -l -u &lt;user&gt;\n</code></pre>"},{"location":"linux/cron/#log-files","title":"log files","text":"<pre><code># first place to check\n/var/log/syslog\n\n# for auth\n/var/log/auth.log\n</code></pre>"},{"location":"linux/cron/#anacron","title":"anacron","text":"<p>\u8bbe\u60f3\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff0cLinux \u670d\u52a1\u5668\u4f1a\u5728\u5468\u672b\u5173\u673a\u4e24\u5929\uff0c\u4f46\u662f\u8bbe\u5b9a\u7684\u5b9a\u65f6\u4efb\u52a1\u5927\u591a\u5728\u5468\u65e5\u65e9\u4e0a\u8fdb\u884c\uff0c\u4f46\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\uff0c\u670d\u52a1\u5668\u53c8\u5904\u4e8e\u5173\u673a\u72b6\u6001\uff0c\u5bfc\u81f4\u7cfb\u7edf\u5f88\u591a\u5b9a\u65f6\u4efb\u52a1\u65e0\u6cd5\u8fd0\u884c\u3002</p> <p>\u53c8\u6bd4\u5982\uff0c\u6211\u4eec\u9700\u8981\u5728\u51cc\u6668 5 \u70b9 05 \u5206\u6267\u884c\u7cfb\u7edf\u7684\u65e5\u5fd7\u5907\u4efd\uff0c\u4f46 Linux \u670d\u52a1\u5668\u4e0d\u662f 24 \u5c0f\u65f6\u5f00\u673a\u7684\uff0c\u5728\u665a\u4e0a\u9700\u8981\u5173\u673a\uff0c\u767d\u5929\u4e0a\u73ed\u4e4b\u540e\u624d\u4f1a\u518d\u6b21\u5f00\u673a\uff0c\u5728\u8fd9\u4e2a\u5b9a\u65f6\u4efb\u52a1\u7684\u6267\u884c\u65f6\u95f4\u6211\u4eec\u7684\u670d\u52a1\u5668\u521a\u597d\u6ca1\u6709\u5f00\u673a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b9a\u65f6\u4efb\u52a1\u5c31\u4e0d\u4f1a\u6267\u884c\u4e86\u3002anacron \u5c31\u662f\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002</p> <p>anacron \u4f1a\u4ee5 1 \u5929\u30011\u5468\u30011\u6708\u4f5c\u4e3a\u68c0\u6d4b\u5468\u671f\uff0c\u5224\u65ad\u662f\u5426\u6709\u5b9a\u65f6\u4efb\u52a1\u5728\u5173\u673a\u4e4b\u540e\u6ca1\u6709\u6267\u884c\u3002\u5982\u679c\u6709\u8fd9\u6837\u7684\u4efb\u52a1\uff0c\u90a3\u4e48 anacron \u4f1a\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u91cd\u65b0\u6267\u884c\u8fd9\u4e9b\u5b9a\u65f6\u4efb\u52a1\u3002</p> <pre><code># /etc/anacrontab: configuration file for anacron\n# See anacron(8) and anacrontab(5) for details.\nSHELL=/bin/sh\nPATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root\n#\u524d\u9762\u7684\u5185\u5bb9\u548c/etc/crontab\u7c7b\u4f3c\n#the maximal random delay added to the base delay of the jobs\nRANDOM_DELAY=45\n#\u6700\u5927\u968f\u673a\u5ef7\u8fdf\n#the jobs will be started during the following hours only\nSTART_H0URS_RANGE=3-22\n#fanacron\u7684\u6267\u884c\u65f6\u95f4\u8303\u56f4\u662f3:00~22:00\n#period in days delay in minutes job-identifier command\n1 5 cron.daily nice run-parts /etc/cron.daily\n#\u6bcf\u5929\u5f00\u673a 5 \u5206\u949f\u540e\u5c31\u68c0\u67e5 /etc/cron.daily \u76ee\u5f55\u5185\u7684\u6587\u4ef6\u662f\u5426\u88ab\u6267\u884c\uff0c\u5982\u679c\u4eca\u5929\u6ca1\u6709\u88ab\u6267\u884c\uff0c\u90a3\u5c31\u6267\u884c\n7 25 cron.weekly nice run-parts /etc/cron.weekly\n#\u6bcf\u9694 7 \u5929\u5f00\u673a\u540e 25 \u5206\u949f\u68c0\u67e5 /etc/cron.weekly \u76ee\u5f55\u5185\u7684\u6587\u4ef6\u662f\u5426\u88ab\u6267\u884c\uff0c\u5982\u679c\u4e00\u5468\u5185\u6ca1\u6709\u88ab\u6267\u884c\uff0c\u5c31\u4f1a\u6267\u884c\n\u00a9monthly 45 cron.monthly nice run-parts /etc/cron.monthly\n#\u6bcf\u9694\u4e00\u4e2a\u6708\u5f00\u673a\u540e 45 \u5206\u949f\u68c0\u67e5 /etc/cron.monthly \u76ee\u5f55\u5185\u7684\u6587\u4ef6\u662f\u5426\u88ab\u6267\u884c\uff0c\u5982\u679c\u4e00\u4e2a\u6708\u5185\u6ca1\u6709\u88ab\u6267\u884c\uff0c\u90a3\u5c31\u6267\u884c \n</code></pre>"},{"location":"linux/diff/","title":"Diff","text":"<pre><code>### diff two folder \n# -b: ignore space\n# -u: output 3 lines of unified context\n# -r: recursive\ndiff -bur folder1/ folder2 | filterdiff -i '*.py'\ndiff -bur folder1/ folder2 | filterdiff -e '*.log'\n</code></pre>"},{"location":"linux/disk/","title":"disk operation","text":"<pre><code>|-----------------------disk---------------------|\n|-----partition------|---------partition---------|\n|-----filesystem-----|---------filesystem--------|\n\nref: https://stackoverflow.com/questions/24429949/device-vs-partition-vs-file-system-vs-volume-how-do-these-concepts-relate-to-ea\n</code></pre>"},{"location":"linux/disk/#partition-table-type","title":"Partition Table Type","text":"<p>A data structure that provides basic information for the OS about the partition of the hard disk.</p> <ul> <li> <p>MBR: Master Boot Record.</p> <p>Used with the legacy BIOS firmware.</p> <p>An older standard. (only support &lt; 2T disk)</p> </li> </ul> <ul> <li> <p>GPT: GUID Partition Table</p> <p>Used with the EFI firmware. (not compatible with BIOS)</p> <p>Current default.</p> <p>GPT contains a fake MBR at the beginning of its space. This MBR shows the drive as being a single MBR partition to cope with tools which do not recognize GPT.</p> </li> </ul>"},{"location":"linux/disk/#filesystem","title":"Filesystem","text":"<p>A way of storing data inside the partitions.</p> <ul> <li> <p>EXT / EXT2 / EXT3</p> <p>older version of EXT.</p> </li> </ul> <ul> <li> <p>EXT4</p> <p>current default for Linux, Android.</p> <p>support both Windows and Linux. support &lt; 1EB = 2^20 TB.</p> </li> </ul> <ul> <li> <p>FAT</p> <p>much older, for Windows. FAT16 &lt; 4GB, FAT32 &lt; 32 GB.</p> </li> </ul> <ul> <li> <p>NTFS</p> <p>current default for Windows.</p> </li> </ul> <ul> <li> <p>exFAT</p> <p>support both Windows and Linux, usually for swap and recovery.</p> </li> </ul>"},{"location":"linux/disk/#check-disk-state-and-mount-point","title":"check disk state and mount point","text":"<ul> <li> <p><code>fdisk</code>: check all physically loaded disks</p> <pre><code>$ sudo fdisk -l\nDisk /dev/sda: 1.8 TiB, 2000398934016 bytes, 3907029168 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 4096 bytes\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\nDisklabel type: gpt\nDisk identifier: 943FD3C6-B398-4D2E-8A66-58991158B3A2\n\nDevice          Start        End    Sectors  Size Type\n/dev/sda1        2048    1050623    1048576  512M EFI System\n/dev/sda2     1050624 3905028095 3903977472  1.8T Linux filesystem\n/dev/sda3  3905028096 3907028991    2000896  977M Linux swap\n\n\nDisk /dev/sdb: 953.9 GiB, 1024209543168 bytes, 2000409264 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n\nDisk /dev/sdc: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n\nDisk /dev/sdd: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n</code></pre> <p>Linux Filesystem is where the root  <code>/</code> is mounted.</p> <p>EFI System (Extensible Firmware Interface) is used to boot the system. (UEFI firmware loads the files on the EFI System)</p> </li> </ul> <ul> <li> <p><code>mount</code> check the mount </p> <pre><code>$ mount\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nudev on /dev type devtmpfs (rw,nosuid,relatime,size=131978096k,nr_inodes=32994524,mode=755)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,noexec,relatime,size=26402968k,mode=755)\n/dev/sda2 on / type ext4 (rw,relatime,errors=remount-ro,data=ordered)\nsecurityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev)\ntmpfs on /run/lock type tmpfs (rw,nosuid,nodev,noexec,relatime,size=5120k)\ntmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,mode=755)\ncgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/lib/systemd/systemd-cgroups-agent,name=systemd)\npstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)\nefivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)\ncgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)\ncgroup on /sys/fs/cgroup/rdma type cgroup (rw,nosuid,nodev,noexec,relatime,rdma)\ncgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)\ncgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)\ncgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\ncgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)\ncgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)\ncgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)\ncgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\ncgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=35,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=55306)\ndebugfs on /sys/kernel/debug type debugfs (rw,relatime)\nmqueue on /dev/mqueue type mqueue (rw,relatime)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime,pagesize=2M)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)\nconfigfs on /sys/kernel/config type configfs (rw,relatime)\n/dev/sdb on /data2 type ext4 (rw,relatime,data=ordered)\n/dev/sdc on /data3 type ext4 (rw,relatime,data=ordered)\n/dev/sdd on /data4 type ext4 (rw,relatime,data=ordered)\n/dev/sda1 on /boot/efi type vfat (rw,relatime,fmask=0077,dmask=0077,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro)\ntmpfs on /run/user/1002 type tmpfs (rw,nosuid,nodev,relatime,size=26402968k,mode=700,uid=1002,gid=1002)\n</code></pre> <p>Note the physical disk lines:</p> <pre><code>/dev/sda2 on / type ext4 (rw,relatime,errors=remount-ro,data=ordered)\n/dev/sdb on /data2 type ext4 (rw,relatime,data=ordered)\n/dev/sdc on /data3 type ext4 (rw,relatime,data=ordered)\n/dev/sdd on /data4 type ext4 (rw,relatime,data=ordered)\n/dev/sda1 on /boot/efi type vfat \n</code></pre> </li> </ul> <ul> <li> <p><code>df</code>  only shows mounted fs and path.</p> <pre><code>$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\nudev            126G     0  126G   0% /dev\ntmpfs            26G   19M   26G   1% /run\n/dev/sda2       1.8T  1.5T  214G  88% /\ntmpfs           126G     0  126G   0% /dev/shm\ntmpfs           5.0M  4.0K  5.0M   1% /run/lock\ntmpfs           126G     0  126G   0% /sys/fs/cgroup\n/dev/sdb        939G  562G  330G  64% /data2\n/dev/sdc        917G  729G  142G  84% /data3\n/dev/sdd        917G   72M  871G   1% /data4\n/dev/sda1       511M  3.7M  508M   1% /boot/efi\ntmpfs            26G     0   26G   0% /run/user/1002\n</code></pre> </li> </ul> <ul> <li> <p><code>lsblk</code> the most clear and useful one.</p> <pre><code>$ sudo lsblk\nNAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\nsdd      8:48   0 931.5G  0 disk /data4\nsdb      8:16   0 953.9G  0 disk /data2\nsdc      8:32   0 931.5G  0 disk /data3\nsda      8:0    0   1.8T  0 disk\n\u251c\u2500sda2   8:2    0   1.8T  0 part /\n\u251c\u2500sda3   8:3    0   977M  0 part [SWAP]\n\u2514\u2500sda1   8:1    0   512M  0 part /boot/efi\n</code></pre> <p>To check if the disk is SSD or HDD (ROTAtional):</p> <pre><code>$ lsblk -d -o name,rota\nNAME ROTA\nsda     0\nsdb     0\nsdc     1\n</code></pre> <p>where ROTA == 1 means HDD, and ROTA == 0 means SSD.</p> </li> </ul>"},{"location":"linux/disk/#add-a-new-disk","title":"Add a new disk","text":"<ul> <li>Plug in the hardware</li> </ul> <ul> <li> <p>Check is it detected</p> <pre><code>sudo fdisk -l \n# should see /dev/sdb, /dev/sdc, ...\n</code></pre> </li> </ul> <ul> <li> <p>(Optional) make partitions</p> <pre><code>sudo fdisk /dev/sdb\n# &gt;&gt;&gt; p\n# &gt;&gt;&gt; n\n# ...\n</code></pre> </li> </ul> <ul> <li> <p>make filesystem</p> <pre><code>sudo mkfs -t ext4 /dev/sdb \n# sudo mkfs -t ext4 /dev/sdb1 # if partitioned\n\n# exfat is supported by both Windows and Linux, you can use it too:\nsudo apt install exfatprogs\nsudo mkfs.exfat /dev/sdb\n</code></pre> </li> </ul> <ul> <li> <p>mount</p> <pre><code>sudo mkdir /data2\nsudo mount /dev/sdb /data2\n</code></pre> </li> </ul> <ul> <li> <p>set auto-mount after reboot</p> <pre><code>sudo vim /etc/fstab\n# add a line: \n\n# &lt;disk&gt; &lt;mount&gt; &lt;filesystem&gt; &lt;option&gt; &lt;dump, should be 0&gt; &lt;pass, root disk shoule be 1, other disk should be 2&gt;\n\n/dev/sdb /data2 ext4 defaults 0 2\n</code></pre> </li> </ul> <ul> <li> <p>check auto-mount</p> <pre><code>sudo mount -av\n</code></pre> </li> </ul>"},{"location":"linux/env/","title":"Env","text":""},{"location":"linux/env/#environment","title":"Environment","text":"<p>For loading different environments from system for local user...</p>"},{"location":"linux/env/#gcc","title":"gcc","text":"<pre><code>export PATH=\"/path/to/gcc-11.2.0/bin:${PATH}\"\nexport LD_LIBRARY_PATH=\"/path/to/mpfr-4.1.0/lib:/path/to/gcc-11.2.0/lib64:${LD_LIBRARY_PATH}\"\n</code></pre>"},{"location":"linux/env/#cuda","title":"cuda","text":"<pre><code>export PATH=\"/path/to/cuda-11.8/bin:${PATH}\"\nexport LD_LIBRARY_PATH=\"/path/to/cuda-11.8/lib64:${LD_LIBRARY_PATH}\"\n</code></pre>"},{"location":"linux/ffmpeg/","title":"Ffmpeg","text":""},{"location":"linux/ffmpeg/#ffmpeg","title":"ffmpeg","text":"<pre><code>### info\nffmpeg -i in.mp4\n\n### change format\nffmpeg -i in.avi out.mp4\nffmpeg -y -i in.avi out.mp4 # overwrite\n\n### cut \n# format is hh:mm:ss\nffmpeg -i in.mp4 -ss 00:00:05 -to 00:05:15 out.mp4\n\n### crop\nffmpeg -i in.mp4 -vf \"crop=out_w:out_h:x:y\" out.mp4\n\n### rescale\nffmpeg -i in.mp4 -vf \"scale=out_w:out_h\" out.mp4\n\n### change FPS\nffmpeg -i in.mp4 -vf \"fps=fps=30\" out.mp4\nffmpeg -i in.mp4 -r 30 out.mp4\n\n### change duration\n# e.g., in.mp4 is 46s, you want it to speed up and finish in 30s\n# calculate target/current ratio 30/46=0.6521\nffmpeg -i in.mp4 -vf \"setpts=0.6521*PTS\" out.mp4\n\n### merge audio to video\nffmpeg -i in.mp4 -i aud.wav -c:v copy -c:a aac out.mp4\n\n### extract audio from video\nffmpeg -i in.mp4 -f wav -ar 16000 out.wav\n\n### extract image frames from video\nffmpeg -i in.mp4 -vf fps=25 -qmin 1 -q:v 1 -start_number 0 \"%d.jpg\"\n\n### concatenate image to video\n# for 0000, 0001, ... name convention\nffmpeg -framerate 30 -i %04d.png -vcodec libx264 -pix_fmt yuv420p out.mp4\nffmpeg -framerate 10 -pattern_type glob -i \"*.jpg\" -c:v libx264 -pix_fmt yuv420p out.mp4\n# for 0, 1, 2, ..., 10 name convention (without leading 0 paddings)\ncat $(find . -name '*.jpg' -print | sort -V) | ffmpeg -framerate 10 -i - -c:v libx264 -pix_fmt yuv420p out.mp4\n\n### compress visually-losslessly\n# crf: compression levvel, high values lead to smaller file with worse quality.\nffmpeg -i in.mp4 -c:v libx264 -crf 18 -preset veryslow -c:a copy out.mp4\n\n### concat videos sequentially\n# create a file `list.txt` containing the videos you want to concat\nfile a.mp4\nfile b.mp4\n# run\nffmpeg -safe 0 -f concat -i list.txt -c copy out.mp4\n</code></pre>"},{"location":"linux/ffmpeg/#ffplay","title":"ffplay","text":"<pre><code>ffplay [opt] &lt;input&gt;\n-x, -y : force h,w\n-fs : full screen\n-sn : disable subtitles\n-an, -vn : disable audio/vidio\n-ss : start position\n-t : duration\n-loop &lt;num&gt; : 0 means forever\n-showmode &lt;mode&gt; : 0:video, 1:waves, 2:rdft\n\n### while playing\nq, ESC\nf # fs\np, SPC # pause\nm # mute\n/, * # volume\n</code></pre>"},{"location":"linux/find/","title":"find","text":"<ul> <li> <p>find by name matching</p> <pre><code>find . -name \"*.sh\"\n\n# find multiple directories\nfind /usr /home /tmp -name \"*.sh\" \n\n# find only directories\nfind . -type d \"__pycache__\"\n\n# find only files\nfind . -type f \"*pattern*\"\n</code></pre> </li> </ul> <ul> <li> <p>list recursively with max-depth, sort output</p> <pre><code># max-depth = 2\nfind . -maxdepth 2 | sort\n</code></pre> </li> </ul> <ul> <li> <p>Replace string in all files under a folder</p> <pre><code># replace 'oldtext' to 'newtext' in all files under dir\ngrep -rl oldtext dir | xargs sed -i 's/oldtext/newtext/g'\n# or\nfind dir -type f -exec sed -i 's/oldtext/newtext/g' {} +\n</code></pre> </li> </ul> <ul> <li> <p>find all files that contain a string</p> <pre><code>grep -rnw -e 'pattern' . # in current dir\n\n# exclude\ngrep -rnw -e 'pattern' --exclude '*.py' .\n</code></pre> </li> </ul> <ul> <li> <p>delete recursively a certain patterned file</p> <pre><code># first find them and print them\nfind . -name \"pattern\" | xargs\n\n# delete them\nfind . -name \"pattern\" | xargs rm -rf\n\n# delete with exclusion\nfind . -name \"pattern\" | grep -v \"dont.delete.me\" | xargs rm -rf\n</code></pre> </li> </ul>"},{"location":"linux/gdb/","title":"gdb","text":""},{"location":"linux/gdb/#tutorial","title":"Tutorial","text":"<p>https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html</p>"},{"location":"linux/gdb/#deal-with-segmentation-fault","title":"Deal with Segmentation Fault","text":"<p>Set <code>-g</code> flag for compiler,</p> <pre><code>g++ -g -Wall -O3 ...\n</code></pre> <p>Set core dump,</p> <pre><code>ulimit -c unlimited # this should be run every time \n</code></pre> <p>Run program and got <code>Segmentation Fault (core dumped)</code>,</p> <pre><code>./god_damn_program \n# Segmentation Fault\n# a `core` should be generated in current dir\n</code></pre> <p>Run gdb,</p> <pre><code>gdb ./god_damn_program ./core\n\n$gdb info stack # show traceback\n# ctrl-d to exit\n</code></pre>"},{"location":"linux/gdb/#seg-fault-in-python-that-calls-c","title":"seg fault in python that calls c","text":"<pre><code>gdb --args python main.py\n....................\n......greetings.....\n....................\nrun\n....................\n... the seg fault...\n....................\nbt\n</code></pre>"},{"location":"linux/git/","title":"Git tutorial","text":""},{"location":"linux/git/#log-in","title":"Log in","text":"<pre><code>git config --global user.name \"ashawkey\"\ngit config --global user.email \"ashawkey1999@gmail.com\"\n\n# cache password\ngit config --global credential.helper cache\n</code></pre>"},{"location":"linux/git/#start-projects-make-changes","title":"Start Projects &amp; Make Changes","text":""},{"location":"linux/git/#file-status-lifespan","title":"file status lifespan","text":"<ul> <li>Newly created files are Untracked files\uff08\u672a\u88ab\u8ffd\u8e2a\uff09</li> <li>Modified files are inside Changes not staged for commit \uff08\u672a\u6682\u5b58\u7684\u4fee\u6539\uff09</li> <li><code>git add</code> does two things, both will make the file staged: Changes to be committed\uff08\u6682\u5b58\u533a\uff09<ul> <li>add an untracked file </li> <li>stage a modified file</li> </ul> </li> </ul> <pre><code># init\ngit init [name]\ngit clone &lt;url&gt; [name]\n\n# track/stage a file\ngit add [files]\ngit add *\ngit add --all\n\n# ignore files\n# use .gitignore\n\n# delete file\nrm [file] # remove from workspace (Changed not staged for commit)\ngit rm [file] # remove from stage &amp; workspace\ngit rm --cached [file] # only remove from stage (in case you wrongly added some data file)\n\n# rename file\ngit mv [old] [new]\n    # this equals three cmds\n    mv [old] [new]\n    git rm [old]\n    git add [new]\n\n# show changes\ngit status\ngit status -s # compressed\n\n# show detailed differences\ngit diff           # unstaged vs. workspace\ngit diff --cached  # or --staged, staged vs. workspace\n\n# commit changes\ngit commit                 # open editor \ngit config --global core.editor # set default editor\ngit commit -m \"message\" # in a line\ngit commit -a -m \"message\" # auto add all modified (tracked) files and commit (omit stage)\n</code></pre>"},{"location":"linux/git/#history","title":"History","text":"<pre><code>git log # all commits in details\ngit log -p # all commits with diff\ngit log -2 # latest 2 commits\n\ngit log --stat # in short\ngit log --oneline # simple\n\ngit log --pretty=format:\"%h %s\" --graph # tree view\ngit log --since=2.weeks\ngit log --grep=\"keyword\"\n</code></pre>"},{"location":"linux/git/#undo","title":"Undo","text":"<pre><code># amend commit\ngit commit -m \"init\"\ngit add forgotten_file\ngit commit --amend # only one commit is recorded.\n\n# unstage \ngit reset HEAD -- [file] # (changes to be commited) -&gt; (changes not staged for commit)\n\n# undo modifications\ngit checkout -- [file] # dangerous operation. all changes to [file] will be lost.\n                       # in fact this copies from the last commited state.\n</code></pre>"},{"location":"linux/git/#remote","title":"Remote","text":"<pre><code>Bob   $ git clone /home/alice/project myrepo\nAlice $ git pull /home/bob/myrepo master # merge \n\nAlice $ git fetch /home/bob/myrepo master # only fetch, don't merge\nAlice $ git log -p HEAD..FETCH_HEAD # show diff, or use gitk\n\n# two-dot: \"show everything that is reachable from the FETCH_HEAD but exclude anything that is reachable from HEAD\"\nAlice $ gitk HEAD..FETCH_HEAD # show diff\n\n# three-dot: \"show everything that is reachable from either one, but exclude anything that is reachable from both of them\".\nAlice $ gitk HEAD...FETCH_HEAD\n\n# define remote repo shorthand\nAlice $ git remote add bob /home/bob/myrepo\nAlice $ git fetch bob # bob/master\nAlice $ gitk master..bob/master\nAlice $ git merge bob/master\n\nBob   $ git pull \nBob   $ git config --get remote.origin.url\nBob   $ git branch -r\n</code></pre> <pre><code># clone from remote\ngit clone &lt;remote url&gt; [name]\n    # this equals: \n    cd [name] &amp;&amp; git init\n    git remote add &lt;remote url&gt;\n    git pull origin\n\ngit remote # see which remote servers you have configured\n           #=&gt; origin # default shortname given to the server you cloned from.\ngit remote -v # show urls of shortnames to fetch and push\n              # if you have multiple remotes, it will list all.\ngit remote show &lt;shortname&gt; # show details about a remote\n\n# add new remote\ngit remote add &lt;shortname&gt; &lt;remote url&gt;\ngit fetch &lt;shortname&gt;\n\n# rename remote\ngit remote rename &lt;oldname&gt; &lt;newname&gt;\n\n# remove remote\ngit remote remove &lt;shortname&gt;\n\n# fetch and pull\ngit fetch &lt;shortname&gt; # pull down data you don't have yet, but don't merge to locals\n                      # default is to fetch from \"origin\"\ngit pull &lt;shortname&gt; # fetch and merge\n\n# push\ngit push &lt;shortname&gt; &lt;branch&gt;\n# eg. git push origin master\n\n# merge unrelated histories (eg. different git projects)\ngit merge master --allow-unrelated-histories\n</code></pre> <p>A usual workflow:</p> <pre><code># clone\ngit clone &lt;repo&gt;\n# set upsteam\ngit remote add upstream &lt;repo&gt;\n# update \ngit fetch upstream\n# merge \ngit merge upstream/master\n# commit &amp; push\ngit commit -m \"my-update\"\ngit push origin master\n# pull request\n</code></pre>"},{"location":"linux/git/#tag","title":"Tag","text":"<pre><code>git tag\n</code></pre>"},{"location":"linux/git/#alias","title":"Alias","text":"<pre><code>git config --global alias.ci commit # git ci == git commit\ngit config --global alias.st status # git st == git status\n</code></pre>"},{"location":"linux/git/#branching","title":"Branching","text":"<p>Branch is a pointer pointing to a commit object. </p> <p>The default branch is called <code>master</code>. There is also a pointer <code>HEAD</code> pointing to your current branch.</p> <p>When you commit, the current branch (and <code>HEAD</code>) will automatically point to the new commit.</p> <p><code>checkout</code> command will point <code>HEAD</code> to the specified branch.</p> <pre><code>### create and move\ngit branch dev # create a new branch \"dev\" at the current commit object.\n\ngit log --oneline --decorate # this shows commits with branch names\ngit branch # show branch information, and where you are.\ngit branch -v # also show last commit of each branch\ngit branch --merged\ngit branch --no-merged\n\ngit checkout dev # move to \"dev\"\ngit checkout -b dev # create and move to \"dev\", equals to `git branch dev &amp;&amp; git checkout dev`\n\ngit switch dev # move to \"dev\"\ngit switch -c dev # create and move to \"dev\"\n\n### merge\ngit merge dev # merge \"dev\" into \"master\" (when no conflict)\n# if master and dev are on the same line, this is called a Fast-Forward merge, since there is no conflict to be solve, git only move master pointer to dev.\n# if master and dev are on different forks of the repo, this is called a three-source merge. git will find the diverge point (latest common ancestor) and merge three commit objects together.\n\n# when conflict\ngit status # Unmerged path, must be solved manually...\ngit mergetool\n\n# delete branch\ngit branch -d dev # safely delete merged \"dev\", only merged branch can be deleted this way.\ngit branch -D dev # forcely delete unmerged \"dev\" \n</code></pre>"},{"location":"linux/git/#remote-branching","title":"Remote Branching","text":"<pre><code>### fetch from remote server \"origin\", this will mentain a remote branch called \"origin/master\", while you work at local branch \"master\".\ngit fetch [origin]\ngit branch -r # or --remote, show remote branches\n\n# fetch and merge in one step\ngit pull [origin]\n\n# push to remote \ngit push origin master\n\n### sometimes the remote origin got a new branch \"exp\", and you want to move to that branch:\ngit fetch\ngit checkout origin/exp\n# at this time, we entered a \"detached HEAD\" mode, which means there is no branch pointing to this commit at the local machine (origin/exp is not a local branch), and only a HEAD pointer pointing here. Usually then we want to make a local branch here too.\ngit checkout -b exp # local exp branch.\ngit log --graph # finished.\n\n# one line version\ngit checkout -t origin/exp # track, equals above 2 cmds\ngit checkout exp # even simpler, equals above cmd\n\n# push to origin/exp\ngit push origin/exp exp\n</code></pre>"},{"location":"linux/git/#rebase-branch","title":"Rebase Branch","text":"<p>Another method to merge branches.</p> <p></p> <pre><code>git checkout experiment\ngit rebase master\n</code></pre> <p></p> <pre><code>git checkout master\ngit merge experiment\n</code></pre> <p></p> <p>While normal merge will generate:</p> <p></p>"},{"location":"linux/git/#ignore","title":"Ignore","text":"<p><code>.gitignore</code></p> <pre><code>workspace\n*.log\n!important.log\n</code></pre> <pre><code># ignore tracked files\ngit rm --cached &lt;file&gt;\ngit rm -r --cached &lt;folder&gt;\n</code></pre>"},{"location":"linux/git/#submodule","title":"Submodule","text":"<p>Add a repo (at <code>url</code>) to the current repo's <code>dest_path</code> as a submodule:</p> <pre><code>git submodule add &lt;submodule_url&gt; &lt;dest_path&gt;\n</code></pre> <p>This will automatically track the submodule's version by creating a <code>.gitmodules</code> file.</p>"},{"location":"linux/git/#stash","title":"Stash","text":"<p>Use situation: You want to switch to another branch, but there are uncommitted modifications in the current branch.</p> <p>If you checkout now, you'll get errors:</p> <pre><code>error: Your local changes to the following files would be overwritten by checkout:\n        .gitignore\nPlease, commit your changes or stash them before you can switch branches.\n</code></pre> <p>And if you don't want to commit, you'll need stash:</p> <pre><code>git stash\n# Saved working directory and index state WIP on main: f559623 xxx\n# HEAD is now at f559623 xxx\n\ngit status\n# now the uncommited modificaitons are reverted.\n\n# do your works now...\n# e.g., git checkout dev\n\ngit stash list\n# stash@{0}: WIP on main: f559623 xxx\n\ngit stash apply # == git stash apply stash@{0}\n# everything is back again!\n\ngit stash drop stash@{0}\n# delete the stash since it is useless now.\n</code></pre>"},{"location":"linux/git_lfs/","title":"git-lfs","text":"<p>Ref: tutorial</p>"},{"location":"linux/git_lfs/#install","title":"install","text":"<p>Download the releases and follow platform specific instructions.</p>"},{"location":"linux/git_lfs/#usage","title":"usage","text":"<pre><code># download large files under a repo using lfs.\ngit lfs pull\n\n# initalize lfs in a git repo\ngit lfs install\n\n# track certain files (png for example)\ngit lfs track *.png\n\n# then it's safe to push, it will automatically handle all pngs as lfs\ngit add *\ngit commit -m 'lfs'\ngit push\n</code></pre>"},{"location":"linux/git_tricks/","title":"Git tricks","text":""},{"location":"linux/git_tricks/#i-forget-adding-recursive-when-cloning","title":"I forget adding recursive when cloning","text":"<pre><code>git submodule update --init --recursive\n</code></pre>"},{"location":"linux/git_tricks/#add-more-things-to-the-last-commit-amend","title":"add more things to the last commit (amend)","text":"<pre><code># add the modifications\ngit add *\n# amend\ngit commit --amend --no-edit\n\n# this will also allow you to change the commit message\ngit commit --amend\n</code></pre> <p>you can also fully revert the commit and commit again</p> <pre><code>git reset --hard HEAD~1\n</code></pre>"},{"location":"linux/git_tricks/#undoreset-anything-using-reflog","title":"undo/reset anything using reflog","text":"<p><code>git reflog</code> keeps track of all your git commands, which is very useful to undo/redo.</p> <pre><code>git reflog\n# output is like:\n# c4ddb13 (HEAD -&gt; master, origin/master, origin/HEAD) HEAD@{0}: pull: Fast-forward\n# b9a8d4f HEAD@{1}: pull: Fast-forward\n# 040fa10 HEAD@{2}: pull: Fast-forward\n</code></pre> <p>Notation:</p> <ul> <li><code>HEAD</code> is the current state.</li> <li><code>HEAD~&lt;n&gt;</code> means the n-th ancestor of HEAD (back trace through commit history/graph)</li> <li><code>HEAD@{n}</code> means the n-th history command through <code>reflog</code> (it's different from ancestor!)</li> </ul> <p>After finding the aimed commit, we can reset by:</p> <pre><code># soft: revert commits (but changes are still staged, i.e., after `git add`)\ngit reset --soft &lt;commit&gt;\n\n# mixed: revert commits and unstage changes.\ngit reset --mixed &lt;commit&gt;\n\n# hard: revert commits, undo changes. Your branch will be the same as &lt;commit&gt; again.\ngit reset --hard &lt;commit&gt;\n</code></pre>"},{"location":"linux/git_tricks/#command-line-diff","title":"command line diff","text":"<p>If you cannot use VS Code or Github.</p> <pre><code># see changes (before git add)\ngit diff \n# after git add\ngit diff --staged\n</code></pre>"},{"location":"linux/git_tricks/#checkout-a-history-commit-and-also-update-all-submodules-to-the-corresponding-commits","title":"checkout a history commit, and also update all submodules to the corresponding commits","text":"<pre><code>git log # find your commit\ngit log --reverse # old-to-new history\n\ngit checkout &lt;hash&gt; # only checkout main repo\ngit submodule update --recursive # checkout all submodules too.\n</code></pre>"},{"location":"linux/git_tricks/#force-git-pull","title":"force <code>git pull</code>","text":"<pre><code># reset all changes\ngit reset --hard HEAD\n\n# WARN: this delete all untracked files &amp; dirs.\n# git clean -f -d -n # dry-run\ngit clean -f -d\n\n# pull\ngit pull\n</code></pre>"},{"location":"linux/git_tricks/#remove-a-large-file-wrongly-committed-and-left-in-git-history","title":"remove a large file wrongly committed and left in git history","text":"<p>large file, even if removed in current branch, will be left in history and every clone suffers from it.</p> <p>The best choice is never to upload any, but if you have committed, the best way is to soft reset these commits and re-commit again, although this will squash all the later commits:</p> <pre><code># find the last commit before adding the large files\ngit reflog\n\n# soft reset\ngit reset --soft &lt;commit id&gt;\n\n# delete the large files, add all other files and commit again.\nrm &lt;big_file&gt;\ngit add *\ngit commit -m 'squash commits'\n</code></pre>"},{"location":"linux/git_tricks/#embed-mp4-in-readmemd-github-only","title":"embed mp4 in readme.md (github only)","text":"<p>You just edit the markdown file in github webpage, drag and drop your mp4 video to it, and it will work.</p> <p>It only writes a URL into your markdown, but github will render it as a video:</p> <pre><code>**A GUI for training/visualizing NeRF is also available!**\n\nhttps://user-images.githubusercontent.com/25863658/155265815-c608254f-2f00-4664-a39d-e00eae51ca59.mp4\n</code></pre>"},{"location":"linux/git_tricks/#manage-remote-repo-url","title":"manage remote repo url","text":"<pre><code># change remote origin\ngit remote set-url origin [new_repo_url]\n\n# or you can add it as another remote\ngit remote set-url origin2 [new_repo_url]\ngit push -u origin2 main\n</code></pre>"},{"location":"linux/git_tricks/#un-ignore-specific-files","title":"un-ignore specific files","text":"<p>say you want to exclude everything in <code>datasets/</code> except <code>datasets/splits/*</code>.`</p> <pre><code>#datasets # this will not work!\ndatasets/* # the /* matters!\n\n!datasets/splits/\n</code></pre>"},{"location":"linux/git_tricks/#use-ssh-for-git-command-avoid-permission-denied-error","title":"use ssh for git command (avoid permission denied error)","text":"<p>You need to generate a SSH key for your machine and add it to github.</p> <pre><code>cd  ~/.ssh\nssh-keygen -t ecdsa -b 521 -C \"your_email@example.com\"\n\ncat id_ecdsa.pub\n</code></pre> <p>Then copy the public key and add it in https://github.com/settings/keys</p> <p>Now you should be able to clone through ssh!</p>"},{"location":"linux/git_tricks/#fetch-branch-from-a-forked-repo-without-clone","title":"fetch branch from a forked repo without clone","text":"<pre><code>git remote add theirusername https://github.com/theirusername/reponame\ngit fetch theirusername\ngit checkout -b mynamefortheirbranch theirusername/theirbranch\n</code></pre>"},{"location":"linux/git_tricks/#multiple-accounts-in-the-same-shell","title":"multiple accounts in the same shell","text":"<p>This happens when you want to switch to another github/gitlab account for a specific repo:</p> <ul> <li>Set local user name and email:</li> </ul> <pre><code>git config --local user.email \"subaccount@gmail.com\"\ngit config --local user.name subaccount\n</code></pre> <ul> <li>Normally init repo and commit.</li> <li>Set remote URL in this format (add <code>USERNAME@</code> before github.com!)</li> </ul> <pre><code>git remote set-url origin https://USERNAME@github.com/USERNAME/PROJECTNAME.git\n</code></pre> <ul> <li>Create a PAT through web client. (Settings &gt; developer settings &gt; personal access tokens)</li> <li>Push, enter your PAT through the GUI.</li> </ul>"},{"location":"linux/git_tricks/#art-of-merge-request","title":"art of merge request","text":"<p>In a collaborated project where you need to work on your branch, but keep updated with the main branch:</p> <pre><code># create your branch from main\ngit checkout -b mybranch\n# work on your branch and commits... maybe also push to your remote branch.\n\n# now you want to merge to main, but other people also merged many things already. \n# fetch remote changes\ngit fetch origin\n# rebase (replay) your changes to origin/main (ours are incoming)\ngit rebase origin/main\n# or origin/main's changes into your code (they are incoming), sometimes this is easier\ngit merge origin/main\n\n# now your commits and other people's commits are both applied, but this has diverged from your remote branch since rebase will add other people's commits (if you have pushed before), so you need to force update your remote branch\ngit push origin --force\n</code></pre> <p>You may want to squash your commits before rebasing:</p> <pre><code># reset to that earliest+1 commit you want to squash\ngit reset --soft HEAD~3 # go back 3 commit from head (will squash HEAD, HEAD~, HEAD~2)\ngit reset --soft &lt;commit id&gt; # will squash commits AFTER this commit\n\n# now simply commit all changes\ngit commit -m 'squash!'\n</code></pre> <p>Another case is that you are working on a branch and submitted MR to origin/main, which is squash-merged later, but you are still working on the same branch with some new commits. (The best practice is not to work on the same branch until its MR is merged, but sometimes this does happen...)</p> <p>Now the origin/main's commit history has diverged from your branch (as it contains only some of your commits but squashed). To fix this:</p> <pre><code># sync local main first\ngit checkout main\ngit fetch origin\ngit pull\n\n# create a new branch for MR\ngit checkout -b mr_branch\n\n# merge your old branch to it\ngit merge old_branch\n\n# now mr_branch contains exactly one commit from origin/main with your new commits squashed. we can submit MR with this branch now!\n</code></pre>"},{"location":"linux/git_tricks/#pushed-a-branch-with-wrong-name","title":"pushed a branch with wrong name","text":"<p>We need to create a new branch with correct name, delete the old branch and push new branch again.</p> <pre><code># rename (move) local branch\ngit branch -m &lt;correct_name&gt;\n# push it to remote\ngit push origin -u &lt;correct_name&gt;\n\n# delete a remote branch.\ngit push origin --delete &lt;wrong_name&gt; \n# delete a local branch.\ngit branch -d &lt;wrong_name&gt;\n</code></pre>"},{"location":"linux/git_tricks/#merge-part-of-your-changes-to-main","title":"merge part of your changes to main","text":"<p>This is not easy, especially if these changes are in many different commits, and between them you have commits that you do not want to merge to main.</p> <p>We need to wipe the commit history and re-commit those needed changes:</p> <pre><code># create new branch from current branch\ngit checkout -b mybranch_to_merge\n\n# make sure you have synced all changes from origin/main !!!\n# if this is impossible, at least fetch them\n\n# mixed reset to origin/main\ngit reset --mixed origin/main\n# now you see all the changes you have done, all unstaged.\n# add back those changes you want to merge, and commit\n# push to remote and create MR\n\n# if you have unmerged changes from origin/main, you may want to undo those changes\ngit checkout &lt;file/folder&gt;\n</code></pre>"},{"location":"linux/htop/","title":"htop","text":""},{"location":"linux/htop/#rank-by","title":"rank by","text":"<p>press <code>F6</code> and select.</p>"},{"location":"linux/ip/","title":"ip","text":""},{"location":"linux/ip/#basics","title":"basics","text":"<pre><code># show all network interfaces &amp; IP address\nip addr [show]\n\nip link # only show l\nip -4 addr # only ipv4\nip -6 addr # only ipv6\n</code></pre> <p>Output:</p> <pre><code>### example output of `ip addr`\n\n# loopback (127.0.0.1, ::1) \u7528\u4e8e\u672c\u4e3b\u673a\u5185\u90e8\u901a\u4fe1\u3002\n# LOWER_UP\u8868\u793a\u6709\u7f51\u7ebf\u63a5\u5165\u7f51\u7edc\u63a5\u53e3\uff0cUP\u8868\u793a\u7f51\u7edc\u63a5\u53e3\u6b63\u5728\u8fd0\u884c\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    # \u7f51\u5361 MAC\u5730\u5740 broadcast\u5730\u5740\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    # ipv4\u5730\u5740\uff08CIDR\uff09\uff0cscope host\u8868\u793a\u4ec5\u5728\u672c\u5730\u901a\u4fe1\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    # ipv6\u5730\u5740\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n# \u7b2c\u4e00\u4e2a\u7f51\u7edc\u63a5\u53e3\n2: enp129s0f0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether ac:1f:6b:27:b1:a8 brd ff:ff:ff:ff:ff:ff\n    # scope global\u8868\u793a\u5f00\u653e\u5916\u7f51\u901a\u4fe1\n    inet 222.29.2.45/24 brd 222.29.2.255 scope global enp129s0f0\n       valid_lft forever preferred_lft forever\n    # scope dynamic\u8868\u793aip\u52a8\u6001\u83b7\u53d6\n    inet6 2001:da8:201:1302:ae1f:6bff:fe27:b1a8/64 scope global mngtmpaddr dynamic\n       valid_lft 2591921sec preferred_lft 604721sec\n    # scope link\u8868\u793a\u4ec5\u5728\u5185\u7f51\u901a\u4fe1\n    inet6 fe80::ae1f:6bff:fe27:b1a8/64 scope link\n       valid_lft forever preferred_lft forever\n# \u7b2c\u4e8c\u4e2a\u7f51\u7edc\u63a5\u53e3\uff08\u672a\u63d2\u5165\u7f51\u7ebf\uff0c\u6ca1\u6709LOWER_UP\uff09\n3: enp129s0f1: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN group default qlen 1000\n    link/ether ac:1f:6b:27:b1:a9 brd ff:ff:ff:ff:ff:ff\n# docker\u7684\u7f51\u7edc\u63a5\u53e3\n4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default\n    link/ether 02:42:db:df:da:5f brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dbff:fedf:da5f/64 scope link\n       valid_lft forever preferred_lft forever\n</code></pre>"},{"location":"linux/locate/","title":"locate","text":"<pre><code># find file by name\nlocate &lt;pattern&gt;\n</code></pre> <p>This command is paired with <code>updatedb</code>, which creates a database for <code>locate</code> for fast filename search.</p> <p><code>updatedb</code> is run by <code>cron</code> everyday.</p> <p>This command is usually used to locate libraries.</p> <pre><code>locate libglog\nlocate opencv\n</code></pre>"},{"location":"linux/lscolor/","title":"ls color","text":""},{"location":"linux/lscolor/#code-to-show-it","title":"code to show it.","text":"<pre><code>#!/bin/bash\n# For LS_COLORS, print type and description in the relevant color.\n\ndeclare -A descriptions=(\n    [bd]=\"block device\"\n    [ca]=\"file with capability\"\n    [cd]=\"character device\"\n    [di]=\"directory\"\n    [do]=\"door\"\n    [ex]=\"executable file\"\n    [fi]=\"regular file\"\n    [ln]=\"symbolic link\"\n    [mh]=\"multi-hardlink\"\n    [mi]=\"missing file\"\n    [no]=\"normal non-filename text\"\n    [or]=\"orphan symlink\"\n    [ow]=\"other-writable directory\"\n    [pi]=\"named pipe, AKA FIFO\"\n    [rs]=\"reset to no color\"\n    [sg]=\"set-group-ID\"\n    [so]=\"socket\"\n    [st]=\"sticky directory\"\n    [su]=\"set-user-ID\"\n    [tw]=\"sticky and other-writable directory\"\n)\n\nIFS=:\nfor ls_color in $LS_COLORS; do\n    color=\"${ls_color#*=}\"\n    type=\"${ls_color%=*}\"\n\n    # Add description for named types.\n    desc=\"${descriptions[$type]}\"\n\n    # Separate each color with a newline.\n    if [[ $color_prev ]] &amp;&amp; [[ $color != \"$color_prev\" ]]; then\n        echo\n    fi\n\n    printf \"\\e[%sm%s%s\\e[m \" \"$color\" \"$type\" \"${desc:+ ($desc)}\"\n\n    # For next loop\n    color_prev=\"$color\"\ndone\necho\n</code></pre>"},{"location":"linux/lscolor/#default-output","title":"default output","text":""},{"location":"linux/lscolor/#other-writable-ow","title":"other-writable (o+w)","text":"<p>can be write by users other than owner.</p>"},{"location":"linux/lscolor/#sticky-bit","title":"sticky bit","text":"<p>Sticky means ONLY root or owner can delete/move this file/directory.</p> <p>It is usually used with 777, for example <code>\\tmp</code> is set to 1777.</p> <p>(All users can r/w/x their files in this directory, but cannot write other user's files.)</p> <pre><code># add sticky bit\nchmod +t &lt;dir&gt; \nchmod 1777 &lt;dir&gt;\n\n# remove sticky bit\nchmod -t &lt;dir&gt;\nchmod 0777 &lt;dir&gt;\n</code></pre>"},{"location":"linux/lscolor/#change-ls-color","title":"change ls color","text":"<p>the environment variable <code>LS_COLORS</code> takes charge of this.</p> <pre><code># default\nrs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:\n</code></pre> <p>the grammar is <code>&lt;file type&gt;=&lt;decoration&gt;;&lt;fore-ground&gt;[;&lt;back-ground&gt;]</code></p>"},{"location":"linux/lscolor/#color-code-table","title":"color code table","text":"31 = red 40  = black background 0  = default colour 32 = green 41 = red background 1  = bold 33 = orange 42 = green background 4  = underlined 34 = blue 43 = orange background 5  = flashing text 35 = purple 44 = blue background 7  = reverse fg/bg 36 = cyan 45 = purple background 8  = concealed (invisible) 37 = grey 46 = cyan background 0  = default colour 90 = dark grey 47 = grey background 1  = bold 91 = light red 100 = dark grey background 92 = light green 101 = light red background 93 = yellow 102 = light green background 94 = light blue 103 = yellow background 95 = light purple 104 = light blue background 96 = turquoise 105 = light purple background 97 = white 106 = turquoise background 107 = white background"},{"location":"linux/lscolor/#example-remove-777-shit-green","title":"example (remove 777 shit green)","text":"<pre><code># ~/.bashrc\nexport LS_COLORS=\"$LS_COLORS:ow=1;34:tw=1;34:\"\n</code></pre>"},{"location":"linux/modern_cmd/","title":"modern commands!","text":"<p>A note on https://github.com/ibraheemdev/modern-unix</p>"},{"location":"linux/modern_cmd/#zoxide-recommend","title":"<code>zoxide</code> (recommend!)","text":"<p>To replace <code>cd</code></p> <p>Install</p> <pre><code>curl -sS https://webinstall.dev/zoxide | bash\n\n# add in ~/.bashrc\neval \"$(zoxide init bash)\"\n\n# restart bash\n</code></pre> <p>Use</p> <pre><code># cd &lt;dir&gt; but auto match\nz &lt;dir&gt;\n# interactive match\nzi &lt;dir&gt;\n</code></pre>"},{"location":"linux/modern_cmd/#mcfly-recommend","title":"<code>mcfly</code>  (recommend!)","text":"<p>To replace <code>Ctrl + R</code>.</p> <p>Install:</p> <pre><code>mkdir mcfly\ncd mcfly\n\nwget -c https://github.com/cantino/mcfly/releases/download/v0.5.6/mcfly-v0.5.6-x86_64-unknown-linux-gnu.tar.gz\n\ntar -zxvf mcfly-v0.5.6-x86_64-unknown-linux-gnu.tar.gz\ncp mcfly ~/bin/ # move to somewhere in PATH\n\n# add to ~/.bashrc\neval \"$(mcfly init bash)\"\n</code></pre> <p>Use:</p> <pre><code># initialize only once\nmcfly # it takes about one minute to read in history\n\n&lt;Ctrl+R&gt; # evoke it.\n</code></pre>"},{"location":"linux/modern_cmd/#ag-recommend","title":"<code>ag</code> (recommend!)","text":"<p>To replace <code>grep -rnw -e \"pattern\"</code></p> <p>Install:</p> <pre><code>sudo apt install silversearcher-ag\n</code></pre> <p>Use:</p> <pre><code>ag \"pattern\"\nag -i \"pattern\" # ignorecase\nag -w \"pattern\" # whole word\n</code></pre>"},{"location":"linux/modern_cmd/#duf-recommend","title":"<code>duf</code> (recommend!)","text":"<p>To replace <code>df</code></p> <p>Install:</p> <pre><code>sudo snap install duf-utility\n</code></pre> <p>Use:</p> <pre><code>duf\n</code></pre>"},{"location":"linux/modern_cmd/#dust-recommend","title":"<code>dust</code> (recommend!)","text":"<p>To replace <code>du</code></p> <p>Install:</p> <pre><code>mkdir dust\ncd dust\n\nwget -c https://github.com/bootandy/dust/releases/download/v0.6.0/dust-v0.6.0-x86_64-unknown-linux-gnu.tar.gz\n\ntar -zxvf dust-v0.6.0-x86_64-unknown-linux-gnu.tar.gz\ncd dust-v0.6.0-x86_64-unknown-linux-gnu\ncp dust ~/bin/\n</code></pre> <p>Use:</p> <pre><code>dust\n\n# limit depth == 1\ndust -d 1\n</code></pre>"},{"location":"linux/modern_cmd/#exa","title":"<code>exa</code>","text":"<p>To replace <code>ls</code></p> <p>Install</p> <pre><code>mkdir exa\ncd exa\n\nwget -c https://github.com/ogham/exa/releases/download/v0.10.1/exa-linux-x86_64-v0.10.1.zip\n\nunzip exa-linux-x86_64-v0.10.1.zip\ncp bin/exa ~/bin/\n</code></pre> <p>Use</p> <pre><code>exa\nexa -l # ls -lrtha\nexa -lT # ls directory trees.\n</code></pre>"},{"location":"linux/modern_cmd/#bat","title":"<code>bat</code>","text":"<p>To replace <code>cat</code></p> <p>Install</p> <pre><code>mkdir bat\ncd bat\n\nwget -c https://github.com/sharkdp/bat/releases/download/v0.18.1/bat-v0.18.1-x86_64-unknown-linux-gnu.tar.gz\n\ntar -zxvf bat-v0.18.1-x86_64-unknown-linux-gnu.tar.gz\ncd bat-v0.18.1-x86_64-unknown-linux-gnu\ncp bat ~/bin/\n</code></pre> <p>Use</p> <pre><code>bat &lt;file&gt;\n</code></pre>"},{"location":"linux/modern_cmd/#gdown","title":"<code>gdown</code>","text":"<p>https://github.com/wkentaro/gdown</p> <p>To download large files from google drive.</p>"},{"location":"linux/network_utils/","title":"network utils","text":""},{"location":"linux/network_utils/#ifconfig","title":"ifconfig","text":"<p>Gathering network related data.</p> <pre><code># example output of ifconfig\neno1      Link encap:Ethernet  HWaddr 0c:c4:7a:e3:5b:fe\n          inet addr:222.29.2.44  Bcast:222.29.2.255  Mask:255.255.255.0\n          inet6 addr: 2001:da8:201:1302:ec4:7aff:fee3:5bfe/64 Scope:Global\n          inet6 addr: fe80::ec4:7aff:fee3:5bfe/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1000529332 errors:0 dropped:310819822 overruns:3907 frame:0\n          TX packets:1016086867 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:291468156454 (291.4 GB)  TX bytes:1366810427542 (1.3 TB)\n          Memory:fb120000-fb13ffff\n\neno2      Link encap:Ethernet  HWaddr 0c:c4:7a:e3:5b:ff\n          UP BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n          Memory:fb100000-fb11ffff\n\nlo        Link encap:Local Loopback\n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:157678206 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:157678206 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:2013281906725 (2.0 TB)  TX bytes:2013281906725 (2.0 TB)\n</code></pre> <p>Explain:</p> <ul> <li> <p><code>Link encap</code>: link encapsulation. e.g., Ethernet, Local Loopback.</p> <p>almost all encapsulations are Ethernet.</p> <p>I don\u2019t know what the networking protocol of the future is, but it will be called \u2018Ethernet.\u2019</p> </li> </ul> <ul> <li> <p><code>HWaddr</code>:  hardware address (MAC address)</p> <p>unique to each ethernet card.</p> </li> </ul> <ul> <li><code>inet addr</code>: IP address</li> </ul> <ul> <li><code>Bast</code>: broadcast address</li> </ul> <ul> <li><code>Mask</code>: network mask</li> </ul> <ul> <li> <p><code>UP</code>: kernel modules related to ethernet interface.</p> <ul> <li><code>BROADCAST</code>: support broadcast</li> <li><code>NOTRAILERS</code>: trailer encapsulation is disabled. Linux usually ignore this.</li> <li><code>RUNNING</code>: ready to accept data.</li> <li><code>MULTICAST</code>: support multicast.</li> </ul> </li> </ul> <ul> <li><code>MTU</code>: Maximum Transmission Unit. (size of each packet received by the ethernet card)</li> </ul> <ul> <li><code>Metric</code>: priority of this device.</li> </ul> <ul> <li><code>RX Packets, TX Packets</code>: total number of received, transmitted packets.</li> </ul> <ul> <li><code>collisions</code>: collisions for congestion, should ideally be 0.</li> </ul> <ul> <li><code>RX Bytes, TX Bytes</code>: total amount of data received, transmitted.</li> </ul>"},{"location":"linux/network_utils/#arp","title":"arp","text":"<p>command to show the ARP (Address Resolution Protocol) cache.</p> <p>ARP cache is a collection of ARP entries (IP to MAC) for efficiently communicate with the IP address.</p> <pre><code># show all entries\narp -a \n# verbose\narp -v\n</code></pre>"},{"location":"linux/network_utils/#route-ip-netstat","title":"route, ip, netstat","text":"<ul> <li> <p>show routing table</p> <pre><code># show routing table\nroute\nnetstat -r\n# replace domain name for numerical IP address\nroute -n\nnetstat -nr\n# explain the table\nip route show\n</code></pre> <pre><code>### output example of `route -n`\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         222.29.2.1      0.0.0.0         UG    0      0        0 enp129s0f0 # default gateway\n169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 enp129s0f0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0\n222.29.2.0      0.0.0.0         255.255.255.0   U     0      0        0 enp129s0f0\n\n# 0.0.0.0 or * means None (not set)\n# genmask: netmask\n# flags: U = up, G = gateway\n\n# BTW, equivalent in win10 powershell is `route PRINT`\n# 10.1.0.1: default router IP reserved for wireless routers.\n\n### output example of `ip route show`\ndefault via 222.29.2.1 dev enp129s0f0 onlink\n169.254.0.0/16 dev enp129s0f0  scope link  metric 1000\n172.17.0.0/16 dev docker0  proto kernel  scope link  src 172.17.0.1 linkdown\n222.29.2.0/24 dev enp129s0f0  proto kernel  scope link  src 222.29.2.65\n</code></pre> </li> </ul> <ul> <li> <p>modifying route:</p> <pre><code># add a new route\nip route add &lt;target/mask&gt; via &lt;next hop&gt; dev &lt;interface&gt;\n\n# delete route\nip route del &lt;target/mask&gt; via &lt;next hop&gt; dev &lt;interface&gt;\n\n# add reject route\nroute add -host &lt;target&gt; reject # `ping &lt;target&gt;` will show unreachable\n</code></pre> </li> </ul>"},{"location":"linux/network_utils/#subnet-mask","title":"subnet mask","text":"<p>Each host is configured with a unique IP address and subnet mask. </p> <p>The IP address is divided by the subnet mask to 2 parts: Network ID + Host ID</p> <pre><code># example\ninet addr:222.29.2.44  Mask:255.255.255.0\n\n# CIDR format is 222.29.2.44/24 \n# 24 ones = 11111111.11111111.11111111.00000000 = 255.255.255.0\n\n# network id = 222.29.2.0\n# host id    = 0.0.0.44\n</code></pre>"},{"location":"linux/network_utils/#what-router-does","title":"what router does ?","text":"<p>When presented with a packet bound for an IP address</p> <p>the router needs to determine which of its network interfaces will best get that packet closer to its destination.</p>"},{"location":"linux/network_utils/#default-gateway","title":"default gateway","text":"<p>The node that serves as the default router when no other route specification matches the destination IP address.</p> <pre><code>Kernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         222.29.2.1      0.0.0.0         UG    0      0        0 enp129s0f0 # default gateway\n169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 enp129s0f0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0\n222.29.2.0      0.0.0.0         255.255.255.0   U     0      0        0 enp129s0f0\n\n# 0.0.0.0, or * means ANY IP.\n# 169.254.0.0 or link-local is for communication within the network segment.\n</code></pre>"},{"location":"linux/network_utils/#traceroute","title":"traceroute","text":"<p>install by <code>sudo apt install traceroute</code>. </p> <p>The name is not <code>traceroute6</code> !</p> <pre><code># trace route to an IP\ntraceroute bilibili.com\ntraceroute 8.8.8.8 # google DNS\n\n# BTW, equivalent in win10 powershell is `tracert`\n</code></pre>"},{"location":"linux/network_utils/#iptables","title":"iptables","text":"<p>firewall.</p> <pre><code># list ip tables \niptables -L\n</code></pre>"},{"location":"linux/nps/","title":"NPS tutorial","text":""},{"location":"linux/nps/#vps-port-open","title":"VPS port open","text":"<ul> <li>\u63a7\u5236\u53f0\u6dfb\u52a0\u5b89\u5168\u7ec4\u5f00\u653e\u7aef\u53e3</li> <li><code>ufw allow 8080</code></li> </ul>"},{"location":"linux/nps/#server","title":"Server","text":"<pre><code>nps start\n</code></pre>"},{"location":"linux/nps/#tcp-tunnel","title":"TCP tunnel","text":""},{"location":"linux/nps/#client","title":"Client","text":"<pre><code>npc \n</code></pre>"},{"location":"linux/nvidia_cuda/","title":"Nvidia driver and CUDA","text":"<p>CUDA and nvidia-driver can be safely separately installed. </p> <p>Usually, we install nvidia-driver first since it is necessary for GUI.</p> <p>CUDA is only used for high-performance computation.</p>"},{"location":"linux/nvidia_cuda/#install-nvidia-driver","title":"install nvidia-driver","text":"<p>Always use the package manager!!!</p> <p>CUDA Runfile installed version is incomplete, not fully a  graphic driver, just a GPU status monitor.</p> <p>For example, it will not install <code>nvidia-prime</code> which contains <code>prime-select</code></p> <p>First, go runlevel 2 and turn off any GUI. [seems not really necessary...]</p> <pre><code># go runlevel 3\nsudo systemctl isolate multi-user.target # will stop all the graphic processes\nsudo telinit 3\n</code></pre> <p>Recommended way is to use <code>ubuntu-drivers</code>:</p> <pre><code># will list your GPU and suitable driver versions\nsudo ubuntu-drivers devices \n# install the latest version\nsudo ubuntu-drivers autoinstall \n</code></pre> <p>However sometimes it just output nothing, then we have to use PPA:</p> <pre><code>sudo add-apt-repository ppa:graphics-drivers/ppa\nsudo apt update\n# e.g. choose a suitable version manually.\nsudo apt install nvidia-418\n</code></pre> <p>Finally, go runlevel 5 and reboot.</p> <pre><code># go runlevel 5\nsudo systemctl isolate graphical.target\nsudo telinit 5\n\n# set default runlevel 5\nsudo systemctl enable graphical.target\nsudo systemctl set-default graphical.target\n\nsudo reboot\n</code></pre> <p>Location of <code>nvidia-smi</code>: [outdated, only on ubuntu16!]</p> <pre><code>nvidia-debugdump -&gt; /etc/alternatives/x86_64-linux-gnu_nvidia-debugdump\nnvidia-xconfig -&gt; /etc/alternatives/x86_64-linux-gnu_nvidia_xconfig\nnvidia-smi -&gt; /etc/alternatives/x86_64-linux-gnu_nvidia_smi\n.\n</code></pre>"},{"location":"linux/nvidia_cuda/#switch-between-intel-and-nvidia-driver","title":"switch between intel and nvidia driver","text":"<pre><code># in case prime-select is not found\nsudo apt install nvidia-prime\n\n# show current video driver\nsudo prime-select query\n\n# change\nsudo prime-select nvidia\nsudo prime-select intel\n</code></pre>"},{"location":"linux/nvidia_cuda/#uninstall-nvidia-driver","title":"uninstall nvidia-driver","text":"<pre><code># pkg manager install\nsudo apt purge nvidia*\n</code></pre>"},{"location":"linux/nvidia_cuda/#install-cuda","title":"install CUDA","text":"<p>Recommend to use Runfile install. </p> <ul> <li>We can install any version we want, and handle multiple versions by setting PATH and LD_LIBRARY_PATH.</li> <li>We can easily uninstall it. (just rm it)</li> <li>Package manager may need VPN to download CUDA.</li> </ul> <p>Download here: https://developer.nvidia.com/cuda-downloads</p> <p>AND The detailed installation guide: https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html</p> <p>Do not need to go runlevel 3 or turn off GUI to install CUDA.</p> <pre><code># install\n# do not check the driver install !!! we have installed it separately.\nsudo bash cuda_&lt;version&gt;_linux.run\n\n# check installed version\nnvcc -V\n</code></pre>"},{"location":"linux/nvidia_cuda/#switch-between-multiple-cuda-versions","title":"switch between multiple CUDA versions","text":"<p>Globally: change the <code>/usr/local/cuda</code> soft link.</p> <pre><code>sudo ln -s /usr/local/cuda-10.1 /usr/local/cuda\n</code></pre> <p>Locally: change your <code>PATH</code> and <code>LD_LIBRARY_PATH</code>:</p> <pre><code>export PATH=\"/usr/local/cuda-9.1/bin:$PATH\"\nexport LD_LIBRARY_PATH=\"/usr/local/cuda-9.1/lib64:$:LD_LIBRARY_PATH\"\n\nexport PATH=\"/usr/local/cuda-10.1/bin:$PATH\"\nexport LD_LIBRARY_PATH=\"/usr/local/cuda-10.1/lib64:$:LD_LIBRARY_PATH\"\n</code></pre>"},{"location":"linux/nvidia_cuda/#uninstall-cuda","title":"uninstall CUDA","text":"<p>Just REMOVE it.</p> <pre><code>sudo rm -rf /usr/local/cuda-10.1\n</code></pre> <p>If you use package manager to install CUDA:</p> <pre><code>sudo apt purge cuda*\n</code></pre>"},{"location":"linux/nvidia_cuda/#pitfalls","title":"pitfalls","text":"<ul> <li>for CUDA 10.1, install the update <code>10.1.243</code> directly, instead of the general release <code>10.1.105</code> !!! Or you can update from <code>105</code> to <code>243</code>, just run the new <code>runfile</code> and it will prompt.</li> </ul>"},{"location":"linux/qt/","title":"Qt","text":"<p>Qt is a fucking commercial software, and all its free releases are to disgust you.</p> <p>You must register to download even the free version.</p> <p>Docs at: https://doc.qt.io/qt-5/gettingstarted.html</p> <p>TUNA mirror (always god!): https://mirrors.tuna.tsinghua.edu.cn/qt/</p> <p>Official (slow): https://www.qt.io/offline-installers </p> <p>To manage different Qt versions, use <code>PATH</code> and <code>LD_LIBRARY_PATH</code>.</p>"},{"location":"linux/qt/#qt-551-597","title":"Qt 5.5.1 ~ 5.9.7","text":"<p>The default version, in <code>/usr/libx86_64-linux-gnu/</code>. </p> <p>what <code>sudo apt install qt-default</code> will install. </p> <p>However, this is terribly outdated, e.g., <code>PyQt5, PySide2</code> do not support it.</p>"},{"location":"linux/qt/#qt-51211","title":"Qt 5.12.11","text":"<p>The last version that supports a GUI installer.</p> <p>download at: https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.12/5.12.11/</p> <pre><code>wget -c https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.12/5.12.11/qt-opensource-linux-x64-5.12.11.run\n\nchmod u+x ./qt-opensource-linux-x64-5.12.11.run\nsudo ./qt-opensource-linux-x64-5.12.11.run\n</code></pre> <p>Install the following <code>[Yes]</code>, which takes ~ 1.5G:</p> <pre><code>-- Qt 5.15.11\n    -- gcc_64 [Yes]\n    -- Sources [No, don't need] \n    -- Qt Charts [Yes]\n    -- Qt PDF [Yes]\n    -- Qt ... [Yes]\n    -- Qt Script (Deprecated) [Yes]\n-- Qt Creator [Yes]\n</code></pre> <p>It is installed in <code>/opt/Qt5.12.11/</code> by default, and you need to manually add to <code>~/.bashrc</code>:</p> <pre><code>export PATH=\"/opt/Qt5.12.11/5.12.11/gcc_64/bin:$PATH\"\nexport LD_LIBRARY_PATH=\"/opt/Qt5.12.11/5.12.11/gcc_64/lib:$LD_LIBRARY_PATH\"\n</code></pre> <p>check by:</p> <pre><code>. ~/.bashrc\nqmake -v\n# should output Qt5.12.11 at /opt/Qt5.12.11/5.12.11/lib\n</code></pre>"},{"location":"linux/qt/#pyqt5-support","title":"PyQt5 support","text":"<pre><code>pip install PyQt5==5.12.11\n# do not install the default version, which is for 5.15\n</code></pre>"},{"location":"linux/qt/#qt-515","title":"Qt 5.15","text":"<p>You must build it from source. </p> <p>download at: https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.15/5.15.2/single/</p> <p>docs at: https://doc.qt.io/qt-5/build-sources.html</p>"},{"location":"linux/rclone/","title":"rclone","text":""},{"location":"linux/rclone/#install","title":"install","text":"<pre><code>curl https://rclone.org/install.sh | sudo bash\n</code></pre>"},{"location":"linux/rclone/#set-up-remotes","title":"set up remotes","text":"<p>follow the instructions:</p> <pre><code>rclone config\n</code></pre> <p>For example,  we setup a webdav called <code>nuts</code>:</p> <pre><code>--------------------\n[nuts]\ntype = webdav\nurl = https://dav.jianguoyun.com/dav/\nvendor = other\nuser = ashawkey1999@gmail.com\npass = *** ENCRYPTED ***\n--------------------\n</code></pre> <p>show all remotes:</p> <pre><code># of course, in config\nrclone config\n# or just list\nrclone listremotes\n</code></pre> <p>check remote disk:</p> <pre><code>rclone about nuts:\n</code></pre>"},{"location":"linux/rclone/#usage","title":"usage","text":"<ul> <li> <p>list</p> <pre><code># ls remote:path \n# ONLY list files (size and path), by default recursive! \nrclone ls nuts:/hawia\nrclone ls nuts:hawia # same, default remote directory is /\nrclone ls --max-depth 1 nuts:hawia # limit recurse level\nrclone --max-depth 1 ls nuts:hawia # same, flag can be anywhere\nrclone ls nuts:hawia --max-depth 1 # same\n\n# lsl remote:path\n# ONLY list files (size, path, modtime), not recursive\nrclone lsl nuts:hawia\nrclone lsl -R nuts:hawia # recursive\n\n# lsd remote:path\n# ONLY list directories (modtime, path)\nrclone lsd nuts:\nrclone lsd -R nuts: # recursive\n\n# lsf remote:path\n# list both files and directories (path)\nrclone lsf nuts:\nrclone lsf -R nuts: # recursive\n</code></pre> </li> </ul> <ul> <li> <p>copy</p> <pre><code># copy source:sourcepath dest:destpath\n# ignore identical files, never delete remote files, automatically create dest directory if not exist.\n\n# only copy the CONTENT, not the directory!\nrclone copy ~/data/ nuts:hawia/data/ # cp ~/data/* nuts:/hawia/data/\nrclone copy ~/data nuts:hawia/data # same\nrclone copy -P ~/data nuts:hawia/data # show progress\nrclone copy -i ~/data nuts:hawia/data # dry run (interactive)\nrclone copy --dry-run ~/data nuts:hawia/data # dry run\nrclone copy ~/data nuts:hawia/data --ignore-checksum # ignore checksum  speed up \n\n# copy from remote to local\nrclone copy nuts:hawia/data ~/data -P\n\n# only copy files changed in recent 24h, without travelling the whole directory (efficient!)\nrclone copy --max-age 24h --no-traverse /path/to/src remote:\n\n# copy single file\nrclone copy ~/test.jpg nuts:hawia/data # cp ~/test.jpg nuts:/hawia/data/\nrclone copy ~/test.jpg nuts:hawia/test.jpg # cp ~/test.jpg nuts:/hawia/test.jpg/ (WRONG USE, it create a folder called test.jpg and then copy the real image to the folder)\nrclone copyto ~/test.jpg nuts:hawia/test.jpg # cp ~/test.jpg nuts:/hawia/test.jpg (CORRECT USE)\n\nrclone copy nuts:hawia/data/test.jpg data # mkdir -p data &amp;&amp; cp nuts:hawia/data/test.jpg data/\nrclone copy nuts:hawia/data/test.jpg . # will do nothing, WRONG USE!\nrclone copyto nuts:hawia/data/test.jpg test.jpg # cp nuts:hawia/data/test.jpg test.jpg (CORRECT USE)\n</code></pre> </li> </ul> <ul> <li> <p>sync</p> <pre><code># sync SOURCE remote:DESTINATION\n# make remote identical to local\n# ignore identical files, will delete remote files.\n\nrclone sync ~/data nuts:hawia/data\nrclone sync -i ~/data nuts:hawia/data # dry run\nrclone sync -P ~/data nuts:hawia/data # show progress\n</code></pre> </li> </ul> <ul> <li> <p>delete</p> <pre><code>rclone delete remote:path # only delete files\nrclone delete --rmdirs remote:path # also delete empty dirs\nrclone delete --dry-run remote:path # dry run\n\n# delete file pattern\nrclone delete remote:*.txt # WRONG USE, 400 bad request\nrclone delete remote: --include=*.txt \n\n# delete all files smaller thatn 100M\nrclone --min-size 100M lsl remote:path\nrclone --min-size 100M delete remote:path\n\n# purge: remove the path with all its content\nrclone purge remote:path\nrclone purge -i remote:path # always dry run !\n</code></pre> </li> </ul> <ul> <li> <p>cat</p> <pre><code>rclone cat remote:path/to/file\nrclone --include \"*.txt\" cat remote:path/to/dir\n</code></pre> </li> </ul> <ul> <li> <p>mkdir</p> <pre><code>rclone mkdir remote:path\n</code></pre> </li> </ul> <ul> <li> <p>filtering</p> <p>the filtering pattern follows a glob style.</p> <pre><code># basic\n*         matches any sequence of non-separator (/) characters\n**        matches any sequence of characters including / separators\n?         matches any single non-separator (/) character\n[[!]{character-range}]\n          character class (must be non-empty)\n{ pattern-list }\n          pattern alternatives\nc         matches character c (c != *, **, ?, \\, [, {, })\n\\c        matches reserved character c (c = *, **, ?, \\, [, {, })\n\n# char sets\nNamed character classes (e.g. [\\d], [^\\d], [\\D], [^\\D])\nPerl character classes (e.g. \\s, \\S, \\w, \\W)\nASCII character classes (e.g. [[:alnum:]], [[:alpha:]], [[:punct:]], [[:xdigit:]])\n\n# path\nfile.jpg   - matches \"file.jpg\"\n           - matches \"directory/file.jpg\"\n           - doesn't match \"afile.jpg\"\n           - doesn't match \"directory/afile.jpg\"\n/file.jpg  - matches \"file.jpg\" in the root directory of the remote\n           - doesn't match \"afile.jpg\"\n           - doesn't match \"directory/file.jpg\"\n</code></pre> <p>related flags are <code>--exclude, --include, --filter</code> which is followed by rules, or loading rules from a text file <code>--exclude-from, --include-from, --filter-from</code>.</p> <pre><code>### exclude (should not be used with include/filter)\n\n# exclude single file at ~/data/test.jpg\nrclone copy ~/data nuts:hawia/data --exclude=/test.jpg\n\n# exclude by file type\nrclone ls remote: --exclude=*.bak --exclude=*.txt\n\n# exclude ~/data/somedir/\nrclone copy ~/data nuts:hawia/data --exclude=/somedir/ # trailing / is necessary, this implies a dir rule, which is optimized by not listing the directory at all.\nrclone copy ~/data nuts:hawia/data --exclude=/somedir/** # same effect, but this is a file rule. It still list /somedir/, but ignores all files and subfolders under it.\nrclone copy ~/data nuts:hawia/data --exclude=/somedir/* # a file rule, and it will only exclude files under first level of /somedir/. e.g., /somedir/subdir/file will still be included.\n\n# exclude ~/data/pattern*/\nrclone copy ~/data nuts:hawia/data --exclude=/pattern*/\n\n### include\n# inlcude implies a --exclude ** at last (the flags take effect from end to begin)\n\nrclone copy /vol remote: --include \"{A,B}/**\"\n# equals to\nrclone copy /vol1/A remote:A\nrclone copy /vol1/B remote:B\n</code></pre> <p>sample file for <code>--exclude-from</code>:</p> <pre><code># exclude-file.txt\n*.bak\n/trial*/\n</code></pre> <p>then you can use</p> <pre><code>rclone copy ~/data nuts:hawia/data --exclude-from exclude-file.txt\n</code></pre> </li> </ul>"},{"location":"linux/rm_mv/","title":"rm &amp; mv","text":""},{"location":"linux/rm_mv/#move-with-exclusion","title":"move with exclusion","text":"<pre><code># move all files except dir into dir, a usual trick.\nmv !(dir) dir \n\n# exclude more\nmv !(dir1|dir2) dir1\n</code></pre>"},{"location":"linux/rm_mv/#remove-with-exclusion","title":"remove with exclusion","text":"<pre><code># rm all files except `file`\nrm !(file)\n\nrm !(file1|file2)\n\n# prompt(i) and verbose(v)\nrm -vi *\n</code></pre>"},{"location":"linux/rsync/","title":"rsync","text":"<ul> <li> <p>general</p> <pre><code>-a: archive mode, equals, -rlptgoD, in a word, it is recursive and preserve almost everything from source to target.\n-v: verbose\n-P: equals --progress --partial, show progress, and allow resume.\n</code></pre> </li> </ul> <ul> <li> <p>Copy with exclusion</p> <pre><code># copy source to destination, excluding source/folder\nrsync -avP source/ destination --exclude folder\n\n# exclude multiple\nrsync -avP source/ destination --exclude=folder --exclude=folder2 # must add =\nrsync -avP source/ destination --exclude={folder,folder2} # brace expansion, no space after the comma !!!\n</code></pre> </li> </ul> <ul> <li> <p>alternative of <code>scp</code></p> <pre><code># default port 22\nrsync -avP -e ssh local_file user@ip:remote_file\n# custom ssh port\nrsync -avP -e \"ssh -p 23\" local_file user@ip:remote_file\n</code></pre> </li> </ul> <ul> <li> <p>Super fast remove (for large and recursive directories)</p> <pre><code>mkdir empty_dir\nrsync -a --delete empty_dir/ dir_to_delete/ # much more faster than rm -rf\nrm -rf empty_dir\n</code></pre> </li> </ul>"},{"location":"linux/runlevel/","title":"Runlevel","text":"<p># runlevel</p> <pre><code> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502Runlevel \u2502 Target            \u2502\n \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n \u25020        \u2502 poweroff.target   \u2502\n \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n \u25021        \u2502 rescue.target     \u2502\n \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n \u25022, 3, 4  \u2502 multi-user.target \u2502\n \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n \u25025        \u2502 graphical.target  \u2502\n \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n \u25026        \u2502 reboot.target     \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"linux/runlevel/#check-runlevel","title":"check runlevel","text":"<pre><code># show previous and current runlevel\nrunlevel \n# e.g. `N 5`, `5 3`\n\nsudo systemctl get-default\n</code></pre>"},{"location":"linux/runlevel/#change-current-runlevel","title":"change current runlevel","text":"<pre><code># go runlevel 3\nsudo systemctl isolate multi-user.target # will stop all the graphic processes\nsudo telinit 3\n\n# go runlevel 5\nsudo systemctl isolate graphical.target\nsudo telinit 5\n</code></pre>"},{"location":"linux/runlevel/#set-default-runlevel","title":"set default runlevel","text":"<pre><code># go runlevel 3\nsudo systemctl enable multi-user.target\nsudo systemctl set-default multi-user.target\n\n# go runlevel 5\nsudo systemctl enable graphical.target\nsudo systemctl set-default graphical.target\n\n# don't forget to reboot!\nsudo reboot\n</code></pre> <p>However, if lightdm failed to start, your runlevel will still be 3 even if the default is 5.</p> <p>check lightdm status and xorg log.</p>"},{"location":"linux/s3/","title":"S3 storage system","text":"<p>S3 is a commonly used storage system.</p> <p>Recommended practice:</p> <ul> <li>Use s5cmd for CLI operations (examine files, simple upload/download, make bucket, ...)</li> </ul> <ul> <li>Use megfile for Python operations (batch upload files, read files for dataset, ...)</li> </ul>"},{"location":"linux/s3/#aws-cli","title":"AWS CLI","text":"<p>The official CLI tool for AWS. Not recommended! Use s5cmd instead.</p>"},{"location":"linux/s3/#install","title":"Install","text":"<pre><code>pip install awscli\n</code></pre> <p>First configure it using your AK &amp; SK:</p> <pre><code>aws configure\n</code></pre> <p>It will create credentials under <code>~/.aws/credentials</code></p> <pre><code>[default]\naws_access_key_id=&lt;default access key&gt;\naws_secret_access_key=&lt;default secret key&gt;\n</code></pre> <p>To use a different endpoint than amazon, config an alias in your <code>.bashrc</code>:</p> <pre><code>alias aws=\"aws --endpoint-url=http://&lt;ip&gt;:&lt;port&gt;\"\n</code></pre>"},{"location":"linux/s3/#usage","title":"Usage","text":"<pre><code># list S3 buckets under your access key\naws s3 ls\n\n# debug (e.g., to check your endpoint ip)\naws s3 ls --debug\n\n# create (make) a bucket\naws s3 mb s3://myBucket\n\n# delete a bucket (!)\naws s3 rb s3://myBucket\n\n# list files in a bucket\naws s3 ls s3://myBucket\n\n# upload local file to a bucket\naws s3 cp local_file s3://myBucket/remote_file\n\n# download remote file from bucket\naws s3 cp s3://myBucket/remote_file local_file\naws s3 cp --recursive s3://myBucket/remote_folder local_folder\n\n# delete remote file\naws s3 rm s3://myBucket/remote_file\n</code></pre>"},{"location":"linux/s3/#s5cmd","title":"s5cmd","text":"<p>A better and faster S3 CLI.</p>"},{"location":"linux/s3/#install_1","title":"Install","text":"<p>Download binary from releases and add it to PATH.</p> <p>Config secrets: <pre><code>export AWS_ACCESS_KEY_ID=xxx\nexport AWS_SECRET_ACCESS_KEY=xxx\nexport S3_ENDPOINT_URL=https://xxx\n</code></pre></p> <p>Also can use <code>~/.aws/credentials</code>: <pre><code>[$PROFILE_NAME]\nregion=xxx\naws_access_key_id=xxx\naws_secret_access_key=xxx\ns3=\n\u2003endpoint_url=https://xxx\ns3api=\n\u2003endpoint_url=https://xxx\n\u2003payload_signing_enabled=true\n</code></pre></p>"},{"location":"linux/s3/#usage_1","title":"Usage","text":"<pre><code># ls all buckets\ns5cmd ls\n\n# download to local\ns5cmd cp s3://bucket/file .\n\n# upload\ns5cmd cp file s3://bucket/\ns5cmd cp dir s3://bucket/dir # no -r needed\n\n# delete\ns5cmd rm s3://bucket/file\n\n# delete a bucket \ns5cmd rm s3://bucket/* # first delete all files in it, no -r needed\ns5cmd rb s3://bucket\n\n# exclude and include\ns5cmd rm --exclude \"*.log\" --exclude \"*.txt\" 's3://bucket/logs/2020/*'\ns5cmd cp --include \"*.log\" 's3://bucket/logs/2020/*' .\n\n# du\ns5cmd du --humanize s3://bucket/\n\n# use a special profile (specified in ~/.aws/credentials)\ns5cmd --profile PROFILE_NAME ls\n\n# or a special credential file\ns5cmd --credentials-file ~/.aws/credentials2 --profile PROFILE_NAME ls\n</code></pre>"},{"location":"linux/s3/#megfile","title":"Megfile","text":"<p>Both a CLI and Python SDK for S3 and other storage systems.</p>"},{"location":"linux/s3/#install_2","title":"Install","text":"<pre><code>pip install megfile\n\n### configure \n\n# use env to config s3 access key\nexport AWS_ACCESS_KEY_ID=xxx\nexport AWS_SECRET_ACCESS_KEY=xxx\nexport AWS_ENDPOINT_URL=https://xxx # NOTE: different from s5cmd!\n\n# or config with CLI (will modify ~/.aws/credentials)\nmegfile config s3 &lt;AK&gt; &lt;SK&gt; --endpoint-url http://xxx\n\n### megfile also supports configure multiple s3 endpoints!\n\n# use env var (not recommended due to capital letters)\nexport PROFILE1__AWS_ACCESS_KEY_ID=xxx\nexport PROFILE1__AWS_SECRET_ACCESS_KEY=xxx\nexport PROFILE1__AWS_ENDPOINT_URL=https://xxx\n\n# config with CLI\nmegfile config s3 &lt;AK&gt; &lt;SK&gt; --endpoint-url http://xxx --profile-name profile1\n\n# these named profiles can be used as `s3+profile1://bucket/file`\n</code></pre>"},{"location":"linux/s3/#cli","title":"CLI","text":"<pre><code>megfile ls s3://bucket\nmegfile cat s3://bucket/file\nmegfile cp s3://bucket/file local_file\n\nmegfile rm -r s3://bucket/folder\n\n# named profile\nmegfile ls s3+profile1://bucket/file\n</code></pre> <p>Unfortunately you cannot perform bucket-level operations with <code>megfile</code> CLI:</p> <ul> <li>list all buckets: use <code>s5cmd ls</code>.</li> </ul> <ul> <li>create a new bucket: use <code>s5cmd mb s3://new_bucket</code>.</li> </ul>"},{"location":"linux/s3/#python-api","title":"Python API","text":"<p>It supports both local paths and remote S3 paths, so you can use it to read/write files in a unified way. The best part of <code>megfile</code> is that it hides the dirty fail and retry logic of <code>boto3</code> to save your life when network fluctuates.</p> <p>The essence of s3 operations in memory is that we always work on BYTES, so we need to encode/decode text files and convert image files to/from bytes.</p> <pre><code>from megfile import smart_open, smart_glob\n\n# glob files\nfiles = smart_glob('s3://bucket/*.jpg')\n\n# read image file\nimport cv2\nwith smart_open('s3://bucket/image.jpg', 'rb') as f:\n    raw = f.read() # type(raw) == bytes\nimage = cv2.imdecode(np.frombuffer(raw, dtype=np.uint8), cv2.IMREAD_UNCHANGED).astype(np.float32) / 255\n\n# write image file\nimage = (image * 255).astype(np.uint8)\nwith smart_open('s3://bucket/image.jpg', 'wb') as f:\n    f.write(cv2.imencode('.jpg', image)[1].tobytes())\n\n# read text file\nwith smart_open('s3://bucket/file.txt', 'rb') as f:\n    text = f.read().decode() # decode bytes to utf-8 str\n\n# write text file\nwith smart_open('s3://bucket/file.txt', 'wb') as f:\n    f.write('test'.encode()) # encode str to bytes\n\n# directly download from a URL to memory and write to s3 (no intermediate steps on local disk)\nimport requests\nraw = requests.get('https://example.com/image.jpg').content\nwith smart_open('s3://bucket/image.jpg', 'wb') as f:\n    f.write(raw)\n\n# directly download a tar file to s3\nurl = \"https://virutalbuy-public.oss-cn-hangzhou.aliyuncs.com/share/aigc3d/objaverse_tar/1/19993.tar\"\nraw = requests.get(url).content\nwith smart_open('s3://bucket/1/19993.tar', 'wb') as f:\n    f.write(raw)\n\n# read this tarfile and extract an image in it\nimport tarfile\nimport numpy as np\nwith smart_open('s3://bucket/1/19993.tar', 'rb') as f:\n    with tarfile.open(fileobj=f, mode='r') as tar: # tarfile can directly read s3 fetcher, no need for f.read()\n        with tar.extractfile('19993/campos_512_v4/00036/00036.png') as img:\n            image = cv2.imdecode(np.frombuffer(img.read(), dtype=np.uint8), cv2.IMREAD_UNCHANGED).astype(np.float32) / 255\n\n# read glb mesh from s3\nimport trimesh\nwith megfile.smart_open('s3+pbss_obj://bucket/mesh.glb', 'rb') as f:\n    raw = f.read() # S3 fetcher to raw bytes\n    mesh = trimesh.load(file_obj=trimesh.util.wrap_as_stream(raw), file_type='glb', force='mesh')\n\n# write mesh to s3\nwith megfile.smart_open('s3://bucket/mesh.ply', 'wb') as f:\n    mesh.export(file_obj=f, file_type='ply')\n</code></pre>"},{"location":"linux/s3/#boto3","title":"boto3","text":"<p>The official Python SDK for AWS. </p> <p>Don't use it.</p>"},{"location":"linux/shutdown/","title":"Shutdown","text":""},{"location":"linux/shutdown/#properly-shutdown","title":"properly shutdown","text":"<pre><code>sudo shutdown -h now\n</code></pre>"},{"location":"linux/slurm/","title":"Slurm","text":""},{"location":"linux/slurm/#slurm-workload-manager","title":"Slurm workload manager","text":"<p>Simple Linux Utility for Resource Management.</p>"},{"location":"linux/slurm/#sinfo","title":"sinfo","text":"<p>check information of the system.</p> <pre><code>sinfo # partitions\nsinfo -N # nodes\nsinfo -N --states=idle # check all idle nodes\n</code></pre> <p>to check more detailed GPU usage:</p> <pre><code>cinfo -p &lt;partition&gt; \ncinfo -p &lt;partition&gt; occupy-reserved # only show reserved quota\n</code></pre>"},{"location":"linux/slurm/#squeue","title":"squeue","text":"<p>check the current running (R) and pending (PD) jobs.</p> <pre><code>squeue -u &lt;user name&gt; # list your jobs\nsqueue -l # list all info\n</code></pre>"},{"location":"linux/slurm/#srunsbatch","title":"srun/sbatch","text":"<p>launch/submit a job.</p> <pre><code>-J # --job-name=JOB_NAME\n-p # --partition=xxx, choose which partition of clusters to use\n-n # --ntasks=N, usually 1\n-c # --cpus-per-task=16, how many CPUs to use in total (per node)\n-N # --nodes=N, node count, 1 for single-node, or more for multi-node\n--ntasks-per-node # must be n/N\n\n-o # --output=OUTPUT_FILENAME\n-e # --error=ERROR_FILENAME\n\n-w # --nodelist=node[1,2], prefered nodes\n-x # --exclude=node[3,5-6], nodes to avoid\n--exclusive # exclusively use the nodes\n\n--gres # --gres=gpu:2, gpu allocation\n--quotatype=reserved # [phoenix-feature] auto, reserved (will not be reallocated), spot (may be reallocated)\n</code></pre> <p>QUOTA mode [phoenix-feature]:</p> <ul> <li>reserved: guaranteed GPU resources for this partition, will allocate as long as it's idle.</li> <li>spot: borrow idle resources from other partitions, will be reallocated if required by other partitions.</li> <li>auto: try to allocate reserved quota first, if not successful, turn to spot mode.</li> </ul> <p><code>srun</code> will start the job in foreground, suitable for single-node training:</p> <pre><code># quick alias (xxx is your partition)\nalias srcpu=\"srun --ntasks=1 --ntasks-per-node=1 --cpus-per-task=16 -p xxx\"\nalias sr1gpu=\"srun --ntasks=1 --ntasks-per-node=1 --cpus-per-task=8 --gres=gpu:1 -p xxx\"\nalias sr8gpu=\"srun --ntasks=1 --ntasks-per-node=1 --cpus-per-task=64 --gres=gpu:8 -p xxx\"\nalias sr8gpu_spot=\"srun --ntasks=1 --ntasks-per-node=1 --cpus-per-task=64 --gres=gpu:8 --quotatype=spot -p xxx\"\nalias squ=\"squeue -u `whoami`\"\n\n# use at ease\nsrcpu bash some_script.sh\nsr1gpu python test.py\n</code></pre> <p><code>sbatch</code> will submit jobs in background, and can perform multi-node training.</p> <p>For example, we launch 4 * 8 = 32 GPUs to train:</p> <pre><code>#!/bin/bash\n#SBATCH --job-name=MY_JOB\n#SBATCH --nodes=4\n#SBATCH --ntasks-per-node=1\n#SBATCH --cpus-per-task=32\n#SBATCH --gres=gpu:8\n#SBATCH --partition=3dobject_aigc_light\n#SBATCH --quotatype=spot\n#SBATCH --output=logs/%j_%x_out.log\n#SBATCH --err=logs/%j_%x_err.log\n#SBATCH --nodelist=xxx-[123-125],xxx-145\n\n# configs\nLOG_PATH=\"log.txt\" # where all the printing goes\nGPUS_PER_NODE=8 # align with --gres\n\necho \"START TIME: $(date)\"\n\n# NCCL &amp; AWS settings\nexport NCCL_PROTO=simple\nexport RDMAV_FORK_SAFE=1\nexport FI_EFA_FORK_SAFE=1\nexport FI_EFA_USE_DEVICE_RDMA=1\nexport FI_PROVIDER=efa\nexport FI_LOG_LEVEL=1\nexport NCCL_IB_DISABLE=0\nexport NCCL_SOCKET_IFNAME=ib0\n\n# proxy settings\nunset http_proxy\nunset https_proxy\n\n# ip &amp; port &amp; rank\nMASTER_ADDR=$(scontrol show hostnames $SLURM_JOB_NODELIST | head -n 1)\nMASTER_PORT=10231 # use 5 digits ports\n\nNNODES=$SLURM_NNODES\nNUM_PROCESSES=$(expr $NNODES \\* $GPUS_PER_NODE)\n\n# Note: it is important to escape `$SLURM_PROCID` since we want the srun on each node to evaluate this variable\n# the accelerate config can be the same as single-node training, we will override machine rank.\nexport LAUNCHER=\"accelerate launch \\\n    --config_file acc_configs/gpu8.yaml \\\n    --main_process_ip $MASTER_ADDR \\\n    --main_process_port $MASTER_PORT \\\n    --machine_rank \\$SLURM_PROCID \\\n    --num_processes $NUM_PROCESSES \\\n    --num_machines $NNODES \\\n    \"\n\nexport PROGRAM=\"\\\nmain.py vae \\\n    --workspace workspce_resume \\\n    --resume workspace/model.safetensors\n\"\n\nexport CMD=\"$LAUNCHER $PROGRAM\"\n\nsrun --jobid $SLURM_JOBID bash -c \"$CMD\" 2&gt;&amp;1 | tee -a $LOG_PATH\n\necho \"END TIME: $(date)\"\n</code></pre> <p>make sure the --output and --err log directory (<code>logs</code> here) exists! Else the task will fail immediately without any information!</p>"},{"location":"linux/slurm/#scontrol","title":"scontrol","text":"<p>re-config a pending job.</p> <pre><code>scontrol show job JOBID\n\nscontrol hold JOBID # will not enter running state\nscontrol update jobid=JOBID ...\nscontrol release JOBID # release\n</code></pre>"},{"location":"linux/slurm/#scancel","title":"scancel","text":"<p>stop/cancel a job.</p> <pre><code>scancel &lt;jobid&gt;\n</code></pre>"},{"location":"linux/slurm/#sacct","title":"sacct","text":"<p>show status of running and (recently) finished jobs.</p> <pre><code>sacct\n\n# example output\n      JobID    JobName PhxPriority UserPriority VirtualPartition  Partition    Account  AllocGPUS  AllocCPUS      State ExitCode \n------------ ---------- ----------- ------------ ---------------- ---------- ---------- ---------- ---------- ---------- -------- \n10739714     accelerate        none         none xxx    llm2tmp   research          8         64 CANCELLED+      0:0 \n10740830         python      normal         none xxx    llm2tmp   research          1         16    RUNNING      0:0 \n10747428     accelerate        none         none xxx    llm2tmp   research          8         40  COMPLETED      0:0 \n</code></pre>"},{"location":"linux/slurm/#swatch","title":"swatch","text":"<p>identify why my job is pending.</p> <pre><code>swatch check_pending &lt;jobid&gt;\n</code></pre>"},{"location":"linux/snap/","title":"snap","text":"<pre><code># install latest\nsnap install blender \n\n# install a specific version\nsnap install blender --channel=2.93lts/stable\n\n# look up all versions (channels)\nsnap info blender\n\n# update to latest/specific version\nsnap refresh blender\nsnap refresh blender --channel=2.92/stable\n\n# remove\nsnap remove blender\n</code></pre>"},{"location":"linux/swap/","title":"swap","text":""},{"location":"linux/swap/#check-swap","title":"check swap","text":"<p>use <code>htop</code>.</p>"},{"location":"linux/swap/#create-swap","title":"create swap","text":"<pre><code>sudo fallocate -l 4G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n</code></pre>"},{"location":"linux/swap/#delete-swap","title":"delete swap","text":"<pre><code>sudo swapoff /swapfile\nsudo rm /swapfile\n</code></pre>"},{"location":"linux/swap/#check-swap-file-location","title":"check swap file location","text":"<pre><code>sudo swapon -s\n\n# or\nsudo cat /proc/swaps\n</code></pre>"},{"location":"linux/swap/#kswapd0-high-cpu-usage","title":"<code>kswapd0</code> high CPU usage.","text":"<p>This is usually caused by unmounted Swap if there is not enough memory.</p> <p>See the second answer here.</p>"},{"location":"linux/sysrq/","title":"Magic SysRq","text":"<p><code>SysRq</code> is usually <code>Print Screen</code> in keyboard.</p> <ul> <li><code>Ctrl+Z</code>: pause a process (plus <code>bg</code> to resume in the background, <code>fg</code> to raise to foreground)</li> <li><code>Ctrl+C</code>: politely ask the process to shut down now</li> <li><code>Ctrl+\\</code>: mercilessly kill the process that is currently in the foreground</li> </ul> <p>Push each key sequentially.</p> <ul> <li><code>Alt+SysRq+s</code>: Write data to disk (always do this before killing anything important)</li> <li><code>Alt+SysRq+s, k</code>: mercilessly kill all current processes on a given virtual console</li> <li><code>Alt+SysRq+s, b</code>: mercilessly reboot without unmounting,</li> <li><code>Alt+SysRq+r, e, i, s, u, b</code>: Safely reboot even if the system is utterly broken</li> </ul>"},{"location":"linux/tmux/","title":"Tmux","text":"<p>--&gt; good tutorial &lt;--</p> <ul> <li>how to invoke tmux (remote ssh) in tmux (local) ?   <code>Ctrl + b</code> is the outter tmux.   <code>Ctrl + b + b</code> is the inner tmux.   <code>Ctrl + b + b + b</code> if you have even more...</li> </ul> <pre><code>## session\n# create session\ntmux # nameless\ntmux new -s session_name\n# detach\ntmux detach\n&lt;Ctrl + B&gt; d\n# list sessions\ntmux ls\ntmux list-session\n&lt;Ctrl + B&gt; s\n# attach\ntmux a # to the first session\ntmux a -t session_name\ntmux attach -t session_name\n# kill\ntmux kill-session -t session_name\ntmux kill-server # close all\n# switch \n&lt;Ctrl + B&gt; s\n\n## window\n# create window\n&lt;Ctrl + B&gt; c\n# delete window\n&lt;Ctrl + B&gt; d\n# switch window\n&lt;Ctrl + B&gt; 0~9\n# list and select\n&lt;Ctrl + B&gt; w\n\n# close window\n&lt;Ctrl + B&gt; &amp;\ntmux kill-window\n\n## pane\n# create\n&lt;Ctrl + B&gt; \" # horizontal\n&lt;Ctrl + B&gt; % # vertical\n# switch\n&lt;Ctrl + B&gt; arrow keys\n# adjust size\n&lt;Ctrl + B&gt; (hold) + arrow keys\n# close\n&lt;Ctrl + B&gt; x\n\n### scroll\n&lt;Ctrl + B&gt; [\n# jump to top\nAlt + Shift + ,\n# jump to any line in scroll mode\ng \n</code></pre>"},{"location":"linux/trash/","title":"trash-cli","text":"<p>Cut my fingers if I <code>rm</code> a file accidentally again!!!</p>"},{"location":"linux/trash/#usage","title":"Usage","text":"<pre><code># install\nsudo apt install trash-cli\n\n# rm a file or directory (recursive, force)\ntrash &lt;file/dir&gt;\ntrash-put &lt;file/dir&gt;\n\n# list the trashbin\ntrash-list\n\n# empty the trashbin (globally!)\ntrash-empty\n\n# empty certain file from the trashbin\ntrash-rm &lt;pattern&gt;\n\n# restore from trash\nrestore-trash # will show a list and let you choose id to restore\n</code></pre>"},{"location":"linux/trash/#details","title":"Details","text":"<p><code>trash</code> literally moves the file to <code>&lt;TrashDir&gt;/files</code>, and create an info file at <code>&lt;TrashDir&gt;/infos</code>.</p> <p>About the location of <code>&lt;TrashDir&gt;</code>:</p> <ul> <li>If you delete files under your home, the trash directory is <code>~/.local/share/Trash</code></li> </ul> <ul> <li> <p>If you delete files under another disk, like <code>/data/</code>, the trash directory is <code>/data/.Trash</code></p> <pre><code># you may get a warning like:\n$ trash-list\nTrashDir skipped because parent not sticky: /data/.Trash/1002\n\n# solution: make it sticky\n$ chmod +t /data/.Trash\n</code></pre> </li> </ul>"},{"location":"linux/ubuntu_install_list/","title":"Ubuntu install list","text":""},{"location":"linux/ubuntu_install_list/#todo-list-to-install-ubuntu","title":"Todo list to install ubuntu","text":""},{"location":"linux/ubuntu_install_list/#rufus-usb-booter","title":"Rufus USB booter","text":"<p>https://www.ubuntu.com/download</p> <p>https://rufus.ie/</p> <p>Use the default settings are OK.</p>"},{"location":"linux/ubuntu_install_list/#restart-the-machine-enter-boot-manager","title":"Restart the machine, enter boot manager.","text":"<p>Zlab servers: </p> <ul> <li>omnisky:<code>F11</code></li> <li>ASUS:<code>Del/F2</code></li> </ul> <p>Select your USB as the starter, and choose <code>try or install ubuntu</code>.</p> <p>If your machine only has NVIDIA GPU and use it as the display output, it might freeze during install (at the logo) and overheat the GPU. In this case, choose <code>Ubuntu (Safe Graphics)</code> to install, and make sure to check <code>install third-party drivers</code>.</p> <p>In case you installed but the system still gets stuck, choose <code>advanced options for Ubuntu</code> during boot and enter <code>recovery</code> mode, and then choose <code>root</code> to enter the shell:</p> <pre><code># mount file system\nmount -o remount,rw /\n\n# connect network\nsystemctl start NetworkManager\nip -4 addr # check\n\n# (optional) change to tuna sources\nsudo sed -i 's|http://.*.archive.ubuntu.com|https://mirrors.tuna.tsinghua.edu.cn|g' /etc/apt/sources.list\n\n# install nvidia drivers\napt update\nadd-apt-repository ppa:graphics-drivers/ppa\nubuntu-drivers devices\napt install nvidia-driver-570 # choose the recommended one is OK.\n\n# reboot and it should start\nreboot\n</code></pre>"},{"location":"linux/ubuntu_install_list/#install","title":"Install","text":"<p>Wait until you see graphics.</p> <p>Choose language, how to install (alongside or erase old OS), enter your name and password.</p> <p>Usually Minimal Install is OK.</p>"},{"location":"linux/ubuntu_install_list/#setting-up","title":"Setting up","text":"<ul> <li>Network connection (cable or wifi)</li> </ul> <ul> <li> <p>Basic softwares</p> <pre><code>#### as the root\napt update\napt upgrade\n\n# necessary tools\napt install vim git curl net-tools tmux ssh build-essential cmake htop\n\n# vision related\napt install feh mplayer ffmpeg\n\n# if failed to fetch, install proxychains first\nsudo proxychains apt install feh\n</code></pre> <p>If wish to change apt sources:</p> <pre><code>cd /etc/apt\n# backup\ncp sources.list sources.list.original\n# replace the content from your source.\nvi sources.list\n</code></pre> <p>TUNA source: https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</p> </li> </ul> <ul> <li> <p>VPN</p> <pre><code>#### as the root\n\n### trojan client\nwget -c https://kiui.moe/files/softwares/trojan-1.15.1-linux-amd64.tar.xz\ntar -xvf trojan-1.15.1-linux-amd64.tar.xz\n\nvi trojan/config.json\n# edit config, don't forget the password...\n\nsudo vi /etc/systemd/system/trojan.service\n# add the following\n[Unit]\nDescription=trojan\nAfter=network.target\n\n[Service]\nType=simple\nPIDFile=/home/kiui/trojan/trojan.pid # change the path if needed!\nExecStart=/home/kiui/trojan/trojan -c /home/kiui/trojan/config.json -l /home/kiui/trojan/trojan.log\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=1s\n\n[Install]\nWantedBy=multi-user.target\n\n# start and test\nsudo systemctl start trojan\nsudo systemctl status trojan\nsudo systemctl enable trojan\n\n### proxychains\nsudo apt install proxychains\n\nsudo vi /etc/proxychains.conf\n# add the followings\nsocks5 127.0.0.1 1080\n\ncurl -4 ip.sb\nproxychains curl -4 ip.sb\n\n### privoxy\nsudo apt install privoxy\n\nsudo vi /etc/privoxy/config\n# add the followings\nlisten-address 0.0.0.0:1081 # http proxy port\ntoggle  1\nenable-remote-toggle 1\nenable-remote-http-toggle 1\nenable-edit-actions 0\nenforce-blocks 0\nbuffer-limit 4096\nforwarded-connect-retries  0\naccept-intercepted-requests 0\nallow-cgi-request-crunching 0\nsplit-large-forms 0\nkeep-alive-timeout 5\nsocket-timeout 60\n\nforward-socks5 / 0.0.0.0:1080 . # trojan's socks5 proxy port\n</code></pre> </li> </ul> <ul> <li> <p>Customization bash &amp; tmux</p> <pre><code>### as a non-root user\n\ngit clone https://github.com/ashawkey/dotfiles.git\ncd dotfiles\nbash install.sh\n\n### set default proxy\n\nvi ~/.bashrc\n# add the followings\nexport http_proxy=\"http://127.0.0.1:1081\"\nexport https_proxy=\"http://127.0.0.1:1081\"\n</code></pre> </li> </ul> <ul> <li> <p>SSH settings</p> <pre><code>### install ssh\nsudo apt install ssh # both openssh-cleint and openssh-server\nsudo systemctl enable ssh\nsudo systemctl start ssh\n\n### ssh config\nvi /etc/ssh/sshd_config\n\nPort xxxx\nPermitRootLogin no\nAllowUsers user1 user2\n\n### ufw\nsudo apt install ufw\n\n# enable ipv6\nsudo vim /etc/default/ufw\n# set `IPV6=yes`\n\n# set rules\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# allow\nsudo ufw allow ssh # by default it opens 22 port\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw allow \u2018Nginx Full\u2019\nsudo ufw allow 20212 # any port\nsudo ufw allow 4000 # any port\n</code></pre> </li> </ul> <ul> <li> <p>Mount Disks</p> <pre><code>sudo fdisk -l \n# should see /dev/sdb, /dev/sdc, ...\n# if partitioned, also see /dev/sdb1, /dev/sdb2, ...\n\nsudo mkdir /data2\nsudo mount /dev/sdb1 /data2\n\n# auto mount\nsudo vim /etc/fstab\n# /dev/sdb1 /data ext4 defaults 0 2\n# /dev/sdc /data2 ext4 defaults 0 2\n\nsudo mount -av\n</code></pre> </li> </ul> <ul> <li> <p>NoMachine Remote desktop</p> <pre><code>wget -c https://download.nomachine.com/download/7.10/Linux/nomachine_7.10.1_1_amd64.deb\nsudo dpkg -i nomachine_7.10.1_1_amd64.deb\n</code></pre> <p>How to support headless server: https://kb.nomachine.com/AR03P00973</p> <p>Recommend to use the third way, although it requires manual setup at each reboot...:</p> <pre><code>sudo systemctl stop gdm\nsudo /etc/NX/nxserver --restart\n\n# reconnect to nomachine, open display settings and change resolution.\n</code></pre> </li> </ul> <ul> <li> <p>Anaconda</p> <pre><code>wget -c https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh\nbash Anaconda3-2022.05-Linux-x86_64.sh\n\n# if you forget to add it to path, add this in ~/.bashrc\n\n# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/home/kiui/anaconda3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/home/kiui/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/home/kiui/anaconda3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/home/kiui/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;\n\n# update pip\npip install --upgrade pip\n</code></pre> </li> </ul> <ul> <li> <p>NVIDIA driver</p> <p>Open additional drivers, choose the latest alternative driver for your GPU. (always use the latest, as it is usually backwards compatible to CUDA)</p> <p>Choose <code>apply changes</code>, and wait.</p> <p>Choose <code>restart</code>......</p> <p>Verify the driver installation by <code>nvidia-smi</code>.</p> <p>No devices were found:</p> <p>This can be caused by using open-kernel driver on non-open GPU (like TITAN RTX...), see here.</p> <p>You can find in <code>/var/log/syslog</code>:</p> <p>NVRM: Open nvidia.ko is only ready for use on Data Center GPUs.</p> <p>In such case, reinstall a driver without (open kernel) !!!</p> </li> </ul> <ul> <li> <p>OpenGL</p> <p>should be installed along the Nvidia driver.</p> <pre><code># if it says EGL/egl.h not found\nsudo apt install mesa-utils libegl1-mesa-dev\n\n# if it says fails to open swrast \nsudo ln -s /usr/lib/x86_64-linux-gnu/dri/ /usr/lib/dri\n\n# if it then says cannot find GLIBCXX version in anaconda lib dir, this maybe because of a mismatch of anaconda and system lib versions... check by\nl /usr/lib/x86_64-linux-gnu/libstdc* # 6.0.30\nl ~/anaconda3/lib/libstdc* # 6.0.29\n\n# fix by replacing the old one and relink\ncp /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30 ~/anaconda3/lib\ncd ~/anaconda3/lib\nchmod 775 libstdc++.so.6.0.30\nln -sf libstdc++.so.6.0.30 libstdc++.so.6\nln -sf libstdc++.so.6.0.30 libstdc++.so\n</code></pre> </li> </ul> <ul> <li> <p>CUDA</p> <p>https://developer.nvidia.com/cuda-downloads</p> <pre><code># download the correct runfile and run it to install\n# use sh, not bash\n# use root to run, do not run with sudo (will silently quit)\nsh cuda.xxxx.sh\n# just make sure the cuda version is compatible to the driver... (your driver is newer to the default one)\n# create soft link in /user/local/cuda\n\n# add to path\nexport PATH=\"/usr/local/cuda/bin:${PATH}\"\nexport LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:${LD_LIBRARY_PATH}\"\n\nnvcc -V\n</code></pre> </li> </ul> <ul> <li> <p>CuDNN</p> <p>https://developer.nvidia.com/rdp/cudnn-download</p> <pre><code># download and uncompress\ntar -xvf cudnn-linux-x86_64-8.x.x.x_cudaX.Y-archive.tar.xz\n\n# copy paste\nsudo cp cudnn-*-archive/include/cudnn*.h /usr/local/cuda/include \nsudo cp -P cudnn-*-archive/lib/libcudnn* /usr/local/cuda/lib64 \nsudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*\n</code></pre> </li> </ul> <ul> <li> <p>VS Code</p> <p>download the deb file to install.</p> </li> </ul>"},{"location":"linux/ubuntu_install_list/#misc","title":"Misc","text":"<ul> <li> <p>I cannot open firefox or any other snap applications in nomachine virtual desktop...</p> <p>This seems to be a known bug...</p> <p>A workaround is to reinstall firefox in dev mode:</p> <pre><code>sudo snap remove firefox\nsudo snap install firefox --devmode\n\n# same for the other apps\nsudo snap remove snap-store\nsudo snap install snap-store --devmode\n</code></pre> </li> </ul> <ul> <li> <p>install chrome</p> <pre><code>wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n</code></pre> </li> </ul> <ul> <li> <p>install vscode</p> <pre><code># link may change, better use a browser gui to download\nwget \nhttps://vscode.download.prss.microsoft.com/dbazure/download/stable/611f9bfce64f25108829dd295f54a6894e87339d/code_1.90.1-1718141439_amd64.deb\n\nsudo dpkg -i code_1.90.1-1718141439_amd64.deb\n</code></pre> </li> </ul>"},{"location":"linux/ufw/","title":"ufw","text":""},{"location":"linux/ufw/#enable","title":"enable","text":"<pre><code>sudo apt install ufw\n\n# enable ipv6\nsudo vim /etc/default/ufw\n# set `IPV6=yes`\n\n# set rules\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# allow\nsudo ufw allow ssh # by default it opens 22 port\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw allow \u2018Nginx Full\u2019\nsudo ufw allow 20212 # any port\n\n# deny\nsudo ufw deny 20212\n\n# see rule list\nsudo ufw status [verbose/numbered]\n\n# delete rules by id\nsudo ufw status numbered # check the id\nsudo ufw delete &lt;id&gt;\n\n# or delete by name\nsudo ufw delete allow 20212\nsudo ufw delete deny 20212\n\n# enable \nsudo ufw enable\n</code></pre>"},{"location":"linux/ulimit/","title":"ulimit","text":"<p>set user limits. </p> <p>The most common case is \"Too Many Open Files\" Error.</p>"},{"location":"linux/ulimit/#temporary-fix","title":"temporary fix","text":"<pre><code># check all limits\nulimit -a\n\n# check number of files (nofile)\nulimit -n # default to 1024, meaning you can at most open 1024 files.\n\n# set\nulimit -n 100000\n</code></pre>"},{"location":"linux/ulimit/#permanent-fix","title":"permanent fix","text":"<p>Modify <code>/etc/security/limits.conf</code>, and add:</p> <pre><code>* soft nofile 100000\n* hard nofile 100000\n</code></pre>"},{"location":"linux/user/","title":"User","text":"<ul> <li> <p>Add user</p> <pre><code># do all the defaults: create home, select shell, prompt for password.\nadduser hawkey\n\n# do nothing\nuseradd hawkey\nuseradd -d /home/hawkey -s /bin/bash \n\npasswd hawkey # change password\n</code></pre> </li> </ul> <ul> <li> <p>Delete user</p> <pre><code>userdel hawkey\nuserdel -r hawkey # delete home\n</code></pre> </li> </ul> <ul> <li> <p>switch user</p> <pre><code>su hawkey\nsu # root\n</code></pre> </li> </ul> <ul> <li> <p>add user to group</p> <pre><code>usermod -aG g\n</code></pre> </li> </ul> <ul> <li> <p>add sudoer</p> <pre><code># recommend use this!\nusermod -aG sudo hawkey\n</code></pre> <p>Or</p> <pre><code>visudo # however, this is nano\nvim /etc/sudoers\n</code></pre> <p>and append a line:</p> <pre><code>hawkey ALL=(ALL) NOPASSWD:ALL\n</code></pre> </li> </ul> <ul> <li> <p>Change shell</p> <pre><code>chsh -s /bin/bash # but never change shell for root !!!\n</code></pre> <p>Or </p> <pre><code>vi /etc/passwd\n</code></pre> <p>and modify the corresponding line.</p> </li> </ul>"},{"location":"linux/vim/","title":"vim","text":""},{"location":"linux/vim/#remove-m-at-line-ending-dos-to-unix-format","title":"remove ^M at line ending (dos to unix format)","text":"<pre><code>:e ++ff=dos \n</code></pre>"},{"location":"linux/vim/#slow-startup","title":"slow startup","text":"<p>First, try <code>vim -X</code>.</p> <p>If it solves the problem, add this to <code>~/.vimrc</code>:</p> <pre><code>set clipboard=exclude:.*\n</code></pre> <p>This tells vim do not connect to the X server for clipboard sharing.</p>"},{"location":"linux/wget/","title":"Wget","text":""},{"location":"linux/wget/#wget","title":"wget","text":"<pre><code># download \nwget https://example.com/test.txt\n\n# continue download\nwget -c https://example.com/test.txt\n</code></pre>"},{"location":"linux/wget/#curl-client-url","title":"cURL (client URL)","text":"<pre><code># GET and print response\ncurl https://example.com\n\n# GET and save response to file, == wget\ncurl -o test.html https://example.com\n\n# query local ip (using https://ip.sb)\ncurl -4 ip.sb # ipv4\ncurl ip.sb # ipv6\n</code></pre>"},{"location":"linux/wget/#aria2","title":"aria2","text":""},{"location":"linux/xorg/","title":"Xorg","text":""},{"location":"linux/xorg/#xorg-x11","title":"X.org / X11","text":"<p>install: (usually you will never need to do these)</p> <pre><code>sudo apt update \nsudo apt upgrade\nsudo apt install xserver-xorg-core xserver-xorg\nsudo apt install xorg \nsudo apt install ubuntu-desktop\n</code></pre>"},{"location":"linux/xorg/#ubuntu-1804-issues","title":"ubuntu 18.04 issues","text":"<p>since ubuntu 18.04 changes from <code>lightdm</code> to <code>gdm3</code>, there are somethings to do if it fails to start.</p> <ul> <li> <p>disable <code>wayland</code>:</p> <p>edit <code>vi /etc/gdm3/custom.conf</code></p> <pre><code>[deamon]\n\nWaylandEnable=false # uncomment this line\n</code></pre> <p>restart gdm: <code>sudo systemctl restart gdm3</code></p> <p>now you can see the familiar Xorg logs. (CHECK?)</p> </li> </ul> <ul> <li>reconfigure <code>xorg.conf</code> and restart <code>gdm3</code></li> </ul>"},{"location":"linux/xorg/#basics","title":"basics","text":"<p>log files:</p> <ul> <li><code>/var/log/Xorg.0.log</code></li> </ul> <ul> <li><code>~/.xsession-error</code>  to see the recent errors</li> </ul> <p>config:</p> <ul> <li> <p><code>/etc/X11/xorg.conf</code>  specifies all monitors, devices.</p> <p>to regenerate the configure file:</p> <pre><code># using X\nsudo X -configure\n\n# using nvidia\nsudo nvidia-xconfig\n</code></pre> <p>The detailed doc.</p> <p>Headless nvidia driver config:</p> <pre><code>Section \"Device\"\n    Identifier  \"Card9\"\n    Driver      \"nvidia\"\n    BusID       \"PCI:15:0:0\"\n    Option \"AllowEmptyInitialConfiguration\" \"true\" # the key line\nEndSection\n</code></pre> <p>Another possible case:</p> <pre><code>Section \"Files\"\n  ModulePath   \"/usr/lib/nvidia-&lt;xxx&gt;/xorg\" # the key line !!!\n  ModulePath   \"/usr/lib/xorg/modules\"\n  FontPath     \"/usr/share/fonts/X11/misc\"\n  FontPath     \"/usr/share/fonts/X11/cyrillic\"\n  FontPath     \"/usr/share/fonts/X11/100dpi/:unscaled\"\n  FontPath     \"/usr/share/fonts/X11/75dpi/:unscaled\"\n  FontPath     \"/usr/share/fonts/X11/Type1\"\n  FontPath     \"/usr/share/fonts/X11/100dpi\"\n  FontPath     \"/usr/share/fonts/X11/75dpi\"\n  FontPath     \"built-ins\"\nEndSection\n</code></pre> <p>It is not recommended to modify <code>xorg.conf</code> manually, but this is the only fix for my cases...</p> <p>A full example:</p> <pre><code>Section \"ServerLayout\"\n  Identifier     \"X.org Configured\"\n  Screen         0  \"Screen0\" 0 0\n  InputDevice    \"Mouse0\" \"CorePointer\"\n  InputDevice    \"Keyboard0\" \"CoreKeyboard\"\nEndSection\n\nSection \"Files\"\n  ModulePath   \"/usr/lib/xorg/modules\"\n  FontPath     \"/usr/share/fonts/X11/misc\"\n  FontPath     \"/usr/share/fonts/X11/cyrillic\"\n  FontPath     \"/usr/share/fonts/X11/100dpi/:unscaled\"\n  FontPath     \"/usr/share/fonts/X11/75dpi/:unscaled\"\n  FontPath     \"/usr/share/fonts/X11/Type1\"\n  FontPath     \"/usr/share/fonts/X11/100dpi\"\n  FontPath     \"/usr/share/fonts/X11/75dpi\"\n  FontPath     \"built-ins\"\nEndSection\n\nSection \"Module\"\n  Load  \"glx\"\nEndSection\n\nSection \"InputDevice\"\n  Identifier  \"Keyboard0\"\n  Driver      \"kbd\"\nEndSection\n\nSection \"InputDevice\"\n  Identifier  \"Mouse0\"\n  Driver      \"mouse\"\n  Option      \"Protocol\" \"auto\"\n  Option      \"Device\" \"/dev/input/mice\"\n  Option      \"ZAxisMapping\" \"4 5 6 7\"\nEndSection\n\nSection \"Monitor\"\n  Identifier   \"Monitor0\"\n  VendorName   \"Monitor Vendor\"\n  ModelName    \"Monitor Model\"\nEndSection\n\nSection \"Device\"\n  Identifier  \"Card0\"\n  Driver      \"nvidia\"\n  BusID       \"PCI:4:0:0\"\n    Option      \"AllowEmptyInitialConfiguration\" \"true\"\nEndSection\n\nSection \"Screen\"\n  Identifier \"Screen0\"\n  Device     \"Card0\"\n  Monitor    \"Monitor0\"\n  SubSection \"Display\"\n        Virtual 1920 1080\n      Viewport   0 0\n      Depth     1\n  EndSubSection\n  SubSection \"Display\"\n        Virtual 1920 1080\n      Viewport   0 0\n      Depth     4\n  EndSubSection\n  SubSection \"Display\"\n        Virtual 1920 1080\n      Viewport   0 0\n      Depth     8\n  EndSubSection\n  SubSection \"Display\"\n        Virtual 1920 1080\n      Viewport   0 0\n      Depth     15\n  EndSubSection\n  SubSection \"Display\"\n        Virtual 1920 1080\n      Viewport   0 0\n      Depth     16\n  EndSubSection\n  SubSection \"Display\"\n        Virtual 1920 1080\n      Viewport   0 0\n      Depth     24\n  EndSubSection\nEndSection\n</code></pre> </li> </ul> <ul> <li> <p><code>~/.Xauthority</code></p> <p>sometimes the ssh login is super slow, this maybe caused by Xauthority lock.</p> <p>solution: <code>sudo rm -rf ~/.Xauthority*</code></p> </li> </ul> <ul> <li><code>~/.xsession</code></li> </ul>"},{"location":"linux/xorg/#display-manager","title":"display manager","text":"<p>usually <code>lightdm</code>, alternatives are <code>gdm3, sddm, ...</code></p> <pre><code>sudo systemctl status lightdm\n\n# or more generally:\nsudo systemctl status display-manager\n</code></pre> <p>log files:<code>/var/log/lightdm/lightdm.log</code></p>"},{"location":"linux/xorg/#nomachine-related","title":"nomachine related","text":"<pre><code>/usr/NX/var/log/nxerror.log\n</code></pre> <p>Black screen issue for headless machines (it worked in 44!):</p> <p>https://knowledgebase.nomachine.com/AR03P00973</p> <pre><code># turn off X server\nsudo systemctl stop gdm\n\n# restart NX\nsudo /etc/NX/nxserver --restart\n</code></pre>"},{"location":"linux/xorg/#reinstall-ubuntu-desktop","title":"reinstall ubuntu-desktop","text":"<pre><code># do not use taskel in terminal... it stucks with no reason and once you unfocus from the tab, it somewhat freezes..\n\n\nsudo apt install --reinstall ubuntu-desktop\nsudo apt install --reinstall unity\n</code></pre>"},{"location":"linux/xorg/#restart-those-machines-and-find-nomachine-fails-to-connect","title":"restart those machines and find nomachine fails to connect...","text":"<ul> <li>your machine is running in low-graphics mode --&gt; black screen with X mouse mark. (ubuntu16)<ul> <li>likely lightdm is not running. Check by <code>sudo systemctl status lightdm</code>, usually something is wrong with <code>/etc/X11/xorg.conf</code>, just configure it like above.</li> <li>restart lightdm, restart nomachine: <code>sudo systemctl restart lightdm &amp;&amp; sudo /etc/NX/nxserver --restart</code></li> </ul> </li> </ul>"},{"location":"linux/zip/","title":"zip","text":"<ul> <li> <p>zip with wild card.</p> <pre><code>zip -r out.zip ./*/*/*.jpg\n</code></pre> </li> </ul> <ul> <li> <p>exclude sub-directory</p> <pre><code>zip -r out.zip &lt;dir&gt; -x \"dir/subdir1\"  \"dir/subdir1/*\"\n# should use \"\", or escape asterisk by \\*\n\n# example\nzip drn.zip -r drn-master/ -x \"drn-master/pretrained/*\"\n</code></pre> </li> </ul> <ul> <li> <p>check the content without unzipping:</p> <pre><code>vim archive.zip # you can even further read the content of a file in it.\nless archive.zip\n\nunzip -l archive.zip # list archive\nunzip -p archive.zip a_certain_file # print content of a file\n</code></pre> </li> </ul>"},{"location":"linux/zip/#7z","title":"7z","text":"<pre><code>sudo apt install p7zip-full\n\n7z a out.7z -r folder1 folder2 ...\n7z x out.7z\n</code></pre>"},{"location":"linux/security/advanced-shell/","title":"advanced shell","text":"<pre><code>(cmd) # run cmd in a sub-shell, so variable assignments won't influence current shell.\n\n[ # an actual binary in /usr/bin/[, which is an alias for `test`, and will ignore if the last argument is not ]\n</code></pre>"},{"location":"linux/security/auth/","title":"authorization","text":""},{"location":"linux/security/auth/#last-logins","title":"last logins","text":"<pre><code># last (last logins)\n# it uses /var/log/wtmp\nlast [-num] [user]\nlast reboot # show latest reboots\n\n# lastb (last bad, failed logins)\nlastb [-num] [user]\n\n# lastlog (report most recent login of all users)\n# it uses /var/log/lastlog\nlastlog [-u &lt;user&gt;]\n\n# who (list current logged in users)\n# it uses /var/log/utmp\nwho\n</code></pre>"},{"location":"linux/security/auth/#authlog","title":"auth.log","text":"<p><code>/var/log/auth.log</code></p> <p>all the authorization logs.</p> <p>this log is maintained by <code>rsyslog</code></p> <pre><code># check the log\nsudo less /var/log/auth.log\n\n# something like lastb\nsudo cat /var/log/auth.log | grep \"Failed password\"\n</code></pre> <p>If <code>rsyslog</code> is working but <code>auth.log</code> still failed to show any logs, this maybe caused by ownership of <code>auth.log</code> (must not be <code>root</code> but <code>syslog:adm</code>). Try:</p> <pre><code>sudo chown syslog:adm /var/log/auth.log\n</code></pre>"},{"location":"linux/security/auth/#syslog","title":"syslog","text":"<p><code>/var/log/syslog</code></p> <p>this log is also maintained by <code>rsyslog</code>. </p> <p>It contains more information that covers everything.</p>"},{"location":"linux/security/fail2ban/","title":"fail2ban","text":"<pre><code>### install\nsudo apt install fail2ban\n\n### check status\nsudo systemctl status fail2ban\n\n### config\nsudo cp /etc/fail2ban/jail.{conf,local} # create a local config copy\nsudo vim /etc/fail2ban/jail.local\n\n# bantime = 1d\n# findtime = 10m (all entries should be in this time range to be counted.)\n# maxentry = 5\n\n\n### check all banned ips\n# by logs\nsudo zgrep 'Ban' /var/log/fail2ban.log*\n# or directly by iptables\nsudo iptables -L -n | awk '$1==\"REJECT\" &amp;&amp; $4!=\"0.0.0.0/0\"'\n</code></pre>"},{"location":"linux/security/file-permission/","title":"File permission","text":""},{"location":"linux/security/file-permission/#chattr","title":"chattr","text":"<p>https://www.computerhope.com/unix/chattr.htm#list-of-attributes</p> <ul> <li> <p><code>lsattr &lt;file&gt;</code></p> <p>list file attribute</p> <pre><code># output example\n----i-------- /etc/resolv.conf\n\n# some attributes:\na: append mode only for writing\ni: immutable (cannot be deleted or renamed, `sudo rm -f` will show `Operation not permitted`, but not `Permission denied` )\n</code></pre> </li> </ul> <ul> <li> <p><code>chattr [-R] [+/-/=&lt;attr&gt;] &lt;file&gt;</code></p> <p>change the attributes of file or directory.</p> </li> </ul>"},{"location":"linux/security/file-permission/#chown","title":"chown","text":"<p>change ownership of file or directory.</p> <p>only root can use chown.</p> <p>similarly, there is <code>chgrp</code> for change group of file or directory.</p> <pre><code>sudo chown &lt;new-owner&gt; &lt;file&gt;\nsudo chown &lt;new-owner:new-group&gt; &lt;file&gt;\nsudo chown -R &lt;new-owner&gt; &lt;dir&gt;\n</code></pre>"},{"location":"linux/security/file-permission/#umask","title":"umask","text":"<p>set/check default user permission mask for new files.</p> <pre><code>umask # show current default umask\numask 022 # rw-r--r--\n\n# u[ser], g[roup], o[ther], a[ll]\numask a= # dangerous! ---------\numask u+x # rwxr--r--\n</code></pre>"},{"location":"linux/security/file-permission/#chmod","title":"chmod","text":"<p>set user permission mask for a specific file.</p> <pre><code>chmod 777 &lt;file&gt; # rwxrwxrwx\nchmod u=rwx,g=rx,o=r &lt;file&gt;\n\nchmod -R 777 &lt;dir&gt;\n</code></pre>"},{"location":"linux/security/file-permission/#note-the-escaped-space","title":"note the escaped space!","text":"<pre><code>`python\\ ` looks the same as `python ` in default ls and top.\nbut `ls --escape` will reveal it!\n</code></pre>"},{"location":"linux/security/ld_preload/","title":"LD_PRELOAD","text":"<p>To fix <code>[ERROR: ld.so: object LD_PRELOAD cannot be preloaded: ignored]</code></p> <pre><code># this file is hidden, so use `ls -a`\nsudo echo \"\" &gt; /etc/ld.so.preload\n</code></pre>"},{"location":"linux/security/netstat/","title":"port","text":""},{"location":"linux/security/netstat/#netstat","title":"netstat","text":"<p>check for network communications on every port.</p> <pre><code>sudo netstat -antp # all numeric tcp program\nsudo netstat -anup # ... udp ...\n</code></pre>"},{"location":"linux/security/netstat/#fuser","title":"fuser","text":"<p>identify processes using files or sockets.</p> <pre><code># list user, pid, command that use the file/port.\nfuser -v [-n file/udp/tcp] &lt;file/port&gt;\n\n# kill them\nfuser -k [-HUP/TERM/INT...] .\n\n# interactively kill them\nfuser -i -k .\n</code></pre>"},{"location":"linux/security/netstat/#ufw","title":"ufw","text":"<p>https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04</p> <ul> <li> <p>edit <code>/etc/default/ufw</code></p> <pre><code>IPV6=yes\n</code></pre> </li> </ul> <ul> <li> <p>setup Default</p> <pre><code>sudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# allow ssh\nsudo ufw allow ssh\nsudo ufw allow 22 # double check for sure\n\n# start ufw\nsudo ufw status\nsudo ufw enable # it may disrupt current ssh sessions\n\n# http\nsudo ufw allow http\nsudo ufw allow https\n\n# X11\nsudo ufw allow 6000:6007/tcp\nsudo ufw allow 6000:6007/udp\n\n# check rules &amp; delete \nsudo ufw status numbered\nsudo ufw delete &lt;id&gt;\n\n# disable \nsudo ufw disable\nsudo ufw reset\n</code></pre> </li> </ul>"},{"location":"linux/security/ps-kill/","title":"Ps kill","text":""},{"location":"linux/security/ps-kill/#ps","title":"ps","text":"<pre><code># find by name\nps aux | grep &lt;name&gt;\n\n# find by pid\nps aux | grep &lt;pid&gt;\n</code></pre>"},{"location":"linux/security/ps-kill/#kill","title":"kill","text":"<p>kill by pid. single wrapper to kill system call.</p> <pre><code>kill [-&lt;signal&gt;] &lt;pid&gt;\n\n# equivalent:\nkill -9 &lt;pid&gt;\nkill -KILL &lt;pid&gt;\nkill -SIGKILL &lt;pid&gt;\n\n# 1: HUP, hang up or restart.\n# 2: INT, Ctrl+C\n# 9: KILL\n# 15: TERM, default\n# 19: STOP, Ctrl+Z\n</code></pre>"},{"location":"linux/security/ps-kill/#killall","title":"killall","text":"<p>kill by name.</p> <pre><code>killall [-&lt;signal&gt;] &lt;name&gt;\n\n# kill all processes of a user\nkillall -user &lt;user&gt;\n\n# case in-sensitive\nkillall -I &lt;name&gt;\n</code></pre>"},{"location":"linux/security/ps-kill/#pkill","title":"pkill","text":"<p>kill by name, use <code>pgrep</code> for matching.</p> <pre><code>pkill [-&lt;signal&gt;] &lt;pattern&gt;\n\n# kill root's command that match name\npkill -u root name\n\n# kill all processes of a user\npkill -u &lt;user&gt;\n</code></pre>"},{"location":"linux/security/ssh/","title":"ssh","text":""},{"location":"linux/security/ssh/#ssh-gen-key-ssh-copy-id","title":"ssh-gen-key &amp; ssh-copy-id","text":"<pre><code># create a key-pair on client.\nssh-keygen\n\n# copy it to server\nssh-copy-id user@remote_host\n\n# private key location in server\n~/.ssh/authorized_keys\n</code></pre>"},{"location":"linux/security/ssh/#sshd_config","title":"sshd_config","text":"<p>located in <code>/etc/ssh/sshd_config</code>.</p> <pre><code># port (recommand change to larger unusual port.)\nPort 22\n\n# set root login (recommand set to no)\nPermitRootLogin yes/no/prohabit-password\n\n# whitelist / blacklist for ssh\nAllowUsers user1 user2\nDenyUsers user3 user4\n</code></pre>"},{"location":"linux/wsl/simulate_systemd/","title":"Simulate systemd","text":"<p>Since WSL2 has no <code>systemd</code>, we can simulate service using <code>nohup</code> by add the followings to <code>~/.bashrc</code></p> <pre><code># run trojan at shell launch if no trojan is running.                      \nif ! pgrep \"trojan\" &gt; /dev/null; then\n    nohup bash ~/trojan/run.sh &lt;/dev/null &gt;~/trojan/nohup.out 2&gt;&amp;1 &amp;\nfi\n</code></pre>"},{"location":"mac/mac_shell/","title":"Mac shell","text":""},{"location":"mac/mac_shell/#mac-shell","title":"Mac shell","text":"<p>Mac use ZSH by default.</p> <p>The config file is <code>~/.zshrc</code>, which needs to be created first.</p> <pre><code># example zshrc\n\nalias l=\"ls -lrth\"\nalias la=\"ls -lrtha\"\n\nalias ..=\"cd ..\"\nalias ...=\"cd ../..\"\nalias ....=\"cd ../../..\"\n\nalias rmr=\"rm -r\"\nalias cpr=\"cp -r\"\n\nalias tl=\"tmux ls -F '[#{session_last_attached_string}] #S'\"\nalias taa=\"tmux a\"\nalias ta=\"tmux a -t\"\nalias tk=\"tmux kill-session\"\nalias tn=\"tmux new -s\"\n\nalias proxy_on=\"export http_proxy=http://127.0.0.1:7897/; export https_proxy=http://127.0.0.1:7897/\"\nalias proxy_off=\"unset http_proxy; unset https_proxy\"\n</code></pre>"},{"location":"mac/mac_shell/#iterm2","title":"iterm2","text":"<p>Enable unlimited scrollback buffer:</p> <p>iTerm2 --&gt; Settings --&gt; Profiles --&gt; Terminal --&gt; Check Unlimited scrooback.</p>"},{"location":"mac/mac_shell/#brew","title":"Brew","text":"<p>The all-in-one shell package manager.</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Add to PATH after installation:</p> <pre><code>export PATH=/opt/homebrew/bin:$PATH\n</code></pre> <p>Usage:</p> <pre><code># package manager\nbrew install git tmux htop\nbrew uninstall ...\n\n# also can install apps (cask)\nbrew install --cask firefox\n\n# service manager\nbrew services start/stop/status colima\n</code></pre>"},{"location":"mac/mac_shell/#scroll-reverser","title":"Scroll Reverser","text":"<p>Configure the scroll direction of mouse &amp; touch pad to be different.</p> <p>Use brew: </p> <pre><code>brew install scroll-reverser\n</code></pre>"},{"location":"mac/mac_shell/#docker","title":"Docker","text":"<pre><code>brew install docker docker-compose colima\ncolima start/stop/status\nbrew services start colima\ndocker ps\n</code></pre>"},{"location":"mac/mac_tips/","title":"Mac tips","text":""},{"location":"mac/mac_tips/#basics","title":"Basics","text":"<ul> <li>Input<ul> <li>add Chinese input: settings --&gt; text input --&gt; edit --&gt; +</li> <li>change input method: <code>control + space</code>, or just <code>globe</code></li> </ul> </li> <li><code>delete</code> is like <code>backspace</code> in Windows, use <code>globe + delete</code> to delete backwards.</li> <li><code>command</code> is 90% like <code>control</code> in Windows!<ul> <li><code>globe</code> is at the position of Windows <code>control</code>, but it's more like Windows <code>fn</code> and has no use in most cases.</li> <li>remap <code>globe</code> and <code>command</code>: settings --&gt; keyboard --&gt; keyboard shortcuts --&gt; modifier keys</li> <li><code>command + c/v</code> for copy/paste, but <code>control + c</code> for interruption in shell.</li> </ul> </li> <li><code>command + space</code>: spotlight search (useful to launch other apps)</li> <li>3-finger-swipe-up: show all windows and change front app!</li> <li>dock and application status<ul> <li>a black dot underneath means running in background. It happens when you click left-top-\"x\". Use <code>command + q</code> to fully exit.</li> <li>left-top-\u201c-\u201d will minimize the window to the right part of the dock, this will put the app in hibernation. Don't use it, instead use 3-finger-swipe-up.</li> <li>dock can be hidden from settings.</li> </ul> </li> <li>finder<ul> <li>cannot create a new file directly, instead open the corresponding app and save to file.</li> <li>turn on actual path: finder --&gt; view --&gt; show path bar</li> <li>show hidden files &amp; folders: <code>command + shift + .</code></li> <li><code>command + x</code> is not Cut, instead use <code>command + c</code> to Copy and <code>command + shift + v</code> to Move (instead of Paste).</li> <li><code>command + delete</code> to delete a file (move to trash).</li> </ul> </li> </ul>"},{"location":"mac/mac_tips/#applications","title":"Applications","text":"<ul> <li>Terminal: iterm2</li> </ul> <ul> <li>Screenshot: snipaste</li> </ul> <ul> <li>Split screen: magnet (buy from app store)</li> </ul>"},{"location":"math/quaternion/","title":"quaternion","text":"<p>Ref &amp; Credits: https://github.com/Krasjet/quaternion</p>"},{"location":"math/quaternion/#basics-about-complex-number-mathbb-c","title":"Basics about complex number \\(\\mathbb C\\)","text":"\\[ \\displaylines{ i^2 = -1 \\\\ z = a + bi = \\begin{bmatrix}a &amp;-b \\\\ b &amp; a\\end{bmatrix} \\\\ z_1z_2=z_2z_1 \\\\ ||z|| = \\sqrt{a^2 + b^2} = \\sqrt{z \\bar z} } \\]"},{"location":"math/quaternion/#2d-rotation","title":"2D Rotation","text":"<p>2D rotation (counter-clockwise by \\(\\theta\\)) can be represented by:</p> \\[ \\displaylines{ \\mathbf{v'} = \\begin{bmatrix}\\cos\\theta &amp;-\\sin\\theta \\\\ \\sin\\theta &amp; \\cos\\theta\\end{bmatrix} \\mathbf{v} } \\] <p>A complex number can represents a 2D vector.</p> <p>Multiply it with a complex number equals scaling and rotating in the 2D plane:</p> <p>let \\(\\theta = \\arccos \\frac{b}{\\sqrt{a^2+b^2}}, r=||z||=\\sqrt{a^2+b^2}\\):</p> \\[ \\displaylines{ z = \\begin{bmatrix}a &amp;-b \\\\ b &amp; a\\end{bmatrix} = \\sqrt{a^2+b^2} \\begin{bmatrix} \\frac {a} {\\sqrt{a^2+b^2}} &amp; \\frac {-b} {\\sqrt{a^2+b^2}} \\\\ \\frac{b}{\\sqrt{a^2+b^2}} &amp; \\frac{a} {\\sqrt{a^2+b^2}}\\end{bmatrix} = r \\begin{bmatrix}\\cos \\theta  &amp; - \\sin \\theta \\\\ \\sin \\theta &amp; \\cos \\theta\\end{bmatrix} \\\\  = r(\\cos\\theta + i\\sin\\theta) \\\\ = re^{i\\theta} } \\] <p>Therefore, we also have \\(v' = zv\\) if the scaling factor \\(r=||z||=1\\).</p>"},{"location":"math/quaternion/#3d-rotation","title":"3D Rotation","text":"<p>3D rotation can be represented by three Euler angles \\((\\theta, \\phi, \\gamma)\\), but it relies on the axes system and can lead to Gimbal Lock.</p> \\[ \\displaylines{ \\mathbf R_x(\\theta) =  \\begin{bmatrix} 1&amp;0&amp;0&amp;0\\\\ 0&amp;\\cos\\theta &amp; -\\sin\\theta &amp;0 \\\\ 0&amp;\\sin\\theta &amp; \\cos\\theta &amp;0 \\\\ 0&amp;0&amp;0 &amp;1 \\end{bmatrix} \\\\ \\mathbf R_y(\\phi) =  \\begin{bmatrix} \\cos\\phi &amp;0 &amp; -\\sin\\phi &amp;0 \\\\ 0&amp;1&amp;0&amp;0\\\\ \\sin\\phi &amp;0 &amp; \\cos\\phi &amp;0 \\\\ 0&amp;0&amp;0 &amp;1 \\end{bmatrix} \\\\ \\mathbf R_z(\\gamma) =  \\begin{bmatrix} \\cos\\gamma &amp; -\\sin\\gamma &amp;0&amp;0 \\\\ \\sin\\gamma &amp; \\cos\\gamma &amp;0&amp;0 \\\\ 0&amp;0&amp;1&amp;0 \\\\ 0&amp;0&amp;0&amp;1\\\\ \\end{bmatrix} \\\\ } \\] <p>Another representation is axis-angle: rotation \\(\\theta\\) degree along axis \\(\\textbf {u} = (x, y, z)^T\\), where \\(||\\mathbf u|| = 1\\). </p> <p>(There are still only 3 Degree of Freedom)</p> <p></p> <p>which leads to the Rodrigues' Rotation Formula:</p> \\[ \\displaylines{ \\mathbf v' = \\cos\\theta\\mathbf v + (1 - \\cos\\theta)(\\mathbf u \\cdot \\mathbf v)\\mathbf u + \\sin\\theta(\\mathbf u\\times\\mathbf v) } \\]"},{"location":"math/quaternion/#basics-about-quaternion-mathbb-h","title":"Basics about Quaternion \\(\\mathbb H\\)","text":"\\[ \\displaylines{ q = a + bi + cj + dk = \\begin{bmatrix}a,b,c,d\\end{bmatrix}^T \\quad (a, b, c, d \\in \\mathbb R) \\\\ ||q||=\\sqrt{a^2 + b^2 + c^2 + d^2} } \\] <p>where </p> \\[ \\displaylines{ i^2=j^2=k^2=ijk=-1 } \\] <p>by left-multiplying \\(i\\) or right-multiplying \\(k\\) to \\(ijk\\), we have:</p> \\[ \\displaylines{ ij=k, jk=i } \\] <p>further left-multiplying \\(i\\) or right-multiplying \\(j\\) to \\(ij\\)  and similar to \\(jk\\), we have:</p> \\[ \\displaylines{ kj=-i, ik=-j,ji=-k } \\] <p>lastly right-multiplying \\(i\\) to \\(ji\\), we have:</p> \\[ \\displaylines{ ki=j } \\] <p>which leads to an important difference with Complex number:</p> \\[ \\displaylines{ q_1q_2 \\neq q_2q_1 } \\] <p></p> <p>The matrix formulation of multiplication:</p> \\[ \\displaylines{ q_1 = a + bi + cj + dk, q_2=e+fi+gj+hk \\\\ q_1q_2=\\begin{bmatrix} a &amp; -b  &amp; -c &amp; -d \\\\ b &amp; a &amp; -d &amp; c \\\\ c &amp; d &amp; a &amp; -b \\\\ d &amp; -c &amp; b &amp; a \\end{bmatrix}  \\begin{bmatrix} e \\\\ f \\\\ g \\\\ h \\end{bmatrix} \\\\ q_2q_1=\\begin{bmatrix} a &amp; -b  &amp; -c &amp; -d \\\\ b &amp; a &amp; d &amp; -c \\\\ c &amp; -d &amp; a &amp; b \\\\ d &amp; c &amp; -b &amp; a \\end{bmatrix} \\begin{bmatrix} e \\\\ f \\\\ g \\\\ h \\end{bmatrix} } \\] <p>A more concise form can be represented by hybrid scalar-vector form (Grafman Product):</p> \\[ \\displaylines{ q_1 = [a, \\mathbf v], q_2=[e, \\mathbf{u}] \\\\ \\mathbf v = [b, c, d]^T, \\mathbf{u}=[f,g,h]^T \\\\ q_1q_2=[ae-\\mathbf v \\cdot \\mathbf u,a\\mathbf u+e\\mathbf v+\\mathbf v \\times \\mathbf u] } \\]"},{"location":"math/quaternion/#pure-quaternion","title":"Pure quaternion","text":"<p>the real part equals 0.</p> \\[ \\displaylines{ v = [0, \\mathbf v], u=[0, \\mathbf u] \\\\ vu=[-\\mathbf v\\cdot\\mathbf u, \\mathbf v\\times\\mathbf u] } \\]"},{"location":"math/quaternion/#inverse","title":"Inverse","text":"\\[ \\displaylines{ qq^{-1} = q^{-1}q = 1 } \\]"},{"location":"math/quaternion/#conjugate","title":"Conjugate","text":"\\[ \\displaylines{ q=[s, \\mathbf u] \\rightarrow q^* = [s, -\\mathbf u] \\\\ (q^*)^* = q \\\\ qq^*=q^*q=||q||^2=[s^2 + \\mathbf u \\cdot \\mathbf u, 0] \\\\ ||q||=||q^*|| \\\\ q_1^*q_2^*=(q_2q_1)^* } \\] <p>And we get a method to calculate the inverse:</p> \\[ \\displaylines{ q^{-1} = \\frac {q^*} {||q||^2} = [\\frac s {s^2 + \\mathbf u \\cdot \\mathbf u}, \\frac {-\\mathbf{u}} {s^2 + \\mathbf u \\cdot \\mathbf u} ]\\\\ } \\] <p>which also indicates:</p> \\[ \\displaylines{ ||q^{-1}|| = \\frac 1 {||q||} \\\\ (q^{-1})^{-1} = q } \\]"},{"location":"math/quaternion/#quaternion-for-3d-rotation","title":"Quaternion for 3D Rotation","text":"<p>A pure quaternion can represent a 3D vector: \\(v=[0, \\mathbf v]\\)</p> <p>A unit quaternion can represent a 3D rotation: \\(||q||=1\\)</p> <p>And we can rewrite the Rodrigues' Rotation Formula in a new form!</p> <p>To rotate \\(\\mathbf{v}\\) for \\(\\theta\\) degree along axis \\(\\textbf {u} = (x, y, z)^T\\), where \\(||\\mathbf u|| = 1\\),</p> <p>define</p> \\[ \\displaylines{ v = [0, \\mathbf v], q=[\\cos\\frac\\theta 2, \\sin\\frac\\theta 2 \\mathbf u] \\\\ } \\] <p>note that \\(\\(||q||=1\\)\\), we have:</p> \\[ \\displaylines{ v'=qvq^*=qvq^{-1} } \\] <p>To understand it, we still need to decompose it: $$ v'=q(v_{||}+v_{\\perp})q^* = qv_{||}q^+qv_{\\perp}q^=qq^*v_{||}+qqv_\\perp = v_{||}+qqv_\\perp $$ where  $$ qq = [\\cos\\theta, \\sin\\theta \\mathbf u] $$ (rotate \\(\\frac \\theta 2\\) twice equals rotate \\(\\theta\\))</p> <p>Inversely, given a unit quaternion \\(q=[a, \\mathbf b]\\), we can get the rotation angle and axis by:</p> \\[ \\displaylines{ \\theta = 2 \\arccos a\\\\ \\mathbf u = \\frac {\\mathbf {b}} {\\sin\\theta} } \\]"},{"location":"math/quaternion/#matrix-form","title":"Matrix form","text":"<p>Very complicated form...</p> <p></p>"},{"location":"math/quaternion/#composition-of-rotation","title":"Composition of rotation","text":"<p>Just do it sequentially,</p> \\[ \\displaylines{ v' = q_2(q_1vq_1^*)q_2^* = (q_2q_1)v(q_2q_1)^* } \\] <p>First apply \\(q_1\\) then apply \\(q_2\\) leads to equal rotation of \\(q_2q_1\\).</p> <p>Note that the order matters! \\(q_1q_2 \\ne q_2q_1\\).</p>"},{"location":"math/quaternion/#double-cover","title":"Double cover","text":"<p>One 3D rotation can be represented with TWO quaternions: \\(q\\) and \\(-q\\).</p> \\[ \\displaylines{ (-q)v(-q)^*=qvq^* \\\\ -q = [-\\cos\\frac\\theta 2, -\\sin\\frac\\theta 2 \\mathbf u] = [\\cos(\\pi - \\frac\\theta 2), \\sin(\\pi-\\frac\\theta 2) (-\\mathbf u)] } \\] <p></p> <p>Notice that the matrix form is exactly the same for \\(-q\\) and \\(q\\), since all of the elements are multiplication of two coefficients!</p>"},{"location":"math/quaternion/#euler-power-form","title":"Euler power form","text":"\\[ \\displaylines{ e^{\\mathbf u \\theta}=\\cos \\theta + \\mathbf u\\sin\\theta \\\\ v' = e^{\\mathbf u \\frac\\theta 2} v e^{-\\mathbf u \\frac \\theta 2} } \\]"},{"location":"math/quaternion/#implementation","title":"Implementation","text":"<pre><code>import torch\n\ndef norm(q):\n    # q: (batch_size, 4)\n\n    return torch.sqrt(torch.sum(q**2, dim=1, keepdim=True))\n\ndef normalize(q):\n    # q: (batch_size, 4)\n\n    return q / (norm(q) + 1e-20)\n\ndef conjugate(q):\n    # q: (batch_size, 4)\n\n    return torch.cat([q[:, 0:1], -q[:, 1:4]], dim=1)\n\ndef inverse(q):\n    # q: (batch_size, 4)\n\n    return conjugate(q) / (torch.sum(q**2, dim=1, keepdim=True) + 1e-20)\n\n\ndef from_vectors(a, b):\n    # get the quaternion from two 3D vectors, such that b = qa.\n    # a: (batch_size, 3)\n    # b: (batch_size, 3)\n    # note: a and b don't need to be unit vectors.\n\n    q = torch.empty(a.shape[0], 4, device=a.device)\n    q[:, 0] = torch.sqrt(torch.sum(a**2, dim=1)) * torch.sqrt(torch.sum(b**2, dim=1)) + torch.sum(a * b, dim=1)\n    q[:, 1:] = torch.cross(a, b)\n    q = normalize(q)\n\n    return q\n\ndef from_axis_angle(axis, angle):\n    # get the quaternion from axis-angle representation\n    # axis: (batch_size, 3)\n    # angle: (batch_size, 1), in radians\n\n    q = torch.empty(axis.shape[0], 4, device=axis.device)\n    q[:, 0] = torch.cos(angle / 2)\n    q[:, 1:] = normalize(axis) * torch.sin(angle / 2)\n\n    return q\n\ndef as_axis_angle(q):\n    # get the axis-angle representation from quaternion\n    # q: (batch_size, 4)\n\n    q = normalize(q)\n    angle = 2 * torch.acos(q[:, 0:1])\n    axis = q[:, 1:] / torch.sin(angle / 2)\n\n    return axis, angle\n\ndef from_matrix(R):\n    # get the quaternion from rotation matrix\n    # R: (batch_size, 3, 3)\n\n    q = torch.empty(R.shape[0], 4, device=R.device)\n    q[:, 0] = 0.5 * torch.sqrt(1 + R[:, 0, 0] + R[:, 1, 1] + R[:, 2, 2])\n    q[:, 1] = (R[:, 2, 1] - R[:, 1, 2]) / (4 * q[:, 0])\n    q[:, 2] = (R[:, 0, 2] - R[:, 2, 0]) / (4 * q[:, 0])\n    q[:, 3] = (R[:, 1, 0] - R[:, 0, 1]) / (4 * q[:, 0])\n\n    return q\n\ndef as_matrix(q):\n    # get the rotation matrix from quaternion\n    # q: (batch_size, 4)\n\n    R = torch.empty(q.shape[0], 3, 3, device=q.device)\n    R[:, 0, 0] = 1 - 2 * (q[:, 2]**2 + q[:, 3]**2)\n    R[:, 0, 1] = 2 * (q[:, 1] * q[:, 2] - q[:, 0] * q[:, 3])\n    R[:, 0, 2] = 2 * (q[:, 1] * q[:, 3] + q[:, 0] * q[:, 2])\n    R[:, 1, 0] = 2 * (q[:, 1] * q[:, 2] + q[:, 0] * q[:, 3])\n    R[:, 1, 1] = 1 - 2 * (q[:, 1]**2 + q[:, 3]**2)\n    R[:, 1, 2] = 2 * (q[:, 2] * q[:, 3] - q[:, 0] * q[:, 1])\n    R[:, 2, 0] = 2 * (q[:, 1] * q[:, 3] - q[:, 0] * q[:, 2])\n    R[:, 2, 1] = 2 * (q[:, 2] * q[:, 3] + q[:, 0] * q[:, 1])\n    R[:, 2, 2] = 1 - 2 * (q[:, 1]**2 + q[:, 2]**2)\n\n    return R\n\ndef mul(q1, q2):\n    # q1: (batch_size, 4)\n    # q2: (batch_size, 4)\n    # return: q1 * q2: (batch_size, 4)\n\n    q = torch.empty_like(q1)\n    q[:, 0] = q1[:, 0] * q2[:, 0] - q1[:, 1] * q2[:, 1] - q1[:, 2] * q2[:, 2] - q1[:, 3] * q2[:, 3]\n    q[:, 1] = q1[:, 0] * q2[:, 1] + q1[:, 1] * q2[:, 0] + q1[:, 2] * q2[:, 3] - q1[:, 3] * q2[:, 2]\n    q[:, 2] = q1[:, 0] * q2[:, 2] - q1[:, 1] * q2[:, 3] + q1[:, 2] * q2[:, 0] + q1[:, 3] * q2[:, 1]\n    q[:, 3] = q1[:, 0] * q2[:, 3] + q1[:, 1] * q2[:, 2] - q1[:, 2] * q2[:, 1] + q1[:, 3] * q2[:, 0]\n\n    return q\n\ndef apply(q, a):\n    # q: (batch_size, 4)\n    # a: (batch_size, 3)\n    # return: q * a * q^{-1}: (batch_size, 3)\n\n    q = normalize(q)\n    q_inv = conjugate(q)\n\n    return mul(mul(q, torch.cat([torch.zeros(q.shape[0], 1, device=q.device), a], dim=1)), q_inv)[:, 1:]\n</code></pre>"},{"location":"math/graph/graph_clustering/","title":"Graph clustering","text":""},{"location":"math/graph/graph_clustering/#graph-clustering","title":"Graph clustering","text":"<p>there are different objective for a partition of a graph.</p> <p>denotations:</p> \\[ \\displaylines{ links(A, B) = \\sum_{i \\in A, j \\in B}A_{ij} \\\\ degree(A) = links(A, V)\\\\ } \\] <ul> <li>Ratio association</li> </ul> \\[ \\displaylines{   RAssoc(G) = max_{V_1,...,V_k }\\sum_{c=1}^k \\frac {links(V_c, V_c)}{|V_c|}  } \\] <ul> <li>Ratio cut</li> </ul> \\[ \\displaylines{   RCut(G) = min_{V_1,...,V_k }\\sum_{c=1}^k \\frac {links(V_c, V \\setminus V_c)}{|V_c|} \\\\ } \\] <p>if \\(V_1, ..., V_k\\) are all of the same size, we call it the Kernighan-Lin objective.</p> <ul> <li>Normalized cut</li> </ul> \\[ \\displaylines{   NCut(G) = min_{V_1,...,V_k }\\sum_{c=1}^k \\frac {links(V_c, V \\setminus V_c)}{degree(V_c)} \\\\ } \\] <ul> <li> <p>General Weighted graph cut/association</p> <p>denote \\(w(V_c) = \\sum_{i \\in V_c}w_i\\) , use this to replace \\(|V_c|\\) in \\(RAssoc\\) and \\(RCut\\).</p> <p>we use \\(WCut,  WAssoc\\) to denote them.</p> </li> </ul>"},{"location":"math/graph/graph_clustering/#spectral-clustering","title":"Spectral clustering","text":""},{"location":"math/graph/graph_clustering/#graclus-multilevel-clustering","title":"Graclus multilevel clustering","text":"<p>Metis is another multilevel clustering algorithm.</p> <ul> <li> <p>coarsening</p> <ul> <li> <p>heavy-edge coarsening</p> <p>metis uses this method, which works well for KL objective.</p> <pre><code>while not all vertex marked:\n    pick an unmarked vertex v randomly\n    find the heaviest edge started from v , to vertex w\n    mark v and w as a supernode\n    set supernode edge weight as v+w\n</code></pre> </li> </ul> <ul> <li> <p>max-cut coarsening</p> <p>generalization of heavy-edge with vertex weights</p> <p>Using \\(\\frac {e(x,y)} {w(x)} +  \\frac {e(x,y)} {w(y)}\\) instead of simply \\(e(x,y)\\).</p> </li> </ul> <p>Stop when there are less than \\(5K\\) nodes, \\(K\\) is the targeted cluster number.</p> </li> </ul> <ul> <li> <p>base-clustering</p> <ul> <li> <p>region growing</p> <p>randomly select vertices and then BFS.</p> </li> </ul> <ul> <li>spectral clustering</li> </ul> <ul> <li> <p>bisection</p> <p>run coarsening until 20 nodes remained, then use kernel k-means.</p> </li> </ul> </li> </ul> <ul> <li> <p>refinement</p> <p>rebuild \\(G_i\\) for $G_{i+1} $ , then use kernel k-means to refine the boundary.</p> </li> </ul>"},{"location":"math/graph/graph_spectral_theory/","title":"Report","text":""},{"location":"math/graph/graph_spectral_theory/#introduction","title":"Introduction","text":"<ul> <li> <p>Graph: generic data representation form describing the geometric structures of data domains. </p> <p>We denote an undirected, connected, weighted graph as \\(\\mathcal{G} = \\{\\mathcal{V}, \\mathcal{E}, \\mathcal{W} \\}\\), and the number of vertices is \\(N = |\\mathcal{V}|\\).</p> </li> </ul> <ul> <li>Graph Signal: data that reside on the vertices of a graph, usually represented as a vector $ f \\in \\mathbb{R}^N $. </li> </ul> <ul> <li> <p>Edge Weights: usually represent similarity between the two vertices.</p> <p>Common graph construction methods when edge weights are not naturally defined:</p> <ul> <li>Gaussian kernel weighting function</li> <li>k-nearest neighbors </li> </ul> </li> </ul>"},{"location":"math/graph/graph_spectral_theory/#the-graph-laplacian","title":"The Graph Laplacian","text":"<ul> <li> <p>(Unnormalized) Graph Laplacian:  \\(\\mathcal{L} =D - W\\)</p> <p>\\(\\mathcal{L}\\) works as a difference operator for any signal \\(f\\) . </p> </li> </ul> \\[ \\displaylines{   Lf(i) = \\sum_{j}w_{ij}(f(i)-f(j)) } \\] <p>Since \\(\\mathcal{L}\\) is a real symmetric matrix for an undirected graph,  it has \\(N\\) eigenvalues denoted as \\(\\{\\lambda_\\iota\\}_{\\iota=0,1,...,N-1}\u200b\\). Also, since the graph has at least one connected component, there is at least one eigenvalue that is equal to zero.</p> <ul> <li>Normalized Graph Laplacian: </li> </ul> \\[ \\displaylines{   \\hat{\\mathcal{L}} = D^{-1/2}\\mathcal{L}D^{-1/2} = I - D^{-1/2}WD^{-1/2} } \\] <p>the eigenvalues of \\(\\hat{\\mathcal{L}}\\) belongs to \\([0, 2]\\) , with \\(\\hat\\lambda = 2\\) if and only if \\(\\mathcal{G}\\) is bipartite.</p> <ul> <li>Random Walk Matrix: \\(P = D^{-1}W\\)</li> </ul> <p>There is not a clear answer as to when to use each of these basis.</p>"},{"location":"math/graph/graph_spectral_theory/#graph-fourier-transform","title":"Graph Fourier Transform","text":"<p>The classical Fourier transform works in the time domain and the frequency domain. Analogously we define the graph Fourier transform, which works in the vertex domain and the graph spectral domain. </p> <p>For any signal \\(f\\) in the vertex domain, we have its corresponding signal (kernel) \\(\\hat{f}\\) in the graph spectral domain.</p> <p>In matrix form, we have \\(U\\) (\\(n * n\\)) as the Fourier basis of the graph Laplacian (eigenvectors as columns), \\(F\\)  (\\(n * m\\)) as a list of \\(m\\) signals on \\(n\\) vertices (each signal is a column).</p> \\[ \\displaylines{ \\hat{f}(\\lambda_\\iota) = \\sum_{i=1}^{N}f(i)\\mathcal{u}_\\iota^*(i) \\\\ \\hat{F} = U'F } \\] <p>and the inverse graph Fourier transform:</p> \\[ \\displaylines{ f(i) = \\sum_{\\iota=0}^{N-1}\\hat{f}(\\lambda_\\iota)u_\\iota(i) \\\\ F = U\\hat{F} } \\] <p>The eigenvalues and eigenvectors in graph spectral domain provide a similar notation of frequency: the eigenvectors with larger eigenvalues contains more zero crossings.</p>"},{"location":"math/graph/graph_spectral_theory/#discrete-calculus-and-signal-smoothness","title":"Discrete Calculus and Signal Smoothness","text":"<p>The edge derivative of a signal \\(f\\) with respect to edge \\(e_{ij}\\) at vertex \\(i\\) is defined as :</p> \\[ \\displaylines{ \\frac {\\partial f} {\\partial e} |_i = \\sqrt{W_{i,j}}|f(j)-f(i)| } \\] <p>The gradient of \\(f\\) at vertex \\(i\\)  (\\(\\nabla_if\\)) is therefore the vector of all derivatives with edges starting from \\(i\\)  in the graph.</p> <p>The discrete \\(p\\)-Dirichlet form of \\(f\\) is defined as:</p> \\[ \\displaylines{ S_p(f) =  \\frac {1} {p} \\sum_{i \\in V}\\parallel \\nabla_if\\parallel_2^p } \\] <p>When \\(p=2\\) , it is known as the graph Laplacian quadratic form.</p> <p>Seminorm of \\(f\\) is defined as \\(\\parallel f\\parallel _\\mathcal{L} = \\sqrt{S_2(f)}\\) .</p> <p>The smoother the graph, the smaller the \\(S_2(f)\\) .</p> <p>The discrete regularization framework:</p> \\[ \\displaylines{ {argmin}_f\\{\\parallel f-y\\parallel_2^2 + \\gamma S_p(f)\\} } \\] <p>When \\(p=2\\) ,it is called Tikhonov Regularization and can be used for image denoising.</p>"},{"location":"math/graph/graph_spectral_theory/#generalized-graph-signal-operators","title":"Generalized Graph Signal Operators","text":""},{"location":"math/graph/graph_spectral_theory/#filtering","title":"Filtering","text":"<ul> <li> <p>graph spectral domain: </p> <p>let \\(\\hat{h}(1*n)\\) be the transfer function in spectral domain. let \\(H = diag(\\hat{h})\\) .</p> </li> </ul> \\[ \\displaylines{ \\hat f_{out}(\\lambda_\\iota) = \\hat f_{in}(\\lambda_\\iota)\\hat h(\\lambda_\\iota) \\\\ \\hat{F}_{out} = H  \\hat{F}_{in} } \\] <p>$ f_{out} $ can then be calculated through an inverse graph Fourier transform.</p> \\[ \\displaylines{ U' * F_{out} = H  U'  F_{in} \\\\ F_{out} = U  H  U'  F_{in} } \\] <ul> <li>vertex domain: linear combination within K-hop neighborhoods</li> </ul> \\[ \\displaylines{   f_{out}(i) = b_{i,i}f_{in}(i) + \\sum_{j \\in \\mathcal{N}(i,K)}b_{i,j}f_{in}(j) } \\] <p>When the transfer function in graph spectral domain is an order K polynomial, the two forms of filtering can be related.</p>"},{"location":"math/graph/graph_spectral_theory/#convolution","title":"Convolution","text":"<p>Convolution in the vertex domain (the time domain) is equivalent to multiplication in the graph spectral domain (the frequency domain).</p> <p>Since in the graph setting there is no \\(h(t-\\tau)\\), we use multiplication in the graph spectral domain to generalize the definition of convolution:</p> \\[ \\displaylines{ (f *_g h)(i) = \\sum_{\\iota = 0}^{N-1}\\hat f(\\lambda_\\iota)\\hat h(\\lambda_\\iota)u_\\iota(i) \\\\ f *_g h = U((U'f) \\odot (U'g)\\\\ F *_g h = UHU'F } \\] <p>so convolution with \\(h\\) is just filter with \\(h\\).</p>"},{"location":"math/graph/graph_spectral_theory/#translation","title":"Translation","text":"<p>It's not clear what it means to translate a graph signal, but we can generalize translation as a convolution with a delta centered at \\(n\\):</p> \\[ \\displaylines{ (T_ng)(i) = \\sqrt{N}(g*\\delta_n)(i) } \\]"},{"location":"math/graph/graph_spectral_theory/#modulation","title":"Modulation","text":"\\[ \\displaylines{ (M_kg)(i) = \\sqrt{N}u_k(i)g(i) } \\]"},{"location":"math/graph/graph_spectral_theory/#dilation","title":"Dilation","text":"\\[ \\displaylines{ (\\hat{\\mathcal{D}_sg)}(\\lambda) = \\hat g(s\\lambda) } \\]"},{"location":"math/graph/graph_spectral_theory/#coarsening","title":"Coarsening","text":"<p>this operation can be separated in to two subtasks:</p> <ul> <li>Down Sampling: identifying a reduced set of vertices</li> <li>Reduction: assigning edges and weights</li> </ul> <p>For a bipartite graph, it is natural to down sample it by a factor of 2.</p> <p>For non-bipartite graphs, conditions are much more complex.</p>"},{"location":"math/graph/graph_spectral_theory/#localized-multiscale-transforms","title":"Localized Multiscale Transforms","text":"<p>Wavelet transform can localize signal in both time and frequency simultaneously, which is better than Fourier transform.</p> <ul> <li>vertex domain<ul> <li>random transforms</li> <li>graph wavelets</li> <li>lifting-based transforms</li> <li>tree wavelets</li> </ul> </li> <li>graph spectral domain<ul> <li>diffusion wavelets</li> <li>spectral graph wavelet</li> <li>graph-quadrature mirror filterbanks</li> </ul> </li> </ul>"},{"location":"math/graph/graph_spectral_theory/#open-issues-extension","title":"Open Issues &amp; Extension","text":""},{"location":"math/graph/graph_spectral_theory/#open-issues","title":"Open Issues","text":"<ul> <li>How the construction of graph affects properties of the localized, multiscale transforms for signals on graphs.</li> <li>When and why to use normalized, unnormalized graph Laplacian or other basis.</li> <li>What kind of distance to use in the vertex domain.</li> <li>Approximate computational techniques for signal processing on graphs.</li> <li>How to link structural properties of graph signals and their underlying graphs to properties.</li> </ul>"},{"location":"math/graph/graph_spectral_theory/#extensions","title":"Extensions","text":"<ul> <li>Directed graph.</li> <li>Time series of signal data.</li> <li>Time series of underlying graphs.</li> </ul>"},{"location":"math/statistics/Rstatistics/","title":"R statistics","text":""},{"location":"math/statistics/Rstatistics/#basics","title":"Basics","text":"<pre><code>x = c(1,2,3,4,5,6)\nlength(x)\nmean(x)\nmedian(x)\nvar(x)\nsd(x)\ncor(x, y) // correlation\ncov(x, y) // covariance\n</code></pre>"},{"location":"math/statistics/Rstatistics/#distributions","title":"Distributions","text":"<pre><code>pnorm(x, mean, sd)\n</code></pre>"},{"location":"math/statistics/Rstatistics/#quantiles","title":"Quantiles","text":"<p>\u9ed8\u8ba4\u8ba1\u7b97\\(P[x \\le z_p] = p\\)\uff0c\u5373\u4e0b\u5206\u4f4d\u6570\u3002</p> <p>\u4f7f\u7528<code>lower.tail=False</code>\u8ba1\u7b97\u4e0a\u5206\u4f4d\u6570\u3002</p> <pre><code>qnorm(p, mean, sd, [lower.tail=True]) # 1-z_p\nqnorm(p, mean, sd, lower.tail=False) # z_p\n\nqt(p, df)\nqchisq(p, df)\nqf(p, df1, df2)\n</code></pre>"},{"location":"math/statistics/Rstatistics/#confidence-interval","title":"Confidence Interval","text":"<p>\u5c45\u7136\u6ca1\u6709\u539f\u751f\u51fd\u6570\uff08</p> <pre><code># sigma^2_x/sigma^2_y \nconfint &lt;- function(x, y, alpha){\n    lower = (var(x)/var(y))/qf(alpha/2, length(x)-1, length(y)-1, lower.tail=F)\n    higher = (var(x)/var(y))/qf(1-alpha/2, length(x)-1, length(y)-1, lower.tail=F)\n    return(c(lower, higher))\n}\n\n# u_x - u_y\nconfint &lt;- function(x, y, alpha, ratio){\n    n = length(x)\n    m = length(y)\n    Sb2 = ((n-1)*var(x)/(ratio^2) + (m-1)*var(y))/(n+m-2)\n    lower = mean(x)-mean(y) - qt(alpha/2, n+m-2, lower.tail=F)*Sb2*sqrt((ratio^2/n)+(1/m))\n    higher = mean(x)-mean(y) + qt(alpha/2, n+m-2, lower.tail=F)*Sb2*sqrt((ratio^2/n)+(1/m))\n    return(c(lower, higher))\n}\n</code></pre>"},{"location":"math/statistics/Rstatistics/#test","title":"test","text":""},{"location":"math/statistics/test/","title":"Statistical test in python","text":"<pre><code>from scipy.stats import ttest_ind, ttest_rel, normaltest, ks_2samp\n\n## Is x from normal distribution ?\nv, p = normaltest(x)\nif p &gt;= 0.05:\n    print(\"x is normal.\")\nelse:\n    print(\"x is not normal.\")\n\n\n## Compare Mean of x and y\n# if x and y are normal, and have same variance (Student's t-test)\nv, p = ttest_ind(x, y, equal_val=True)\nif p &gt;= 0.05:\n    print(\"Not significant difference.\")\nelse:\n    print(\"Significant difference.\")\n\n# if x and y are normal, and have different variance (Welch's t-test)\nv, p = ttest_ind(x, y, equal_val=False)\nif p &gt;= 0.05:\n    print(\"Not significant difference.\")\nelse:\n    print(\"Significant difference.\")\n\n# if x or y is not normal (Kolmogorov\u2013Smirnov test)\nv, p = ks_2samp(x, y)\nif p &gt;= 0.05:\n    print(\"Not significant difference.\")\nelse:\n    print(\"Significant difference.\")\n\n# if x and y are paired (Paired t-test)\nv, p = ttest_rel(x, y)\nif p &gt;= 0.05:\n    print(\"Not significant difference.\")\nelse:\n    print(\"Significant difference.\")\n</code></pre>"},{"location":"nas/router/router/","title":"Router","text":""},{"location":"nas/router/router/#concepts","title":"Concepts","text":"<ul> <li>WAN\uff08Wide Area Network\uff0c\u5e7f\u57df\u7f51\uff09</li> </ul> <ul> <li>LAN\uff08Local Area Network\uff0c\u5c40\u57df\u7f51\uff09\uff0c\u901a\u5e38\u7531\u7269\u7406\u4f4d\u7f6e\u5212\u5206\u3002</li> </ul> <ul> <li>VLAN\uff08Virtual LAN\uff0c\u865a\u62df\u5c40\u57df\u7f51\uff09\uff0c\u4e0d\u6839\u636e\u7269\u7406\u4f4d\u7f6e\u5212\u5206\u7684\u5c40\u57df\u7f51\u3002\u6309\u7167\u903b\u8f91\u5173\u7cfb\u5206\u5272LAN\u4e3a\u4e92\u76f8\u9694\u79bb\u7684\u591a\u4e2aVLAN\uff0c\u4ece\u800c\u65b9\u4fbf\u7ba1\u7406\uff0c\u66f4\u52a0\u5b89\u5168\u3002\u4e0d\u540cVLAN\u5c3d\u7ba1\u4f7f\u7528\u540c\u6837\u7684\u786c\u4ef6\uff0c\u4f46\u65e0\u6cd5\u4e92\u76f8\u901a\u4fe1\uff0c\u9700\u8981\u4f7f\u7528\u4e09\u5c42\u4ea4\u6362\u673a\u6216\u5355\u81c2\u8def\u7531\u5b9e\u73b0VLAN\u95f4\u7684\u901a\u4fe1\u3002</li> </ul> <ul> <li> <p>TCP/IP\u4e94\u5c42\u6a21\u578b\uff1a</p> <ul> <li>\u7269\u7406\u5c42\uff08\u4e2d\u7ee7\u5668\uff0c\u96c6\u7ebf\u5668\uff09</li> <li>\u94fe\u8def\u5c42\uff08\u6839\u636eMAC\u5730\u5740\u8f6c\u53d1\uff0c\u4f8b\u5982\u7f51\u6865\uff0c\u4e8c\u5c42\u4ea4\u6362\u673a\uff09</li> <li>\u7f51\u7edc\u5c42\uff08\u6839\u636eIP\u8f6c\u53d1\uff0c\u4f8b\u5982\u8def\u7531\u5668\uff09</li> <li>\u4f20\u8f93\u5c42</li> <li>\u5e94\u7528\u5c42</li> </ul> </li> </ul> <ul> <li> <p>\u4ea4\u6362\u673a\uff08Switch\uff09\uff1a\u7528\u4e8eLAN\u5185\u90e8\u7684\u5feb\u901f\u6570\u636e\u4ea4\u6362\uff0c\u529f\u80fd\u7b80\u5355\uff0c\u4f7f\u7528\u786c\u4ef6\u5b8c\u6210\u3002\uff08\u5b66\u4e60\u5730\u5740\uff0c\u8f6c\u53d1/\u8fc7\u6ee4\uff0c\u6d88\u9664\u56de\u8def\uff09\u3002\u901a\u5e38\u5305\u542b\u8f83\u591aLAN\u53e3\u3002</p> <ul> <li>\u4e8c\u5c42\u4ea4\u6362\u673a\uff1a\u94fe\u8def\u5c42\u8bbe\u5907\uff0c\u53ea\u6839\u636eMAC\u5730\u5740\u8f6c\u53d1\u3002</li> <li>\u4e09\u5c42\u4ea4\u6362\u673a\uff1a\u7f51\u7edc\u5c42&amp;\u94fe\u8def\u5c42\u8bbe\u5907\uff0c\u5177\u6709\u7b80\u5355\u7684\u8def\u7531\u529f\u80fd\uff0c\u540c\u65f6\u6839\u636eIP\u5730\u5740\u4ee5\u53caMAC\u5730\u5740\u8f6c\u53d1\u3002</li> </ul> </li> </ul> <ul> <li> <p>\u8def\u7531\u5668\uff08Router\uff09\uff1a\u5546\u7528\u8def\u7531\u5668\u4e13\u95e8\u7528\u4e8eLAN/WAN\u7684\u8def\u7531\u8f6c\u53d1\uff0c\u7531\u4e8e\u8def\u7531\u8ba1\u7b97\u529f\u80fd\u7684\u590d\u6742\u6027\uff0c\u4f7f\u7528\u901a\u7528\u8ba1\u7b97\u673a\u52a0\u8f6f\u4ef6\u5b8c\u6210\u3002\u901a\u5e38\u5305\u542b\u51e0\u4e2aWAN\u53e3\u548c\u5c11\u6570LAN\u53e3\u3002</p> <ul> <li> <p>\u4e0d\u4f7f\u7528WAN\u53e3\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4ea4\u6362\u673a\u4f7f\u7528\uff1a</p> <p></p> <p></p> </li> </ul> <ul> <li>\u8f6f\u8def\u7531\uff08\u8f6f\u4ef6\u8def\u7531\u5668\uff09\uff1a\u4f8b\u5982OpenWrt\uff0c\u76f8\u6bd4\u786c\u4ef6\u8def\u7531\u5668\uff08\u5176\u5b9e\u4e5f\u662f\u4e13\u7528\u8f6f\u4ef6\uff09\uff0c\u62d3\u5c55\u6027\u5f3a\uff0c\u6027\u4ef7\u6bd4\u9ad8\u3002</li> </ul> <ul> <li>\u65c1\u8def\u7531\uff1a\u6302\u9760\u5728\u4e3b\u8def\u7531\u7f51\u7edc\u4e0b\u7684\u4e00\u4e2a\u65c1\u7cfb\u7f51\u7edc\uff0c\u7528\u4e8e\u5206\u62c5/\u62d3\u5c55\u4e3b\u8def\u7531\u5668\u7684\u529f\u80fd\u3002\uff08opp\uff1a\u4e3b\u8def\u7531\uff09</li> </ul> <ul> <li>\u5355\u81c2\u8def\u7531\u5668\uff08Router on a stick\uff09\uff1a\u53ea\u5305\u542bWAN\u53e3\u3002\u7528\u4e8e\u5b9e\u73b0\u4e92\u76f8\u9694\u79bb\u7684\u591a\u4e2aVLAN\u4e4b\u95f4\u7684\u8def\u7531\u3002\u901a\u5e38\u662f\u65e0\u6cd5\u8d2d\u7f6e\u4e09\u5c42\u4ea4\u6362\u673a\u65f6\u7684\u5907\u9009\u65b9\u6848\u3002</li> </ul> </li> </ul> <ul> <li> <p>\u5bb6\u7528\u8def\u7531\u5668\uff1a\u529f\u80fd\u8f83\u591a\uff08\u8def\u7531\u8f6c\u53d1\uff0cPPPoE\uff0cNAT\uff0cWiFi\uff0cDHCP\uff09\uff0c\u4f46\u662f\u90fd\u6bd4\u8f83\u57fa\u7840\u3002</p> <ul> <li>\u901a\u5e38\u5305\u542b\u4e00\u4e2aWAN\u53e3\u4e0e\u56db\u4e2aLAN\u53e3\u3002\u81ea\u52a8NAT\uff0c\u5c06LAN\u8f6c\u53d1\u7ed9PPPoE\u5206\u914d\u5230\u516c\u7f51IP\u3002</li> <li>PPPoE\uff08Point-to-Point Protocol over Ethernet\uff09\uff1a\u70b9\u5bf9\u70b9\u4e92\u8054\u7f51\u534f\u8bae\uff0c\u76ee\u524d\u4e3b\u6d41\u7684\u5bbd\u5e26\u63a5\u5165\u65b9\u5f0f\uff0c\u7528\u4e8e\u52a8\u6001\u5206\u914dIP\u5730\u5740\u3002</li> <li>NAT\uff08Network  Address Translation\uff0c\u7f51\u7edc\u5730\u5740\u8f6c\u6362\uff09\uff1a\u7528\u4e8e\u89e3\u51b3IPv4\u4e0d\u8db3\u7684\u8865\u6551\u65b9\u6cd5\u3002\u7528\u4e8e\u5185\u7f51\u591a\u53f0\u4e3b\u673a\u5171\u7528\u4e00\u4e2a\u516c\u7f51IP\u5730\u5740\u3002\u589e\u52a0\u4e86\u7f51\u7edc\u7ed3\u6784\u590d\u6742\u6027\uff0c\u6027\u80fd\u8f83\u5dee\u3002\uff08\u9759\u6001NAT\uff1a\u4e0d\u652f\u6301\u7aef\u53e3\u6620\u5c04\uff09</li> </ul> </li> </ul> <p>\u4e8c\u5c42\u3001\u4e09\u5c42\u4ea4\u6362\u673a\u4e0e\u8def\u7531\u5668\u7684\u5e94\u7528\uff1a</p> <ul> <li>\u4e8c\u5c42\u4ea4\u6362\u673a\u7528\u4e8e\u5c0f\u578b\u7684\u5c40\u57df\u7f51\u7edc\u3002\u5728\u5c0f\u578b\u5c40\u57df\u7f51\u4e2d\uff0c\u5e7f\u64ad\u5305\u5f71\u54cd\u4e0d\u5927\uff0c\u4e8c\u5c42\u4ea4\u6362\u673a\u7684\u5feb\u901f\u4ea4\u6362\u529f\u80fd\u3001\u591a\u4e2a\u63a5\u5165\u7aef\u53e3\u548c\u4f4e\u4ef7\u4e3a\u5c0f\u578b\u7f51\u7edc\u7528\u6237\u63d0\u4f9b\u4e86\u5f88\u5b8c\u5584\u7684\u89e3\u51b3\u65b9\u6848\u3002</li> </ul> <ul> <li>\u4e09\u5c42\u4ea4\u6362\u673a\u7684\u6700\u91cd\u8981\u7684\u529f\u80fd\u662f\u52a0\u5feb\u5927\u578b\u5c40\u57df\u7f51\u7edc\u5185\u90e8\u7684\u6570\u636e\u7684\u5feb\u901f\u8f6c\u53d1\uff0c\u52a0\u5165\u8def\u7531\u529f\u80fd\u4e5f\u662f\u4e3a\u8fd9\u4e2a\u76ee\u7684\u670d\u52a1\u7684\u3002</li> </ul> <ul> <li>\u666e\u901a\u8def\u7531\u5668\u7531\u4e8e\u63a5\u53e3\u6570\u91cf\u6709\u9650\u548c\u8def\u7531\u8f6c\u53d1\u901f\u5ea6\u6162\uff0c\u5c06\u9650\u5236\u7f51\u7edc\u7684\u901f\u5ea6\u548c\u7f51\u7edc\u89c4\u6a21\u3002\uff08\u4f46\u662f\u9ad8\u7aef\u8def\u7531\u5668\u548c\u9ad8\u7aef\u4e09\u5c42\u4ea4\u6362\u673a\u7684\u533a\u522b\u5c31\u6bd4\u8f83\u5c0f\u4e86\uff09</li> </ul> <ul> <li>\u7f51\u5173\uff08Gateway\uff09\uff1a\u5e7f\u4e49\u7684\u6982\u5ff5\uff0c\u4efb\u4f55\u53ef\u4ee5\u8fde\u63a5\u4e24\u4e2a\u7f51\u7edc\u7684\u8bbe\u5907\u3002</li> </ul> <ul> <li>VPN\uff08Virtual Private Network\uff09\uff1a\u901a\u8fc7\u52a0\u5bc6\u7684\u65b9\u5f0f\uff0c\u5229\u7528\u516c\u7f51\u5efa\u7acb\u4e13\u7528\u7684\u7f51\u7edc\u8fde\u63a5\u3002</li> <li>\u5185\u7f51\u7a7f\u900f/NAT\u7a7f\u900f\uff1a\u7528\u4e8e\u8bbf\u95eeNAT\u8bbe\u5907\u540e\u7684\u7279\u5b9a\u4e3b\u673a\uff08\u89e3\u9664NAT\u5bf9\u6b64\u4e3b\u673a\u7684\u5c4f\u853d\uff09\u3002\u901a\u5e38\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u516c\u7f51IP\u6765\u505a\u7aef\u53e3\u6620\u5c04\u3002</li> <li>\u9759\u6001\u8def\u7531\uff1ahttp://blog.sina.com.cn/s/blog_86d75993010109cr.html</li> </ul>"},{"location":"nas/synology/frp_nginx_config/","title":"Frp nginx config","text":""},{"location":"nas/synology/frp_nginx_config/#frpcini","title":"<code>frpc.ini</code>","text":"<pre><code>[common]\nserver_addr = 149.28.65.26\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 2222\n\n[web]\ntype = http\nlocal_port = 5000\ncustom_domains = kiui.moe\n</code></pre>"},{"location":"nas/synology/frp_nginx_config/#run_frpcsh","title":"<code>run_frpc.sh</code>","text":"<pre><code>nohup /root/frp/frpc -c /root/frp/frpc.ini &lt;/dev/null &gt;/root/frp/log.txt 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"nas/synology/frp_nginx_config/#frpsini","title":"<code>frps.ini</code>","text":"<pre><code>[common]\nbind_port = 7000\nvhost_http_port = 5000\n# for a web frontend monitor:\ndashboard_port = 7500\ndashboard_user = &lt;user&gt;\ndashboard_pwd = &lt;pwd&gt;\n</code></pre>"},{"location":"nas/synology/frp_nginx_config/#nginxconf","title":"<code>nginx.conf</code>","text":"<pre><code>location /nas { # access at kiui.moe/nas/\n    include wbo_proxy_headers.conf;\n    proxy_pass http://127.0.0.1:5000/;\n}\n</code></pre>"},{"location":"nas/synology/hacks/","title":"hacks","text":"<p>Mainly from here.</p> <ul> <li> <p>stop auto update</p> <pre><code>vi /etc/hosts\n\n# add the following line\n127.0.0.1 update.synology.com \n</code></pre> </li> </ul> <ul> <li> <p>remove auto update red point by replacing icons.</p> <pre><code>cp /usr/syno/synoman/webman/modules/AdminCenter/images/default/1x/badge_control_panel.png /usr/syno/synoman/webman/modules/AdminCenter/images/default/1x/badge_control_panel.png.bak  \ncp /usr/syno/synoman/webman/modules/AdminCenter/images/default/2x/badge_control_panel.png /usr/syno/synoman/webman/modules/AdminCenter/images/default/2x/badge_control_panel.png.bak  \nwget -O /usr/syno/synoman/webman/modules/AdminCenter/images/default/1x/badge_control_panel.png https://static.iots.vip/transparent.png\nwget -O /usr/syno/synoman/webman/modules/AdminCenter/images/default/2x/badge_control_panel.png https://static.iots.vip/transparent.png\n\ncp /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_notification_num.png /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_notification_num.png.bak\ncp /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_notification_num.png /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_notification_num.png.bak\nwget -O /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_notification_num.png https://static.iots.vip/transparent.png\nwget -O /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_notification_num.png https://static.iots.vip/transparent.png\n\ncp /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num.png /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num.png.bak \ncp /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_badge_num.png /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_badge_num.png.bak \nwget -O /usr/syno/synoman/synoSDSjslib/images/default/1x/dsm5_badge_num.png https://static.iots.vip/transparent.png\nwget -O /usr/syno/synoman/synoSDSjslib/images/default/2x/dsm5_badge_num.png https://static.iots.vip/transparent.png\n</code></pre> </li> </ul> <ul> <li> <p>CPU info</p> <pre><code>wget -N --no-check-certificate http://static.iots.vip/sh/ch_cpuinfo.sh &amp;&amp; sh ch_cpuinfo.sh\n</code></pre> </li> </ul> <ul> <li> <p>optimize hard disk IO by moving log to memory</p> <pre><code>sed -i 's/var\\/log/dev\\/shm/' /etc.defaults/syslog-ng/patterndb.d/scemd.conf\n</code></pre> </li> </ul> <ul> <li> <p><code>invalid location</code> (\u65e0\u6548\u7684\u4f4d\u7f6e) error on DSM6 when adding new package sources. from here and here.</p> <p>caused by expiration of let's encrypt certificate.</p> <pre><code># backup\nsudo mv /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt.bak\n# install new\nsudo curl -Lko /etc/ssl/certs/ca-certificates.crt https://curl.se/ca/cacert.pem\n</code></pre> </li> </ul>"},{"location":"nas/unraid/CA_proxy/","title":"Community Applications: The Ultra Proxy Guide.","text":""},{"location":"nas/unraid/CA_proxy/#problems","title":"Problems","text":"<p>Unraid plugins rely on GitHub. Specifically, it needs to access <code>github.com</code> and <code>raw.githubusercontent.com</code> to fetch data.</p>"},{"location":"nas/unraid/CA_proxy/#manually-install-ca","title":"manually Install CA","text":"<ul> <li> <p>download the plugin in your PC:</p> <pre><code>https://raw.githubusercontent.com/Squidly271/community.applications/master/plugins/community.applications.plg\n</code></pre> </li> </ul> <ul> <li>name it <code>CA.plg</code> and upload to <code>/boot/config/plugins/</code>.</li> </ul> <ul> <li>go to Plugin Tab and install from the local file. It should still fail when downloading <code>community.applications-***.txz</code>.</li> <li>manually download from the URL and upload it to <code>/boot/config/plugins/community.applications/</code>. (The path can be found in the source of <code>plg</code> by searching <code>&lt;FILE</code> tag).</li> <li>go to Plugin Tab and install from the local file.</li> </ul> <p>Ref: https://post.smzdm.com/p/ad2dngvn/</p>"},{"location":"nas/unraid/CA_proxy/#use-docker-to-setup-proxy","title":"Use docker to setup proxy","text":"<p>Since the terminal of unraid do not support package manager (and the alternative  <code>nerdpack</code> is also a plugin), we would like to use docker to setup <code>trojan</code> proxy.</p> <ul> <li> <p>set up docker mirrors:</p> <pre><code># docker mirrors\nmkdir -p /etc/docker\ntee /etc/docker/daemon.json &lt;&lt;- \"EOF\"\n{\n    \"registry-mirrors\" : [\n        \"https://[yourid].mirror.aliyuncs.com\",\n        \"https://registry.docker-cn.com\",\n        \"http://hub-mirror.c.163.com\"\n    ]\n}\nEOF\n</code></pre> </li> </ul> <ul> <li> <p>prepare the <code>config.json</code> for <code>trojan</code> and put it to <code>/boot/trojan/config.json</code>. The <code>local_port</code> must be <code>1086</code>!</p> <pre><code>{\n    \"run_type\": \"client\",\n    \"local_addr\": \"127.0.0.1\",\n    \"local_port\": 1086,\n    \"remote_addr\": \"[your domain]\",\n    \"remote_port\": 443,\n    \"password\": [\n        \"[yourpasswd]\"\n    ],\n    \"log_level\": 1,\n    \"ssl\": {\n        \"verify\": false,\n        \"verify_hostname\": false,\n        \"cert\": \"\",\n        \"key\": \"\",\n        \"key_password\": \"\",\n        \"cipher\": \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\",\n        \"cipher_tls13\": \"TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384\",\n        \"prefer_server_cipher\": true,\n        \"alpn\": [\n            \"http/1.1\"\n        ],\n        \"alpn_port_override\": {\n            \"h2\": 81\n        },\n        \"reuse_session\": true,\n        \"session_ticket\": false,\n        \"session_timeout\": 600,\n        \"plain_http_response\": \"\",\n        \"curves\": \"\",\n        \"dhparam\": \"\"\n    },\n    \"tcp\": {\n        \"prefer_ipv4\": false,\n        \"no_delay\": true,\n        \"keep_alive\": true,\n        \"reuse_port\": false,\n        \"fast_open\": false,\n        \"fast_open_qlen\": 20\n    },\n    \"mysql\": {\n        \"enabled\": false,\n        \"server_addr\": \"127.0.0.1\",\n        \"server_port\": 3306,\n        \"database\": \"trojan\",\n        \"username\": \"trojan\",\n        \"password\": \"\",\n        \"key\": \"\",\n        \"cert\": \"\",\n        \"ca\": \"\"\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>pull and start the prepared image in terminal:</p> <pre><code>docker pull ashawkey/trojan-privoxy-client\n\n# the default proxy:\n# socks5://127.0.0.1:1086\n# http://127.0.0.1:1087\ndocker run -d --name tpc -v /boot/config/trojan:/etc/trojan -p 1086:1086 -p 1087:1087 ashawkey/trojan-privoxy-client\n\n# for custom config path and port:\n# docker run -d --name tpc -v $config_dir:/etc/trojan -p $socks5_port:1086 -p $http_port:1087 ashawkey/trojan-privoxy-client\n</code></pre> <p>you could see the docker running smoothly in the Docker Tab. </p> </li> </ul> <ul> <li>Turn on auto-restart of this container.</li> </ul>"},{"location":"nas/unraid/CA_proxy/#configure-proxy-settings-for-ca","title":"Configure proxy settings for CA","text":"<ul> <li> <p>Apps Tab: use <code>curl</code> to fetch.</p> <p>CA plugin provides an explicit <code>proxy.cfg</code> to set the <code>curl</code> proxy (The code is located here).</p> <p>Create <code>/flash/config/plugins/community.applications/proxy.cfg</code> and put:</p> <pre><code>port=1087\ntunnel=1\nproxy=http://127.0.0.1\n</code></pre> </li> </ul> <ul> <li> <p>Install Plugin: use <code>wget</code> to fetch (The code can be found in <code>/usr/local/sbin/plugin</code>).</p> <p>Add to <code>/boot/config/go</code>:</p> <pre><code># emhttp\nhttp_proxy=\"http://127.0.0.1:1087\" https_proxy=\"http://127.0.0.1:1087\" /usr/local/sbin/emhttp &amp;\n\n# terminal\necho \"export http_proxy=\\\"http://127.0.0.1:1087\\\"\" &gt;&gt; /root/.bash_profile \necho \"export https_proxy=\\\"http://127.0.0.1:1087\\\"\" &gt;&gt; /root/.bash_profile\n</code></pre> </li> </ul> <ul> <li>Reboot and you are free to load Apps and install Plugins!</li> </ul>"},{"location":"nas/unraid/filebrowser/","title":"filebrowser","text":"<p>website</p>"},{"location":"nas/unraid/filebrowser/#install","title":"install","text":"<ul> <li> <p>official repo:</p> <p>search <code>filebrowser</code> in the Apps, and simply mount the targeted directory.</p> </li> </ul> <ul> <li> <p>enhanced version:</p> <p>https://hub.docker.com/r/80x86/filebrowser</p> <p>need to manually add docker container.</p> <pre><code>repo: 80x86/filebrowser:2.9.4-amd64\nport: 8082:8082\npath: /config:/mnt/user/appdata/fbenhanced\npath: /myfiles:/mnt/user/\ndevice: /dev/dri\n</code></pre> <p>(However it is close-sourced, and cannot play <code>flv</code> still.)</p> </li> </ul>"},{"location":"nas/unraid/filebrowser/#usage","title":"usage","text":"<p>Default account/password is <code>admin/admin</code>.</p>"},{"location":"nas/unraid/filebrowser/#video","title":"video","text":"<p>it use the browser's video player, so mostly only <code>.mp4</code> will work.</p> <p>for mobiles, <code>Quark</code> browser support multiple formats.</p>"},{"location":"nas/unraid/frp_example/","title":"frp docker","text":""},{"location":"nas/unraid/frp_example/#client-side-by-docker","title":"client side by docker","text":"<ul> <li> <p>create <code>/boot/config/frp/frpc.ini</code> and write:</p> <pre><code>[common]\nserver_addr = 149.28.65.26\nserver_port = 7000\ntoken = tjx19990121\n\n; dangerous!\n; [ssh]\n; type = tcp\n; local_ip = 127.0.0.1\n; local_port = 22\n; remote_port = 2222\n\n; dangerous!\n; [webui]\n; type = http\n; local_ip = 127.0.0.1\n; local_port = 80\n; custom_domains = nas.kiui.moe\n\n[webdav]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 8384\nremote_port = 8384\n\n; [jellyfin_tcp]\n; type = tcp\n; local_ip = 127.0.0.1\n; local_port = 8096\n; remote_port = 10002\n\n[jellyfin]\ntype = http\nlocal_ip = 127.0.0.1\nlocal_port = 8096\ncustom_domains = jellyfin.kiui.moe\n\n; FAILED. \n; [p2p_ssh]\n; type = xtcp\n; sk = jdafoinjasdfjk\n; local_ip = 127.0.0.1\n; local_port = 22\n\n; [p2p_webui]\n; type = xtcp\n; sk = jdafoinjasdfjk\n; local_ip = 127.0.0.1\n; local_port = 80\n\n; [p2p_jellyfin]\n; type = xtcp\n; sk = jdafoinjasdfjk\n; local_ip = 127.0.0.1\n; local_port = 8096\n</code></pre> </li> </ul> <ul> <li> <p>pull and run</p> <pre><code>docker run --restart=always --network host -d -v /boot/config/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc\n</code></pre> </li> </ul>"},{"location":"nas/unraid/go_example/","title":"Go example","text":""},{"location":"nas/unraid/go_example/#an-example-go-settings","title":"An example <code>go</code> settings:","text":"<pre><code>#!/bin/bash\n\n# start the Management Utility\n# /usr/local/sbin/emhttp &amp;\nhttp_proxy=\"http://127.0.0.1:1087\" https_proxy=\"http://127.0.0.1:1087\" /usr/local/sbin/emhttp &amp;\n\n# terminal\necho \"export http_proxy=\\\"http://127.0.0.1:1087\\\"\" &gt;&gt; /root/.bash_profile \necho \"export https_proxy=\\\"http://127.0.0.1:1087\\\"\" &gt;&gt; /root/.bash_profile\n\n# docker mirrors\nmkdir -p /etc/docker\ntee /etc/docker/daemon.json &lt;&lt;- \"EOF\"\n{\n    \"registry-mirrors\" : [\n        \"https://gfqhhvk6.mirror.aliyuncs.com\",\n        \"https://registry.docker-cn.com\",\n        \"http://hub-mirror.c.163.com\"\n    ]\n}\nEOF\n\n\n# jellyfin codec\nmodprobe i915\n\n# alias \ntee /etc/profile &lt;&lt;- \"EOF\"\nalias l=\"ls -lrth\"\nalias la=\"ls -lrtha\"\nalias ..=\"cd ..\"\nalias ...=\"cd ../..\"\nalias ....=\"cd ../../..\"\nalias le=\"less -S\"\nalias python=\"python3\"\nEOF\n\n# start frp\n# * download the release of frp and copy to flash/config/frp\n# * edit the frpc.ini\n# cp /boot/config/frp/frpc /usr/bin/frpc\n# chmod 777 /usr/bin/frpc\n# /usr/bin/frpc -c /boot/config/frp/frpc.ini &gt;&gt; /var/log/frpc.log 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"nas/unraid/remote_access/","title":"remote access","text":""},{"location":"nas/unraid/remote_access/#_1","title":"\u8def\u7531\u5668\u7aef\u53e3\u6620\u5c04","text":"<p>\u5c06\u8def\u7531\u5668LAN\u7684\u7aef\u53e3\u6620\u5c04\u5230WAN\u7684\u7aef\u53e3\u3002</p> <p>\u5e94\u7528\u573a\u666f\uff1a\u8def\u7531\u5668WAN\u56fa\u5b9a\u3002</p> <ul> <li>\u8def\u7531\u5668\u81ea\u5e26\uff08\u865a\u62df\u670d\u52a1\u5668\uff09</li> </ul> <p>\u5bbf\u820d\u6821\u56ed\u7f51IP\u5206\u914d\u7591\u4f3c\u56fa\u5b9a\uff0c\u9002\u5408\u6821\u56ed\u7f51\u5185\u90e8\u901a\u8fc7IP\u76f4\u63a5\u8bbf\u95ee\u3002</p>"},{"location":"nas/unraid/remote_access/#ddns-dynamic-dns","title":"DDNS (Dynamic DNS)","text":"<p>\u5c06\u57df\u540d\u89e3\u6790\u5230\u52a8\u6001\u7684IP\u5730\u5740\u3002</p> <p>\u5e94\u7528\u573a\u666f\uff1a\u8def\u7531\u5668WAN\u4e0d\u56fa\u5b9a\uff0c\u4e00\u4e2a\u57df\u540d\uff0c\u652f\u6301DDNS\u7684\u8fd0\u8425\u5546\u3002</p> <ul> <li>\u5185\u7f51\u4e3b\u673a\u5b89\u88c5DDNS\u5ba2\u6237\u7aef\uff0c\u5411\u57df\u540d\u8fd0\u8425\u5546\u7684DDNS\u670d\u52a1\u5668\u5b9a\u65f6\u53d1\u9001\u8bf7\u6c42\u66f4\u65b0\u5f53\u524dIP\u5730\u5740\u3002\u4ece\u800c\u4fdd\u8bc1\u5916\u7f51\u4e3b\u673a\u8bbf\u95ee\u5185\u7f51\u57df\u540d\u65f6\uff0c\u4f1a\u6536\u5230\u5f53\u524dIP\u5730\u5740\u3002</li> </ul> <p>\u9700\u8981\u501f\u52a9\u8fd0\u8425\u5546\uff0c\u672a\u4f7f\u7528\u3002</p>"},{"location":"nas/unraid/remote_access/#reverse-proxy","title":"Reverse Proxy","text":"<p>\u7c7b\u4f3c\u8def\u7531\u5668\u7aef\u53e3\u6620\u5c04\uff0c\u5c06\u5185\u7f51\u7aef\u53e3\u6620\u5c04\u5230\u4e00\u4e2a\u9759\u6001IP\u7684\u7aef\u53e3\u3002</p> <p>\u5e94\u7528\u573a\u666f\uff1a\u8def\u7531\u5668WAN\u4e0d\u56fa\u5b9a\uff0c\u4e00\u4e2a\u6709\u9759\u6001IP\u7684VPS\uff08\u7528\u6765\u8f6c\u53d1\u6d41\u91cf\uff09\u3002</p> <ul> <li>FRP\uff1a\u5185\u7f51\u4e3b\u673a\u5b89\u88c5frp\u5ba2\u6237\u7aef\uff0cVPS\u5b89\u88c5frp\u670d\u52a1\u7aef\uff0c\u53c2\u8003TCP/HTTP\u914d\u7f6e\u6587\u4ef6\uff0c\u53cc\u65b9\u5efa\u7acb\u8fde\u63a5\u5373\u53ef\u3002</li> </ul> <p>\u53ef\u4ee5\u7528\u6765\u6620\u5c04jellyfin\u3001webdav\u670d\u52a1\uff0c\u4ee5\u901a\u8fc7\u57df\u540d\u76f4\u63a5\u8bbf\u95ee\u3002</p> <p>WebUI\u6700\u597d\u4e0d\u8981\u76f4\u63a5\u66b4\u9732\u5230\u516c\u7f51\uff08\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u5916\u7f51\u8bbf\u95ee\u751a\u81f3\u6ca1\u6709\u767b\u9646\u63d0\u793a...\uff09\u3002</p>"},{"location":"nas/unraid/remote_access/#p2p","title":"P2P","text":"<p>\u4ee5\u4e0a\u65b9\u6cd5\u90fd\u662f\u60f3\u529e\u6cd5\u5c06\u5185\u7f51\u4e3b\u673a\u66b4\u9732\u5230\u5916\u7f51\uff0cP2P\u5219\u662f\u5c06\u5916\u7f51\u4e3b\u673a\u901a\u8fc7\u96a7\u9053\u8fde\u63a5\u5230\u5185\u7f51\u3002</p> <ul> <li> <p>FRP\uff1a\u8def\u7531\u5668WAN\u4e0d\u56fa\u5b9a\uff0c\u4e00\u4e2a\u6709\u9759\u6001IP\u7684VPS\uff08\u4e0d\u8f6c\u53d1\u6d41\u91cf\uff0c\u53ea\u7528\u6765\u5efa\u7acb\u96a7\u9053\uff09\u3002</p> <p>\u5728\u5185\u7f51\u4e3b\u673a\u5b89\u88c5frp\u5ba2\u6237\u7aef\uff0cVPS\u5b89\u88c5frp\u670d\u52a1\u7aef\uff0c\u5916\u7f51\u4e3b\u673a\u5b89\u88c5frp\u5ba2\u6237\u7aef\uff0c\u53c2\u8003P2P\u914d\u7f6e\u6587\u4ef6\u5efa\u7acb\u8fde\u63a5\u5373\u53ef\u3002</p> </li> </ul> <ul> <li> <p>WireGuard\uff1a\u8def\u7531\u5668WAN\u56fa\u5b9a\u3002</p> <p>\u5728\u5185\u7f51\u4e3b\u673a\u5b89\u88c5WireGuard\uff0c\u5728\u5916\u7f51\u4e3b\u673a\u5b89\u88c5WireGuard\uff0c\u5efa\u7acb\u5bf9\u7b49\u8fde\u63a5\u5373\u53ef\u3002</p> <p>\uff08\u4e0e\u7aef\u53e3\u6620\u5c04\u7684\u533a\u522b\uff1a\u53ea\u9700\u8981\u4e00\u4e2a\u7aef\u53e3\u63a5\u5165\u5185\u7f51\uff0c\u4fbf\u53ef\u5b89\u5168\u8bbf\u95ee\u5185\u7f51\u6240\u6709\u670d\u52a1\uff1b\u4ee3\u4ef7\u662f\u5916\u7f51\u4e3b\u673a\u4e5f\u9700\u8981\u8fd0\u884cWireGuard\u3002\uff09</p> </li> </ul> <p>\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u6821\u56ed\u7f51\u4e0d\u652f\u6301...</p> <p></p>"},{"location":"nas/unraid/webdav_raidrive/","title":"webdav","text":""},{"location":"nas/unraid/webdav_raidrive/#install-docker","title":"install docker","text":"<p>just search <code>webdav</code> and install it.</p> <p>default port maybe <code>8384</code>.</p>"},{"location":"nas/unraid/webdav_raidrive/#install-raidrive","title":"install RaiDrive","text":"<p>search from google and download it.</p> <p>Just easy to use.</p>"},{"location":"others/chebnet_understanding/","title":"Chebnet understanding","text":""},{"location":"others/chebnet_understanding/#convolution","title":"Convolution","text":"<p>convolution in spectral domain is just a frequency filter.</p> <p>let the graph Laplacian is \\(n * n\\).</p> \\[ \\displaylines{ y = UHU'x = Ug_\\theta(\\lambda)U'x = g_\\theta(L)x } \\] <p>but to learn a filter's complicity is \\(O(n)\\). (there are \\(n\\) free parameters)</p> <p>the problem is how to make it faster.</p> <p>we need parametrization of the filter.</p> <p>we use Chebyshev polynomial to approximate it.</p> \\[ \\displaylines{ g_\\theta(\\lambda) = diag(\\theta) \\rightarrow \\sum_{k=0}^{K-1}\\theta_k\\Lambda^k \\rightarrow  \\sum_{k=0}^{K-1}\\theta_kT_k(\\tilde\\Lambda) \\\\ \\Lambda = diag(\\lambda)\\\\ g_\\theta(L) \\rightarrow Ug_\\theta(\\lambda)U' =  \\sum_{k=0}^{K-1}\\theta_kT_k(\\tilde L) \\\\ then \\ \\ \\ y = g_\\theta(L)x \\\\ let \\ \\ \\bar{x_k} = T_k(\\tilde L)x \\\\ y = \\bar{X}\\theta \\\\ } \\] <p>due to the property of Chebyshev:</p> \\[ \\displaylines{ \\bar{x_k} = 2\\tilde L \\bar{x_{k-1}} - \\bar{x_{k-2}} \\\\ \\tilde L = 2L/\\lambda_{max} - I } \\] <p>so we avoided computing eigenvalues and Fourier basis \\(U\\) , and just use \\(L\\) and \\(\\lambda_{max}\\) to recursively calculate \\(y\\) from \\(x\\).</p> <p>time complexity is from \\(O(n^2)\\) to \\(O(K|\\mathcal E|)\\)</p>"},{"location":"others/chebnet_understanding/#pooling","title":"Pooling","text":"<p>pooling is clustering or cutting for a graph.</p> <p>graph clustering is NP-hard.</p> <p>we need multi-level clustering: Graclus, which also need not calculating eigenvalues.</p> <ul> <li>Graclus<ul> <li>coarsening</li> <li>base-clustering: kernel k-means or spectral clustering</li> <li>refinement: kernel k-means</li> </ul> </li> </ul> <p>Then we pool it by adding fake nodes to build a balanced binary tree.</p> <p>Finally, we feed it to a Fully connected Layer for Output.</p>"},{"location":"others/chebnet_understanding/#codes","title":"Codes","text":"<ul> <li> <p>graph</p> <pre><code>grid(m, dtype=np.float32)\n'''\nreturn a meshgrid of [m*m, 2] in [0,1] (uniformly divided by m)\n'''\n\ndistance_*(z, k=4, metirc = \"euclidean\")\n'''\ninput\n  z is a N*M matrix of N examples in dimension M.\n  k is the kNN parameter.\noutput\n  d: N*k matrix, each row is the closest k distance.\n  idx: N*k matrix, each row is the closest k index.\n'''\n\nadjacency(dist, idx)\n'''\ninput\n  output of dist_*()\noutput\n  adjacency matrix of N*N.\n  in fact it is a **Mutral** K-NN graph.\n'''\n\nreplace_random_edges(A, noise_level)\n'''\njust add random noise.\n'''\n\nlaplacian(W, normalized=True)\n'''\ninput\n  Adjacency matrix N*N\noutput\n  graph laplacian\n'''\n\nlmax(L, normalized=True)\n'''\ncompute Lmax for Chebyshev approximation.\nif not normalized, only calc the largest Eigenvalue.\n'''\n\nfourier(L, algo='eigh', k=1)\n'''\nreturn sorted lamb,U\nin fact, not used in standard cnn_graph.\n'''\n\nplot_spectrum(L, algo=\"eig\")\n'''\ninput: L is a list of Laplacians.\noutput\n  plot of lamb values.\n'''\n\nrescale_L(L, lmax=2)\n'''\nscale L into [-1, 1], for chebyshev approx.\n\\tilde L = 2*L/lmax - I\n'''\n\nchebyshev(L, X, K)\n'''\ninput\n  L: N*N graph laplacian, need to be normalized and rescaled ?\n  X: N*M matrix\n  K: int, max order\noutput\n  Xt: K*N*M matrix. Xt[k] is the k order chebyshev \n'''\n\nlanczos(L, X, K)\n'''\n\n'''\n</code></pre> </li> </ul> <ul> <li> <p>coarsening</p> <pre><code>metis(W, levels, rid=None)\n'''\ninput\n  W: N*N adjacency matrix.\n  levels: to coarsen.\n  rid: a permutation list of N, if None, set to random.\noutput\n  graphs: #levels*1 vector of multi-level Adjacency matrix. graphs[0] is W. \n  Supernode' weight is sum of links between its child nodes.\n  parents: #(levels-1)*1 vector, cluster_id for each graph.\n'''\n\nmetis_one_level(rr,cc,vv,rid,weights)\n'''\ninput\n  rr,cc,vv: ordered non-zero entries of W(N*N).\n  rid: as in metis.\n  weights: N*1 vector, degree of each node.\noutput\n  cluster_id: N*1 vector. each node's label of supernode.\n'''\n\ncompute_perm(parents)\n'''\ninput: output of metis.\noutput: reordered permutation to satisfy a binary tree.\n  by finding parents and adding fake nodes, we build the unique tree from a $parents list.\n\nassert (compute_perm([np.array([4,1,1,2,2,3,0,0,3]),np.array([2,1,0,1,0])])\n        == [[3,4,0,9,1,2,5,8,6,7,10,11],[2,4,1,3,0,5],[0,1,2]])\n'''\n\nperm_adjacency(A, indices)\n'''\ninput\n  A: adjacency matrix\n  indices: eg.compute_perms(parents)[0]\noutput\n  A: adjacency after adding fake nodes, and sorted by indices.\n'''\n\ncoarsen(A, levels, self_connections=False)\n'''\ninput\n  A, levels : as in metis\n  self_connections: whether to use self_connection(diag of Adjacency), unimplemented ?\noutput\n  graphs: as in metis, but sorted and fake nodes added.\n  perms[0]: nodes' order of graph[0]\n'''\n\n\nperm_data(X, indices)\n'''\ninput\n  X: dataset, N*M\n  indices: perm[0], returned by coarsen()\noutput\n  Xnew: dataset sorted and fake nodes added.\n'''\n</code></pre> </li> </ul> <ul> <li> <p>models</p> <pre><code># tensorflow models\nclass base_model:\n    predict(data)\n    evaluate(data, labels)\n    fit(train_Data, train_labels, val_data, val_labels)\n    get_var(name)\n    build_graph(M_0)\n    inference(data, dropout)\n    probabilities(logits)\n    predition(logits)\n    loss(logits, labels, regularization)\n    training(loss, lr, ds, ...)\n\n\nclass cgcnn(base_model):\n    # chebyshev approx\n    __init__(self, **params)\n    '''\n    L: normalized graph Laplacian\n    F: number of graph conv filters, eg.[32, 64]\n    K: polynomial orders, eg.[20, 20]\n    p: pooling size eg.[4, 2]\n    M: output dim of FC layers, eg.[512, y.max()+1]\n\n    dir_name='' : output directory\n\n    filter='chebyshev5' :\n    brelu='b1relu' :\n    pool='mpool1' :\n    num_epochs=20 :\n    learning_rate=0.1 :\n    decay_rate=0.95 :\n    decay_steps=None :  eg. n_train/batch_size\n    momentum=0.9 :\n    regularization=0 :\n    dropout=0 :\n    batch_size=100 :\n    eval_frequenct=200 : eg.30*epoch\n\n    ###\n    the structure of the NN is defined as:\n    for i in F,P,K\n      * conv of F[i] out_channels\n          the chebyshev poly approx order is K[i]\n      * pool of P[i] pool_size\n    for i in M\n      * fc of M[i] out_dims\n          (usually the last of M is n_Class)\n\n    '''\n\n\n# for some examples of parameters:\ncommon = {}\ncommon['dir_name']       = 'mnist/'\ncommon['num_epochs']     = 20\ncommon['batch_size']     = 100\ncommon['decay_steps']    = mnist.train.num_examples / common['batch_size']\ncommon['eval_frequency'] = 30 * common['num_epochs']\ncommon['brelu']          = 'b1relu'\ncommon['pool']           = 'mpool1'\nC = max(mnist.train.labels) + 1  # number of classes\nmodel_perf = utils.model_perf()\n\nif True:\n    name = 'softmax'\n    params = common.copy()\n    params['dir_name'] += name\n    params['regularization'] = 5e-4\n    params['dropout']        = 1\n    params['learning_rate']  = 0.02\n    params['decay_rate']     = 0.95\n    params['momentum']       = 0.9\n    params['F']              = []\n    params['K']              = []\n    params['p']              = []\n    params['M']              = [C]\n    model_perf.test(models.cgcnn(L, **params), name, params,\n                    train_data, train_labels, val_data, val_labels, test_data, test_labels)\n    '''\n    NN architecture\n    input: M_0 = 1040\n    layer 1: logits (softmax)\n      representation: M_1 = 10\n      weights: M_0 * M_1 = 1040 * 10 = 10400\n          biases: M_1 = 10\n    '''\n\n# Common hyper-parameters for networks with one convolutional layer.\ncommon['regularization'] = 0\ncommon['dropout']        = 1\ncommon['learning_rate']  = 0.02\ncommon['decay_rate']     = 0.95\ncommon['momentum']       = 0.9\ncommon['F']              = [10]\ncommon['K']              = [20]\ncommon['p']              = [1]\ncommon['M']              = [C]\nif True:\n    name = 'cgconv_softmax'\n    params = common.copy()\n    params['dir_name'] += name\n    params['filter'] = 'chebyshev5'\n    model_perf.test(models.cgcnn(L, **params), name, params,\n                    train_data, train_labels, val_data, val_labels, test_data, test_labels)\n\n    '''\n    NN architecture\n    input: M_0 = 1040\n    layer 1: cgconv1\n      representation: M_0 * F_1 / p_1 = 1040 * 10 / 1 = 10400\n     weights: F_0 * F_1 * K_1 = 1 * 10 * 20 = 200\n     biases: F_1 = 10\n    layer 2: logits (softmax)\n     representation: M_2 = 10\n     weights: M_1 * M_2 = 10400 * 10 = 104000\n      biases: M_2 = 10\n    '''\n\n# Common hyper-parameters for LeNet5-like networks.\ncommon['regularization'] = 5e-4\ncommon['dropout']        = 0.5\ncommon['learning_rate']  = 0.02  # 0.03 in the paper but sgconv_sgconv_fc_softmax has difficulty to converge\ncommon['decay_rate']     = 0.95\ncommon['momentum']       = 0.9\ncommon['F']              = [32, 64]\ncommon['K']              = [25, 25]\ncommon['p']              = [4, 4]\ncommon['M']              = [512, C]\nif True:\n    name = 'cgconv_cgconv_fc_softmax'  # 'Chebyshev'\n    params = common.copy()\n    params['dir_name'] += name\n    params['filter'] = 'chebyshev5'\n    model_perf.test(models.cgcnn(L, **params), name, params,\n                    train_data, train_labels, val_data, val_labels, test_data, test_labels)\n'''\nNN architecture\n  input: M_0 = 1008\n  layer 1: cgconv1\n    representation: M_0 * F_1 / p_1 = 1008 * 32 / 4 = 8064\n    weights: F_0 * F_1 * K_1 = 1 * 32 * 25 = 800\n    biases: F_1 = 32\n  layer 2: cgconv2\n    representation: M_1 * F_2 / p_2 = 252 * 64 / 4 = 4032\n    weights: F_1 * F_2 * K_2 = 32 * 64 * 25 = 51200\n    biases: F_2 = 64\n  layer 3: fc1\n    representation: M_3 = 512\n    weights: M_2 * M_3 = 4032 * 512 = 2064384\n    biases: M_3 = 512\n  layer 4: logits (softmax)\n    representation: M_4 = 10\n    weights: M_3 * M_4 = 512 * 10 = 5120\n    biases: M_4 = 10\n'''\n</code></pre> </li> </ul> <ul> <li>utils</li> </ul> <pre><code>grid_search(params, grid_params, train_data, train_labels, val_data, val_labels, test_data, test_labels, model)\n'''\n\n'''\n\nclass model_perf:\n    test()\n    show()\n    '''\n    used for testing many structures and show their performance together.\n    '''\n</code></pre>"},{"location":"others/chebnet_understanding/#example","title":"Example","text":""},{"location":"others/chrom_custom_search/","title":"Chrom custom search","text":""},{"location":"others/chrom_custom_search/#custom-search-keyword","title":"custom search keyword","text":"<p>Chrome: \u8bbe\u7f6e-\u641c\u7d22\u5f15\u64ce-\u7ba1\u7406\u641c\u7d22\u5f15\u64ce\u548c\u7f51\u7ad9\u641c\u7d22-\u7f51\u7ad9\u641c\u7d22-\u6dfb\u52a0</p> <ul> <li>google scholar: https://scholar.google.com/scholar?q=%s</li> <li>github: https://github.com/search?q=%s&amp;ref=opensearch</li> <li>connected papers: https://www.connectedpapers.com/search?q=%s</li> <li>wiki: https://en.wikipedia.org/w/index.php?title=Special%3ASearch&amp;search=%s</li> <li>emoji: https://emojipedia.org/search/?q=%s</li> <li>twitter: https://twitter.com/search?q=%s</li> </ul>"},{"location":"others/chrom_custom_search/#reference","title":"Reference","text":"<p>https://gist.github.com/siboehm/53d2b498e1470d32f0af13b2c39a9520</p>"},{"location":"others/code_duplicate_check/","title":"code duplicate check","text":""},{"location":"others/code_duplicate_check/#nltk","title":"nltk","text":"<ul> <li> <p>word_tokenize</p> <p>extract English word from a string.</p> </li> </ul>"},{"location":"others/code_duplicate_check/#gensim","title":"gensim","text":"<ul> <li> <p>corpus</p> <p>a collection of documents (texts, strings).</p> </li> </ul> <ul> <li> <p>bow (bag of words)</p> <p>use one-hot encoding of word to represent a document.</p> </li> </ul> <ul> <li> <p>tf-idf (term frequency - inverse document frequency)</p> <p>model that change bow representation to a dense vector representation.</p> <p>can reflect how important a word is to a document.</p> </li> </ul> <ul> <li> <p>similarities</p> <p>compare similarity of vectors.</p> </li> </ul>"},{"location":"others/code_duplicate_check/#example","title":"example","text":"<pre><code># check for duplicates\nusers = list(results.keys())\nusers.sort()\n\nfor problem_id in range(len(problems)):\n    # build dictionary\n    docs = []\n    for user in users:\n        if problem_id in results[user]:\n            docs.append([word.lower() for word in word_tokenize(results[user][problem_id][1])])\n    dictionary = gensim.corpora.Dictionary(docs)\n    bows = [dictionary.doc2bow(doc) for doc in docs]\n    tfidf = gensim.models.TfidfModel(bows)\n    sims = gensim.similarities.Similarity(tempdir + os.sep, tfidf[bows], num_features=len(dictionary))\n    # check duplicates\n    for user in users:\n        if problem_id in results[user]:\n            result_type, source = results[user][problem_id]\n            query_doc = [word.lower() for word in word_tokenize(source)]\n            query_bow = dictionary.doc2bow(query_doc)\n            query_tfidf = tfidf[query_bow]\n\n            for similarity, user2 in zip(sims[query_tfidf], users):\n                if user2 == user: continue\n                if similarity &gt; DUPTHRESH:\n                    if VERBOSE:\n                        print(f'[INFO] problem {problem_id}: {user} &lt;-- {similarity:.3f} --&gt; {user2}')\n                    result_type += f'\\n### [DUP] {user2}: similarity = {similarity:.3f}'\n                    results[user][problem_id][0] = result_type\n</code></pre>"},{"location":"others/cursor_tricks/","title":"Cursor tricks","text":""},{"location":"others/cursor_tricks/#cursor-tips","title":"Cursor tips","text":""},{"location":"others/cursor_tricks/#basics","title":"Basics","text":"<ul> <li><code>Tab</code> for AI completion as copilot.</li> </ul> <ul> <li><code>Ctrl + L</code> to toggle the right side Chat panel.</li> <li><code>Ctrl + K</code> in the CMD to generate command.</li> </ul>"},{"location":"others/google_protobuff/","title":"Google protocol buffers","text":"<p>protobuf is developed to serialize and retrieve structured data with high efficiency.</p>"},{"location":"others/google_protobuff/#basics","title":"Basics","text":"<pre><code>// addressbook.proto\nsyntax = \"proto3\";\n\npackage tutorial;\n\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    required string number = 1;\n    optional PhoneType type = 2 [default = HOME];\n  }\n\n  repeated PhoneNumber phones = 4;\n}\n\nmessage AddressBook {\n  repeated Person people = 1;\n}\n</code></pre> <ul> <li> <p>message</p> <p>like a class, contains fields and subclasses.</p> </li> </ul> <ul> <li> <p>field modifiers:</p> <ul> <li>required: must be provided.</li> <li>optional: if not set, use the default, if default is not set, use the system default.</li> <li>repeated: this field may be repeated for 0 to any times. (like dynamic arrays)</li> </ul> </li> </ul> <ul> <li> <p>compile</p> <p><code>protoc -I=$src_dir --python_out=$src_dir $src_dir/addressook.proto</code></p> <p><code>-I</code> is short for <code>--proto_path</code></p> <p><code>protoc --python_out=./ *.proto</code></p> <p>this generate <code>*_pb2.py</code> files in the python_out directory.</p> </li> </ul> <ul> <li> <p>API</p> <pre><code>import addressbook_pb2\nperson = addressbook_pb2.Person()\nperson.name = \"John Doe\" # req\nperson.id = 1234 # req\nperson.email = \"jdoe@example.com\" # opt\n\nphone = person.phones.add() # add a repeated field\nphone.number = \"555-4321\"\nphone.type = addressbook_pb2.Person.HOME # or simply `phone.type = 1`\n</code></pre> </li> </ul>"},{"location":"others/google_protobuff/#proto3","title":"Proto3","text":""},{"location":"others/google_protobuff/#message","title":"Message","text":"<p>can be viewed as class in python.</p>"},{"location":"others/google_protobuff/#field","title":"Field","text":"<ul> <li> <p>field type</p> <ul> <li>bool, string, double, float, int32, int64, uint32, uint64</li> <li>sint32, sint64 (signed int, more efficient in coding negative integers than regular int32 and int64)</li> <li>enumeration</li> <li>other self-defined message type</li> </ul> </li> </ul> <ul> <li> <p>field number</p> <p>each field has a unique number in the message.</p> <p>best in [1, 15] for only one byte to encode. (Not use 0)</p> <p>the exact range is \\([1, 2^{29}-1]\\) \\ [19000, 19999] </p> </li> </ul> <ul> <li> <p>field modifier</p> <ul> <li> <p>singular (by default)</p> <p>proto3 removed required, so there is only optional singulars.</p> </li> </ul> <ul> <li>repeated</li> </ul> </li> </ul> <ul> <li> <p>enum types</p> <p>the first enum should start from 0. </p> <p>exact range is uint32</p> <pre><code>enum Corpus {\n    UNIVERSAL = 0; // which is the default value too.\n    WEB = 1;\n}\n\nenum EnumAllowingAlias {\n  option allow_alias = true; // allow same enum for a number.\n  UNKNOWN = 0;\n  STARTED = 1;\n  RUNNING = 1;\n}\nenum EnumNotAllowingAlias {\n  UNKNOWN = 0;\n  STARTED = 1;\n  // RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.\n}\n</code></pre> </li> </ul>"},{"location":"others/google_protobuff/#comments","title":"comments","text":"<p>same as C/C++.</p>"},{"location":"others/google_protobuff/#reserved-field","title":"reserved field","text":"<pre><code>message Foo {\n  reserved 2, 15, 9 to 11;\n  reserved \"foo\", \"bar\";\n}\n</code></pre> <p>you should reserve the field number or name for your deleted fields, in case of later modifications reuse these fields and cause bugs.</p>"},{"location":"others/google_protobuff/#import","title":"import","text":"<pre><code>// old.proto\nimport public \"new.proto\"\nimport \"other.proto\";\n</code></pre> <p>when <code>old.proto</code> is imported by another proto file saying <code>client.proto,</code> </p> <p><code>client.proto</code> also import <code>new.proto</code>, but doesn't import <code>other.proto</code>.</p> <p>\u200b   </p>"},{"location":"others/google_protobuff/#package","title":"package","text":"<p>python will ignore package declarations, since python modules are organized according to locations in file system.</p>"},{"location":"others/google_protobuff/#oneof","title":"oneof","text":"<p>oneof is a type that means the message will only record one of its fields or subclasses.</p> <pre><code>message SampleMessage {\n  oneof test_oneof {\n    string name = 4;\n    SubMessage sub_message = 9;\n  }\n}\n</code></pre> <pre><code>SampleMessage message;\nmessage.set_name(\"name\");\nCHECK(message.has_name());\nmessage.mutable_sub_message();   // Will clear name field.\nCHECK(!message.has_name());\n</code></pre>"},{"location":"others/nerf_gradient/","title":"Nerf gradient","text":""},{"location":"others/nerf_gradient/#nerf-gradients-from-instant-ngp","title":"NeRF gradients from instant-ngp","text":"<p>Basic notations: (assume single color channel denoted as \\(R\\))</p> \\[ \\displaylines{ \\begin{align} \\alpha_i &amp;= 1 - e^{- \\sigma_i \\delta_i} \\\\ T_i &amp;=  \\begin{cases} 1, &amp; i = 1 \\\\ (1 - \\alpha_{i-1})(1 - \\alpha_{i-2})\\cdots(1 - \\alpha_1), &amp; i &gt; 1 \\end{cases}  \\\\ w_i &amp;= \\alpha_i T_i \\\\ R_i &amp;= \\sum_{j=1}^i w_j r_j \\\\ R &amp;= R_N \\end{align} } \\] <p>Gradient towards color:</p> \\[ \\displaylines{ \\begin{align} \\frac {\\partial L} {\\partial r_i}  &amp;= \\frac {\\partial L} {\\partial R} \\frac {\\partial R} {\\partial r_i} \\\\ &amp;= \\frac {\\partial L} {\\partial R} w_i \\\\ &amp;= \\frac {\\partial L} {\\partial R} \\alpha_iT_i \\end{align} } \\] <p>Gradient towards sigma:</p> \\[ \\displaylines{ \\begin{align} \\frac {\\partial L} {\\partial \\sigma_i}  &amp;= \\frac {\\partial L} {\\partial R} \\frac {\\partial R} {\\partial \\sigma_i} \\\\ &amp;= \\frac {\\partial L} {\\partial R} \\frac {\\partial R} {\\partial \\alpha_i} \\frac {\\partial \\alpha_i} {\\partial \\sigma_i} \\\\ \\end{align} } \\] <p>We have:</p> \\[ \\displaylines{ \\begin{align} \\frac {\\partial R} {\\partial \\alpha_i}  &amp;= \\frac {\\partial \\sum_{j=1}^N \\alpha_jT_jr_j } {\\partial \\alpha_i} \\\\ &amp;= \\frac {\\partial \\sum_{j=i}^N \\alpha_jT_jr_j } {\\partial \\alpha_i} \\\\ &amp;= \\frac {\\partial (\\alpha_iT_ir_i + \\alpha_{i+1}T_{i+1}r_{i+1} +\\cdots + \\alpha_NT_Nr_N)} {\\partial \\alpha_i} \\\\ &amp;= \\frac {\\partial (\\alpha_iT_ir_i + \\alpha_{i+1}[(1-\\alpha_i)(1-\\alpha_{i-1})\\cdots(1-\\alpha_1)] r_{i+1} +\\cdots + \\alpha_NT_Nr_N)} {\\partial \\alpha_i} \\\\ &amp;\\ \\begin{aligned} = T_ir_i &amp;-\\alpha_{i+1}(1-\\alpha_{i-1})(1-\\alpha_{i-2})\\cdots(1-\\alpha_1)r_{i+1} \\\\                             &amp;-\\cdots \\\\                             &amp;-\\alpha_{N}(1-\\alpha_{N-1})\\cdots(1-\\alpha_{i+1})(1-\\alpha_{i-1})\\cdots(1-\\alpha_1)r_{N} \\\\    \\end{aligned} \\\\ &amp;= \\frac {1} {1-\\alpha_i} ((1-\\alpha_i)T_{i}r_i - \\alpha_{i+1}T_{i+1}r_{i+1} -\\dots -\\alpha_NT_Nr_N) \\\\ &amp;= \\frac {1} {1-\\alpha_i} (T_{i+1}r_i - \\sum_{j=i+1}^N\\alpha_jT_jr_j) \\\\ &amp;= \\frac {1} {1-\\alpha_i} (T_{i+1}r_i -(R - R_i)) \\end{align} } \\] <p>And since:</p> \\[ \\displaylines{ \\frac {\\partial \\alpha_i} {\\partial \\sigma_i} = \\delta_ie^{-\\sigma_i\\delta_i}=\\delta_i(1-\\alpha_i) } \\] <p>We finally have:</p> \\[ \\displaylines{ \\begin{align} \\frac {\\partial L} {\\partial \\sigma_i}  &amp;= \\frac {\\partial L} {\\partial R} \\frac {\\partial R} {\\partial \\alpha_i} \\frac {\\partial \\alpha_i} {\\partial \\sigma_i} \\\\ &amp;= \\frac {\\partial L} {\\partial R} \\delta_i (1-\\alpha_i) \\frac {1} {1-\\alpha_i} (T_{i+1}r_i -(R - R_i)) \\\\ &amp;= \\frac {\\partial L} {\\partial R} \\delta_i (T_{i+1}r_i -(R - R_i)) \\end{align} } \\] <p>And this is the form used in <code>instant-ngp</code>.</p> <p>A more beautiful form:</p> \\[ \\displaylines{ \\begin{align} T_{i+1}r_i - \\sum_{j=i+1}^N\\alpha_jT_jr_j &amp;= (1-\\alpha_i)T_ir_i - \\sum_{j=i+1}^N\\alpha_jT_jr_j \\\\ &amp;= T_ir_i - \\alpha_iT_ir_i - \\sum_{j=i+1}^N\\alpha_jT_jr_j \\\\ &amp;= T_ir_i - \\sum_{j=i}^N\\alpha_jT_jr_j \\\\ &amp;= T_ir_i - (R-R_{i-1}) \\end{align} } \\]"},{"location":"others/programming_language_type/","title":"Programming language type","text":""},{"location":"others/programming_language_type/#types-of-languages","title":"types of languages","text":"<ul> <li>Dynamic Language: type of variables are determined at runtime.</li> </ul> <ul> <li>Static Language: type of variables are determined at compilation.</li> </ul> <ul> <li> <p>Strongly typed Language: forbid implicit type casting.</p> <pre><code>1 + \"a\" # ERROR\n</code></pre> </li> </ul> <ul> <li> <p>Weakly typed Language: allow implicit type casting.</p> <pre><code>1 + 'a' // OK, cast char to int\n</code></pre> </li> </ul>"},{"location":"others/recommenders/","title":"Recommender System","text":""},{"location":"others/recommenders/#reference","title":"Reference","text":"<ul> <li>https://developers.google.com/machine-learning/recommendation</li> </ul>"},{"location":"others/recommenders/#problem-definition","title":"Problem Definition","text":"<p>Recommender algorithm can be defined as  a matrix completion problem.</p> <p>We have \\(n\\) users and \\(m\\) items, then we get a matrix \\(R _{n \\times m}\\) with sparse entries \\(r_{ui}\\) as the rating for item \\(i\\) of user \\(u\\), and many missing entries.</p> <p>The goal is to complete the missing entries to estimate unobserved ratings.</p>"},{"location":"others/recommenders/#ctr-click-through-rate-estimation","title":"CTR (Click-Through Rate) Estimation","text":"<p>an application of recsys. (e.g., in app store)</p> <p>Each user/item may have additional features to use.</p>"},{"location":"others/recommenders/#large-scale-recommendation-system-pipeline","title":"Large scale Recommendation System pipeline","text":""},{"location":"others/recommenders/#candidate-generation","title":"Candidate Generation","text":"<p>Motivation: We don't need to predict a dense \\(R\\), for each user, only a smaller candidate set is needed.</p> <p>A coarse &amp; fast model is used.</p>"},{"location":"others/recommenders/#content-based-filtering","title":"Content-based filtering","text":"<p>Uses similarity between items to recommend items similar to what the user likes.</p> <p>Example: If user A watches two cute cat videos, then the system can recommend cute animal videos to that user.</p>"},{"location":"others/recommenders/#collaborative-filtering","title":"Collaborative filtering","text":"<p>Uses similarities between queries and items simultaneously to provide recommendations.</p> <p>Example: If user A is similar to user B, and user B likes video 1, then the system can recommend video 1 to user A (even if user A hasn\u2019t seen any videos similar to video 1).</p> <ul> <li>ALS is an example of collaborative filtering.</li> <li>DL based.</li> </ul>"},{"location":"others/recommenders/#scoring","title":"Scoring","text":"<p>A precise &amp; slower model is used.</p>"},{"location":"others/recommenders/#re-ranking","title":"Re-ranking","text":"<p>post processing, such as remove explicitly disliked items.</p>"},{"location":"others/recommenders/#alternating-least-square-als","title":"Alternating Least Square (ALS)","text":"<p>Main idea: Matrix factorization.</p> <p>Define user matrix \\(X_{k \\times n} = [x_1, x_2, \\cdots, x_n]\\), item matrix \\(Y_{k \\times m} = [y_1, y_2, \\cdots, y_m]\\), with \\(k\\) dimensional features. (\\(k \\ll n,m\\))</p> <p>Assume \\(R \\approx X^TY\\).</p> <p>Optimize:</p> \\[ \\displaylines{ \\min_{X,Y} \\sum_{r_{ui}}^{\\text{observed}} (r_{ui} - x_u^Ty_i)^2 + \\lambda (\\sum_u||x_u||^2+\\sum_i||y_i||^2) } \\] <p>This is nonconvex, but we can make a 2-step iterative optimization to separately optimize X and Y:</p> <ul> <li> <p>Repeat until Converge: (WHY???)</p> <ul> <li>Fix Y, update X</li> </ul> </li> </ul> \\[ \\displaylines{     x_u = (\\sum_{r_{ui} \\in r_{u*}}y_iy_i^T+\\lambda I_k)^{-1} \\sum_{r_{ui} \\in r_{u*}}r_{ui}y_i } \\] <p>* Fix X, update Y</p> \\[ \\displaylines{     y_i = (\\sum_{r_{ui} \\in r_{*i}}x_ux_u^T+\\lambda I_k)^{-1} \\sum_{r_{ui} \\in r_{*i}}r_{ui}x_u } \\] <ul> <li>Inference:</li> </ul> \\[ \\displaylines{   r_{ui} = x_u^Ty_i } \\]"},{"location":"others/recommenders/#wide-deep-2016-google","title":"Wide &amp; Deep (2016, Google)","text":"<p>wide = Linear Regression (Memorization)</p> <p>deep = MLP (Generalization)</p>"},{"location":"others/vs_code_hotkey/","title":"VS Code \u5feb\u6377\u952e","text":""},{"location":"others/vs_code_hotkey/#_1","title":"\u5e73\u79fb\u4ee3\u7801","text":""},{"location":"others/vs_code_hotkey/#method-1","title":"Method 1","text":"<p>\u9009\u4e2d\u4ee3\u7801\u5757\uff0c <code>ctrl+[</code> \u6216 <code>ctrl+]</code></p> <p>\u9ed8\u8ba4\u79fb\u52a8\u683c\u6570\u4e3a\u53f3\u4e0b\u89d2\u7684Spaces\u6587\u4ef6\u5c5e\u6027\u3002</p>"},{"location":"others/vs_code_hotkey/#method-2","title":"Method 2","text":"<p>\u9009\u4e2d\u4ee3\u7801\u5757\uff0c <code>shift+tab</code> \u6216 <code>tab</code></p>"},{"location":"others/vs_code_hotkey/#_2","title":"\u591a\u5149\u6807\u6a21\u5f0f","text":"<ul> <li><code>Alt+click</code></li> <li><code>Ctrl+D</code>  \u5728\u5149\u6807\u4e0b\u53d8\u91cf\u7684\u4e0b\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e\u6dfb\u52a0\u65b0\u5149\u6807</li> <li><code>Ctrl+K Ctrl+D</code> \u79fb\u52a8\u5f53\u524d\u5149\u6807\u5230\u5149\u6807\u4e0b\u53d8\u91cf\u7684\u4e0b\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e</li> <li><code>Ctrl+Alt+Up/Down</code>  \u5728\u5f53\u524d\u5149\u6807\u6b63\u4e0a/\u6b63\u4e0b\u65b9\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5149\u6807</li> </ul> <ul> <li><code>Esc</code> \u9000\u51fa\u591a\u5149\u6807\u6a21\u5f0f</li> </ul>"},{"location":"others/vs_code_hotkey/#_3","title":"\u5757\u9009\u4e2d","text":"<p><code>shift+alt</code>+\u9f20\u6807\u62d6\u62fd</p>"},{"location":"others/vs_code_hotkey/#_4","title":"\u8df3\u8f6c\u5b9a\u4e49","text":"<p><code>F12</code> \u8df3\u8f6c\u81f3\u5b9a\u4e49</p> <p><code>Alt+Left</code> \u540e\u9000</p>"},{"location":"others/vs_code_hotkey/#_5","title":"\u91cd\u590d\u5f53\u524d\u884c","text":"<ul> <li>\u590d\u5236\u5f53\u524d\u884c\u5230\u4e0a/\u4e0b\u884c <code>Shift+Alt+Up/Down</code></li> </ul> <ul> <li>\u590d\u5236\u5f53\u524d\u884c\uff08\u65e0\u9009\u4e2d\u65f6\uff09<code>Ctrl+C</code></li> <li>\u526a\u5207\u5f53\u524d\u884c\uff08\u65e0\u9009\u4e2d\u65f6\uff09<code>Ctrl+X</code></li> </ul>"},{"location":"others/vs_code_hotkey/#_6","title":"\u79fb\u52a8\u5f53\u524d\u884c","text":"<p><code>Alt+Up/Down</code></p>"},{"location":"others/vs_code_hotkey/#_7","title":"\u67e5\u627e\u5149\u6807\u4e0b\u7684\u5355\u8bcd","text":"<p><code>Ctrl+D</code></p>"},{"location":"others/vs_code_hotkey/#_8","title":"\u81ea\u52a8\u5206\u5c4f","text":"<p><code>Ctrl+Alt+ -&gt;</code> \u65b0\u7a97\u53e3\u81ea\u52a8\u5728\u53f3\u8fb9\u5206\u5c4f</p> <p><code>Ctrl+Alt+ &lt;-</code> \u65b0\u7a97\u53e3\u5206tab\u3002</p>"},{"location":"python/config/","title":"Config","text":""},{"location":"python/config/#argparse","title":"argparse","text":"<p>when you just have a simple project, and don't want to write <code>yaml</code> config files.</p> <pre><code>import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--name', default=None, type=str)\nopt = parser.parse_args()\n</code></pre>"},{"location":"python/config/#omega-conf","title":"omega conf","text":"<p>for large projects, when you need different configs (<code>yaml</code>) for different running.</p> <pre><code>pip install omegaconf\n</code></pre> <p>Omega conf basics:</p> <pre><code>from omegaconf import OmegaConf\n\n# create\nopt = OmegaConf.create() # empty DictConfig\nopt = OmegaConf.create({'x': 1}) # from dict\nopt = OmegaConf.load('config.yaml') # from yaml\n\n# access\nopt.x\nopt['x']\nopt.get('y', 10) # default value if not exists\n\n# mandatory values\nopt = OmegaConf.create({'x': '???'}) # ??? means this value must be provided before access\nopt.x # Traceback...\n\n# use environment variables\nopt = OmegaConf.create({'x': '{oc.env.USER}'}) # {oc.env.XXX} is a built-in resolver\n</code></pre> <p>Use it in practice (allow loading basic <code>yaml</code> config and override from command line)</p> <pre><code>./configs\n  - base.yaml # x: 1\n  - dev.yaml\nmain.py  \n</code></pre> <p>the <code>main.py</code> script:</p> <pre><code>import argparse\nfrom omegaconf import OmegaConf\n\ndef train(cfg): pass\ndef test(cfg): pass\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", required=True, help=\"path to the yaml config file\")\n    parser.add_argument(\"--gpu\", default=\"0\", help=\"GPU ID\")\n    parser.add_argument(\"--train\", action=\"store_true\")\n    parser.add_argument(\"--test\", action=\"store_true\")\n\n    args, extras = parser.parse_known_args()\n\n    os.environ[\"CUDA_VISIBLE_DEVICES\"] = args.gpu\n\n    # override default config from cli\n    cfg = OmegaConf.merge(OmegaConf.load(args.config), OmegaConf.from_cli(extras)) # \n\n    if args.train:\n        train(cfg)\n    elif args.test:\n        test(cfg)\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>use it in command line:</p> <pre><code># base config\npython main.py --config configs/base.yaml --train --gpu 0\n# override config\npython main.py --config configs/base.yaml --train --gpu 0 x=2 # now x is 2\n</code></pre>"},{"location":"python/config/#tyro","title":"tyro","text":"<p>An even better library, satisfying all the need, check the separate note here.</p>"},{"location":"python/cython/","title":"Cython","text":"<p>CPython: a C implementation of Python. (others include PyPy)</p> <p>Cython: C-extension of Python, allows to compile python code for speeding up.</p> <p>The extension of Cython file is <code>.pyx</code></p>"},{"location":"python/cython/#example","title":"Example","text":"<p><code>primes.pyx</code>:</p> <pre><code>def primes(int nb_primes):\n    cdef int n, i, len_p\n    cdef int p[1000]\n    if nb_primes &gt; 1000:\n        nb_primes = 1000\n\n    len_p = 0  # The current number of elements in p.\n    n = 2\n    while len_p &lt; nb_primes:\n        # Is n prime?\n        for i in p[:len_p]:\n            if n % i == 0:\n                break\n\n        # If no break occurred in the loop, we have a prime.\n        else:\n            p[len_p] = n\n            len_p += 1\n        n += 1\n\n    # Let's return the result in a python list:\n    result_as_list  = [prime for prime in p[:len_p]]\n    return result_as_list\n</code></pre> <p>to compile it:</p> <p><code>setup.py</code></p> <pre><code>from setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(\n    ext_modules=cythonize(\"primes.pyx\"),\n)\n</code></pre> <pre><code>python setup.py build_ext --inplace\n</code></pre> <p>to use it, in another python file:</p> <pre><code>import primes\nprimes.primes(10)\n</code></pre>"},{"location":"python/cython/#c-library","title":"C library","text":"<pre><code>from libc.stdlib cimport atoi\n\ncdef parse_charptr_to_py_int(char* s):\n    assert s is not NULL, \"byte string value is NULL\"\n    return atoi(s)  # note: atoi() has no error detection!\n\n\nfrom libc.math cimport sin\n\ncdef double f(double x):\n    return sin(x * x)\n</code></pre>"},{"location":"python/cython/#c-library_1","title":"C++ library","text":"<pre><code># distutils: language=c++\n\nfrom libcpp.vector cimport vector\n\ndef primes(unsigned int nb_primes):\n    cdef int n, i\n    cdef vector[int] p\n    p.reserve(nb_primes)  # allocate memory for 'nb_primes' elements.\n\n    n = 2\n    while p.size() &lt; nb_primes:  # size() for vectors is similar to len()\n        for i in p:\n            if n % i == 0:\n                break\n        else:\n            p.push_back(n)  # push_back is similar to append()\n        n += 1\n\n    # Vectors are automatically converted to Python\n    # lists when converted to Python objects.\n    return p\n</code></pre>"},{"location":"python/datetime/","title":"Datetime","text":""},{"location":"python/datetime/#datetime","title":"datetime","text":"<p>Use datetime to calculate date and time!</p> <pre><code>import datetime\n\n### simple delta calender\na = datetime.datetime(year=2024, month=5, day=20) # [year, month, day](required), hour, minute, second\nd = datetime.timedelta(weeks=25) # seconds, minute, hours, days, weeks\n\nb = a + d\nprint(b) # 2024-11-11\nprint(b.weekday()) # 0, so Monday\n\n### today\nt = datetime.datetime.today()\n</code></pre>"},{"location":"python/dearpygui/","title":"DearPyGUI","text":""},{"location":"python/dearpygui/#install","title":"Install","text":"<pre><code>pip install dearpygui\n</code></pre>"},{"location":"python/dearpygui/#pipeline","title":"Pipeline","text":"<p>Context --&gt; Viewport --&gt; DearPyGUI</p> <pre><code>import dearpygui.dearpygui as dpg\n\n# Create context\ndpg.create_context()\n\n# Define the primary window\nwith dpg.window(label=\"Primary Window\"):\n    # Add items\n    dpg.add_text(\"Hello, world\")\n    dpg.add_button(label=\"Save\")\n    dpg.add_input_text(label=\"string\", default_value=\"Quick brown fox\")\n    dpg.add_slider_float(label=\"float\", default_value=0.273, max_value=1)\n\n# Create Viewport\ndpg.create_viewport(title='Custom Title', width=600, height=200)\n\n# Start DearPyGUI\ndpg.setup_dearpygui()\ndpg.show_viewport()\n\n# Render Loop\nwhile dpg.is_dearpygui_running():\n    print(\"this will run every frame\")\n    dpg.render_dearpygui_frame()\n\n# Destroy Context\ndpg.destroy_context()\n</code></pre>"},{"location":"python/gradio/","title":"gradio","text":"<p>A fast-to-use Web UI library.</p>"},{"location":"python/gradio/#install","title":"install","text":"<pre><code>pip install gradio\n</code></pre>"},{"location":"python/gradio/#example","title":"example","text":"<pre><code>import gradio as gr\n\ndef greet(name):\n    return f\"Hello {name}!\"\n\n# Interface: easiest API, show I/O in a row.\ndemo = gr.Interface(fn=greet, inputs='text', outputs='text')\ndemo.launch()\n\n# host at http://localhost:7860\n</code></pre> <p>A more complex example:</p> <pre><code>import numpy as np\nimport gradio as gr\n\ndef flip_text(x):\n    return x[::-1]\n\ndef flip_image(x):\n    return np.fliplr(x)\n\n# Blocks: more flexible control\nwith gr.Blocks() as demo:\n    gr.Markdown(\"Flip text or image files using this demo.\")\n    # Tabs!\n    with gr.Tab(\"Flip Text\"):\n        # default alignment is vertical (col)\n        text_input = gr.Textbox()\n        text_output = gr.Textbox()\n        text_button = gr.Button(\"Flip\")\n    with gr.Tab(\"Flip Image\"):\n        # align in a row\n        with gr.Row():\n            image_input = gr.Image()\n            image_output = gr.Image()\n        image_button = gr.Button(\"Flip\")\n\n    with gr.Accordion(\"Open for More!\"):\n        gr.Markdown(\"Look at me...\")\n\n    text_button.click(flip_text, inputs=text_input, outputs=text_output)\n    image_button.click(flip_image, inputs=image_input, outputs=image_output)\n\ndemo.launch()\n</code></pre> <p>Image classification example:</p> <pre><code>import requests\nfrom PIL import Image\n\nimport torch\nfrom torchvision import transforms\n\nimport gradio as gr\n\nmodel = torch.hub.load('pytorch/vision:v0.6.0', 'resnet18', pretrained=True).eval()\n\n# Download human-readable labels for ImageNet.\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\ndef predict(inp):\n  inp = transforms.ToTensor()(inp).unsqueeze(0)\n  with torch.no_grad():\n    prediction = torch.nn.functional.softmax(model(inp)[0], dim=0)\n    confidences = {labels[i]: float(prediction[i]) for i in range(1000)}    \n  return confidences\n\ngr.Interface(fn=predict, \n             inputs=gr.Image(type=\"pil\"),\n             outputs=gr.Label(num_top_classes=3),\n             examples=[\"lion.jpg\", \"cheetah.jpg\"]).launch()\n</code></pre>"},{"location":"python/gradio/#components","title":"Components","text":"<pre><code>name = gr.Textbox(label=\"Name\")\n</code></pre>"},{"location":"python/gradio/#event-listener","title":"Event Listener","text":"<pre><code>def greet(name):\n    return \"Hello \" + name + \"!\"\n\n# button\nname = gr.Textbox(label=\"Name\")\noutput = gr.Textbox(label=\"Output Box\")\ngreet_btn = gr.Button(\"Greet\")\ngreet_btn.click(fn=greet, inputs=name, outputs=output)\n\n# change\ninp = gr.Textbox(placeholder=\"What is your name?\")\nout = gr.Textbox()\ninp.change(greet, inp, out)\n</code></pre>"},{"location":"python/gradio/#iterative-outputs","title":"Iterative Outputs","text":"<pre><code>import gradio as gr\nimport numpy as np\nimport time\n\n# define core fn, which returns a generator {steps} times before returning the image\ndef fake_diffusion(steps):\n\n    for _ in range(steps):\n        time.sleep(1)\n        image = np.random.random((600, 600, 3))\n        yield image\n\n    image = \"https://i.picsum.photos/id/867/600/600.jpg?hmac=qE7QFJwLmlE_WKI7zMH6SgH5iY5fx8ec6ZJQBwKRT44\" \n    yield image\n\ndemo = gr.Interface(fake_diffusion, \n                    inputs=gr.Slider(1, 10, 3), \n                    outputs=\"image\")\n\n# define queue - required for generators\ndemo.queue()\n\ndemo.launch()\n</code></pre>"},{"location":"python/gradio/#queuing","title":"Queuing","text":"<p>Control the concurrency rate. Should be used if the core function takes &gt; 1min to process.</p> <pre><code>demo.queue(concurrency_count=3)\ndemo.launch()\n</code></pre>"},{"location":"python/gradio/#state","title":"State","text":"<p>To preserve information between multiple submits.</p> <pre><code>import gradio as gr\nimport random\n\nsecret_word = \"gradio\"\n\nwith gr.Blocks() as demo:    \n\n    # this is the persistent information, we need a list to save it.\n    used_letters_var = gr.State([])\n\n    with gr.Row() as row:\n        with gr.Column():\n            input_letter = gr.Textbox(label=\"Enter letter\")\n            btn = gr.Button(\"Guess Letter\")\n        with gr.Column():\n            hangman = gr.Textbox(\n                label=\"Hangman\",\n                value=\"_\"*len(secret_word)\n            )\n            used_letters_box = gr.Textbox(label=\"Used Letters\")\n\n    def guess_letter(letter, used_letters):\n        used_letters.append(letter)\n        answer = \"\".join([\n            (letter if letter in used_letters else \"_\")\n            for letter in secret_word\n        ])\n        return {\n            used_letters_var: used_letters,\n            used_letters_box: \", \".join(used_letters),\n            hangman: answer\n        }\n\n    btn.click(\n        guess_letter, \n        [input_letter, used_letters_var],\n        [used_letters_var, used_letters_box, hangman]\n        )\ndemo.launch()\n</code></pre>"},{"location":"python/gradio/#proxy-trouble-shooting","title":"Proxy Trouble shooting","text":"<p>If <code>ValueError: Unknown scheme for proxy URL</code>.</p> <pre><code>all_proxy= python gradio_app.py\n</code></pre>"},{"location":"python/hash/","title":"hash in python","text":"<p>Different classes implement different <code>__hash__()</code> method.</p> <pre><code># hash(immutable object) -&gt; int\n\n# primitives\nhash(10) # 10\nhash(10.0) # 10\nhash(10.1) # 230584300921368586\nhash('str') # 3512716393951003388\n\n# tuples\nhash((1)) # 1\nhash((1,2)) # -3550055125485641917\n\n# collision example\nhash(10.1) == hash(230584300921368586) # True\n</code></pre>"},{"location":"python/hash/#the-exact-algorithms","title":"The exact algorithms","text":"<p>in <code>cpython</code> source, e.g.,</p> <pre><code>static long string_hash(PyStringObject *a)\n{\n    register Py_ssize_t len;\n    register unsigned char *p;\n    register long x;\n\n    if (a-&gt;ob_shash != -1)\n        return a-&gt;ob_shash;\n    len = Py_SIZE(a);\n    p = (unsigned char *) a-&gt;ob_sval;\n    x = *p &lt;&lt; 7;\n    while (--len &gt;= 0)\n        x = (1000003*x) ^ *p++;\n    x ^= Py_SIZE(a);\n    if (x == -1)\n        x = -2;\n    a-&gt;ob_shash = x;\n    return x;\n}\n</code></pre>"},{"location":"python/huggingface/","title":"Huggingface","text":""},{"location":"python/huggingface/#huggingface","title":"Huggingface","text":""},{"location":"python/huggingface/#install","title":"Install","text":"<pre><code># install\npip install huggingface_hub\n\n# login (use https://huggingface.co/settings/tokens)\nhuggingface-cli login\n</code></pre>"},{"location":"python/huggingface/#upload-models-to-a-repo","title":"upload models to a repo","text":""},{"location":"python/huggingface/#using-python-api","title":"using python API:","text":"<pre><code>from huggingface_hub import HfApi\napi = HfApi()\n\n### create repo\napi.create_repo(repo_id=\"repo\", private=True)\n\n### upload file\napi.upload_file(\n    path_or_fileobj=\"/path/to/obj\",\n    path_in_repo=\"obj\",\n    repo_id=\"user/repo\",\n)\n\n### upload folder (to root dir)\napi.upload_folder(\n    folder_path=\"/path/to/dir\",\n    repo_id=\"user/repo\",\n    repo_type=\"model\", # dataset, space\n)\n</code></pre>"},{"location":"python/huggingface/#using-cli","title":"using CLI:","text":"<p>If the repo is not existing, it will be created automatically!</p> <pre><code># upload local files to remote repo\nhuggingface-cli upload &lt;user/repo&gt; &lt;local path&gt; &lt;remote path&gt;\n\n# upload everything to remote root dir\nhuggingface-cli upload &lt;user/repo&gt; . .\n\n# upload a single file \nhuggingface-cli upload &lt;user/repo&gt; ./path/to/myfile # remote default to .\nhuggingface-cli upload &lt;user/repo&gt; ./path/to/myfile /path/to/remote\n\n# upload multiple files: use  --include --exclude\nhuggingface-cli upload &lt;user/repo&gt; --include=\"*.mp4\" --exclude=\"unwanted*\"\n</code></pre>"},{"location":"python/huggingface/#download-models","title":"download models","text":""},{"location":"python/huggingface/#using-cli_1","title":"using CLI:","text":"<p>By default these commands will download to <code>~/.cache/huggingface/hub</code>, use <code>--local-dir</code> to change it!</p> <pre><code># download single/multiple files to current dir\nhuggingface-cli download &lt;user/repo&gt; &lt;file1&gt; [&lt;file2&gt; ...] --local-dir .\n\nhuggingface-cli download stabilityai/stable-diffusion-xl-base-1.0 --include \"*.safetensors\" --exclude \"*.fp16.*\"*\n\n# download entire repo\nhuggingface-cli download &lt;user/repo&gt; --local-dir .\n</code></pre>"},{"location":"python/introspection/","title":"inspect","text":""},{"location":"python/introspection/#vars","title":"<code>vars()</code>","text":"<p><code>vars(x)</code> equals <code>x.__dict__</code>, which returns a dict of the current class's attributes &amp; methods of  <code>x</code>. (both name and value)</p> <pre><code>class Foo:\n    def __init__(self):\n        self.x = 1\n    def call(self):\n        print(self.x)\n\nfoo = Foo()\n\nvars(Foo)\n'''\nmappingproxy({'__module__': '__main__',\n              '__init__': &lt;function __main__.Foo.__init__(self)&gt;,\n              'call': &lt;function __main__.Foo.call(self)&gt;,\n              '__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;,\n              '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects&gt;,\n              '__doc__': None})\n'''\n\nvars(foo)\n'''\n{'x': 1}\n'''\n</code></pre>"},{"location":"python/introspection/#dir","title":"<code>dir()</code>","text":"<p><code>dir(x)</code> returns the names of attributes &amp; methods of all levels (both current class and base class).</p> <pre><code>dir(Foo)\n'''\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'call']\n'''\n\ndir(foo)\n'''\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'call',\n 'x']\n'''\n</code></pre>"},{"location":"python/introspection/#inspect_1","title":"inspect","text":"<pre><code>import inspect\n\nfor name, value in inspect.getmembers(foo):\n    print(name, value)\n\n# eqs\nfor name in dir(foo):\n    print(name, getattr(foo, name))\n</code></pre>"},{"location":"python/mkdocs/","title":"mkdocs","text":""},{"location":"python/mkdocs/#install","title":"install","text":"<pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"python/mkdocs/#setup","title":"setup","text":"<p>Init a workspace:</p> <pre><code>mkdocs new .\n</code></pre> <p>Then add your markdowns to <code>docs</code>. Folder structure will be preserved in the navigation.</p>"},{"location":"python/mkdocs/#configuration","title":"configuration","text":"<p>edit <code>mkdocs.yml</code>, an example:</p> <pre><code>site_name: Kiui's notebook # web page name\ntheme:\n  name: material\n  palette:\n    primary: grey\n    accent: amber\n  features:\n    - navigation.instant\n    - navigation.tracking\n    - navigation.top # back-to-top button\nrepo_url: https://github.com/ashawkey/Notebooks\nplugins:\n  - search\nmarkdown_extensions:\n  - tables  \n  - pymdownx.betterem\n  - pymdownx.arithmatex:\n      generic: true  \n  - pymdownx.highlight\n  - pymdownx.inlinehilite\n  - pymdownx.keys\n  - pymdownx.superfences  \n  - pymdownx.tabbed:\n      alternate_style: true \n  - mdx_truly_sane_lists # fix typora 2 space indentation, ref: https://github.com/mkdocs/mkdocs/issues/545\n\nextra_javascript:\n  - _js/mathjax.js\n  - https://polyfill.io/v3/polyfill.min.js?features=es6\n  - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js      \n</code></pre> <p>The inline math plugin needs an extra file at <code>docs/_js/mathjax.js</code>:</p> <pre><code>window.MathJax = {\n    tex: {\n      inlineMath: [[\"\\\\(\", \"\\\\)\"]],\n      displayMath: [[\"\\\\[\", \"\\\\]\"]],\n      processEscapes: true,\n      processEnvironments: true\n    },\n    options: {\n      ignoreHtmlClass: \".*|\",\n      processHtmlClass: \"arithmatex\"\n    }\n  };\n\n  document$.subscribe(() =&gt; {\n    MathJax.typesetPromise()\n  })\n</code></pre> <p>Note that the default mathjax's line breaking can be hard to use, we can use a script to post-process the markdowns following typora's setting: <pre><code>import os\nimport re\nimport glob\n\nfiles = glob.glob('docs/**/*.md', recursive=True)\n\n# fix math blocks to be correctly rendered by mathjax:\n# 1. $$..$$ will always be preceded and followed by an empty line, and there is no blank line inside.\n# 2. always wrap all content within \\displaylines{}\n\nfor file in files:\n    with open(file, 'r') as f:\n        lines = f.readlines()\n\n    # naive matching $$...$$\n    outside = True\n    modified = False\n    for i, line in enumerate(lines):\n        if re.match('^\\$\\$', line) is not None:\n            if outside:\n                if lines[i+1] != '\\displaylines{\\n':\n                    lines[i] = '\\n$$\\n\\displaylines{\\n'\n                    modified = True\n                outside = False\n            else:\n                if lines[i-1] != '}\\n':\n                    lines[i] = '}\\n$$\\n\\n'\n                    modified = True\n                outside = True\n\n        # remove blank lines inside\n        if not outside and re.match('^\\s*\\n$', line):\n            lines[i] = ''\n            modified = True\n\n    # remove excessive blank lines\n    cnt = 0\n    for i, line in enumerate(lines):\n        if re.match('^\\s*\\n$', line):\n            cnt += 1\n            if cnt &gt;= 3:\n                lines[i] = ''\n                modified = True\n        else:\n            cnt = 0\n\n    if modified:\n        lines = [line for line in lines if line != '']\n\n    if not outside:\n        print(f'[WARN] {file} unmatched $$, no modification is done.')\n    else:\n        if modified:\n            with open(file, 'w') as f:\n                f.writelines(lines)\n            print(f'[INFO] {file} fixed.')\n</code></pre></p>"},{"location":"python/mkdocs/#serve","title":"serve","text":"<p>At the root of workspace:</p> <pre><code>mkdocs serve\n</code></pre> <p>by default it serves at <code>localhost:8000</code></p>"},{"location":"python/mkdocs/#deploy","title":"deploy","text":"<p>Use github workflows to automatically deploy to github pages:</p> <p>Create file at <code>.github/workflows/ci.yml</code>:</p> <pre><code>name: ci \non:\n  push:\n    branches: \n      - master # or main\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n</code></pre> <p>It is invoked at each push to master branch.</p>"},{"location":"python/monky_patch/","title":"Monky patch","text":""},{"location":"python/monky_patch/#monkey-patch-a-method","title":"Monkey patch a method","text":"<p>To patch the <code>forward</code> of a <code>nn.Module</code>, define a closure that keeps temporary variables and returns your new <code>forward</code>:</p> <pre><code>import torch.nn as nn\n\nclass A(nn.Module):\n    def __init__(self, name):\n        super().__init__()\n        self.name = name\n\n    def forward(self):\n        print(f'original forward of {self.name}')\n\na = A('a')\nb = A('b')\n\nfor name, m in zip(['a', 'b'], [a, b]):\n\n    def make_forward():\n        # record the current name in closure !\n        cur_name = name\n        def _forward():\n            print(f'patched forward of {cur_name}')\n        return _forward\n\n    m.forward = make_forward()\n\na()\nb()\n</code></pre> <p>Output:</p> <pre><code>patched forward of a\npatched forward of b\n</code></pre> <p>However, you cannot patch magic methods like <code>__call__</code> by this:</p> <pre><code>class A:\n    def __init__(self, name):\n        super().__init__()\n        self.name = name\n\n    def __call__(self):\n        print(f'original forward of {self.name}')\n\na = A('a')\nb = A('b')\n\nfor name, m in zip(['a', 'b'], [a, b]):\n\n    def make_call():\n        # record the current name in closure !\n        cur_name = name\n        def _call():\n            print(f'patched forward of {cur_name}')\n        return _call\n\n    m.__call__ = make_call()\n\na()\nb()\n</code></pre> <p>Output:</p> <pre><code>original forward of a\noriginal forward of b\n</code></pre> <p>This is because <code>__call__</code> is looked-up with respect to the class instead of instance, so we are still calling the original <code>__call__</code>.</p> <p>We have to patch the class to make this work, and cast instances to the derived class:</p> <pre><code>class A:\n    def __init__(self, name):\n        super().__init__()\n        self.name = name\n\n    def __call__(self):\n        print(f'original forward of {self.name}')\n\na = A('a')\nb = A('b')\n\n# a derived class that redirect __call__ to our patched call\nclass B(A):\n    def __call__(self):\n        self.patched_call()\n\nfor name, m in zip(['a', 'b'], [a, b]):\n\n    def make_call():\n        # record the current name in closure !\n        cur_name = name\n        def _call():\n            print(f'patched forward of {cur_name}')\n\n        return _call\n\n    m.__class__ = B # magic cast!\n    m.patched_call = make_call()\n\na()\nb()\n</code></pre> <p>Output:</p> <pre><code>patched forward of a\npatched forward of b\n</code></pre>"},{"location":"python/numpy_tricks/","title":"numpy tricks","text":""},{"location":"python/numpy_tricks/#automatic-broadcast-from-front","title":"automatic broadcast from front","text":"<pre><code>import numpy as np\n\na = np.array([1,2,3]) # [3,]\nb = np.zeros((3,3)) # [3, 3]\n\n# a [3,] --&gt; [1, 3] (default to expand from front.)\nprint(a + b) # [3, 3]\n\n'''\n[[1. 2. 3.]\n [1. 2. 3.]\n [1. 2. 3.]]\n'''\n\na = np.array([1,2,3]) # [3,]\nb = np.zeros((3,5)) # [3, 5]\n\n# auto expand failed\nprint(a + b) \n\n'''\nValueError: operands could not be broadcast together with shapes (3,) (3,5)\n'''\n\n# manual expand from back\nprint(a[:, None] + b)\n'''\n[[1. 1. 1. 1. 1.]\n [2. 2. 2. 2. 2.]\n [3. 3. 3. 3. 3.]]\n'''\n</code></pre>"},{"location":"python/numpy_tricks/#view","title":"View","text":"<p>Without touching underlying data, a <code>view</code> is the datatype and shape of the data.</p> <pre><code>a = np.arange(6)\nprint(a.shape) # (6,)\n\nb = a.view()\nb = b.reshape(2, 3)\nprint(a.shape, b.shape) # (6,), (2, 3)\n\na[0] = -1\nprint(b[0, 0]) # also -1, since a and b shares data.\n\n# check if two arrays are just views of the same data (maybe slow)\nnp.shares_memory(x[::2], x) # True\n</code></pre> <p>Pros:</p> <ul> <li>[time &amp; space] do not need to copy at every time you reshape, slice, index, ...</li> </ul> <p>Cons:</p> <ul> <li>[space] even if only a small slice is used, the pointed data maybe large and cannot be released. Use <code>.copy()</code> if you are sure the old data will not be used and should be garbage-collected!</li> </ul>"},{"location":"python/numpy_tricks/#indexing-slicing-important","title":"indexing &amp; Slicing (IMPORTANT!)","text":"<p>We discuss the behavior of  <code>x[obj]</code>, which can be classified as:</p>"},{"location":"python/numpy_tricks/#basic-indexing","title":"Basic Indexing","text":"<p>Features:</p> <ul> <li> <p><code>obj</code> is:</p> <ul> <li><code>slice</code></li> </ul> <ul> <li><code>integer</code></li> </ul> <ul> <li> <p>a  <code>tuple</code> that contains <code>slice</code> or <code>integer</code>. </p> <p>In the form of <code>x[(obj1, obj2, ...)]</code>, which equals <code>x[obj1, obj2, ...]</code>. </p> <p>So <code>x[(1,2,3)]</code> equals <code>x[1,2,3]</code> and is a basic indexing.</p> </li> </ul> <p><code>...</code> or <code>None</code> can be interspersed.</p> </li> </ul> <ul> <li>Never copy. Instead, always return a <code>view</code> of the original array.</li> </ul> <p>Some tips:</p> <ul> <li><code>slice</code> is in the form of <code>[i:j:k]</code>, and can be created by <code>np.s_[i:j:k]</code>.</li> <li><code>...</code> (Ellipsis) is usually used in the form of <code>x[..., slice], x[..., slice, :]</code>.</li> <li><code>None</code> or <code>np.newaxis</code> is used to expand the dimension.</li> <li><code>x[i]</code> reduces the dim, but <code>x[[i]], x[i:i+1]</code> keeps the dim.</li> <li><code>x[s1, s2]</code> equals <code>x[s1][s2]</code>.</li> <li><code>x[s1] = v</code> is in-place modification (and support broadcast).</li> <li><code>np.intp == np.int64</code> is the smallest data type sufficient to safely index any array; for advanced indexing it may be faster than other types.</li> </ul>"},{"location":"python/numpy_tricks/#advanced-indexing","title":"Advanced Indexing","text":"<p>Features:</p> <ul> <li><code>obj</code> is:<ul> <li>non-<code>tuple</code> sequence object (such as <code>list</code>)</li> <li><code>ndarray</code> of <code>integer</code> or <code>bool</code></li> <li>a <code>tuple</code> that contains the first two types of objects. </li> </ul> </li> <li>Always copy.</li> </ul> <p>Tips:</p> <ul> <li> <p>Different from <code>x[(1,2,3)] == x[1,2,3]</code>, <code>x[(1,2,3),]</code> equals <code>x[(1,2,3), :]</code> and is an advanced indexing.</p> <p><code>x[1:4]</code> takes the same slice but is a basic indexing.</p> <p><code>x[[1,2,3]]</code> is also an advanced indexing that equals <code>x[(1,2,3),]</code></p> </li> </ul> <ul> <li> <p>Integer array indexing performs index selection (the output's shape is the same as each index array's shape):</p> <pre><code>result[i_1, ..., i_M] == x[ind_1[i_1, ..., i_M], ind_2[i_1, ..., i_M],\n                           ..., ind_N[i_1, ..., i_M]]\n\n# example\nx = np.array([[1, 2], [3, 4], [5, 6]])\nx[[0, 1, 2], [0, 1, 0]] # array([1, 4, 5])\n</code></pre> <p>submatrix selection can be achieved with broadcasting.</p> <pre><code>x = np.array([[ 0,  1,  2],\n              [ 3,  4,  5],\n              [ 6,  7,  8],\n              [ 9, 10, 11]])\nrows = np.array([0, 3], dtype=np.intp) # intp == int64, specially used for indexing.\ncols = np.array([0, 2], dtype=np.intp)\n\n# element selection\nx[rows, cols] # array([0, 11])\n\n# submatrix selection\nx[rows[:, None], cols[None, :]] # array([[0, 2], [9, 11]])\nx[rows[:, None], cols] # array([[0, 2], [9, 11]]), just a broadcast shortcut of the above line \n\nx[rows[None, :], cols[:, None]] # array([[0, 9], [2, 11]]), transposed version.\nx[rows, cols[:, None]] # array([[0, 9], [2, 11]]), shortcut\n\n# alias with np.ix_ \nx[np.ix_(rows, cols)] # array([[0, 2], [9, 11]])\nnp.ix_(rows, cols) # (array([[0], [3]], dtype=int64), array([[0, 2]], dtype=int64))\n</code></pre> </li> </ul> <ul> <li> <p>bool array indexing performs masked selection. The index array should be able to broadcast to the source array.</p> <pre><code>x = np.random.randn(3, 3)\nmask = x &gt; 0\nx[mask] # a usual case.\nx[mask.nonzero()] # the equal integer array indexing.\n</code></pre> <p>submatrix selection can be achieved in a similar way.</p> <pre><code>x = np.array([[ 0,  1,  2],\n              [ 3,  4,  5],\n              [ 6,  7,  8],\n              [ 9, 10, 11]])\n\nrows = np.array([True, False, False, True])\ncols = np.array([True, False, True])\n\n# just the same as the above example!\n\n# element selection\nx[rows, cols]\n\n# submatrix selection\nx[np.ix_(rows, cols)]\nx[rows.nonzero()[0][:, None], cols] # a little ugly\n</code></pre> </li> </ul> <ul> <li> <p>For advanced assignments, there is in general no guarantee for the iteration order. This means that if an element is set more than once, it is not possible to predict the final result.</p> <pre><code>a = np.zeros(6)\nb = np.array([3, 2, 5, 2]) # 1d indices\nc = np.array([1, 1, 1, 1]) # values to add at these indices\n\n# extract by advanced indexing is always OK.\nprint(a[b])\n\n# assign by advanced indexing is wrong is the indices duplicate.\na[b] += c # array([0, 0, 1, 1, 0, 1]), DO NOT USE! a[2] is only added once.\n\n# the correct way to do this is to use ufunc.\nnp.add.at(a, b, c) # array([0, 0, 2, 1, 0, 1]), as expected.\n</code></pre> </li> </ul>"},{"location":"python/numpy_tricks/#assign-value-by-a-list-of-coordinates","title":"assign value by a list of coordinates","text":"<pre><code>import numpy as np\n\nimg = np.zeros((5, 5))\n\n# goal: assign vals to coords\ncoords = np.array([[0, 1], [1, 2], [2, 3], [3, 4]])\nvals = np.array([1, 2, 3, 4])\n\n# wrong:\nimg[coords]\n'''\nThis takes a [4, 2, 5] matrix.\ni.e., [(row0, row1), (row1, row2), ...]\n'''\n\n# correct:\nimg[tuple(coords.T)] = vals\n'''\ntuple(coords.T) is: (array([0, 1, 2, 3]), array([1, 2, 3, 4]))\n'''\n</code></pre>"},{"location":"python/numpy_tricks/#slice","title":"slice","text":"<pre><code>import numpy as np\n\n# use np.s_ to create reusable slices.\ns_even = np.s_[::2]\ns_odd = np.s_[1::2]\n\na = np.arange(10)\nprint(a[s_even]) # equals a[::2]\nprint(a[s_odd]) # equals a[1::2]\n</code></pre>"},{"location":"python/numpy_tricks/#meshgrid","title":"meshgrid","text":"<pre><code># default behaviour\nnp.meshgrid(np.arange(3), np.arange(4)) # or indexing='xy'\n'''\n[array([[0, 1, 2],\n        [0, 1, 2],\n        [0, 1, 2],\n        [0, 1, 2]]),\n array([[0, 0, 0],\n        [1, 1, 1],\n        [2, 2, 2],\n        [3, 3, 3]])]\n'''\n\n# specify indexing = `ij`\nnp.meshgrid(np.arange(3), np.arange(4), indexing='ij')\n'''\n[array([[0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [2, 2, 2, 2]]),\n array([[0, 1, 2, 3],\n        [0, 1, 2, 3],\n        [0, 1, 2, 3]])]\n'''\n\n# note: the default behaviour of numpy (xy) is different from torch (ij) !!!\ntorch.meshgrid(torch.arange(3), torch.arange(4))\n'''\n(tensor([[0, 0, 0, 0],\n         [1, 1, 1, 1],\n         [2, 2, 2, 2]]),\n tensor([[0, 1, 2, 3],\n         [0, 1, 2, 3],\n         [0, 1, 2, 3]]))\n'''\n</code></pre>"},{"location":"python/numpy_tricks/#numpy-add-by-index-with-duplicated-indices","title":"numpy add by index, with duplicated indices","text":"<p>In numpy &gt;= 1.8, you can also use the <code>at</code> method of the addition 'universal function' ('ufunc'). As the docs note:</p> <p>For addition ufunc, this method is equivalent to a[indices] += b, except that results are accumulated for elements that are indexed more than once.</p> <p>Example:</p> <pre><code>a = np.zeros(6)\nb = np.array([3, 2, 5, 2]) # 1d indices\nc = np.array([1, 1, 1, 1]) # values to add at these indices\n\n# extract\nprint(a[b])\n\n# manipulate\na[b] += c          # array([0, 0, 1, 1, 0, 1]), DO NOT USE! a[2] is only added once.\nnp.add.at(a, b, c) # array([0, 0, 2, 1, 0, 1]), as expected.\n</code></pre> <p>Extending: the <code>np.ufunc.at</code> function family.</p> <p>Performs unbuffered in place operation on operand \u2018a\u2019 for elements specified by \u2018indices\u2019. </p> <pre><code>np.negative.at(np.array([1,2,3]), [0,2]) # [-1,2,-3]\n</code></pre> <p>Torch's equivalent:</p> <pre><code>a = torch.zeros(6)\nb = torch.LongTensor([3, 2, 5, 2]) # 1d indices\nc = torch.FloatTensor([1, 1, 1, 1]) # values to add at these indices\n\n# extract\nprint(a[b])\n\n# manipulate\na[b] += c                              # ([0, 0, 1, 1, 0, 1]), DO NOT USE! a[2] is only added once.\na.index_put_((b,), c)                  # ([0, 0, 1, 1, 0, 1]), ditto, this is really 'put' (the original values will be overwriten!)\na.index_put_((b,), c, accumulate=True) # ([0, 0, 2, 1, 0, 1]), correctly accumulate on the original values.\n\n# equivalent with torch_scatter (much faster! but only support 1D index)\nimport torch_scatter\ntorch_scatter.scatter_add(c, b, out=a) # ([0, 0, 2, 1, 0, 1]), correctly accumulate on the original values.\n</code></pre> <p>Note: the name <code>index_put_</code> is tricky, <code>index_add_</code> is another different thing in torch, which is less flexible to achieve what we are doing.</p>"},{"location":"python/numpy_tricks/#numpy-add-by-2d-or-nd-index","title":"numpy add by 2D (or nD) index","text":"<p>The desired operation:</p> <pre><code>a = np.zeros((3, 3))\nb = np.array([[0,0], [1,1], [2,2], [2,2]]) # [M, 2], 2d indices\nc = np.array([1, 1, 1, 1]) # values to add\n\n# extract\na[tuple(b.T)]\n\n# manipulate\na[tuple(b.T)] += c # same, duplicated indices are added once. DO NOT USE!\nnp.add.at(a, tuple(b.T), c) # as expected.\n</code></pre> <p>Torch's equivalent:</p> <pre><code>a = torch.zeros((3, 3))\nb = torch.LongTensor([[0,0], [1,1], [2,2], [2,2]]) # [M, 2], 2d indices\nc = torch.FloatTensor([1, 1, 1, 1]) # values to add\n\n# extract\na[tuple(b.T)]\n\n# manipulate\na[tuple(b.T)] += c # same, duplicated indices are added once. DO NOT USE!\na.index_put_(tuple(b.T), c, accumulate=True) # as expected.\n\n# no torch_scatter equivalent.\n</code></pre>"},{"location":"python/numpy_tricks/#take-vs-take_along_axis","title":"take v.s. take_along_axis","text":"<p><code>np.take</code> is in fact simple indexing.</p> <pre><code>### take: some common indices from array.\na = np.arange(15).reshape(3, 5) # data\n'''\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n\n'''\n\nb = np.array([0, 2]) # indices to take\n\n# take the [0, 2]-th row\nnp.take(a, b, axis=0)\na[b] # the same\n'''\narray([[ 0,  1,  2,  3,  4],\n       [10, 11, 12, 13, 14]])\n'''\n\n# take the [0, 2]-th col\nnp.take(a, b, axis=1)\na[:, b]\n\n'''\narray([[ 0,  2],\n       [ 5,  7],\n       [10, 12]])\n'''\n</code></pre> <p>However, sometimes we want to take one exact indexed element from each row (like the <code>torch.gather</code> operation). <code>np.take_along_axis</code> does this:</p> <pre><code>a = np.arange(15).reshape(3, 5) # data\n'''\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n\n'''\n\nb = np.array([0, 2, 4]) # aim: get [0, 7, 14]\nnp.take_along_axis(a, b[:, None], axis=1)\n'''\narray([[ 0],\n       [ 7],\n       [14]])\n'''\n\nc = np.array([0, 0, 0, 1, 1]) # aim: get [0, 2, 3, 8, 14]\nnp.take_along_axis(a, c[None, :], axis=0)\n'''\narray([[0, 1, 2, 8, 9]])\n'''\n</code></pre> <p>We can also take multiple elements from each row. For example, we want to cycle the smallest element of each row to the first column:</p> <pre><code>x = np.random.randint(0, 10, (5, 3)) # [N, M]\n'''\narray([[2, 2, 5],\n       [8, 4, 1],\n       [7, 0, 7],\n       [5, 9, 0],\n       [9, 7, 4]])\n'''\nxx = np.concatenate([x, x[:, :-1]], axis=1) # [N, 2M-1], full cycle of each element\nstart_inds = x.argmin(axis=1) # [N], the index of the smallest element in each row\nfull_inds = start_inds[:, None] + np.arange(x.shape[1])[None, :] # [N, M] the full cycle index\nresult = np.take_along_axis(xx, full_inds, axis=1) # [N, M], the result\n'''\narray([[2, 2, 5],\n       [1, 8, 4],\n       [0, 7, 7],\n       [0, 5, 9],\n       [4, 9, 7]])\n'''\n</code></pre>"},{"location":"python/open3d_ASH/","title":"open3d ASH","text":""},{"location":"python/open3d_ASH/#ash","title":"ASH","text":""},{"location":"python/open3d_ASH/#tensor-api","title":"Tensor API","text":"<pre><code>### pytorch communication (share the same data blob)\n\nimport torch\nimport torch.utils.dlpack\nimport open3d.core as o3c\n\n# torch --&gt; open3d\nth_a = torch.ones((5,)).cuda(0)\no3_a = o3c.Tensor.from_dlpack(torch.utils.dlpack.to_dlpack(th_a))\n\n# open3d --&gt; torch\no3_a = o3c.Tensor([1, 1, 1, 1, 1], device=o3c.Device(\"CUDA:0\"))\nth_a = torch.utils.dlpack.from_dlpack(o3_a.to_dlpack())\n</code></pre>"},{"location":"python/open3d_ASH/#hash-api","title":"Hash API","text":"<pre><code>import open3d.core as o3c\nimport numpy as np\n\ncapacity = 10 # initial estimated hashmap capacity, not a limit though.\ndevice = o3c.Device('cpu:0')\n\n# unordered_map&lt;int, int&gt;\nhashmap = o3c.HashMap(capacity,\n                      key_dtype=o3c.int64,\n                      key_element_shape=(1,),\n                      value_dtype=o3c.int64,\n                      value_element_shape=(1,),\n                      device=device)\n\n### reserve space (set capacity)\nhashmap.reserve(capacity)\n\n### insert\nkeys = o3c.Tensor([[100], [200], [400], [800], [300], [200], [100]],\n                  dtype=o3c.int64,\n                  device=device)\nvals = o3c.Tensor([[1], [2], [4], [8], [3], [2], [1]],\n                  dtype=o3c.int64,\n                  device=device)\nbuf_indices, masks = hashmap.insert(keys, vals)\n\n# masks indicate each insertion succeeded / failed.\nprint(masks) # [True True True True True False False], last two keys are duplicated and ignored.\n\n# buf_indices indicate the inserted position.\nbuf_indices = buf_indices[masks].to(o3c.int64) # also need to remove failed insertion (which will be 0 by default).\nprint(buf_indices) # [0 1 3 4 2], row vec [5]\n\n# retrieve keys/vals by buf_indices\nbuf_keys = hashmap.key_tensor()\nbuf_vals = hashmap.value_tensor()\ninserted_keys = buf_keys[buf_indices] # [100, 200, 400, 800, 300] (col vec [5, 1])\ninserted_vals = buf_vals[buf_indices] # [1, 2, 4, 8, 3]\n\n### query\nquery_keys = o3c.Tensor([[1000], [100], [300], [200], [100], [0]],\n                        dtype=o3c.int64,\n                        device=device)\n\nbuf_indices, masks = hashmap.find(query_keys)\n\n# remove failed query (non-exist keys)\nvalid_keys = query_keys[masks] # [100, 300, 200, 100]\n\n# retrieve query results (only valid query)\nbuf_indices = buf_indices[masks].to(o3c.int64)\nvalid_vals = buf_vals[buf_indices] # [1, 3, 2, 1]\n\n### get all valid (active) keys\nall_buf_indices = hashmap.active_buf_indices().to(o3c.int64)\nall_keys = buf_keys[all_buf_indices]\nall_vals = buf_vals[all_buf_indices]\n\n### erase\nerase_keys = o3c.Tensor([[100], [1000], [100]], dtype=o3c.int64, device=device)\nmasks = hashmap.erase(erase_keys)\n\n# check succeeded erasion\nvalid_erase_keys = erase_keys[masks] # [100,]\n\n### activate (reserve keys first, in-place set value later)\nkeys = o3c.Tensor([[1000], [0]], dtype=o3c.int64, device=device)\nbuf_indices, masks = hashmap.activate(activate_keys) # different from insert, we don't need to provide vals here.\n# instead, we can inplace update vals later.\nbuf_vals[buf_indices[masks].to(o3c.int64)] = o3c.Tensor([[10], [0]], dtype=o3c.int64, device=device)\n</code></pre> <p>For multi-valued hashmap:</p> <pre><code>mhashmap = o3c.HashMap(capacity,\n                       key_dtype=o3c.int32,\n                       key_element_shape=(3,),\n                       value_dtypes=(o3c.uint8, o3c.float32),\n                       value_element_shapes=((3,), (1,)),\n                       device=device)\n\nn_buffers = len(mhashmap.value_tensors()) # 2 value tensors\n\n# insert\nvoxel_coords = o3c.Tensor([[0, 1, 0], [-1, 2, 3], [3, 4, 1]],\n                          dtype=o3c.int32,\n                          device=device)\n\nvoxel_colors = o3c.Tensor([[0, 255, 0], [255, 255, 0], [255, 0, 0]],\n                          dtype=o3c.uint8,\n                          device=device)\n\nvoxel_weights = o3c.Tensor([[0.9], [0.1], [0.3]],\n                           dtype=o3c.float32,\n                           device=device)\n\nmhashmap.insert(voxel_coords, (voxel_colors, voxel_weights))\n\n# query\nquery_coords = o3c.Tensor([[0, 1, 0]], dtype=o3c.int32, device=device)\nbuf_indices, masks = mhashmap.find(query_coords)\n\nvalid_keys = query_coords[masks]\nbuf_indices = buf_indices[masks].to(o3c.int64)\n\nvalid_colors = mhashmap.value_tensor(0)[buf_indices]\nvalid_weights = mhashmap.value_tensor(1)[buf_indices]\n</code></pre> <p>For non-value hashmap, i.e., hashset:</p> <pre><code>hashset = o3c.HashSet(capacity,\n                      key_dtype=o3c.int64,\n                      key_element_shape=(1,),\n                      device=device)\n\n# insert\nkeys = o3c.Tensor([1, 3, 5, 7, 5, 3, 1], dtype=o3c.int64, device=device).reshape((-1, 1))\nhashset.insert(keys)\n\n# retrieve\nactive_buf_indices = hashset.active_buf_indices().to(o3c.int64)\nactive_keys = hashset.key_tensor()[active_buf_indices]\n</code></pre>"},{"location":"python/pybind/","title":"pybind11","text":""},{"location":"python/pybind/#install","title":"install","text":"<pre><code>pip install pybind11\n</code></pre>"},{"location":"python/pybind/#example","title":"example","text":"<p><code>example.cpp</code>:</p> <pre><code>// include\n#include &lt;pybind11/pybind11.h&gt;\nnamespace py = pybind11;\n\n// bind a simple function\nint add(int i, int j) {\n    return i + j;\n}\n\nPYBIND11_MODULE(example, m) {\n    m.doc() = \"pybind11 example plugin\"; // optional module docstring\n    m.def(\"add\", &amp;add, \"A function which adds two numbers\");\n}\n</code></pre> <p>compile with:</p> <pre><code>c++ -O3 -Wall -shared -std=c++11 -fPIC $(python3 -m pybind11 --includes) example.cpp -o example$(python3-config --extension-suffix)\n</code></pre> <p>use in <code>main.py</code>:</p> <pre><code>import example\nexample.add(1, 2)\n</code></pre>"},{"location":"python/pybind/#binding-basics","title":"binding basics","text":"<ul> <li> <p>functions</p> <pre><code>int add(int i, int j) {\n    return i + j;\n}\n\nPYBIND11_MODULE(example, m) {\n    m.def(\"add\", &amp;add, \"help\");\n}\n</code></pre> <pre><code>import example\nexample.add(1, 2)\n</code></pre> <ul> <li> <p>keyword parameters</p> <pre><code>// regular notation\nm.def(\"add1\", &amp;add, \"help\", py::arg(\"i\"), py::arg(\"j\"));\n\n// shorthand\nusing namespace pybind11::literals;\nm.def(\"add2\", &amp;add, \"help\", \"i\"_a, \"j\"_a);\n</code></pre> <pre><code>import example\nexample.add(i=1, j=2)\n</code></pre> </li> </ul> <ul> <li> <p>default parameters</p> <pre><code>// regular notation\nm.def(\"add1\", &amp;add, \"help\", py::arg(\"i\") = 1, py::arg(\"j\") = 2);\n\n// shorthand\nusing namespace pybind11::literals;\nm.def(\"add2\", &amp;add, \"help\", \"i\"_a=1, \"j\"_a=2);\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>variables</p> <pre><code>PYBIND11_MODULE(example, m) {\n    m.attr(\"the_answer\") = 42;\n    py::object world = py::cast(\"World\");\n    m.attr(\"what\") = world;\n}\n</code></pre> <pre><code>import example\nexample.the_answer\nexample.what\n</code></pre> </li> </ul> <ul> <li> <p>class</p> <pre><code>// definition\nstruct Pet {\n    Pet(const std::string &amp;name) : name(name) { }\n    void setName(const std::string &amp;name_) { name = name_; }\n    const std::string &amp;getName() const { return name; }\n\n    std::string name;\n};\n\n// binding\n#include &lt;pybind11/pybind11.h&gt;\nnamespace py = pybind11;\n\nPYBIND11_MODULE(example, m) {\n    py::class_&lt;Pet&gt;(m, \"Pet\") // \"Pet\" is the class name in python\n        .def(py::init&lt;const std::string &amp;&gt;()) // init method\n        .def(\"setName\", &amp;Pet::setName)\n        .def(\"getName\", &amp;Pet::getName);\n}\n</code></pre> <pre><code>import example\np = example.Pet('Molly')\nprint(p)\np.getName()\np.setName('Charly')\np.getName()\n</code></pre> <ul> <li> <p>binding lambda functions</p> <pre><code>py::class_&lt;Pet&gt;(m, \"Pet\")\n    .def(py::init&lt;const std::string &amp;&gt;())\n    .def(\"setName\", &amp;Pet::setName)\n    .def(\"getName\", &amp;Pet::getName)\n    // the __repr__ using a lambda function\n    .def(\"__repr__\",\n        [](const Pet &amp;a) {\n            return \"&lt;example.Pet named '\" + a.name + \"'&gt;\";\n        }\n    );\n</code></pre> </li> </ul> <ul> <li> <p>binding attributes</p> <pre><code>// public attribute\npy::class_&lt;Pet&gt;(m, \"Pet\")\n    .def(py::init&lt;const std::string &amp;&gt;())\n    .def_readwrite(\"name\", &amp;Pet::name)\n    ...\n</code></pre> <pre><code>import example\np = example.Pet('Molly')\np.name\np.name = \"Charly\"\n</code></pre> <pre><code>// private attribute and const attribute\nclass Pet {\npublic:\n    Pet(const std::string &amp;name) : name(name) { }\n    void setName(const std::string &amp;name_) { name = name_; }\n    const std::string &amp;getName() const { return name; }\n    const int x = 0;\nprivate:\n    std::string name;\n};\n\npy::class_&lt;Pet&gt;(m, \"Pet\")\n    .def(py::init&lt;const std::string &amp;&gt;())\n    .def_readonly(\"x\", &amp;Pet::x)\n    .def_property(\"name\", &amp;Pet::getName, &amp;Pet::setName)\n    ...\n</code></pre> <pre><code>import example\np = example.Pet('Molly')\np.name\np.name = \"Charly\" # Error!\n</code></pre> </li> </ul> <ul> <li> <p>dynamic attribute</p> <p>By default, <code>pybind11</code> class doesn't support dynamic attribute like python class:</p> <pre><code>import example\np = example.Pet('Molly')\np.age = 2 # Attribute Error!\n</code></pre> <p>To enable it, use <code>py::dynamic_attr()</code>:</p> <pre><code>py::class_&lt;Pet&gt;(m, \"Pet\", py::dynamic_attr())\n    .def(py::init&lt;&gt;())\n    .def_readwrite(\"name\", &amp;Pet::name);\n    ...\n</code></pre> <pre><code>import example\np = example.Pet('Molly')\np.age = 2 # OK!\n</code></pre> </li> </ul> <ul> <li> <p>Inheritance</p> <pre><code>// TBD...\n</code></pre> </li> </ul> <ul> <li> <p>Overloaded method</p> <pre><code>// TBD...\n</code></pre> </li> </ul> </li> </ul>"},{"location":"python/pybind/#misc","title":"Misc","text":"<ul> <li>Binding template functions. </li> </ul> <p><pre><code>template &lt;typename T&gt;\nvoid set(T t);\n</code></pre> You cannot bind a template function directly, but you can instantiate it first: <pre><code>// overload \nm.def(\"set\", &amp;set&lt;int&gt;);\nm.def(\"set\", &amp;set&lt;std::string&gt;);\n\n// or explicitly bind to different name\nm.def(\"setInt\", &amp;set&lt;int&gt;);\nm.def(\"setString\", &amp;set&lt;std::string&gt;);\n</code></pre></p>"},{"location":"python/pybind/#type-conversion","title":"Type Conversion","text":""},{"location":"python/pybind/#basic-types","title":"Basic types","text":"<p>This includes <code>int, float, bool, ...</code> Copy is made when conversion between.</p>"},{"location":"python/pybind/#python-str-stdstring","title":"python str &lt;--&gt; std::string","text":"<p>Also quite straight-forward, copy is made. <pre><code>m.def(\"utf8_test\",\n    [](const std::string &amp;s) {\n        cout &lt;&lt; \"utf-8 is icing on the cake.\\n\";\n        cout &lt;&lt; s;\n    }\n);\n</code></pre></p> <pre><code>utf8_test(\"\ud83c\udf82\")\n</code></pre>"},{"location":"python/pybind/#listtuple-stdvectordequearray","title":"list/tuple &lt;--&gt; std::vector/deque/array","text":"<p>list and tuple are not distinguished. Copy is made!</p> <pre><code>#include &lt;pybind11/stl.h&gt;\n\nm.def(\"cast_vector\", []() { return std::vector&lt;int&gt;{1}; });\nm.def(\"load_vector\", [](const std::vector&lt;int&gt; &amp;v) { return v.at(0) == 1 &amp;&amp; v.at(1) == 2; });\n</code></pre> <pre><code>lst = m.cast_vector()\nassert lst == [1]\n\nlst.append(2)\nassert m.load_vector(lst)\nassert m.load_vector(tuple(lst))\n</code></pre>"},{"location":"python/pybind/#dict-stdmap","title":"dict &lt;--&gt; std::map","text":"<p>key and value types are automatically handled.  <pre><code>#include &lt;pybind11/stl.h&gt;\n\nm.def(\"cast_map\", []() { return std::map&lt;std::string, std::string&gt;{{\"key\", \"value\"}}; });\nm.def(\"load_map\", [](const std::map&lt;std::string, std::string&gt; &amp;map) {\n    return map.at(\"key\") == \"value\" &amp;&amp; map.at(\"key2\") == \"value2\";\n});\n</code></pre></p> <pre><code>d = m.cast_map()\nassert d == {\"key\": \"value\"}\nassert \"key\" in d\nd[\"key2\"] = \"value2\"\nassert \"key2\" in d\nassert m.load_map(d)\n</code></pre>"},{"location":"python/pybind/#set-stdset","title":"set &lt;--&gt; std::set","text":"<pre><code>m.def(\"cast_set\", []() { return std::set&lt;std::string&gt;{\"key1\", \"key2\"}; });\nm.def(\"load_set\", [](const std::set&lt;std::string&gt; &amp;set) {\n    return (set.count(\"key1\") != 0u) &amp;&amp; (set.count(\"key2\") != 0u) &amp;&amp; (set.count(\"key3\") != 0u);\n});\n</code></pre> <pre><code>s = m.cast_set()\nassert s == {\"key1\", \"key2\"}\ns.add(\"key3\")\nassert m.load_set(s)\n</code></pre>"},{"location":"python/pybind/#numpyndarray-eigen-matrix","title":"numpy.ndarray &lt;--&gt; Eigen Matrix","text":"<p>Pass-by-value are supported between <code>np.ndarray</code> and <code>Eigen::MatrixXd</code>. A copy is made for each conversion, which maybe unwanted. Pass-by-reference can be achieved through <code>Eigen::Ref&lt;T&gt;</code>. </p> <p>TODO: https://github.com/pybind/pybind11/blob/master/tests/test_eigen.cpp</p>"},{"location":"python/pymeshlab/","title":"Pymeshlab","text":""},{"location":"python/pymeshlab/#pymeshlab","title":"PyMeshLab","text":""},{"location":"python/pymeshlab/#install","title":"install","text":"<pre><code>pip install pymeshlab\n</code></pre>"},{"location":"python/pymeshlab/#usage","title":"usage","text":"<p>Basics:</p> <pre><code>import pymeshlab as pml\n\n# mesh set object (may contain multiple meshes)\nms = pml.MeshSet()\n\n# load a mesh (a layer in meshlab)\nms.load_new_mesh('mesh.ply')\n\n# number of meshes\nprint(len(ms)) # 1\nms.load_new_mesh('mesh2.ply')\nprint(len(ms)) # 2\n\n# set current mesh (layer)\nms.set_current_mesh(0) # use id\n\n# mesh stats\nm = ms.current_mesh()\nprint(m.vertex_number())\nprint(m.edge_number())\nprint(m.bounding_box()) # pml.BoundingBox, bb.diagonal, bb.max(), bb.min()\nprint(m.id()) # id in meshset, if not added to ms, default to -1\n\n# apply filters\nms.meshing_remove_connected_component_by_diameter(mincomponentdiag=pml.Percentage(10))\n\n# apply filters with outputs\nres = ms.get_geometric_measures()\nprint(res['mesh_volume'])\nprint(res['surface_area'])\n\n# save mesh\nms.save_current_mesh('mesh_new.ply')\n\n# remove all meshes\nms.clear()\n</code></pre> <p>Numpy interaction:</p> <pre><code>import pymeshlab as pml\nimport numpy as np\n\nms = pml.MeshSet()\n\nverts = np.array([...]) # [N, 3], float32\nfaces = np.array([...]) # [N, 3], int64\n\n# create mesh from numpy array\nm = pml.Mesh(verts, faces)\n\n# add to meshset\nms.add_mesh(m, 'name') # NOTE: this will do COPY!\n\n# extract to numpy array\nm = ms.current_mesh() # get the correct ref\nverts = m.vertex_matrix()\nfaces = m.face_matrix()\n</code></pre> <p>Filter script (automatic processing)</p> <pre><code>import pymeshlab as pml\n\nms = pml.MeshSet()\nms.load_new_mesh('mesh.ply')\n\n# apply some filters\nms.meshing_isotropic_explicit_remeshing()\nms.meshing_isotropic_explicit_remeshing()\nms.compute_scalar_by_aspect_ratio_per_face()\nms.compute_color_from_scalar_per_face()\n\n# save all filter history in a script\nms.save_filter_script('filter.mlx')\n\n#####################\n\n# load filter script\nms.load_filter_script(base_path + \"sample_filter_script.mlx\")\n# apply the same filters\nms.apply_filter_script()\n</code></pre>"},{"location":"python/pymeshlab/#useful-filters","title":"Useful Filters","text":"<pre><code>### mesh cleaning\n\n# clean vertices\nms.meshing_remove_unreferenced_vertices() # verts not refed by any faces\nms.meshing_remove_duplicate_vertices() # verts defined by the same values\nms.meshing_merge_close_vertices(threshold=pml.Percentage(1)) # 1/10000 of bounding box diagonal\n\n# clean faces\nms.meshing_remove_duplicate_faces() # faces defined by the same verts\nms.meshing_remove_null_faces() # faces with area == 0\n\n# remove CC\nms.meshing_remove_connected_component_by_diameter(mincomponentdiag=pml.Percentage(10))\nms.meshing_remove_connected_component_by_face_number(mincomponentsize=25)\n\n# repair t-vertices\n# method: 0 = edge collapse, 1 = edge flip\nms.meshing_remove_t_vertices(method=0, threshold=40, repeat=True)\n\n# repair non-manifold geometry\n# method: 0 = remove faces, 1 = split vertices\nms.meshing_repair_non_manifold_edges(method=0)\nms.meshing_repair_non_manifold_vertices(vertdispratio=0)\n</code></pre> <p>T-vertices: Vertices in the mid of an edge. Could be fixed by tessellation.</p> <p></p> <p>Non-manifold Geometry: geometry not exist in real world, like zero-thickness area. It causes problems in 3D printing, and leads to artifacts in rendering.</p> <p></p>"},{"location":"python/pypi_publish/","title":"PyPi publish","text":""},{"location":"python/pypi_publish/#prepare-setuppy","title":"Prepare <code>setup.py</code>","text":"<p>A simple example:</p> <pre><code>from setuptools import setup\n\nif __name__ == '__main__':\n    setup(\n        name=\"numpytorch\",\n        version='0.1.0',\n        description=\"Monkey-patched numpy with pytorch syntax\",\n        long_description=open('README.md', encoding='utf-8').read(),\n        long_description_content_type='text/markdown',\n        url='https://github.com/ashawkey/numpytorch',\n        author='kiui haw',\n        author_email=\"ashawkey1999@gmail.com\",\n        packages=['numpytorch',],\n        classifiers=[\n            'Intended Audience :: Science/Research',\n            'Programming Language :: Python :: 3 ',\n            'License :: OSI Approved :: MIT License',\n        ],\n        keywords='tensor manipulation, machine learning, deep learning',\n        install_requires=[\n            'numpy&gt;=1.20',\n            'forbiddenfruit',\n        ],\n    )\n</code></pre> <p><code>setup.cfg</code> is a static alternative of <code>setup.py</code>. Usually we don't need it. (although <code>setuptools</code> aims to transfer to the static one.)</p>"},{"location":"python/pypi_publish/#pytest-for-unit-test","title":"<code>pytest</code> for unit test","text":"<pre><code>pip install -U pytest\n</code></pre> <p>Prepare the folders as:</p> <pre><code>- pkg\n    - __init__.py\n    - ...\n- tests\n    - test_1.py\n    - test_2.py\n    - ...\nsetup.py\n</code></pre> <p>Install the package as editable (just link the package to the original location, basically meaning any changes to the original package would reflect directly in your environment.):</p> <pre><code># -e, --editable\npip install -e .\n</code></pre> <p>Write the <code>test.py</code> as:</p> <pre><code>import pkg\n\ndef test_func1():\n    assert (...)\n\ndef test_func2():\n    assert (...)\n\ndef TestClass:\n    def test_method1():\n        assert (...)\n</code></pre> <p>Call <code>pytest</code> at the current directory, it will automatically locate <code>tests/test_*.py</code>:</p> <pre><code># run all tests\npytest\n# quite run\npytest -q\n# stop at first error\npytest -x\n\n# test matching keyword\npytest -k func\npytest -k Class.method\n</code></pre>"},{"location":"python/pypi_publish/#gitignore","title":"<code>.gitignore</code>","text":"<pre><code>__pycache__/\n.pytest_cache/\n*~\n*.pyc\n*.DS_Store\n*.egg-info\n*.log\n.coverage\nbuild/\ndist/\n</code></pre> <p><code>LICENSE</code></p> <pre><code>The MIT License\n\nCopyright (c) 2013, 2019  Lincoln Clarete\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</code></pre>"},{"location":"python/pypi_publish/#publishing-deprecated-please-use-workflows","title":"Publishing [deprecated! please use workflows]","text":"<p>First, build the distributions by:</p> <pre><code># it will pack the package into sth like `dist/numpytorch-0.1.2.tar.gz`\npython setup.py sdist\n</code></pre> <p>Then, install <code>twine</code> and register at <code>PyPi</code>.</p> <pre><code>pip install twine\n</code></pre> <p>Upload the distribution:</p> <pre><code>twine upload dist/numpytorch-0.1.2.tar.gz\n</code></pre> <p>Note: you cannot delete or replace published versions! To update the code, you must change the version code and rebuild the package, then upload a different version (e.g., 0.1.3).</p>"},{"location":"python/pypi_publish/#add-static-files","title":"Add static files","text":"<p>By default <code>sdist</code> only bundle code files, if you have some data, like the <code>onnx</code> models, you should use <code>MANIFEST.in</code> to add them.</p> <p><code>MANIFEST.in</code>:</p> <pre><code>recursive-include path/to/my/data *\nrecursive-include path/to/another/data *\n</code></pre> <p>Then add one line in <code>setup.py</code>:</p> <pre><code>setup(\n    ...,\n    include_package_data=True,\n    ,,,.\n)\n</code></pre> <p>Now you can run <code>python setup.py sdist</code> to check whether it copies your static files.</p>"},{"location":"python/pypi_publish/#automatic-publishing-with-github-workflows","title":"Automatic publishing with github workflows","text":"<p>NOTE: this is updated on 2024.1.12, using pypi trusted publishers.</p> <p>First configure your pypi project (https://pypi.org/manage/projects/), click <code>manage --&gt; Publishing</code>, and add Github as a new publisher:</p> <p></p> <p>Then create workflows at <code>.github/workflows/pypi-publish.yml</code>:</p> <pre><code>name: Upload Python Package\n\non:\n  release: # publish when releasing a new tag on github.\n    types: [created]\n  workflow_dispatch: # allow you to manually trigger this workflow from github.\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    environment:\n      name: pypi\n      url: https://pypi.org/project/kiui/\n    permissions:\n      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.10'\n    # prepare distributions in dist/\n    - name: Install dependencies and Build\n      run: |\n        python -m pip install --upgrade pip\n        pip install setuptools wheel\n        python setup.py sdist bdist_wheel\n    # publish by trusted publishers (need to first setup in pypi.org projects-manage-publishing!)\n    # ref: https://github.com/marketplace/actions/pypi-publish\n    - name: Publish package distributions to PyPI\n      uses: pypa/gh-action-pypi-publish@release/v1\n</code></pre> <p>When you want to publish a new version, navigate to release and release a version tag.</p> <p>Then github actions will build and publish current repository state automatically!</p>"},{"location":"python/pypi_publish/#the-setup-script","title":"the setup script","text":"<pre><code>python setup.py build # build everything\npython setup.py build_ext # build c extensions\npython setup.py sdist # create source distribution\n\npython setup.py install # install package, not recommended!\npip install . # this is recommended as it will take care of dependencies and write correct metadata for upgrade/uninstall.\n\npython setup.py develop # editable install \npip install -e . # ditto\n</code></pre>"},{"location":"python/pytorch_pitfalls/","title":"pytorch pitfalls","text":""},{"location":"python/pytorch_pitfalls/#torchgatherinput-dim-index","title":"<code>torch.gather(input, dim, index)</code>","text":"<ul> <li> <p><code>assert input.dim == index.dim</code></p> <p>Only allows <code>input.shape[dim] != index.shape[dim]</code> (but must be broadcast-able, the most usual case is <code>index.shape[dim] == 1</code>)</p> <p>For the other dims, we requires <code>input.shape[other_dim] &gt;= index.shape[other_dim]</code>, and only use <code>input.shape[:index.shape[other_dim]]</code>.</p> </li> </ul> <ul> <li> <p><code>output.shape == index.shape</code></p> <pre><code># 1d example\nout[i] = input[index[i]] # dim == 0\n# shortcut: `out = input[index]`\n\n# 2d example\nout[i][j] = input[index[i][j]][j] # dim == 0\nout[i][j] = input[i][index[i][j]] # dim == 1\n</code></pre> </li> </ul> <ul> <li>Examples<p>Considering we want to extract one (or some) elements per row:</p> <pre><code>a = torch.arange(6).view(2, 3) # [[0,1,2], [3,4,5]]\n\n# we want [[2], [3]]\nb = torch.LongTensor([[2], [0]]) # [[2], [0]]\na.gather(1, b) # note dim=1, not 0! because we collect element from dim1 !\n\n# we want [[2,1], [3,4]]\nb = torch.LongTensor([[2, 1], [0, 1]])\na.gather(1, b)\n\n# we just want [[2, 1]] (index.shape[other_dim] &lt; input.shape[other_dim])\nb = torch.LongTensor([[2, 0]])\na.gather(1, b)\n</code></pre> </li> </ul> <ul> <li> <p>Difference with <code>torch.take_along_dim &amp; np.take_along_axis</code>.</p> <p>In most normal use cases, it is the same.</p> <p>One of the difference is the handling of <code>index.shape[other_dim] &lt; input.shape[other_dim]</code>. <code>take_along_axis</code> tries to broadcast.</p> <pre><code>a = np.arange(6).reshape(2, 3)\n\nb = np.array([[2], [0]])\nnp.take_along_axis(a, b, axis=1) # [[2], [3]]\n\nb = np.array([[2, 1], [0, 1]])\nnp.take_along_axis(a, b, axis=1) # [[2, 1], [3, 4]]\n\n# BUT np will try to broadcast, if index[other_dim] &lt; input[other_dim]!\nb = np.array([[2, 1]])\nnp.take_along_axis(a, b, axis=1) # [[2, 1], [5, 4]]\n# this is the same as\nb = np.array([[2, 1], [2, 1]])\nnp.take_along_axis(a, b, axis=1) # [[2, 1], [5, 4]]\n# if not broadcast-able, an error is thrown.\na = np.arange(9).reshape(3, 3)\nb = np.array([[2, 1], [2, 1]])\nnp.take_along_axis(a, b, axis=1) # IndexError: shape mismatch: indexing arrays could not be broadcast together with shapes (3,1) (2,2) \n\n# while torch doesn't try to broadcast:\na = torch.arange(9).reshape(3, 3)\nb = torch.LongTensor([[2, 1], [2, 1]])\na.gather(1, b) # [[2, 1], [5, 4]]\n</code></pre> </li> </ul>"},{"location":"python/pytorch_pitfalls/#torchscatterinput-dim-index-src","title":"<code>torch.scatter(input, dim, index, src)</code>","text":"<p>For the input specifications, it is very similar to <code>gather</code>.</p> <ul> <li> <p><code>assert input.dim == index.dim == src.dim</code></p> <p>Only allows <code>input.shape[dim] != index.shape[dim]</code> (but must be broadcast-able, the most usual case is <code>index.shape[dim] == 1</code>)</p> <p>For the other dims, we requires <code>input.shape[other_dim] &gt;= index.shape[other_dim]</code>, and only use <code>input.shape[:index.shape[other_dim]]</code>.</p> </li> </ul> <ul> <li> <p>weakly allows <code>src.shape &gt;= index.shape</code> for all dims. In this case only <code>src[:index.shape]</code> is used.</p> <p>But the backward pass is only implemented for <code>src.shape == index.shape</code>.</p> <pre><code># 1d example\ninput[index[i]] = src[i] # dim == 0\n# shortcut: input[index] = src\n\n# 2d example\ninput[index[i][j]][j] = src[i][j] # dim == 0\ninput[i][index[i][j]] = src[i][j] # dim == 1\n</code></pre> </li> </ul> <ul> <li> <p>WARNING!!! For <code>scatter</code>, index must be unique. Else the behavior is non-deterministic (only one of the duplicated indices is used) and lead to wrong gradient.</p> <p>However, For <code>scatter_add</code>, index can be duplicated and the answer is correctly summed over all duplicated indices..</p> </li> </ul> <ul> <li> <p>Examples:</p> <pre><code>input = torch.zeros((3, 3)).long()\n\n# we want to scatter [1,2,3] to the diag of input\nsrc = torch.arange(1,4)[:, None] # specify values, [[1], [2], [3]]\nindex = torch.LongTensor([[0], [1], [2]]) # specify col in each row\ninput.scatter(1, index, src)\n\n# duplicated index\ninput = torch.zeros(5).long()\nsrc = torch.arange(1, 4)\nindex = torch.LongTensor([1,1,1]) # duplicated index\ninput.scatter(0, index, src) # dangerous! in cpu, seems the last src is adopted. [0, 3, 0, 0, 0]\ninput.scatter_add(0, index, src) # safe. always [0, 6, 0, 0, 0]\n\n# column-wise merge\ninput = torch.zeros(2, 2).long()\nsrc = torch.ones(2, 3).long()\n# we want input[:, 0] = src[:, 0]; input[:, 1] = src[:, 1] + src[:, 2]\nindex = torch.LongTensor([0, 1, 1]) \n# dim=1 since we collect from column(dim1).\n# we have to EXPLICITLY repeat index, since torch only use src[:index.shape] !!!\ninput.scatter_add(1, index[None, :].repeat(2, 1), src) # [[1,2], [1,2]]\ninput.scatter_add(1, index[None, :], src) # [[1,2], [0,0]], not the expected value\n</code></pre> </li> </ul> <ul> <li> <p>Difference with <code>np.put_along_axis</code>:</p> <p>similar to <code>take_along_axis</code>, <code>np</code> tries to broadcast.</p> <p>Anyway, do not use these strange features is the most safe way...</p> <pre><code>input = np.zeros((3, 3))\nsrc = np.arange(1, 4)[:, None]\nindex = np.arange(3)[:, None]\n\n# inplace, we have to print the input\nnp.put_along_axis(input, index, src, axis=1)\nprint(input)\n\n# However, there is no add version of put_along_axis. An alternative is np.add.at()\n</code></pre> </li> </ul> <ul> <li> <p>Difference with <code>torch_scatter</code> package.</p> <p>the implementation in <code>torch_scatter</code> forces to broadcast index before scatter. (more like numpy)</p> <p>We can see from the source code:</p> <pre><code>def broadcast(src: torch.Tensor, other: torch.Tensor, dim: int):\n    if dim &lt; 0:\n        dim = other.dim() + dim\n    if src.dim() == 1:\n        for _ in range(0, dim):\n            src = src.unsqueeze(0)\n    for _ in range(src.dim(), other.dim()):\n        src = src.unsqueeze(-1)\n    src = src.expand_as(other)\n    return src\n\ndef scatter_sum(src: torch.Tensor, index: torch.Tensor, dim: int = -1,\n                out: Optional[torch.Tensor] = None,\n                dim_size: Optional[int] = None) -&gt; torch.Tensor:\n    # this line is exactly what we did in `index[None, :].repeat(2, 1)`\n    # equals `index = index.broadcast_to(src)`\n    index = broadcast(index, src, dim)\n    if out is None:\n        size = list(src.size())\n        if dim_size is not None:\n            size[dim] = dim_size\n        elif index.numel() == 0:\n            size[dim] = 0\n        else:\n            size[dim] = int(index.max()) + 1\n        out = torch.zeros(size, dtype=src.dtype, device=src.device)\n        return out.scatter_add_(dim, index, src)\n    else:\n        return out.scatter_add_(dim, index, src)\n\ndef scatter_mean(src: torch.Tensor, index: torch.Tensor, dim: int = -1,\n                 out: Optional[torch.Tensor] = None,\n                 dim_size: Optional[int] = None) -&gt; torch.Tensor:\n\n    out = scatter_sum(src, index, dim, out, dim_size)\n    dim_size = out.size(dim)\n\n    index_dim = dim\n    if index_dim &lt; 0:\n        index_dim = index_dim + src.dim()\n    if index.dim() &lt;= index_dim:\n        index_dim = index.dim() - 1\n\n    ones = torch.ones(index.size(), dtype=src.dtype, device=src.device)\n    count = scatter_sum(ones, index, index_dim, None, dim_size)\n    count[count &lt; 1] = 1\n    count = broadcast(count, out, dim)\n    if out.is_floating_point():\n        out.true_divide_(count)\n    else:\n        out.floor_divide_(count)\n    return out    \n</code></pre> </li> </ul>"},{"location":"python/re_tutorial/","title":"Regex","text":"<pre><code>import re\n</code></pre>"},{"location":"python/re_tutorial/#raw-string","title":"Raw string","text":"<pre><code>r'\\s*'\n</code></pre>"},{"location":"python/re_tutorial/#special-characters","title":"Special Characters","text":"<ul> <li><code>.</code></li> <li><code>^</code>, <code>$</code></li> <li><code>{m}</code></li> <li><code>{m, n}</code>,<code>{m, n}?</code></li> <li><code>*</code>, <code>*?</code>: {0, INF}</li> <li><code>+</code>, <code>+?</code>: {1, INF}</li> <li><code>?</code>, <code>??</code>: {0, 1}</li> </ul> <ul> <li><code>\\</code></li> <li><code>[]</code>, <code>[^]</code>: character set, auto-escape special chars.</li> <li><code>|</code></li> <li><code>()</code>: group, use <code>\\number</code> to catch (start from 1)</li> <li><code>(?#...)</code>: comment</li> <li><code>(?=...)</code>: lookahead assertion</li> <li><code>(?!...)</code>: negative lookahead assertion</li> </ul> <ul> <li><code>(?&lt;=...)</code>: lookbehind assertion</li> <li><code>(?&lt;!...)</code>: negative lookbehind assertion</li> </ul> <ul> <li><code>\\s</code>: [ \\t\\n\\r\\f\\v]</li> <li><code>\\S</code>: [ ^ \\t\\n\\r\\f\\v]</li> </ul> <ul> <li><code>\\w</code>: [a-zA-Z0-9_]</li> </ul> <ul> <li><code>\\W</code>: [ ^a-zA-Z0-9_]</li> </ul>"},{"location":"python/re_tutorial/#api","title":"API","text":"<pre><code># search, anywhere\nre.search(pattern, string) -&gt; Match-Obj/None\n# match, search from start\nre.match(pattern, string) -&gt; Match-Obj/None\n# fullmatch, search from start to end (full)\nre.fullmatch(pattern, string) -&gt; Match-Obj/None\n# split\nre.split(pattern, string, maxsplit=0) -&gt; list\n# findall, finditer\nre.findall(pattern, string) -&gt; tuple\n# sub\nre.sub(pattern, repl, string, count=0) -&gt; string\n# escape\nre.escape(string) -&gt; string\n# compile -&gt; Pattern Object\nprog = re.compile(pattern)\nres = prog.match(string)\n# Match Object\nm.groups()\nm.group(i)\nm.pos\nm.endpos\n</code></pre>"},{"location":"python/re_tutorial/#examples","title":"Examples","text":"<pre><code>## extract content inside parenthesis\nre.findall('\\((.*?)\\)', 'a(b), c (de), f(g(h))')\n#['b', 'de', 'g(h']\n\n## split by any space\nre.split('\\s*', 'a b    c\\t d')\n#['a', 'b', 'c', 'd']\n</code></pre>"},{"location":"python/sphinx_doc/","title":"Sphinx doc","text":""},{"location":"python/sphinx_doc/#sphinx","title":"Sphinx","text":""},{"location":"python/sphinx_doc/#install","title":"install","text":"<pre><code>pip install sphinx\n</code></pre>"},{"location":"python/sphinx_doc/#layout","title":"Layout","text":"<p>Run this at the root dir of your lib:</p> <pre><code>sphinx-quickstart docs\n# separate source and build --&gt; usually choose yes.\n</code></pre> <p>The layout will be:</p> <pre><code>mylib # &lt;-- source code\nsetup.py\nreadme.md\n\n# create by sphinx\ndocs\n\u251c\u2500\u2500 build # rendered doc\n\u251c\u2500\u2500 make.bat\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 source\n   \u251c\u2500\u2500 conf.py # important!\n   \u251c\u2500\u2500 index.rst # welcome page\n   \u251c\u2500\u2500 _static\n   \u2514\u2500\u2500 _templates\n</code></pre> <p>Build the doc by:</p> <pre><code>sphinx-build -M html docs/source/ docs/build\n\n# or in linux\ncd docs\nmake html\n</code></pre> <p>Then you can open the built index html (e.g., right click and openning by vs code live server):</p> <p>http://127.0.0.1:5500/docs/build/html/index.html</p>"},{"location":"python/sphinx_doc/#write-docs","title":"Write docs","text":"<p>By default sphinx uses ReStructuredText (.rst) mark up language, which is less common. But we can use <code>m2r2</code> extension to convert markdown (.md) to rst formats:</p> <pre><code>extensions = [\n    \"m2r2\",\n]\n\nsource_suffix = [\".rst\", \".md\"]\n</code></pre>"},{"location":"python/sphinx_doc/#narrative-documentation","title":"Narrative documentation","text":"<p>Just create a new file under <code>docs/source</code>, like <code>index.md</code>.</p> <p>Remember to cross-reference it to <code>index.md</code> under <code>toctree</code>:</p> <pre><code>.. table of content trees\n\n.. toctree::\n   :caption: Tutorials\n   :hidden:\n   :maxdepth: 1\n   :titlesonly:\n\n   ./mesh.md\n   ./camera.md\n\n.. toctree::\n   :caption: API\n   :hidden:\n   :maxdepth: 1\n   :titlesonly:\n\n   ./utils.md\n   ./cli.md\n</code></pre>"},{"location":"python/sphinx_doc/#automatic-documentation","title":"Automatic documentation","text":"<p>To automatically document all APIs, use these extensions:</p> <pre><code>extensions = [\n    'sphinx.ext.autodoc', # extract doc for single func/class\n]\n</code></pre> <p>These extensions will extract docstring from <code>py</code> source files. </p> <p>There are different docstring styles, by default sphinx use a format as:</p> <pre><code>def func(path):\n    \"\"\"\n    Func description.\n\n    :param path: The path of the file to wrap\n    :type path: str\n    :returns: A buffered writable file descriptor\n    :rtype: BufferedFileStorage\n    \"\"\"\n    ...\n</code></pre> <p>Another popular format is Google Python style:</p> <pre><code>def func(arg1: int, arg2: str) --&gt; bool:\n    \"\"\"Summary line.\n\n    Extended description of function.\n\n    Args:\n        arg1 (int): Description of arg1\n        arg2 (str): Description of arg2\n\n    Returns:\n        bool: Description of return value\n\n    \"\"\"\n    return True\n</code></pre> <p>You need this extension to use it:</p> <pre><code>extensions = ['sphinx.ext.napoleon']\n</code></pre> <p>To auto-generate the docs, you need to write in your doc file:</p> <pre><code>.. autodoc a func\n.. autofunction:: kiui.func\n\n.. autodoc a class, including all members \n.. autoclass:: kiui.myClass()\n   :members:\n\n.. autodoc a file, including all functions and classes, most useful!\n.. automodule:: kiui.utils\n   :members:\n</code></pre> <p>Note that <code>autodoc</code> will import the file to doc it! Ensure there are no side effects for any import.</p> <p>Note the number of spaces before <code>:members:</code>! It must be 2 or 3 spaces, and 4 spaces will complain <code>Explicit markup ends without a blank line; unexpected unindent</code> and won't correctly generate your doc!</p>"},{"location":"python/sphinx_doc/#publish","title":"Publish","text":"<p>Use extension:</p> <pre><code>extensions = [\n     \"sphinx.ext.githubpages\",\n]\n</code></pre> <p>Create a doc building <code>docs/requirements.txt</code>:</p> <pre><code>sphinx\nsphinx_design\nsphinx-copybutton\nfuro\nm2r2\n</code></pre> <p>Make sure the setup of your lib includes all necessary dependencies (may use a <code>[full]</code> dependency setting), since the sphinx need to import all modules to perform auto doc.</p> <p>Create workflow under <code>.github/workflows/docs.yaml</code>:</p> <pre><code>name: docs\n\non:\n  push:\n    branches: [main]\n  workflow_dispatch:\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      # Check out source\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.10\"\n\n      # Build documentation\n      - name: Building documentation\n        run: |\n          pip install --upgrade pip\n          pip install -e \".[full]\"\n          pip install -r docs/requirements.txt\n          sphinx-build docs/source docs/build -b dirhtml\n\n      # Deploy\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }} # Note that the GITHUB_TOKEN is NOT a personal access token. A GitHub Actions runner automatically creates a GITHUB_TOKEN secret to authenticate in your workflow. So, you can start to deploy immediately without any configuration.\n          publish_dir: ./docs/build\n          cname: kit.kiui.moe\n</code></pre> <p>Push to your git repo and trigger the workflow. Don't forget to configure the github pages!</p>"},{"location":"python/sphinx_doc/#theme","title":"Theme","text":"<p>For example:</p> <pre><code>pip install furo\n</code></pre> <p>Change conf.py:</p> <pre><code>html_theme = 'furo'\n</code></pre> <p>You may also want to add a badge to github and show the stars, this will need to create a file under <code>source/_templates/sidebar/brand.html</code>:</p> <pre><code>&lt;a class=\"sidebar-brand{% if logo %} centered{% endif %}\" href=\"{{ pathto(master_doc) }}\"&gt;\n    {% block brand_content %} {%- if logo_url %}\n    &lt;div class=\"sidebar-logo-container\"&gt;\n        &lt;img class=\"sidebar-logo\" src=\"{{ logo_url }}\" alt=\"Logo\" /&gt;\n    &lt;/div&gt;\n    {%- endif %} {%- if theme_light_logo and theme_dark_logo %}\n    &lt;div class=\"sidebar-logo-container\" style=\"margin: .5rem auto .5rem auto\"&gt;\n        &lt;img class=\"sidebar-logo only-light\" src=\"{{ pathto('_static/' + theme_light_logo, 1) }}\" alt=\"Light Logo\" /&gt;\n        &lt;img class=\"sidebar-logo only-dark\" src=\"{{ pathto('_static/' + theme_dark_logo, 1) }}\" alt=\"Dark Logo\" /&gt;\n    &lt;/div&gt;\n    {%- endif %} {#- {% if not theme_sidebar_hide_name %}\n    &lt;span class=\"sidebar-brand-text\"&gt;{{ docstitle if docstitle else project }}&lt;/span&gt;\n    {%- endif %} -#} {% endblock brand_content %}\n&lt;/a&gt;\n\n&lt;div style=\"text-align: center\"&gt;\n    &lt;b&gt;kiuikit&lt;/b&gt;\n    &lt;/br&gt;\n    &lt;script async defer src=\"https://buttons.github.io/buttons.js\"&gt;&lt;/script&gt;\n    &lt;a class=\"github-button\" href=\"https://github.com/ashawkey/kiuikit\"\n        data-color-scheme=\"no-preference: light; light: light; dark: light;\" data-size=\"large\" data-show-count=\"true\"\n        aria-label=\"Download buttons/github-buttons on GitHub\"&gt;\n        Github\n    &lt;/a&gt;\n&lt;/div&gt;\n</code></pre> <p>The logo and website favicon should be put under <code>source/_static/</code>, and set in <code>conf.py</code>:</p> <pre><code>html_favicon = '_static/icon.png'\nhtml_logo = '_static/logo.png'\n</code></pre>"},{"location":"python/sphinx_doc/#example-conf","title":"Example conf","text":"<pre><code># -- Project information -----------------------------------------------------\n\nproject = 'kiui'\ncopyright = '2024, kiui'\nauthor = 'kiui'\n\n# The full version, including alpha/beta/rc tags\nrelease = '0.2.0'\n\n\n# -- General configuration ---------------------------------------------------\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.githubpages\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx_design\",\n    \"sphinx_copybutton\",\n    \"m2r2\",\n]\n\n# sort automodule generated doc by source\nautodoc_default_options = {\n    \"member-order\": \"bysource\",\n}\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = []\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'furo'\n# html_title = \"kiuikit\" # default is name-version documentation\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\nhtml_favicon = '_static/icon.png'\nhtml_logo = '_static/logo.png'\n\nsphinx_to_github = True\nsphinx_to_github_verbose = True\nsphinx_to_github_encoding = \"utf-8\"\n\nnapoleon_google_docstring = True\nnapoleon_numpy_docstring = False\nnapoleon_include_init_with_doc = False\nnapoleon_include_private_with_doc = False\nnapoleon_include_special_with_doc = True\nnapoleon_use_admonition_for_examples = False\nnapoleon_use_admonition_for_notes = False\nnapoleon_use_admonition_for_references = False\nnapoleon_use_ivar = False\nnapoleon_use_param = True\nnapoleon_use_rtype = True\nnapoleon_preprocess_types = False\nnapoleon_type_aliases = None\nnapoleon_attr_annotations = True\n</code></pre>"},{"location":"python/threading_multiprocessing/","title":"threading and multiprocessing","text":""},{"location":"python/threading_multiprocessing/#difference-between-threading-and-multiprocessing","title":"difference between threading and multiprocessing","text":"<ul> <li>threading is limited by the GIL (for CPython), so only one python process can run at the same time.</li> <li>object can be shared between threads (memory sharing), but must be copied per process.</li> </ul>"},{"location":"python/threading_multiprocessing/#gil-global-interpreter-lock","title":"GIL (Global Interpreter Lock)","text":"<ul> <li>What: a mutex that only allows one thread to access python objects at any time.</li> </ul> <ul> <li>Why: prevents race conditions and ensures thread safety for reference counting.</li> </ul> <ul> <li> <p>Impact: harms performance for CPU-bound program.</p> <p>For example, this two-thread program is SLOWER than a single-thread one.</p> <pre><code># two-thread\nimport time\nfrom threading import Thread\n\nCOUNT = 50000000\n\ndef countdown(n):\n    while n&gt;0:\n        n -= 1\n\nt1 = Thread(target=countdown, args=(COUNT//2,))\nt2 = Thread(target=countdown, args=(COUNT//2,))\n\nstart = time.time()\nt1.start()\nt2.start()\nt1.join()\nt2.join()\nend = time.time()\n\nprint('Time taken in seconds -', end - start)\n\n# single-thread\nimport time\nfrom threading import Thread\n\nCOUNT = 50000000\n\ndef countdown(n):\n    while n&gt;0:\n        n -= 1\n\nstart = time.time()\ncountdown(COUNT)\nend = time.time()\n\nprint('Time taken in seconds -', end - start)\n</code></pre> </li> </ul>"},{"location":"python/threading_multiprocessing/#multiprocessing","title":"multiprocessing","text":"<p>thread start method</p> <ul> <li>'spawn': default on windows and macos, safe, slower.</li> <li>'fork': only available and default on unix, unsafe, faster.</li> </ul> <pre><code>import multiprocessing as mp\n\nmp.set_start_method('spawn')\n</code></pre> <p>simple data-parallel:</p> <pre><code>from multiprocessing import Pool\n\ndef f(x):\n    do_some_thing(x)\n\n# method 1\np = Pool(8)\np.map(f, list(range(1024)))\np.close()\np.join()\n\n# method 2\nwith Pool(8) as p:\n    p.map(f, list(range(1024)))\n</code></pre> <p>with return values:</p> <pre><code>def f(x): \n    return x\n\nwith Pool(8) as p:\n    res = p.map(f, list(range(1024)))\n# res: [0, 1, 2, ..., 1023]\n</code></pre> <p>sender-receiver model with Queue:</p> <pre><code>import time\nfrom multiprocessing import Queue, Process\n\n# sender (background)\ndef sender(q):\n    x = 0\n    while True:\n        q.put(x)\n        x += 1\n        time.sleep(0.5)\n\nq = Queue()\np = Process(target=sender, args=(q,))\n\np.start()\n\n# reciever (foreground)\nfor _ in range(10):\n    x = q.get()\n    print(x)\n    time.sleep(0.5)\n\np.terminate() # terminate sender (don't use join since it runs endlessly)\n</code></pre> <p>A classy way:</p> <pre><code>import time\nfrom multiprocessing import Queue, Process\n\nclass A:\n    def __init__(self):\n        self.q = Queue()\n\n        # sender (background)\n        def sender():\n            x = 0\n            while True:\n                self.q.put(x)\n                x += 1\n                time.sleep(0.5)\n\n        self.p = Process(target=sender)\n\n        self.p.start()\n\n    def run(self):\n\n        # reciever (foreground)\n        for _ in range(10):\n            x = self.q.get()\n            print(x)\n            time.sleep(0.5)\n\n        self.p.terminate()\n\na = A()\na.run()\n</code></pre>"},{"location":"python/threading_multiprocessing/#threading","title":"threading","text":"<p>sender-receiver model</p> <pre><code>import time\nfrom queue import Queue\nfrom threading import Thread, Event\n\nclass A:\n    def __init__(self):\n        self.q = Queue()\n        self.exit_event = Event()\n\n        # sender (background)\n        def sender():\n            x = 0\n            while True:\n                # threading does not have a terminate() or kill(), so we manually handle the exit\n                if self.exit_event.is_set():\n                    break\n                self.q.put(x)\n                x += 1\n                time.sleep(0.5)\n\n        self.p = Thread(target=sender)\n\n        self.p.start()\n\n    def run(self):\n\n        # reciever (foreground)\n        for _ in range(10):\n            x = self.q.get()\n            print(x)\n            time.sleep(0.5)\n\n        # set exit event\n        self.exit_event.set()\n        self.p.join()\n\n\na = A()\na.run()\n</code></pre>"},{"location":"python/tyro/","title":"Tyro","text":""},{"location":"python/tyro/#tyro","title":"Tyro","text":"<p>Although <code>omegaconf</code>+<code>argparse</code> is great for a research project, it's not suitable for a python package CLI (we have no place to put all the config files).</p> <p>With <code>tyro</code>, we can write a package CLI elegantly!</p>"},{"location":"python/tyro/#function","title":"Function","text":"<p>The simplest use case, turn a function into a CLI.</p> <pre><code>import tyro\n\ndef main(\n    x: int, # required\n    path: str = 'logs', # with a default value\n):\n    print(x, path)\n\nif __name__ == '__main__':\n    tyro.cli(main)\n</code></pre> <pre><code>python main.py --help\npython main.py --x 1\npython main.py --x 1 --path wow\n</code></pre>"},{"location":"python/tyro/#dataclass","title":"Dataclass","text":"<p>For more complex configs.</p> <p>A <code>dataclass</code> is a specialized object for holding static data:</p> <pre><code>from dataclasses import dataclass\n\n@dataclass\nclass A:\n    #x # without type specification it will throw error!\n    x: str # ok\n    y: int = 1 # with default value\n\n#print(A.x) # error\nprint(A.y) # 1\n\na = A(x='x')\nprint(a.x, a.y) # 'x', 1\n</code></pre> <p>We can use <code>tyro</code> to parse a <code>dataclass</code>:</p> <pre><code>import tyro\nfrom dataclasses import dataclass\nfrom typing import Tuple, Literal, Union\nimport enum\n\nclass Color(enum.Enum):\n    red = enum.auto()\n    green = enum.auto()\n    blue = enum.auto()\n\n@dataclass\nclass Options:\n    # NOTE: must place positional values &gt; required vales &gt; default values\n    # NOTE: tyro will detect comments (after &gt; above) as the help string.\n\n    # positional value\n    x: tyro.conf.Positional[int]\n\n    # required value\n    y: int \n\n    # required bool, \"--flag1 True/False\"\n    flag1: bool \n\n    # default values\n    path: str = 'logs' \n\n    # variable-length\n    shape: Tuple[int, ...] = (64,)\n\n    # multi-value\n    size: Tuple[int, int] = (64, 64)\n\n    # choice by enum\n    color: Color = Color.red\n\n    # choice by Literal\n    color2: Literal['red', 'green', 'blue'] = 'red'\n\n    # bool default to False, use \"--flag2\" to set True\n    flag2: bool = False \n\n    # bool default to True, use \"--no-flag3\" to set False\n    flag3: bool = True \n\n    # mixed type by union\n    int_or_str: Union[int, str] = 0\n\n\nif __name__ == '__main__'    :\n    opt = tyro.cli(Options)\n    print(opt)\n</code></pre> <pre><code>python main.py --help\n\n# output\nusage: main.py [-h] --x INT --flag1 {True,False} [--path STR] [--shape INT [INT ...]] [--size INT INT]\n               [--color {red,green,blue}] [--color2 {red,green,blue}] [--flag2] [--no-flag3]\n               [--int-or-str INT|STR]\n\n\u256d\u2500 positional arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 INT                     positional parameters (required)                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 -h, --help              show this help message and exit                                      \u2502\n\u2502 --x INT                 required value (required)                                            \u2502\n\u2502 --flag1 {True,False}    required bool, \"--flag1 True/False\" (required)                       \u2502\n\u2502 --path STR              default values (default: logs)                                       \u2502\n\u2502 --shape INT [INT ...]   variable-length (default: 64)                                        \u2502\n\u2502 --size INT INT          multi-value (default: 64 64)                                         \u2502\n\u2502 --color {red,green,blue}                                                                     \u2502\n\u2502                         choice by enum (default: red)                                        \u2502\n\u2502 --color2 {red,green,blue}                                                                    \u2502\n\u2502                         choice by Literal (default: red)                                     \u2502\n\u2502 --flag2                 bool default False, use \"--flag2\" to set True (sets: flag2=True)     \u2502\n\u2502 --no-flag3              bool default True, use \"--no-flag3\" to set False (sets: flag3=False) \u2502\n\u2502 --int-or-str INT|STR    mixed type by union (default: 0)                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"python/tyro/#hierarchical-configs","title":"Hierarchical Configs","text":"<p>For nesting configs.</p> <pre><code>import tyro\nfrom dataclasses import dataclass, field\nfrom typing import Tuple, Literal, Union\n\n@dataclass\nclass OptimizerOption:\n    type: Literal['adam', 'sgd'] = 'adam'\n    lr: float = 1e-3\n\n@dataclass\nclass Options:\n    # nested option: just declare the type\n    # the field(...) is for python 3.11 compatibility, ref: https://github.com/NVIDIA/NeMo/issues/7166#issuecomment-1694251124\n    optimizer: OptimizerOption = field(default_factory=lambda: OptimizerOption(lr=1e-2))\n    # other options\n    seed: int = 0\n    iterations: int = 3000\n\n\nif __name__ == '__main__'    :\n    opt = tyro.cli(Options)\n    print(opt)\n</code></pre> <pre><code>python main.py --help\n\n# output\nusage: main.py [-h] [--optimizer.type {adam,sgd}] [--optimizer.lr FLOAT] [--seed INT] [--iterations INT]\n\n\u256d\u2500 arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 -h, --help              show this help message and exit \u2502\n\u2502 --seed INT              other options (default: 0)      \u2502\n\u2502 --iterations INT        other options (default: 3000)   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 optimizer arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 nested option: just declare the type                    \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500                \u2502\n\u2502 --optimizer.type {adam,sgd}                             \u2502\n\u2502                         (default: adam)                 \u2502\n\u2502 --optimizer.lr FLOAT    (default: 0.001)                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"python/tyro/#subcommands","title":"Subcommands","text":"<pre><code>import tyro\nfrom dataclasses import dataclass\nfrom typing import Tuple, Literal, Union\n\n@dataclass\nclass Train:\n    type: Literal['adam', 'sgd'] = 'adam'\n    lr: float = 1e-3\n    seed: int = 0\n    iterations: int = 3000\n\n@dataclass\nclass Test:\n    # other options\n    resolution: int = 1024\n\n\nif __name__ == '__main__':\n    # pass in a Union of all configs of subcommands\n    opt = tyro.cli(Union[Train, Test])\n    print(opt) # you'll have to decide whether opt is Train or Test by isinstance...\n</code></pre> <pre><code>python main.py --help\n\n# output\nusage: main.py [-h] {train,test}\n\n\u256d\u2500 arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 -h, --help          show this help message and exit \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 subcommands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 {train,test}                                        \u2502\n\u2502     train                                           \u2502\n\u2502     test                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\npython main.py train --help\n\n# output\nusage: main.py train [-h] [--type {adam,sgd}] [--lr FLOAT] [--seed INT] [--iterations INT]\n\n\u256d\u2500 arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 -h, --help              show this help message and exit \u2502\n\u2502 --type {adam,sgd}       (default: adam)                 \u2502\n\u2502 --lr FLOAT              (default: 0.001)                \u2502\n\u2502 --seed INT              (default: 0)                    \u2502\n\u2502 --iterations INT        (default: 3000)                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"python/tyro/#subcommands-for-overriding-default-configs","title":"Subcommands for overriding default configs","text":"<p>This can reach the same effect as using multiple config files with <code>omegaconf</code>, but it's a little tricky...</p> <pre><code>import tyro\nfrom dataclasses import dataclass\nfrom typing import Tuple, Literal, Union, Dict\n\n@dataclass\nclass Options:\n    name: str\n    type: Literal['adam', 'sgd'] = 'adam'\n    lr: float = 1e-3\n    seed: int = 0\n    iterations: int = 3000\n\n# different default configs\nconfig_defaults: Dict[str, Options] = {}\nconfig_descriptions: Dict[str, str] = {}\n\nconfig_defaults['A'] = Options(name='A')\nconfig_descriptions['A'] = 'this is setting A'\n\nconfig_defaults['B'] = Options(name='B', lr=1e-4) # different default lr\nconfig_descriptions['B'] = 'this is setting B'\n\nif __name__ == '__main__':\n    opt = tyro.cli(tyro.extras.subcommand_type_from_defaults(config_defaults, config_descriptions))\n    print(opt)\n</code></pre> <pre><code>python main.py --help\n\n# output\nusage: main.py [-h] {A,B}\n\n\u256d\u2500 arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 -h, --help        show this help message and exit \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 subcommands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 {A,B}                                             \u2502\n\u2502     A                 this is setting A           \u2502\n\u2502     B                 this is setting B           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\npython main.py A --help\n\n# output\nusage: tmp_tyro.py A [-h] [--name STR] [--type {adam,sgd}] [--lr FLOAT] [--seed INT] [--iterations INT]\n\nthis is setting A\n\n\u256d\u2500 arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 -h, --help              show this help message and exit \u2502\n\u2502 --name STR              (default: A)                    \u2502\n\u2502 --type {adam,sgd}       (default: adam)                 \u2502\n\u2502 --lr FLOAT              (default: 0.001)                \u2502\n\u2502 --seed INT              (default: 0)                    \u2502\n\u2502 --iterations INT        (default: 3000)                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"python/unittest/","title":"unittest","text":"<pre><code>import unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n\n    def test_isupper(self):\n        self.assertTrue('FOO'.isupper())\n        self.assertFalse('Foo'.isupper())\n\n    def test_split(self):\n        s = 'hello world'\n        self.assertEqual(s.split(), ['hello', 'world'])\n        # check that s.split fails when the separator is not a string\n        with self.assertRaises(TypeError):\n            s.split(2)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <pre><code>python -m unittest tests/test_something.py\n\npython -m unittest test_module1 test_module2\npython -m unittest test_module.TestClass\npython -m unittest test_module.TestClass.test_method\n</code></pre>"},{"location":"python/walk/","title":"os","text":""},{"location":"python/walk/#ospath","title":"os.path","text":"<pre><code># safe join of dirs &amp; files\nos.path.join(a, b)\n\n# extract basename, dirname\nos.path.basename(path) # a/b/c --&gt; c\nos.path.dirname(path) # a/b/c --&gt; a/b\n</code></pre>"},{"location":"python/walk/#oswalk","title":"os.walk","text":"<pre><code># regular usage: find all files under path recursively\nimages = []\nfor root, dirs, files in os.walk(path):\n    for f in files:\n        if f.endwith('.png'):\n            images.append(f)\n\n\n# exclude directory while walking \nfor root, dirs, files in os.walk(path):\n    [dirs.remove(d) for d in list(dirs) if d in exclude_lists]\n    ...\n</code></pre>"},{"location":"readings/3d%20reconstruction%20and%20generation/","title":"Single-/Multi- view 3D Reconstruction and Generation","text":"<p>We focus on the problem of 3D reconstruction / generation from single or multiple (but not too many) RGB (D)s.</p> <p>The problem is usually ill-posed (ambiguous), and needs to guess / generate some content.</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#object-level","title":"Object Level","text":"<p>Category:</p> <ul> <li> <p>Inference:</p> <ul> <li>Single-view RGB (D)</li> <li>Multiple-view RGB (D)</li> <li>Train in addition:</li> </ul> <ul> <li>3D GT<ul> <li>Multiple-view RGB</li> <li>semantic / instance segmentation (can be generated from pretrained Mask R-CNN)</li> <li>camera pose </li> </ul> </li> </ul> </li> </ul> <ul> <li> <p>Output Representation: </p> <ul> <li>Voxels</li> <li>Point Cloud</li> <li>Implicit Function (Signed Distance Function, Radiance Field)</li> <li>Mesh</li> </ul> </li> </ul> <p>Trend:</p> <ul> <li>Input: Multi-view --&gt; Single view</li> <li>Input: RGBD --&gt; RGB</li> <li>Train: w/ 3D GT --&gt; w/o 3D GT</li> <li>Train: w/ camera pose --&gt; w/o camera pose</li> <li>Output: Voxels --&gt; Point Cloud / Implicit Function / Mesh</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#eccv-2016-3d-r2n2-3d-recurrent-reconstruction-neural-network","title":"[ECCV 2016] 3D-R2N2: 3D Recurrent Reconstruction Neural Network","text":"<pre><code>@inproceedings{Choy20163DR2N2AU,\n  title={3D-R2N2: A Unified Approach for Single and Multi-view 3D Object Reconstruction},\n  author={C. Choy and Danfei Xu and JunYoung Gwak and Kevin Chen and S. Savarese},\n  booktitle={ECCV},\n  year={2016}\n}\n</code></pre> <p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem","title":"Problem","text":"<ul> <li>Input: RGB Image (Single or Multiple View), Instance Segmentation + 3D GT</li> <li>Output: Voxels</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions","title":"Contributions","text":"<ul> <li>LSTM framework for single or multiple view 3d reconstruction.</li> </ul> <ul> <li>Minimal supervision, no segmentation, no camera pose, no class label.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#3dv-2017-hierarchical-surface-prediction-for-3d-object-reconstruction","title":"[3DV 2017] Hierarchical Surface Prediction for 3D Object Reconstruction","text":"<p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_1","title":"Problem","text":"<ul> <li>Input: Single-view RGB Image / Depth Image / Partial Volume + 3D GT</li> <li>Output: Voxels</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#iccvw-2017-3d-object-reconstruction-from-a-single-depth-view-with-adversarial-learning","title":"[ICCVW 2017] 3D Object Reconstruction from a Single Depth View with Adversarial Learning","text":"<p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#iccv-2017-octree-generating-networks-efficient-convolutional-architectures-for-high-resolution-3d-outputs","title":"[ICCV 2017] Octree Generating Networks: Efficient Convolutional Architectures for High-resolution 3D Outputs","text":"<p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#nips-2017-marrnet-3d-shape-reconstruction-via-25d-sketches","title":"[NIPS 2017] MarrNet: 3D Shape Reconstruction via 2.5D Sketches","text":"<p>paper </p> <p></p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#cvpr-2017-a-point-set-generation-network-for-3d-object-reconstruction-from-a-single-image","title":"[CVPR 2017] A point set generation network for 3d object reconstruction from a single image.","text":"<p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_2","title":"Problem","text":"<ul> <li>Input: Single RGB Image, Instance Segmentation, Camera Pose + 3D GT</li> <li>Output: Point Cloud</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#eccv-2018-pixel2mesh-generating-3d-mesh-models-from-single-rgb-images","title":"[ECCV 2018] Pixel2Mesh: Generating 3D Mesh Models from Single RGB Images","text":"<p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_3","title":"Problem","text":"<ul> <li>Input: Single RGB Image, Camera Intrinsics + 3D GT</li> <li>Output: Mesh</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#eccv-2018-learning-category-specific-mesh-reconstruction-from-image-collections","title":"[ECCV 2018] Learning Category-Specific Mesh Reconstruction from Image Collections.","text":"<pre><code>@inproceedings{Kanazawa2018LearningCM,\n  title={Learning Category-Specific Mesh Reconstruction from Image Collections},\n  author={A. Kanazawa and Shubham Tulsiani and Alexei A. Efros and Jitendra Malik},\n  booktitle={ECCV},\n  year={2018}\n}\n</code></pre> <p>paper | code </p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_4","title":"Problem","text":"<ul> <li>Input: Single RGB Image. Instance Segmentation, Semantic Key-points</li> <li>Output: Camera Pose, Mesh, Texture.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contribution","title":"Contribution","text":"<ul> <li>Deformable Mesh Representation (need categorical mean shape as mesh template)</li> <li>Only need Single-view RGB (w/o Multi-view or 3D GT)</li> <li>Able to infer texture.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#eccv-2014-opendr-an-approximate-differentiable-renderer","title":"[ECCV 2014] OpenDR: An approximate differentiable renderer.","text":"<p>paper</p> <p>Inverse graphics: reverse-engineer the physical process that produced a real image.</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_5","title":"Problem","text":"<ul> <li>body shape estimation from image and range data.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_1","title":"Contributions","text":"<ul> <li>We define a differentiable renderer (DR) as a process that (1) supplies pixels as a function of model parameters to simulate a physical imaging system and (2) supplies derivatives of the pixel values with respect to those parameters. To be practical, the DR also has to be fast; this means it must have hardware support. Consequently we work directly with OpenGL. Because we make it publicly available, we call our framework OpenDR (http://open-dr.org).</li> </ul> <ul> <li>Our goal is not rendering, but inverse rendering</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#cvpr-2018-neural-3d-mesh-renderer","title":"[CVPR 2018] Neural 3D mesh renderer.","text":"<p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_6","title":"Problem","text":"<ul> <li>single-image unsupervised 3D mesh reconstruction</li> <li>2D-to-3D style transfer</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_2","title":"Contributions","text":"<ul> <li>we propose an approximate gradient for rasterization that enables the integration of rendering into neural networks.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#iccv-2019-soft-rasterizer-a-differentiable-renderer-for-image-based-3d-reasoning","title":"[ICCV 2019] Soft Rasterizer: A differentiable renderer for image-based 3d reasoning.","text":"<p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_7","title":"Problem","text":"<ul> <li>3D unsupervised single-view reconstruction</li> <li>image-based shape fitting</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_3","title":"Contributions","text":"<ul> <li>Unlike the state-of-the-art differentiable renderers [opendr, neural 3d mesh renderer], which only approximate the rendering gradient in the back propagation, we propose a truly differentiable rendering framework that is able to (1) directly render colorized mesh using differentiable functions and (2) back-propagate efficient supervision signals to mesh vertices and their attributes from various forms of image representations, including silhouette, shading and color images.</li> </ul> <ul> <li>The key to our framework is a novel formulation that views rendering as an aggregation function that fuses the probabilistic contributions of all mesh triangles with respect to the rendered pixels.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#nips-2019-learning-to-predict-3d-objects-with-an-interpolation-based-differentiable-renderer","title":"[NIPS 2019] Learning to predict 3d objects with an interpolation-based differentiable renderer","text":"<p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_8","title":"Problem","text":"<ul> <li>Input: Mesh, Texture, Camera Pose</li> <li>Output: rendered Image &amp; gradient </li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contribution_1","title":"Contribution","text":"<ul> <li>Key to our approach is to view foreground rasterization as a weighted interpolation of local properties and background rasterization as a distance-based aggregation of global geometry</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#nips-2019-disn-deep-implicit-surface-network-for-high-quality-single-view-3d-reconstruction","title":"[NIPS 2019] DISN: Deep Implicit Surface Network for High-quality Single-view 3D Reconstruction","text":"<p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_9","title":"Problem","text":"<ul> <li>Input: Single RGB Image + 3D GT</li> <li>Output: Implicit Function</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#eccv-2020-shape-and-viewpoint-without-keypoints","title":"[ECCV 2020] Shape and viewpoint without keypoints.","text":"<p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_10","title":"Problem","text":"<ul> <li>Input: Single RGB Image, Instance Segmentation, categorical mesh templates</li> <li>Output: Camera Pose, Mesh, Texture</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contribution_2","title":"Contribution","text":"<ul> <li>keypoint-free, by using a canonical mesh template for each category, and estimate pose by fitting silhouette. (template based)</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#eccv-2020-self-supervised-single-view-3d-reconstruction-via-semantic-consistency","title":"[ECCV 2020] Self-supervised single-view 3d reconstruction via semantic consistency","text":"<p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_11","title":"Problem","text":"<ul> <li>Input: Single RGB Image, Part Segmentation</li> <li>Output: Camera Pose, Mesh, Texture</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contribution_3","title":"Contribution","text":"<ul> <li>keypoint-free, by using self-supervised part segmentations (SCOPS) to infer a 3d semantic template. (semantic based)</li> <li>Leverage the semantic part invariance property of object instances of a category as a deformable parts model</li> <li>Learn a category-level 3D shape template from scratch via iterative learning</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#cvpr-2020-from-image-collections-to-point-clouds-with-self-supervised-shape-and-pose-networks","title":"[CVPR 2020] From Image Collections to Point Clouds with Self-supervised Shape and Pose Networks","text":"<pre><code>@inproceedings{navaneet2020ssl3drecon,\n author = {Navaneet, K L and Mathew, Ansu and Kashyap, Shashank and Hung, Wei-Chih and Jampani, Varun and Babu, R Venkatesh},\n booktitle = {IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\n title = {From Image Collections to Point Clouds with Self-supervised Shape and Pose Networks},\n year = {2020}\n}\n</code></pre> <p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_12","title":"Problem","text":"<ul> <li>Input: Single RGB Image</li> <li>Output: Camera Pose, Point Cloud</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#nips-2020-convolutional-generation-of-textured-3d-meshes","title":"[NIPS 2020] Convolutional Generation of Textured 3D Meshes","text":"<pre><code>@article{Pavllo2020ConvolutionalGO,\n  title={Convolutional Generation of Textured 3D Meshes},\n  author={Dario Pavllo and Graham Spinks and T. Hofmann and Marie-Francine Moens and Aur{\\'e}lien Lucchi},\n  journal={ArXiv},\n  year={2020},\n  volume={abs/2006.07660}\n}\n</code></pre> <p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_13","title":"Problem","text":"<ul> <li>Input: Single-view RGB Image, class label / caption (for GAN text conditioning), Instance Segmentation, Camera Pose.</li> <li>Output: Mesh, Texture</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contribution_4","title":"Contribution","text":"<ul> <li>Displacement Map for a smooth convolutional mesh representation</li> <li>GAN for producing textured mesh.</li> <li>Conditional Generation of mesh from text.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#arxiv-2021-learning-generative-models-of-textured-3d-meshes-from-real-world-images","title":"[Arxiv 2021] Learning Generative Models of Textured 3D Meshes from Real-World Images","text":"<pre><code>@inproceedings{Pavllo2021LearningGM,\n  title={Learning Generative Models of Textured 3D Meshes from Real-World Images},\n  author={Dario Pavllo and J. Kohler and T. Hofmann and Aur{\\'e}lien Lucchi},\n  year={2021}\n}\n</code></pre> <p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_14","title":"Problem","text":"<ul> <li>Input: Single view RGB image, categorical mesh template.</li> <li>Output: Camera Pose, Mesh, Texture</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_4","title":"Contributions","text":"<ul> <li>keypoint-free, combines template-based and semantic-based approaches.</li> <li>single GAN for all categories.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#arxiv-2021-neutex-neural-texture-mapping-for-volumetric-neural-rendering","title":"[Arxiv 2021] NeuTex: Neural Texture Mapping for Volumetric Neural Rendering","text":"<pre><code>@article{Xiang2021NeuTexNT,\n  title={NeuTex: Neural Texture Mapping for Volumetric Neural Rendering},\n  author={Fanbo Xiang and Zexiang Xu and Milovs Havsan and Yannick Hold-Geoffroy and Kalyan Sunkavalli and Hao Su},\n  journal={ArXiv},\n  year={2021},\n  volume={abs/2103.00762}\n}\n</code></pre> <p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_15","title":"Problem","text":"<ul> <li>Input: Multi-view RGB Images, Camera Pose, point cloud from COLMAP.</li> <li>Output: Radiance Field, Texture.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contribution_5","title":"Contribution","text":"<ul> <li>Disentangled NeRF (\\(F_{\\sigma}: \\mathbf{x} \\rightarrow \\sigma, F_{\\mathbf c}: (\\mathbf{x}, \\mathbf d) \\rightarrow \\mathbf c\\))</li> <li>regress coordinate (\\(u,v\\)) of a Texture map (\\(F_{\\mathbf c}(\\mathbf{x}, \\mathbf d) = F_{tex}(F_{uv}(x), \\mathbf d)\\))</li> <li>Inverse Mapping \\(F_{uv}^{-1}\\): can refine the COLMAP point cloud.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#arxiv-2021-putting-nerf-on-a-diet-semantically-consistent-few-shot-view-synthesis","title":"[Arxiv 2021] Putting NeRF on a Diet: Semantically Consistent Few-Shot View Synthesis","text":"<p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_5","title":"Contributions","text":"<ul> <li>Scenes share high-level semantic properties across viewpoints, and pre-trained 2D visual encoders can extract these semantics. \"An X is an X from any viewpoint.\"</li> </ul> <p>Remaining Problems:</p> <ul> <li>Avoid using topologically fixed Mesh Template<ul> <li>BSP-Net: but it is a global model inborn, maybe hard to model complicated scenes.</li> <li>Piecewise Bezier Surface ? </li> </ul> </li> <li>Extract mesh from implicit functions --&gt; Marching Cubes<ul> <li>Faster Extraction.</li> <li>How to extract mesh from NeRF? (view-dependent to independent)</li> </ul> </li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#scene-level","title":"Scene Level","text":""},{"location":"readings/3d%20reconstruction%20and%20generation/#cvpr-2018-scancomplete-large-scale-scene-completion-and-semantic-segmentation-for-3d-scans","title":"[CVPR 2018] ScanComplete: Large-Scale Scene Completion and Semantic Segmentation for 3D Scans","text":"<pre><code>@article{Dai2018ScanCompleteLS,\n  title={ScanComplete: Large-Scale Scene Completion and Semantic Segmentation for 3D Scans},\n  author={Angela Dai and Daniel Ritchie and Martin Bokeloh and Scott E. Reed and J{\\\"u}rgen Sturm and M. Nie{\\ss}ner},\n  journal={2018 IEEE/CVF Conference on Computer Vision and Pattern Recognition},\n  year={2018},\n  pages={4578-4587}\n}\n</code></pre> <p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_16","title":"Problem","text":"<ul> <li>Input: Multi-view RGBD Images (Scan) --&gt; TSDF + 3D GT</li> <li>Output: Voxels, Semantics</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_6","title":"Contributions","text":"<ul> <li>In fact Multi-view SSC.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#cvpr-2020-synsin-end-to-end-view-synthesis-from-a-single-image","title":"[CVPR 2020] SynSin: End-to-end View Synthesis from a Single Image","text":"<p>paper | code</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_17","title":"Problem","text":"<ul> <li>Input: Single-view RGB, Camera Pose + Multiple-view RGB</li> <li>Output: Novel-view RGB</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contribution_6","title":"Contribution","text":"<ul> <li>differentiable point cloud render</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#cvpr-2020-sg-nn-sparse-generative-neural-networks-for-self-supervised-scene-completion-of-rgb-d-scans","title":"[CVPR 2020] SG-NN: Sparse Generative Neural Networks for Self-Supervised Scene Completion of RGB-D Scans","text":"<pre><code>@article{Dai2020SGNNSG,\n  title={SG-NN: Sparse Generative Neural Networks for Self-Supervised Scene Completion of RGB-D Scans},\n  author={Angela Dai and Christian Diller and M. Nie{\\ss}ner},\n  journal={2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n  year={2020},\n  pages={846-855}\n}\n</code></pre> <p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_18","title":"Problem","text":"<ul> <li>Input: Multi-view Depth Images (Scan) --&gt; TSDF</li> <li>Output: Voxels</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_7","title":"Contributions","text":"<ul> <li>Self-supervised Scene Completion.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#tpami-2020-semantic-scene-completion-using-local-deep-implicit-functions-on-lidar-data","title":"[TPAMI 2020] Semantic Scene Completion using Local Deep Implicit Functions on LiDAR Data","text":"<p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_19","title":"Problem","text":"<ul> <li>Input: Single view LiDAR --&gt; Point Cloud</li> <li>Output: Implicit Function with semantics.</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#arxiv-2021-spsg-self-supervised-photometric-scene-generation-from-rgb-d-scans","title":"[Arxiv 2021] SPSG: Self-Supervised Photometric Scene Generation from RGB-D Scans","text":"<pre><code>@article{Dai2020SPSGSP,\n  title={SPSG: Self-Supervised Photometric Scene Generation from RGB-D Scans},\n  author={Angela Dai and Yawar Siddiqui and Justus Thies and Julien P. C. Valentin and M. Nie{\\ss}ner},\n  journal={ArXiv},\n  year={2020},\n  volume={abs/2006.14660}\n}\n</code></pre> <p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_20","title":"Problem","text":"<ul> <li>Input: Multi-view RGBD Images (Scan) --&gt; TSDF</li> <li>Output: Voxels (with color, high resolution)</li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_8","title":"Contributions","text":"<ul> <li>Self-supervised Geometry and Color Completion</li> <li>2D view guided synthesis for RGB, by rendering TSDF to the original views. (a differentiable TSDF render)</li> <li>GAN model.</li> </ul> <p>Remaining Problems:</p> <ul> <li>Self-supervised SSC<ul> <li>Input: Single/Multi view RGB (+D ?), Output: still in voxels</li> <li>How: <ul> <li>Novel View Synthesis<ul> <li>Single-view: unsupervised (pixel-NeRF)</li> <li>Multiple-view: supervised (SynSin)</li> </ul> </li> <li>Use the novel views (and depths) to reconstruct voxel volumes.</li> <li>Semantic Cues is crucial for success. How ?</li> </ul> </li> </ul> </li> <li>Generative model<ul> <li>Single view SSC is highly ill-posed. </li> <li>How to generate high resolution voxels / Mesh ?</li> <li>GAN prefers 2D data, differentiable rendering ?</li> </ul> </li> <li>Mesh Representation<ul> <li>Low-resolution Voxels are unable for rendering purpose (e.g. RGB, light).</li> <li>Hard. It's better to divide and conquer, by first detecting objects and layout.</li> </ul> </li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#_1","title":"[]","text":"<p>``</p> <p>paper</p>"},{"location":"readings/3d%20reconstruction%20and%20generation/#problem_21","title":"Problem","text":"<ul> <li>Input: </li> <li>Output: </li> </ul>"},{"location":"readings/3d%20reconstruction%20and%20generation/#contributions_9","title":"Contributions","text":""},{"location":"readings/paper%20recommendation%202022/","title":"Paper Recommendation 2022","text":""},{"location":"readings/paper%20recommendation%202022/#tips","title":"Tips:","text":"<ul> <li>Check [Project]/[Blog] first for a brief understanding of the paper, and watch their introduction video if available.</li> </ul> <ul> <li>Only about 2 papers are chosen for each area. If you find a paper interesting, please use [Connected Papers] to find related works!</li> </ul>"},{"location":"readings/paper%20recommendation%202022/#backbone","title":"Backbone","text":"<ul> <li> <p>[2015] Deep Residual Learning for Image Recognition [Paper]</p> <p>Most known paper and most used backbone in CV.</p> </li> </ul> <ul> <li> <p>[2020] An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale [Paper]</p> <p>Transformer is mainly used in NLP tasks, but vision transformer has been a recent trend.</p> <p>Further readings:</p> <ul> <li>[2021] CLIP: Connecting Text and Images [Blog] [Code] [Paper]</li> </ul> </li> </ul>"},{"location":"readings/paper%20recommendation%202022/#perception-classification-segmentation-detection","title":"Perception (Classification, Segmentation, Detection)","text":""},{"location":"readings/paper%20recommendation%202022/#2d","title":"2D","text":"<ul> <li>[2014] Fully Convolutional Networks for Semantic Segmentation [Paper]</li> </ul> <ul> <li>[2015] You Only Look Once: Unified, Real-Time Object Detection [Paper]</li> </ul>"},{"location":"readings/paper%20recommendation%202022/#3d","title":"3D","text":"<p>Different from 2D images, 3D data have many representations (voxel volumes, point clouds, meshes, and implicit functions). Since dense 3D convolutions are generally limited by GPU memory, an inevitable topic in 3D perception is to leverage the sparsity of 3D data.</p> <ul> <li> <p>[2016] PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation [Paper]</p> <p>Point Cloud is an efficient 3D representation widely used in 3D tasks, and this paper first proposed an effective way of processing point clouds.</p> <p>Further readings:</p> <ul> <li>PointNet++: Deep Hierarchical Feature Learning on Point Sets in a Metric Space [Paper] [Project]</li> </ul> </li> </ul> <ul> <li> <p>[2019] Point-Voxel CNN for Efficient 3D Deep Learning [Paper] </p> <p>Sparse 3D convolution is another popular way for handling point clouds.</p> <p>Further readings:</p> <ul> <li>[2020] Searching Efficient 3D Architectures with Sparse Point-Voxel Convolution [Paper] [Code]</li> </ul> </li> </ul>"},{"location":"readings/paper%20recommendation%202022/#generation","title":"Generation","text":"<ul> <li>[2014] Generative Adversarial Networks [Paper]</li> </ul> <ul> <li> <p>[2018] A Style-Based Generator Architecture for Generative Adversarial Networks [Paper] [code] </p> <p>StyleGAN series are famous for its realistic image generation ability.</p> <p>Further readings:</p> <ul> <li>[2021] Alias-Free Generative Adversarial Networks (StyleGAN3) [Project] [Paper] [Code]</li> </ul> </li> </ul> <ul> <li> <p>[2021] DALL-E: Zero-Shot Text-to-Image Generation [Blog] [Paper] [Online dalle-mini]</p> <p>Further readings: DALL-E 2, Imagen, Parti...</p> </li> </ul>"},{"location":"readings/paper%20recommendation%202022/#3d-reconstruction","title":"3D Reconstruction","text":"<ul> <li> <p>[2016] COLMAP [Doc] [Code]</p> <p>A general-purpose Structure-from-Motion (SfM) and Multi-View Stereo (MVS) pipeline still widely used today.</p> </li> </ul> <ul> <li> <p>[2019] DeepSDF: Learning Continuous Signed Distance Functions for Shape Representation [Paper]</p> <p>Implicit 3D representation by learning an MLP to predict signed distance functions (SDF).</p> </li> </ul> <ul> <li> <p>[2020] NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis [Project] [Paper]</p> <p>Photo-realistic 3D scene novel view synthesis from only RGB video or images.</p> <p>Further reading:</p> <ul> <li> <p>[2022] Instant Neural Graphics Primitives with a Multiresolution Hash Encoding [Project] [Code] [Paper]</p> <p>Train a NeRF in 5 seconds.</p> </li> </ul> <ul> <li> <p>[2022] Efficient Geometry-aware 3D Generative Adversarial Networks [Project] [Code]</p> <p>High quality 3D-aware image synthesis, by combining StyleGAN and NeRF.</p> </li> </ul> </li> </ul>"},{"location":"rust/basics/","title":"Basics","text":""},{"location":"rust/basics/#rust-basics","title":"Rust basics","text":""},{"location":"rust/basics/#install","title":"Install","text":"<pre><code># install rustup\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\n# update\nrustup update\n\n# uninstall\nrustup self uninstall\n\n# rust version\nrustc --version\n\n# local doc\nrustup doc\n</code></pre>"},{"location":"rust/basics/#hello-world","title":"Hello World","text":"<pre><code>/* The main function is the entry of any program.\nBTW this is a block comment.\n*/\nfn main() {\n    // macro call, BTW this is a line comment.\n    println!(\"Hello World!\");\n}\n</code></pre> <p>compile and run:</p> <pre><code># rust compiler\nrustc hello.rs\n./hello\n</code></pre>"},{"location":"rust/basics/#package-manager-cargo","title":"Package manager: Cargo","text":"<pre><code># check cargo version\ncargo --version\n\n# create a project\ncargo new hello_cargo\ncd hello_cargo\n</code></pre> <p>It creates a <code>Cargo.toml</code> config file:</p> <pre><code>[package] \nname = \"hello_cargo\" \nversion = \"0.1.0\" \nedition = \"2018\" \n\n[dependencies]\n</code></pre> <p>and a <code>src</code> folder with <code>main.rs</code> in it. To build and run a cargo project, go to the project directory and:</p> <pre><code># first build then manually run\ncargo build\n# by default, it builds into debug mode\n./target/debug/hello_cargo\n\n# Or two steps in one:\ncargo run\n\n# just check compilation process, do not generate executable\n# much faster for debugging!\ncargo check \n\n# build for release\ncargo build --release\n./target/release/hello_cargo\n</code></pre> <p>To add a dependency in <code>Cargo.toml</code>:</p> <pre><code>[dependencies] \nrand = \"0.8.3\"\n</code></pre> <p>Then <code>cargo build</code> will automatically download and build it. A <code>Cargo.lock</code> is generated to keep track of the exact dependency versions. To update all dependencies:</p> <pre><code># only update PATCH version! e.g., 0.8.3 --&gt; 0.8.4\ncargo update\n\n# to update MAJOR or MINOR version, you must change the toml manually.\n</code></pre>"},{"location":"rust/basics/#variables","title":"Variables","text":"<p>Rust is a statically and strongly typed language. However, rust can infer the data type from code, so you can declare variables without annotating data type.</p>"},{"location":"rust/basics/#scalar-types","title":"Scalar types","text":"<ul> <li>integers     - signed: <code>i8, i16, i32, i64,  i128, isize</code> (isize means arch-dependent)      - unsigned: <code>u8, u16, u32, u64, u128, usize</code>     * <code>i32</code> is the default. <pre><code>let x = 0; // i32 by default\nlet x: u8 = 0; // u8\nlet x = 0u8; // u8\nlet x = 1_000; // i32, 1000\nlet x = 0xff // i32, hex\nlet x = 0b1111_0000 // i32, binary\n</code></pre></li> <li>float     - <code>f32, f64</code>     - <code>f64</code> is the default.</li> </ul> <p><pre><code>let x = 2.0; // f64\nlet x: f32 = 2.0; // f32\n</code></pre> * boolean     * <code>bool</code></p> <pre><code>let t = true; // bool\nlet f: bool = false; // bool\n</code></pre> <ul> <li>character     * <code>char</code>, but it is 4-byte for unicode encoding. (not 1-byte ASCII as in <code>c</code>)</li> </ul> <pre><code>let c = 'z'; // char\nlet c = '\ud83d\ude3b'; // char, supports unicode emoji\n</code></pre>"},{"location":"rust/basics/#compound-types","title":"Compound types","text":"<ul> <li>tuple     * A general way of grouping a number of values with any type.     * fixed-length. <pre><code>let t = (1, 2.0, 'c'); // simple tuple\nlet t: (i32, f64, char) = (1, 2.0, 'c'); // with type annotaiton\n\nlet x = t.0; // indexing\nlet y = t.1;\nlet z = t.2;\n\nlet (x, y, z) = t; // destructuring\n\nlet u = (); // empty tuple, or the unit value. (default value for empty expression)\n\n// tuples can be useful in function \nfn foo(s: String) -&gt; (String, u32) {\n    (s, s.len())\n}\n</code></pre></li> </ul> <ul> <li>array     - can only hold values of the same data type.     - also fixed-length! (instead, use <code>Vec</code> for python-like list) <pre><code>let a = [0, 1, 2]; // simple i32 array\nlet a: [i32; 3] = [0, 1, 2]; // type annotation [dtype; length]\nlet a = [0; 3]; // equals let a = [0, 0, 0];\n\nprintln!(\"{:?}\", a); // debug print for array\n\nlet x = a[0]; // indexing\n\n// slicing\nlet arr = [1, 2, 3, 4, 5];\nlet s1: &amp;[i32] = &amp;arr; // full slice\nlet s2 = &amp;arr[0..2] // [1, 2], partial slice\nlet s3 = &amp;arr[1..] // [2, 3, 4, 5]\n\n// iterator\nfor i in arr {}\nfor i in arr.iter() {} // same\nfor i in &amp;arr {} // same\n\n\n// pass array by reference to function\n// to handle any-length arrays, we use slice of array, noted by &amp;[dtype]\n// thankfully, array slice knows its length, unlike the array pointer in c.\nfn sum(xs: &amp;[i32]) -&gt; i32 {\n    let mut res = 0;\n    for i in 0..xs.len() {\n        res += xs[i];\n    }\n    res\n}\n\nlet arr = [1, 2, 3];\nlet res = sum(&amp;arr); // 6\n</code></pre></li> </ul>"},{"location":"rust/basics/#mutability","title":"Mutability","text":"<pre><code>fn main() {\n\n    let x = 0; // immutable, infered as i32\n    // x = 1; // compilation error\n\n    let mut y = 0; // mutable\n    y = 1; // Ok\n\n    const z = 0; // constant\n\n    let x = x + 1; // shadowing, OK. (reassigned the value)\n    {\n        let x = 2; // shadowing, only in current scope\n        println!(\"x = {}\", x); // x = 2\n    }\n    println!(\"x = {}\", x); // x = 1\n}\n</code></pre> <p><code>const</code> are more than immutable variables: - must be declared with data type. - can be declared in any scope (e.g., the global scope) - can only be set to a constant expression, not a value computed at runtime. (<code>3*6</code> is OK, but <code>3*x</code> is not.) - (convention) name should be UPPER_CASE connected by underscores.</p>"},{"location":"rust/basics/#functions","title":"Functions","text":"<p>rust will find the definition of function automatically, so you can define it anywhere like python and not like c. * use <code>fn</code> to define a function * must declare the parameter data type. * if you return some value, must declare the return data type too. * the last statement without semicolon will be returned implicitly, else it returns the unit value <code>()</code>.</p> <pre><code>// MUST declare the data type for parameters!\nfn foo(x: i32) {\n    println!(\"x = {}\", x);\n}\n\n// return value as if the function is an expression\n// MUST declare the data type for return value! if not declared, it is default to ()\nfn bar() -&gt; i32 {\n    let y = { // start an expression block\n        let x = 1;\n        x + 1 // WITHOUT semicolon to serve as return value!!! if with semicolon, this expr returns () implicitly\n    }; // y == 2\n    y + 1 // equals `return y + 1;`\n}\n\nlet x = bar(); // x == 3\n\n// fibonacci example\nfn fibonacci(x: i32) -&gt; i32 {\n    if x == 0 {\n        1\n    } else {\n        x * fibonacci(x - 1)\n    }\n}\n</code></pre> <p>by default, parameters are passed by value in function. To pass parameters by reference, we need reference operator <code>&amp;</code> and dereference operator <code>*</code>.</p> <pre><code>let x = 1;\n// pass by ref, and return increased value\nfn inc(x: &amp;i32) -&gt; i32 {\n    *x + 1\n}\nlet x = inc(x);  // x == 2\n\n// reference can be modified inplace\nlet mut x = 1;\n// pass by ref, do not forget the mut\nfn inplace_inc(x: &amp;mut i32) {\n    *x += 1;\n}\ninc(x); // x == 2\n</code></pre>"},{"location":"rust/basics/#controls","title":"Controls","text":""},{"location":"rust/basics/#condition","title":"condition","text":"<pre><code>let x = 3;\n\n// if &lt;bool&gt; {}\nif x != 0 { // cannot use `if x {}`, no implicit casting!\n    // do sth\n} else if x % 2 == 0 {\n    // do sth\n} else {\n    // do sth\n}\n\n// if in statement\nlet cond = true;\nlet x = if cond {5} else {6}; // data type must be the same in two branches.\n</code></pre>"},{"location":"rust/basics/#loop","title":"loop","text":"<pre><code>// pure loop\nloop { println!(\"again!\"); }\n\n// break nested &amp; labeled loop\nlet mut i = 10;\n'flag1: loop {\n    let mut j = 10;\n    loop {\n        if foo(i, j) == 0 {\n            break; // break j loop\n        } else if foo(i, j) == 1 {\n            break 'flag1; // break i loop\n        }\n        j -= 1;\n        if j == 0 {break;}\n    }\n    i -= 1;\n    if i == 0 {break;}\n}\n\n// return value with break\nlet mut counter = 0; \nlet result = loop { \n    counter += 1; \n    if counter == 10 { break counter * 2; } \n}; // result == 20\n\n\n// while loop\nlet mut x = 3;\nwhile x != 0 {\n    x -= 1;\n}\n\n// for loop\nlet a = [1, 2, 3];\nfor x in a {\n    println!(\"{}\", x);\n}\n\nfor x in 0..5 {} // for x in [0, 1, 2, 3, 4]\n\nfor x in (0..5).rev() {} // for x in [4, 3, 2, 1, 0]\n</code></pre>"},{"location":"rust/basics/#strings","title":"Strings","text":"<pre><code>// &amp;str (string literals)\n// it create on stack a hardcoded string literals, and return its immutable slice reference.\nlet sl = \"hello\"; // hardcoded, immutable, fast, on stack.\n\n// TODO: is there mutable string literals? like `let mut sl = \"hello\";`\n\n// String\nlet mut s = String::from(\"hello\"); // mutable, slower, on heap.\ns.push_str(\", world\"); // s == \"hello, world\"\n</code></pre>"},{"location":"rust/basics/#ownership","title":"Ownership","text":"<p>Rules of Ownership: - Each value has a variable called its owner. * There can only be one owner at a time. * When the owner goes out of scope, the value will be dropped.</p> <p>The move semantic:</p> <pre><code>// for scalar types (stack-only), there is no moving.\nlet x = 5; \nlet y = x; // y == 5, and x is still 5 (copied x to y)\n\n// for complex type like String (symbol on stack, data on heap), there is moving.\nlet x = String::from(\"hello\");\nlet y = x; // y == \"hello\", but x has been invalid! (copied x's symbol to y, moved x's data to y, and dropped x's symbol)\n\n// if you really want to copy data on heap\nlet x = String::from(\"hello\");\nlet y = x.clone(); // x and y are both valid, each with its own data allocated on heap\n\n// passing to function also invokes moving\nfn foo(s: String) {}\nfoo(x); // x moved to foo(), and become invalid.\n\n// returning from function too\nfn foo(s: String) -&gt; String {\n    s;\n}\nlet x = foo(x); // x is moved to foo(), then returned to x.\n</code></pre> <p>To avoid moving in function parameters, we need references &amp; borrowing. Rule of references: * At any given time, you can have either one mutable reference or any number of immutable references. - References must always be valid.</p> <pre><code>// &amp;String means **reference** of String\nfn foo(s: &amp;String) -&gt; u32 {\n    s.len()\n}\nlet s = String::from(\"hello\");\nlet l = foo(&amp;s); // s is still valid, we only **borrow** s in foo by using `&amp;s`\n\n// by default, reference is immutable.\n// but we can also declare mutable reference:\nfn foo(s: &amp;mut String) {\n    s.push_str(\", world\");\n}\nlet mut s = String::from(\"hello\"); // the variable also should be mutable\nfoo(&amp;mut s); // mutable borrow, s is now \"hello, world\"\n\n// however, we can only have one mutable reference for one variable at a time:\nlet r1 = &amp;mut s;\nlet r2 = &amp;mut s; // Error\n\n// we also cannot use both mutable and immutable reference at a time:\nlet r1 = &amp;s;\nlet r2 = &amp;mut s; // Error if both r1 and r2 are used later:\nprintln!(\"{}, {}\", r1, r2);\n\nlet r1 = &amp;s;\nprintln!(\"{}\", r1);\nlet r2 = &amp;mut s; // OK\nprintln!(\"{}\", r2);\n\n// rust can prevent dangling references\uff1a\nfn dangle() -&gt; &amp;String { let s = String::from(\"hello\"); &amp;s }\nlet d = dangle(); // Error\n</code></pre> <p>A special type of reference is slice, which only reference to a continuous part of a collection (e.g., String, array).</p> <pre><code>let s = String::from(\"hello world\"); \nlet hello: &amp;str = &amp;s[..5]; // a reference to \"hello\" (point to 0, record length 5)\nlet world = &amp;s[6..];\nlet ss = &amp;s[..]; // equals to `&amp;s`\n\n// example\n// note we use parameter type &amp;str, instead of &amp;String.\n// this utilizes \"defef coercion\".\nfn first_word(s: &amp;str) -&gt; &amp;str { \n    let bytes = s.as_bytes(); \n    for (i, &amp;item) in bytes.iter().enumerate() { \n        if item == b' ' { \n            return &amp;s[0..i]; \n        } \n    } \n    &amp;s[..] \n}\n\nlet sl = \"hello, world\";\nlet s = String::from(sl);\nlet w = first_word(&amp;s);\nlet w = first_word(&amp;s[0..6]);\nlet w = first_word(sl);\nlet w = first_word(&amp;sl); // slice of slice is still slice...\n</code></pre>"},{"location":"speakings/conversation/","title":"Conversation","text":""},{"location":"speakings/conversation/#how-to-start-a-conversation","title":"How to start a conversation.","text":"<ul> <li>Greetings<ul> <li>Hello / Hi.</li> <li>[casual] How's it going? How are you doing?</li> <li>[more casual] Hey, what's up?</li> <li>[ask about sth] How's everything / life / your job / your family? How are your parents?<ul> <li>[response] Great. / Pretty good. / I'm doing great. / They are doing great.</li> <li>[ask back] What about you? How about you?</li> </ul> </li> <li>[not use, outdated] How are you?</li> <li>[not use, nearly extinct] How do you do? </li> </ul> </li> <li>Strike up a conversation (\u642d\u8baa)<ul> <li>[praise] wow I really like your skirt / coat / hairstyle / eyes / shoes / ...</li> <li>[praise] wow that's a really cool camera / phone / jacket / ...</li> <li>[language] Excuse me, I just heard you speaking Chinese. You are pretty good.</li> <li>[seat] Excuse me, it this seat taken? / is anyone sitting here?<ul> <li>[response] Oh, no body sits here.</li> </ul> </li> <li>[place] This place is pretty cool. Do you come here often?</li> <li>[help] Do you need a hand? (Do you need help?)</li> </ul> </li> <li>Introduction<ul> <li>Hi, nice to meet you. I'm XXX.</li> <li>Pleased to meet you. / It's a pleasure to meet you. I'm XXX.<ul> <li>[response] I've heard a lot of things about you.</li> <li>[response] XXX has told me about you.</li> </ul> </li> <li>[formal] Allow me to introduce myself. I'm XXX. This is my business card.</li> <li>[my job] I'm a engineer. / I'm in IT. / I work for a state-owned company. </li> </ul> </li> <li>Introduce someone<ul> <li>I'd like you to meet a friend of mine.</li> <li>Let me introduce you to my friend, XXX.</li> <li>This is XXX.</li> </ul> </li> <li>Ask for name.<ul> <li>Excuse me, but I don't think I know your name.</li> <li>I'm sorry, but I don't believe I know your name.<ul> <li>[response] Oh, my name is XXX.</li> </ul> </li> <li>[ask again] I'm so sorry, could you tell me your name again?</li> <li>[not use, outdated] May I know your name? </li> <li>[not use, too direct] What's your name?</li> </ul> </li> <li> <p>Else</p> <ul> <li>So, have you lived here long?</li> <li>Have you worked here long?</li> <li>Do you live around here?</li> <li>Do you come here often?</li> <li>Job</li> </ul> <ul> <li>So, what do you do, if you don't mind me asking?</li> <li>So what do you do for a living?</li> <li>Can I ask what do you do?</li> <li>[direct] What's your job?</li> <li>China</li> <li>So, how did you end up in China?</li> <li>Are you used to the life here?</li> </ul> </li> </ul>"},{"location":"speakings/conversation/#daily-topics","title":"Daily topics","text":"<ul> <li> <p>family</p> <ul> <li> <p>Do you have any brothers or sisters?</p> <ul> <li>[response] I've got an older / a younger brother / sister.</li> <li>[response] I'm an only child.<ul> <li>Where are your family from?</li> <li>What do your parents do?</li> <li>[familiar only] Are you married? Do you have kids yet?</li> </ul> </li> </ul> </li> </ul> </li> </ul> <ul> <li>hobby<ul> <li>So, what do you like to do in your spare time?</li> <li>So, what do you like to do to relax?</li> <li>[direct] What are your hobbies? What are you interested in?<ul> <li>[response] I like travelling / dancing / ...</li> </ul> </li> <li>what kind of music do you like to listen to?<ul> <li>[response] I like pop / rock / classical / jazz music.</li> </ul> </li> </ul> </li> </ul>"},{"location":"speakings/conversation/#end-a-topic","title":"End a topic","text":"<ul> <li>goodbye<ul> <li>[mostly used by children] bye-bye</li> <li>See you (later)</li> <li>Have a good (day/night/one)!</li> </ul> </li> </ul> <ul> <li> <p>interrupt</p> <ul> <li>[will come back] Excuse me for a minute. I'll be right back.</li> <li>Well, I've got to go.</li> <li>Well, I should be going.</li> <li>Hey, I should go, or I'll be late for work/meeting/flight.</li> <li>Well, I won't bother you anymore.</li> <li>I should get back to my work. / I should let you get back to your work.</li> </ul> </li> </ul> <ul> <li> <p>polite </p> <ul> <li>It was great to talk to you today. / It was really nice to talk to you. / It was really nice meeting you.</li> <li>I really enjoyed our chat.</li> </ul> </li> </ul> <ul> <li>ask for social accounts<ul> <li>Do you have WeChat? Can I add you on WeChat?</li> <li>Shall I scan you, or do you want to scan me?</li> </ul> </li> </ul> <ul> <li>next time<ul> <li>Let's go for a coffee next time.</li> <li>Are you free any time next week?</li> <li>Do you have time on Saturday?</li> </ul> </li> </ul> <ul> <li>greetings<ul> <li>Say hello to your parents for me.</li> <li>[formal] Send my regards to your family.</li> <li>Take care.</li> <li>Look after yourself.</li> <li>Keep in touch.</li> </ul> </li> </ul>"},{"location":"speakings/daily/","title":"Daily Conversations","text":"<ul> <li>band-aid</li> <li>acne: pimple</li> <li>over-the-counter/prescription medicine/drug</li> <li>dermatologist: \u76ae\u80a4\u79d1\u533b\u751f</li> <li>gym membership: what kind of plans do you have? I'll sign up for one year.</li> <li>heavy rain.</li> <li>order in: \u70b9\u5916\u5356 (food delivery app), what do you feel like eating?</li> <li>excuse me, can you tell me where to find the bread?</li> <li>what breed is she (a dog)?</li> <li>landlord: \u623f\u4e1c</li> <li>lease: \u5951\u7ea6</li> <li>Can you dog-sit (~ babysit) for me when I'm away this summer?</li> <li>The plane was grounded (\u6ede\u7559) for an hour. I missed my connection (\u8fde\u63a5\uff0c\u6307\u6362\u4e58) to Tokyo because of the delay. </li> <li>You must be jet-lagged (\u5012\u65f6\u5dee)</li> <li>Can I get this to go? (\u6211\u80fd\u6253\u5305\u5e26\u8d70\u4e48\uff1f)</li> <li>I'd like to book a table for 4 people on this Sunday at 7 PM.</li> <li>Hi, I need to ask for sick leave (\u75c5\u5047) today, I caught a nasty cold.</li> <li>I'd like to check in, please. cabin (carry-on) baggage / check-in baggage.</li> <li>the earthquake was 4.9 on the Richter scale (\u91cc\u6c0f\u9707\u7ea7), and its epicenter (\u9707\u4e2d) was off the coast of Hualian. This must be the aftershock.</li> <li>two scoops of ice-cream. </li> <li>latte (coffee): short, tall, grande.</li> <li>shuttle service: (\u63a5\u9001\u670d\u52a1): Do they run on a regular schedule or do I have to book in advance? </li> <li>military basic training</li> <li>dress code: \u670d\u88c5\u89c4\u5b9a (It's semi-formal)</li> <li>tuxedo: n, \u71d5\u5c3e\u670d (that would be overdressing, a nice tie with a suit is enough)</li> </ul> <ul> <li>baggage carousel: \u884c\u674e\u8f6c\u76d8, luggage</li> <li>diarrhea: \u8179\u6cfb</li> <li>I feel weak, nauseous (\u60f3\u5410) and have a bad headache.</li> <li>trim down: lose weight</li> <li>I cut down on carbs (carbohydrates), sugary drinks and fried food, and stopped eating late-night snacks.</li> <li></li> </ul> <p>P50</p>"},{"location":"speakings/emotions/","title":"Emotions","text":""},{"location":"speakings/emotions/#emotions","title":"emotions","text":"<ul> <li> <p>Thanks</p> <ul> <li>Thanks.</li> <li>Thank you.</li> <li>Thanks a lot. / Thank you very much.</li> <li>Thanks a bunch. / Thanks a million.</li> </ul> <ul> <li>I really appreciate everything you've done.</li> <li>I really don't know how to thank you. / I really can't find the words to express my thanks.</li> </ul> </li> </ul> <ul> <li> <p>Other expression</p> <ul> <li>[though not helpful] Thank you anyway / all the same.</li> <li>I owe you one. / I definitely owe you a favour.</li> </ul> <ul> <li>Thank you for hosting me.</li> </ul> </li> </ul> <ul> <li> <p>Reply to thanks</p> <ul> <li>You're (very) welcome.</li> <li>That's quite alright.</li> <li>Don't mention it.</li> <li>My pleasure.</li> <li>No need to thank me.</li> </ul> </li> </ul> <ul> <li> <p>Apologize.</p> <ul> <li>Sorry.</li> <li>I'm sorry to ...</li> <li>I'm really sorry for ...</li> <li>I want to apologize for ...</li> </ul> </li> </ul> <ul> <li> <p>Ask for forgive</p> <ul> <li>Can you forgive me? / Please forgive me.</li> <li>I didn't mean it. / It wasn't intentional. / I didn't do it on purpose.</li> </ul> </li> </ul> <ul> <li> <p>Reply to apology.</p> <ul> <li>Never mind. / No worries.</li> <li>That's ok. Don't worry.</li> <li>It's not a big deal. That's alright.</li> <li>I accept your apology.</li> </ul> </li> </ul> <ul> <li>Congrats<ul> <li>Congratulations (on ...)</li> </ul> </li> <li>Wish<ul> <li>I wish you success / happiness and good health.</li> <li>Have a good trip / time / day.</li> <li>Good luck.</li> <li>All the best.</li> <li>Have fun!</li> </ul> </li> <li>Welcome<ul> <li>Welcome to China / my home.</li> <li>Come back again!</li> </ul> </li> <li>Opinions<ul> <li>What do you think of ... ?</li> <li>How do you feel about ... ?</li> </ul> </li> </ul> <ul> <li>Reply to opinions<ul> <li>I agree. I couldn't agree more. Absolutely right. Yes, of course.</li> <li>I disagree. I don't think that's right. I have a different opinion. I'm afraid I have to disagree.</li> </ul> </li> </ul>"},{"location":"speakings/mame/","title":"Mame","text":"<ul> <li> <p>...\u3057\u3066\u304f\u3060\u3055\u3044</p> <p>\u76ee\u4e0a\u306e\u4eba\u306b\u4f7f\u3046\u3068\u5931\u793c\u3067\u3059\u3002\u547d\u4ee4\u7684\u306a\u30cb\u30e5\u30a2\u30f3\u30b9\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002</p> <ul> <li>...\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059</li> <li>...\u3057\u3066\u3044\u305f\u3060\u3051\u307e\u305b\u3093\u3067\u3057\u3087\u3046\u304b</li> <li>\u3054...\u304f\u3060\u3055\u3044\uff08\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3001\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\uff09</li> </ul> </li> </ul> <ul> <li> <p>\u3057\u3066\u3082\u3089\u3063\u3066\u3042\u308a\u304c\u3068\u3046</p> <p>\u300c\u3082\u3089\u3046\u300d\u306f\u81ea\u5206\u304c\u4e3b\u4f53\u306b\u306a\u308b\u6642\u306b\u4f7f\u3046\u3002\u611f\u8b1d\u3092\u793a\u3059\u3068\u304d\u306f\u76f8\u624b\u304c\u4e3b\u4f53\u306b\u306a\u308b\u307b\u3046\u304c\u6b63\u3057\u3044\u3002</p> <ul> <li>\u3057\u3066\u304f\u308c\u3066\u3042\u308a\u304c\u3068\u3046</li> <li>\u3057\u3066\u3044\u305f\u3060\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059</li> </ul> </li> </ul> <ul> <li></li> </ul>"},{"location":"speakings/meetings/","title":"Meetings","text":""},{"location":"speakings/meetings/#attending-a-meeting","title":"attending a meeting","text":""},{"location":"speakings/meetings/#introduction","title":"introduction","text":"<p>Hello,</p> <p>My name is ..., and I'm a PhD student in xxx University.</p> <p>I'm happy to join you today.</p> <p>I'm looking forward to our discussion today.</p> <p>I'm thrilled to be here.</p>"},{"location":"speakings/meetings/#asking-questions","title":"Asking questions","text":"<p>I have a question.</p> <p>Does this mean ...?</p> <p>I didn't understand...</p> <p>Can you elaborate on... ? I didn't get the main idea.</p> <p>Excuse me, I didn't hear you. Could you please say that again?</p>"},{"location":"speakings/meetings/#refusing","title":"Refusing","text":"<p>I'm afraid I can't...</p> <p>I'm sorry, but I don't think I can...</p> <p>Unfortunately, I won't be able to </p>"},{"location":"speakings/meetings/#environment-unexpected-problems","title":"environment / unexpected problems","text":"<p>I'm so sorry, you'll have to forgive the noise in the background.</p> <p>Sorry, I have to put myself on mute for a second.</p> <p>you are breaking up (cutting out) \u5361\u4e86</p> <p>Sorry my audio is not working. I will be right back.</p>"},{"location":"speakings/meetings/#end","title":"end","text":"<p>We got a lot done today. Thanks for your time and patience.</p> <p>Have a great day.</p>"},{"location":"speakings/travel/","title":"Travel","text":""},{"location":"speakings/travel/#airport","title":"Airport","text":"<ul> <li>words<ul> <li>check in desk: \u503c\u673a\u67dc\u53f0</li> <li>boarding pass: \u767b\u673a\u724c</li> <li>boarding gate: \u767b\u673a\u53e3</li> <li>customs: \u6d77\u5173\uff08\u5b89\u68c0\uff09</li> </ul> </li> </ul> <ul> <li>check in<ul> <li>Excuse me, do you know where I can check in?</li> <li>Here is my passport/visa.</li> <li>Do you have any luggage/baggage to check in? \uff08\u884c\u674e\u6258\u8fd0\uff09</li> <li>Can I take this bag/suitcase on board?</li> <li>Do you have any window/aisle seats?</li> <li>What time do I need to board?</li> <li>Which boarding gate do I need to go to?</li> <li>Where is the security check/customs?</li> </ul> </li> </ul> <ul> <li>on the plane<ul> <li>Where is my seat?</li> <li>What time does this flight arrive in New York?</li> <li>How long before we arrive?</li> <li>Can you give me some earphones/a cup of water?</li> </ul> </li> <li>off the plane<ul> <li>Where can I pick up my luggage? (luggage claim area)</li> <li>Excuse me, my bag is missing.</li> <li>Here is my luggage tag.</li> </ul> </li> <li>change money<ul> <li>Excuse me, can I change money here?</li> <li>What is the exchange rate?</li> <li>I would like to change Chinese yuan into (US) dollars.<ul> <li>Euros, Pounds, Yen, Hong Kong dollars, Singapore dollars, ...</li> </ul> </li> <li>Is there a service charge/any commission?</li> <li>Can I get a tax refund on these goods? Here is the receipt.</li> </ul> </li> </ul> <ul> <li>at the customs<ul> <li>How long will you be staying in US? </li> <li>Where will you be staying?</li> <li>What is the purpose of your trip?<ul> <li>It's a business trip/vacation.</li> <li>I'm here to see friends.</li> </ul> </li> </ul> </li> </ul>"},{"location":"speakings/travel/#hotel","title":"Hotel","text":"<ul> <li>No appointment<ul> <li>Excuse me, I would like to reserve a room.</li> <li>Do you have any free rooms for tonight?</li> <li>What is the rate per night? / How much per night?</li> <li>Do you have a single room/double room/room with twin/double beds? </li> </ul> </li> <li>With appointment<ul> <li>Excuse me, I would like to check in.</li> <li>I have a reservation under the name of XXX.</li> </ul> </li> <li>Calling from room<ul> <li>Hello, I'm calling from room XXX.</li> <li>Is there a hair dryer in the room?</li> <li>Could you bring me a kettle?<ul> <li>some slippers / toothpaste / toilet paper / towels / a plug adapter for a Chinese plug.</li> </ul> </li> <li>The air conditioner (AC) is not working/broken.<ul> <li>the heating / toilet / shower</li> </ul> </li> <li>The window in the room won't open.</li> <li>Could you send somebody to fix?</li> <li>Could you send somebody to clean my room/change the sheets in my room?</li> <li>Could I have some more toiletries? \uff08\u6d17\u6f31\u7528\u54c1\uff09</li> <li>The room smells of smoke, can I change to a different room?</li> <li>Do you have a room with a window/sea view?</li> <li>Can I upgrade my room? How much would it cost?</li> <li>Excuse me, I have lost my key card. I'm locked outside my room.</li> <li>This key card doesn't work. Could you give me another one?</li> </ul> </li> <li>Check out<ul> <li>What time do I need to check out?</li> <li>Can I check out, please? My room number is XXX.</li> <li>Can I pay by credit card?</li> </ul> </li> </ul>"},{"location":"vision/camera_combined/","title":"Camera combined","text":""},{"location":"vision/camera_combined/#relationship-between-view-projection-intrinsic-extrinsic","title":"Relationship between view / projection &amp; intrinsic / extrinsic","text":"<ul> <li>The Extrinsic Matrix is equivalent to the View Matrix.</li> </ul> <ul> <li> <p>The Intrinsic Matrix and the (perspective) projection matrix both describes a perspective projection, but there are some differences:</p> <ul> <li>The Intrinsic Matrix use pixel height / width / focal, e.g. <code>H ~ [0, 1024), W ~ [0, 1024), focal = 1236</code>, and face at <code>+z</code>.</li> </ul> </li> </ul> \\[ \\displaylines{ K = \\begin{bmatrix}     f_x &amp; s &amp; x_0 &amp; 0 \\\\     0 &amp; f_y  &amp; y_0 &amp; 0 \\\\     0 &amp; 0 &amp; 1 &amp; 0     \\end{bmatrix} } \\] <ul> <li>The Projection Matrix use NDC, e.g., <code>H ~ [-1, 1], W ~ [-1, 1], near = 0.1</code>, and face at <code>-z</code>:</li> </ul> \\[ \\displaylines{     Persp = Ortho\\cdot P = Ortho \\cdot \\begin{bmatrix}     near &amp; 0 &amp; 0 &amp; 0 \\\\     0 &amp; near &amp; 0 &amp; 0 \\\\     0 &amp; 0 &amp; near+far &amp; near * far \\\\     0 &amp; 0 &amp; -1 &amp; 0     \\end{bmatrix} } \\] <p>And here the \\(P\\) can be seen as a modified \\(K\\):</p> <ul> <li>if we use the near plane as the focal plane, then \\(near = f_x = f_y\\)</li> <li>if we set principle to \\((0, 0)\\), then \\(x_0 = 0, y_0 = 0\\)</li> <li>revert z-axis, so \\(1 \\rightarrow -1\\)</li> <li>inserting a third row about the information of <code>far</code> plane.</li> </ul> <p>However, in most cases, the focal plane is not the near plane:</p> <p></p>"},{"location":"vision/camera_combined/#implementation","title":"implementation","text":"<pre><code># Pinhole camera\n# support principle not at center, and intrinsic matrix.\nclass Camera:\n    def __init__(self):\n        ### view-related (or exintrics)\n        self.center = np.array([0, 0, 1])\n        self.target = np.array([0, 0, 0])\n        self.up = np.array([0, 1, 0]) # world up, usually the y-axis.\n\n        ### projection-related\n        self.is_persp = True\n        self.fovy = np.radians(45)\n        # we use [-near, -far], so 0 &lt; near &lt; far\n        self.near = 0.1\n        self.far = 100\n\n        ### intrinsics\n        # define of the image plane:\n        #   0\n        # 0 +-----------------------&gt; x / width\n        #   |                   |\n        #   |       image       |\n        #   |                   |\n        #   |-------------------+ (W, H)\n        #   v\n        #   y / height\n        self.width = 1024 # x\n        self.height = 1024 # y\n        self.principle = np.array([512, 512]) # centered (width, height)\n        self.skew = 0\n\n    @property\n    def cameraDirection(self):\n        return normalize(self.center - self.target) # Note: it's target --&gt; camera (or inverse cameraDirection)\n\n    @property\n    def cameraRight(self):\n        return normalize(np.cross(self.up, self.cameraDirection))\n\n    @property\n    def cameraUp(self):\n        return np.cross(self.cameraDirection, self.cameraRight)\n\n    @property\n    def aspect(self):\n        return self.width / self.height\n\n    # focal is similar to near, but in imaginary pixels !\n    # see: http://ksimek.github.io/2013/06/03/calibrated_cameras_in_opengl/\n    @property\n    def focal(self):\n        return self.height / (2 * np.tan(self.fovy / 2))\n\n    # the physical physical_height of the near plane\n    @property\n    def physical_height(self):\n        return 2 * self.near * np.tan(self.fovy / 2)\n\n    @property\n    def physical_width(self):\n        return self.aspect * self.physical_height\n\n    @property\n    def left(self):\n        return - self.physical_width * (self.principle[0] / self.width)\n\n    @property\n    def right(self):\n        return self.physical_width * (1 - self.principle[0] / self.width)\n\n    @property\n    def top(self):\n        return self.physical_height * (self.principle[1] / self.height)\n\n    @property\n    def bottom(self):\n        return - self.physical_height * (1 - self.principle[1] / self.height)\n\n    # The Intrinsic Matrix\n    @property\n    def intrinsic(self):\n        return np.array([\n            [self.focal, self.skew,  self.principle[0], 0],\n            [0,          self.focal, self.principle[1], 0],\n            [0,          0,          1,                 0],\n        ])\n\n    # The LookAt / View / Exintric / Pose Matrix.\n    @property\n    def view(self):\n        # rotation\n        R = np.eye(4)\n        R[0, :3] = self.cameraRight\n        R[1, :3] = self.cameraUp\n        R[2, :3] = self.cameraDirection\n        # translation\n        T = np.eye(4)\n        T[:3, 3] = -self.center\n        # compose\n        V = R @ T\n        return V\n\n    # The Projection Matrix.\n    @property\n    def projection(self):\n        if not self.is_persp:\n            ortho = np.array([\n                [2 / (self.right - self.left), 0,                            0,                           - (self.right + self.left) / (self.right - self.left)],\n                [0,                            2 / (self.top - self.bottom), 0,                           - (self.top + self.bottom) / (self.top - self.bottom)],\n                [0,                            0,                            -2 / (self.far - self.near), - (self.far + self.near) / (self.far - self.near)    ],\n                [0,                            0,                            0,                           1                                                    ],\n            ])\n            return ortho\n\n        else:\n            persp = np.array([\n                [2 * self.near / (self.right - self.left), 0,                                        (self.right + self.left) / (self.right - self.left), 0                                                 ],\n                [0,                                        2 * self.near / (self.top - self.bottom), (self.top + self.bottom) / (self.top - self.bottom), 0                                                 ],\n                [0,                                        0,                                        - (self.near + self.far) / (self.far - self.near),   -2 * self.near * self.far / (self.far - self.near)],\n                [0,                                        0,                                        -1,                                                  0                                                 ],\n            ])\n            return persp\n</code></pre>"},{"location":"vision/camera_combined/#references","title":"references","text":"<ul> <li>http://ksimek.github.io/2013/06/03/calibrated_cameras_in_opengl/</li> <li>http://www.songho.ca/opengl/gl_projectionmatrix.html</li> </ul>"},{"location":"vision/camera_intrinsics_exintrics/","title":"Camera intrinsics exintrics","text":""},{"location":"vision/camera_intrinsics_exintrics/#camera-pose","title":"Camera Pose","text":"<p>Very good reference: https://ksimek.github.io/2012/08/22/extrinsic/</p> <p>Good demo of look-at camera: https://learnwebgl.brown37.net/07_cameras/camera_lookat/camera_lookat.html</p>"},{"location":"vision/camera_intrinsics_exintrics/#homogeneous-coordinates","title":"Homogeneous Coordinates","text":"\\[ \\displaylines{ \\text{2D:} \\quad [u, v, 1]^T  \\\\ \\text{3D:} \\quad [x, y, z, 1]^T  \\\\ } \\]"},{"location":"vision/camera_intrinsics_exintrics/#projection-from-3d-to-2d","title":"Projection from 3D to 2D","text":"<p>We usually first transform the 3D points to the camera coordinate system by the camera pose, then project the 3D points to 2D image plane by the camera matrix:</p> \\[ \\displaylines{ z_c\\begin{bmatrix} u \\\\ v \\\\ 1 \\\\ \\end{bmatrix} = \\mathbf K \\begin{bmatrix} x_c \\\\ y_c \\\\ z_c \\\\ 1 \\\\ \\end{bmatrix} = \\mathbf K \\begin{bmatrix}\\mathbf R &amp; \\mathbf T \\\\ 0&amp;  1\\end{bmatrix} \\cdot \\begin{bmatrix} x_w \\\\ y_w \\\\ z_w \\\\ 1 \\\\ \\end{bmatrix} } \\] <p>3D Point in the world coordinate system: \\([x_w, y_w,z_w]^T\\) (relative to a defined origin position.)</p> <p>3D Point in the camera coordinate system: \\([x_c, y_c, z_c]^T\\) (relative to the camera center position.)</p> <p>2D Point (Pixel) in the image plane: \\([u,v]^T\\) (range in \\([0, H]\\times[0, W]\\))</p> <p>Camera Intrinsic (determined only by the camera itself): \\(\\mathbf K \\in \\mathbb R^{3 \\times 4}\\).</p> <p>Camera Extrinsic (describes the transformation from world to camera, inversion of camera pose): \\(\\begin{bmatrix}\\mathbf R&amp; \\mathbf T \\\\ 0&amp;  1 \\end{bmatrix} \\in \\mathbb R ^ {4 \\times 4}\\).</p>"},{"location":"vision/camera_intrinsics_exintrics/#intrinsic","title":"Intrinsic","text":"<p>A \\(3 \\times 4\\) matrix used to project 3D points to 2D coordinates:</p> \\[ \\displaylines{ z_c\\begin{bmatrix} u \\\\ v \\\\ 1 \\\\ \\end{bmatrix}  =  \\mathbf K \\begin{bmatrix} x_c \\\\ y_c \\\\ z_c \\\\ 1 \\\\ \\end{bmatrix}  = \\begin{bmatrix} f_x &amp; \\gamma &amp; u_0 &amp; 0 \\\\ 0 &amp; f_y &amp; v_0 &amp;  0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ \\end{bmatrix} \\cdot \\begin{bmatrix} x_c \\\\ y_c \\\\ z_c \\\\ 1 \\\\ \\end{bmatrix} } \\] <p>\\(f_x, f_y\\) are the focal length in pixels, usually \\(f_x =f_y\\).</p> <p>\\(\\gamma\\) is the skew coefficient, usually 0.</p> <p>\\((u_0, v_0)\\) are the principal point (camera center) in pixels, ideally the center of the image, i.e., \\((H/2, W/2)\\).</p> <p>Inversely, we can use the intrinsic to project pixel coordinates to 3D points in the camera's coordinate system.</p> <p>Since a pixel can be projected to multiple depth planes, so we need to know the depth value \\(z_c\\) in advance.</p> \\[ \\displaylines{ \\begin{cases} x_c = \\frac {(u - u_0)} {f_x} z_c \\\\ y_c = \\frac {(v - v_0)} {f_y} z_c \\\\ z_c \\end{cases} } \\]"},{"location":"vision/camera_intrinsics_exintrics/#extrinsic-w2c","title":"Extrinsic (w2c)","text":"<p>A \\(4 \\times 4\\) matrix, a regular 3D transformation from world coordinate system to camera coordinate system.</p> \\[ \\displaylines{ \\begin{bmatrix}\\mathbf R_{3\\times3}&amp; \\mathbf T_{3\\times1} \\\\ 0_{1\\times3}&amp;  1 \\end{bmatrix} = \\begin{bmatrix}\\mathbf I&amp; \\mathbf T \\\\ 0&amp;  1 \\end{bmatrix} \\begin{bmatrix}\\mathbf R&amp; 0 \\\\ 0&amp;  1 \\end{bmatrix} = \\begin{bmatrix}\\mathbf R&amp; 0 \\\\ 0&amp;  1 \\end{bmatrix} \\begin{bmatrix}\\mathbf I&amp; -\\mathbf C \\\\ 0&amp;  1 \\end{bmatrix} } \\] <p>It can be decomposed as:</p> <ul> <li>first rotate with \\(\\mathbf R\\), then translate with \\(\\mathbf T\\), or</li> <li>first translate with \\(-\\mathbf C\\), then rotate with \\(\\mathbf R\\).</li> </ul> <p>\\(\\mathbf R\\) is a rotation matrix. (orthogonal, \\(\\mathbf R^T = \\mathbf R^{-1}\\))</p> <p>\\(\\mathbf T\\) is the position of the world origin in the camera coordinate system,</p> <p>NOT the camera position in the world coordinate system! </p> <p>instead, the position of the camera center in the world coordinate system, \\(\\mathbf C=[x_0, y_0, z_0]\\) should be calculated as:</p> \\[ \\displaylines{ \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix}\\mathbf R&amp; \\mathbf T \\\\ 0&amp;  1 \\end{bmatrix}  \\cdot \\begin{bmatrix} x_0 \\\\ y_0 \\\\ z_0 \\\\ 1 \\end{bmatrix} } \\] <p>thus, \\(\\mathbf C = -\\mathbf R^{-1}\\mathbf T\\)</p> <p>this also gives a way to calculate \\(\\mathbf{T} = -\\mathbf{RC}\\).</p>"},{"location":"vision/camera_intrinsics_exintrics/#pose-c2w","title":"Pose (c2w)","text":"<p>Also a \\(4 \\times 4\\) matrix, but it describes the 3D transformation from camera to world.</p> <p>Obviously, camera pose (c2w) is the inversion of extrinsic (w2c).</p> \\[ \\displaylines{ \\begin{bmatrix}\\mathbf R_{3\\times3}^T&amp; \\mathbf C_{3\\times1} \\\\ 0_{1\\times3}&amp;  1 \\end{bmatrix} =  \\begin{bmatrix}\\mathbf R_{3\\times3}&amp; \\mathbf T_{3\\times1} \\\\ 0_{1\\times3}&amp;  1 \\end{bmatrix}^{-1} } \\] <p>Note that now the translation vector \\(\\mathbf{C}\\) is the camera's position in the world coordinate system now.</p>"},{"location":"vision/camera_intrinsics_exintrics/#construct-by-lookat","title":"Construct by <code>LookAt</code>","text":"<p>The camera pose matrix in OpenGL is defined as:</p> <p></p> <p>Assuming you know the camera position \\(\\mathbf{C}\\), and target position \\(\\mathbf{O}\\), note the forward direction is \\(\\mathbf{\\overrightarrow{OC}}\\).</p> <p>To construct the camera pose matrix, you can calculate the normalized right, up, and forward vector, then simply concatenate them\uff1a</p> \\[ \\displaylines{ \\begin{bmatrix} x_w \\\\ y_w \\\\ z_w \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} \\text{right}_x &amp; \\text{up}_x &amp; \\text{forward}_x &amp; \\text{C}_x \\\\  \\text{right}_y &amp; \\text{up}_y &amp; \\text{forward}_y &amp; \\text{C}_y \\\\  \\text{right}_z &amp; \\text{up}_z &amp; \\text{forward}_z &amp; \\text{C}_z \\\\  0 &amp; 0 &amp; 0 &amp; 1  \\end{bmatrix}  \\cdot \\begin{bmatrix} x_c \\\\ y_c \\\\ z_c \\\\ 1 \\end{bmatrix} } \\] <p>Or the camera extrinsic/view matrix similarly:</p> \\[ \\displaylines{ \\begin{bmatrix} x_c \\\\ y_c \\\\ z_c \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} \\text{right}_x &amp; \\text{right}_y &amp; \\text{right}_z &amp; 0 \\\\  \\text{up}_x &amp; \\text{up}_y &amp; \\text{up}_z &amp; 0 \\\\  \\text{forward}_x &amp; \\text{forward}_y &amp; \\text{forward}_z &amp; 0 \\\\  0 &amp; 0 &amp; 0 &amp; 1  \\end{bmatrix}  \\cdot \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; -C_x \\\\  0 &amp; 1 &amp; 0 &amp; -C_y \\\\  0 &amp; 0 &amp; 1 &amp; -C_z \\\\  0 &amp; 0 &amp; 0 &amp; 1  \\end{bmatrix}  \\cdot \\begin{bmatrix} x_w \\\\ y_w \\\\ z_w \\\\ 1 \\end{bmatrix} } \\] <p>There are different world/camera coordinate conventions, which are really confusing:</p> <pre><code>Four common world coordinate conventions:\n\n   OpenGL          OpenCV           Blender        Unity             \nRight-handed       Colmap                        Left-handed  \n\n     +y                +z           +z  +y         +y  +z                                               \n     |                /             |  /           |  /                                               \n     |               /              | /            | /                                                   \n     |______+x      /______+x       |/_____+x      |/_____+x                                          \n    /               |                                                                                       \n   /                |                                                                                       \n  /                 |                                                                                         \n +z                 +y                                                                                       \n\n\nTwo common camera coordinate conventions:\n\n   OpenGL                OpenCV       \n   Blender               Colmap       \n\n     up  target          forward &amp; target\n     |  /                /         \n     | /                /          \n     |/_____right      /______right   \n    /                  |           \n   /                   |           \n  /                    |           \nforward                up          \n</code></pre> <p>A common color code: x/right = red, y/up = green, z/forward = blue (XYZ=RGB=RUF)</p> <p>The camera xyz follows corresponding world coordinate system. However, the three directions (right, up, forward) can be defined differently:</p> <ul> <li>forward can be (camera --&gt; target) or (target --&gt; camera).</li> <li>up can align with the world-up-axis (y) or world-down-axis (-y).</li> <li>right can also be left, depending on it's (up cross forward) or (forward cross up).</li> </ul> <p>But many datasets are just very confusing and combine different conventions together. You may check a few poses to make sure what the convention they are using... and combine:</p> <ul> <li>axis switching: <code>pose[[1, 2]] = pose[[2, 1]]</code></li> <li>axis inverting: <code>pose[1] *= -1</code></li> <li>forward inverting: <code>pose[:3, 2] *= -1</code></li> <li>up inverting: <code>pose[:3, 1] *= -1</code></li> </ul>"},{"location":"vision/camera_view_projection/","title":"Camera view projection","text":""},{"location":"vision/camera_view_projection/#view-projection","title":"View &amp; Projection","text":""},{"location":"vision/camera_view_projection/#right-handed-system","title":"Right-handed system","text":"<p>It is a convention.</p> <p></p> <ul> <li>Stretch your right-arm along the positive y-axis with your hand up top.</li> <li>Let your thumb point to the right.</li> <li>Let your pointing finger point up.</li> <li>Now bend your middle finger downwards 90 degrees.</li> </ul>"},{"location":"vision/camera_view_projection/#global-picture-of-transformations","title":"Global Picture of transformations","text":""},{"location":"vision/camera_view_projection/#model-transformation","title":"Model Transformation","text":"<p>It transform the object from its local coordinate system to the world coordinate system. </p> <p>Usually this transformation is pre-applied to the model, so we don't use it here.</p>"},{"location":"vision/camera_view_projection/#viewcamera-transformation","title":"View/Camera Transformation","text":"<p>It transform both the camera and objects, until the camera is at the origin, up at Y axis and look at -Z axis. (from world coordinate system to camera coordinate system)</p> <p>We should first apply this view transformation before we further apply projection transformation.</p> \\[ \\displaylines{ V_{camera} = \\mathbf M_{view} \\cdot V_{world} \\\\ } \\]"},{"location":"vision/camera_view_projection/#projection-transformation","title":"Projection Transformation","text":"<p>It projects 3D objects into a Clip space, such that we can transform it to the final 2D plane. </p> \\[ \\displaylines{ V_{clip} =  \\mathbf M_{projection} \\cdot V_{camera} \\\\ } \\] <p>First, we project the objects (from camera coordinate system) into a canonical cuboid \\([-1,1]^3\\) (the normalized device coordinate system, NDC). Coordinates outside \\([-1, 1]\\) will be clipped, so the space is called Clip space.</p> <p>Second, we perform viewport transform, i.e., simply look at -Z direction and get the 2D projection plane.</p>"},{"location":"vision/camera_view_projection/#orthographic-projection","title":"Orthographic projection","text":"<ul> <li>Ignore Z axis.</li> <li>Translate &amp; Scale X/Y axes to \\([-1,1]^2\\)</li> </ul> <p>In implementation, we simply linear translate &amp; scale the object's bounding box from \\([l,r]\\times[b,t]\\times[-n,-f]\\) into \\([-1, 1]^3\\):</p> \\[ \\displaylines{ \\mathbf M_{ortho} =  \\begin{bmatrix} \\frac 2 {r-l} &amp; 0 &amp; 0 &amp; -\\frac{r+l}{r-l} \\\\ 0 &amp; \\frac 2 {t-b} &amp; 0 &amp; -\\frac{t+b}{t-b} \\\\ 0 &amp; 0 &amp; \\frac {-2} {f-n} &amp; -\\frac{f+n}{f-n} \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} } \\] <p>(Note: since we look at -Z, we use \\(-n\\) and \\(-f\\) for near and far plane, so that \\(0&lt;n&lt;f\\).)</p>"},{"location":"vision/camera_view_projection/#perspective-projection","title":"Perspective projection","text":"<p>Further objects should look smaller!</p> <ul> <li>squish the frustum into a cuboid.</li> <li>do orthographic projection.</li> </ul> <p>In implementation, we should find the relationship between the transformed points and original points:</p> \\[ \\displaylines{ y' = \\frac n z y\\\\ x' = \\frac n z x\\\\ } \\] <p>For Z axis, we observe:</p> <ul> <li>any point on the near plane will not change.</li> <li>any point's z on the far plane will not change.</li> </ul> <p>Solve the equations and we have:</p> \\[ \\displaylines{ \\mathbf M_{persp\\rightarrow ortho} =  \\begin{bmatrix} n &amp; 0 &amp; 0 &amp; 0 \\\\  0 &amp; n &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; n+f &amp; nf\\\\ 0 &amp; 0 &amp; -1 &amp; 0 \\\\ \\end{bmatrix} } \\] <p>And finally:</p> \\[ \\displaylines{ \\mathbf M_{persp} = \\mathbf{M}_{ortho}\\mathbf M_{persp\\rightarrow ortho} = \\\\ \\begin{bmatrix} \\frac{2n}{r-l} &amp; 0 &amp; \\frac{r+l}{r-l} &amp; 0 \\\\ 0 &amp; \\frac {2n} {t-b} &amp; \\frac{t+b}{t-b} &amp; 0 \\\\ 0 &amp; 0 &amp; -\\frac{f+n}{f-n} &amp; -\\frac{2fn}{f-n} \\\\ 0 &amp; 0 &amp; -1 &amp; 0 \\end{bmatrix} } \\] <p>In cases the view is symmetric (\\(l= -r, b = -t\\)), we have the most commonly used form:</p> \\[ \\displaylines{ \\mathbf M_{persp} =  \\begin{bmatrix} \\frac{n}{r} &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; \\frac {n} {t} &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; -\\frac{f+n}{f-n} &amp; -\\frac{2fn}{f-n} \\\\ 0 &amp; 0 &amp; -1 &amp; 0 \\end{bmatrix} } \\]"},{"location":"vision/colmap/","title":"colmap","text":""},{"location":"vision/colmap/#install-in-ubuntu","title":"Install in Ubuntu","text":"<p>To enable CUDA, you must build from source.</p> <pre><code># dependency\nsudo apt-get install \\\n    git \\\n    cmake \\\n    build-essential \\\n    libboost-program-options-dev \\\n    libboost-filesystem-dev \\\n    libboost-graph-dev \\\n    libboost-system-dev \\\n    libboost-test-dev \\\n    libeigen3-dev \\\n    libsuitesparse-dev \\\n    libfreeimage-dev \\\n    libmetis-dev \\\n    libgoogle-glog-dev \\\n    libgflags-dev \\\n    libglew-dev \\\n    qtbase5-dev \\\n    libqt5opengl5-dev \\\n    libcgal-dev\n\n# if in ubuntu 16/18:\nsudo apt-get install libcgal-qt5-dev\n\n# ceres\nsudo apt-get install libatlas-base-dev libsuitesparse-dev\ngit clone https://ceres-solver.googlesource.com/ceres-solver\ncd ceres-solver\n# use &lt;= 2.1, ref: https://github.com/colmap/colmap/issues/1482\ngit checkout f68321e7de8929fbcdb95dd42877531e64f72f66 \nmkdir build\ncd build\ncmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF\nmake -j\nsudo make install\n\n# if use anaconda, you may meet undefined refernce to libtiff error\n# ref: https://github.com/colmap/colmap/issues/188\nconda deactivate\n\n# colmap\ngit clone https://github.com/colmap/colmap.git\ncd colmap\nmkdir build\ncd build\ncmake ..\nmake -j\nsudo make install\n</code></pre>"},{"location":"vision/colmap/#cli","title":"CLI","text":"<pre><code># help\ncolmap -h\ncolmap &lt;subcommand&gt; -h\n\n# path/to/project:\n# +-- images\n#     +-- 0.jpg\n#     +-- 1.jpg\n#     +-- ...\n\ncolmap automatic_reconstructor \\\n    --workspace_path /path/to/project \\\n    --image_path /path/to/project/images \\\n</code></pre> <p>If you want more controls:</p> <pre><code># step to step way:\nDATASET_PATH=/path/to/dataset\n\ncolmap feature_extractor \\\n   --database_path $DATASET_PATH/database.db \\\n   --image_path $DATASET_PATH/images\n\ncolmap exhaustive_matcher \\\n   --database_path $DATASET_PATH/database.db\n\nmkdir $DATASET_PATH/sparse\n\ncolmap mapper \\\n    --database_path $DATASET_PATH/database.db \\\n    --image_path $DATASET_PATH/images \\\n    --output_path $DATASET_PATH/sparse\n\nmkdir $DATASET_PATH/dense\n\ncolmap image_undistorter \\\n    --image_path $DATASET_PATH/images \\\n    --input_path $DATASET_PATH/sparse/0 \\\n    --output_path $DATASET_PATH/dense \\\n    --output_type COLMAP \\\n    --max_image_size 2000\n\ncolmap patch_match_stereo \\\n    --workspace_path $DATASET_PATH/dense \\\n    --workspace_format COLMAP \\\n    --PatchMatchStereo.geom_consistency true\n\ncolmap stereo_fusion \\\n    --workspace_path $DATASET_PATH/dense \\\n    --workspace_format COLMAP \\\n    --input_type geometric \\\n    --output_path $DATASET_PATH/dense/fused.ply\n\ncolmap poisson_mesher \\\n    --input_path $DATASET_PATH/dense/fused.ply \\\n    --output_path $DATASET_PATH/dense/meshed-poisson.ply\n\ncolmap delaunay_mesher \\\n    --input_path $DATASET_PATH/dense \\\n    --output_path $DATASET_PATH/dense/meshed-delaunay.ply\n</code></pre> <p>To force use CPU:</p> <pre><code>colmap ...\n  --SiftExtraction.use_gpu 0 \\\n  --SiftMatching.use_gpu 0\n</code></pre>"},{"location":"vision/colmap/#gui","title":"GUI","text":"<pre><code># gui\ncolmap gui\n</code></pre> <p>Then just follow the GUI.</p>"},{"location":"vision/colmap/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p><code>No good initial image pair found.</code></p> <p>This means the dataset is too bad. Not all images are registered in this case. </p> <p>Solutions:</p> <ul> <li>remove the un-registered images.</li> <li>use better dataset with more images (better poses).</li> </ul> </li> </ul>"},{"location":"vision/eigen/","title":"Eigen","text":"<p>A matrix/vector arithmetic library for c/c++.</p>"},{"location":"vision/eigen/#install","title":"Install","text":"<p>download the source at homepage.</p> <p>to use it, include it in compiling : <code>g++ -I /path/to/eigen source.cpp</code></p> <p>or simply symbol link it to <code>\\usr\\local\\include</code>.</p> <p>Troubleshooting: <code>Eigen::all, Eigen::seq</code> is not a member of Eigen.</p> <p>These operations belong to <code>dev</code> branch of Eigen, as you can see from the documentation:</p> <ul> <li>dev: https://eigen.tuxfamily.org/dox-devel/group__TutorialSlicingIndexing.html</li> <li>stable: https://eigen.tuxfamily.org/dox/ (there is no page about slicing)</li> </ul> <p>To use the <code>dev</code> branch, download the source at https://eigen.tuxfamily.org/dox/</p>"},{"location":"vision/eigen/#examples","title":"Examples","text":"<p>simple matrix</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;Eigen/Dense&gt;\n\nusing Eigen::MatrixXd;\n\nint main()\n{\n  MatrixXd m(2,2);\n  m(0,0) = 3;\n  m(1,0) = 2.5;\n  m(0,1) = -1;\n  m(1,1) = m(1,0) + m(0,1);\n  std::cout &lt;&lt; m &lt;&lt; std::endl;\n}\n</code></pre> <p>matrix vector multiplication</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;Eigen/Dense&gt;\n\nusing namespace Eigen;\nusing namespace std;\n\nint main()\n{\n  Matrix3d m = Matrix3d::Random();\n  m = (m + Matrix3d::Constant(1.2)) * 50; \n  cout &lt;&lt; \"m =\" &lt;&lt; endl &lt;&lt; m &lt;&lt; endl; // [3, 3]\n  Vector3d v(1,2,3); // [3, 1]\n\n  cout &lt;&lt; \"m * v =\" &lt;&lt; endl &lt;&lt; m * v &lt;&lt; endl; // [3, 1]\n}\n</code></pre>"},{"location":"vision/eigen/#matrix","title":"Matrix","text":"<p>all matrices and vectors are instances of the <code>Matrix</code> class:</p> <pre><code>Matrix&lt;// the first 3 are necessary \n       typename Scalar,\n       int RowsAtCompileTime,\n       int ColsAtCompileTime,\n       // defaulf 0 means ColMajor, use `RowMajor` to change to row-major storage order.\n       int Options = 0, \n       // can be used to avoid dynamic allocating.\n       int MaxRowsAtCompileTime = RowsAtCompileTime, \n       int MaxColsAtCompileTime = ColsAtCompileTime\n       &gt;\n</code></pre> <p>e.g., <code>typedef Matrix&lt;float, 4, 4&gt; Matrix4f;</code></p> <p>Initial coefficients are uninitialized.</p> <p>To init with values: <code>Vector2d a(5.0, 6.0);</code>. (support max to <code>Vector4d</code>)</p> <p>The default storage order is Column-major.</p> <p>Built-in typedefs for <code>N in [2,3,4,X]</code> and <code>t in [i, f, d, cf, cd]</code>:</p> <ul> <li><code>MatrixNt</code> == <code>Matrix&lt;t, N, N&gt;</code></li> <li><code>VectorNt</code> == <code>Matrix&lt;t, N, 1&gt;</code></li> <li><code>RowVectorNt</code> == <code>Matrix&lt;t, 1, N&gt;</code></li> </ul>"},{"location":"vision/eigen/#dynamic-matrix","title":"dynamic matrix","text":"<p>Eigen also supports dynamic matrix size: <code>typedef Matrix&lt;double, Dynamic, Dynamic&gt; MatrixXd;</code></p> <p>Initial size is 0-by-0. </p> <p>To init with a size: <code>MatrixXd a(4,4);</code></p> <p>When to use dynamic matrix: use fixed sizes for very small sizes (&lt;= 16) where you can, and use dynamic sizes for larger sizes or where you have to.</p> <pre><code>// example for [N, 3] dynamic matrix\nusing Points = Matrix&lt;float, Dynamic, 3, RowMajor&gt;;\nusing Triangles = Matrix&lt;uint32_t, Dynamic, 3, RowMajor&gt;;\n</code></pre>"},{"location":"vision/eigen/#access-coefficients","title":"Access coefficients","text":"<p>Coefficient accessors: <code>m(i, j)</code></p> <p>Use comma-initialization:</p> <pre><code>Matrix3f m;\nm &lt;&lt; 1, 2, 3,\n     4, 5, 6,\n     7, 8, 9;\n</code></pre>"},{"location":"vision/eigen/#size","title":"Size","text":"<p>Size and resize: <code>rows(), cols(), size()</code></p> <pre><code>int main()\n{\n  MatrixXd m(2,5);\n  m.resize(4,3);\n  std::cout &lt;&lt; m.rows() &lt;&lt; \"x\" &lt;&lt; m.cols() &lt;&lt; std::endl; // 4x3\n  std::cout &lt;&lt; m.size() &lt;&lt; std::endl; // 12\n}\n</code></pre> <p>Assignment will cause resizing too:</p> <pre><code>MatrixXf a(2,2);\nMatrixXf b(3,3);\na = b; // a is now 3x3\n</code></pre>"},{"location":"vision/eigen/#arithmetic","title":"Arithmetic","text":""},{"location":"vision/eigen/#addsub","title":"Add/Sub:","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;Eigen/Dense&gt;\n\nusing namespace Eigen;\n\nint main()\n{\n  Matrix2d a;\n  a &lt;&lt; 1, 2,\n       3, 4;\n  MatrixXd b(2,2);\n  b &lt;&lt; 2, 3,\n       1, 4;\n\n  // element-wise add with another matrix\n  std::cout &lt;&lt; \"a + b =\\n\" &lt;&lt; a + b &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"a - b =\\n\" &lt;&lt; a - b &lt;&lt; std::endl;\n\n  std::cout &lt;&lt; \"Doing a += b;\" &lt;&lt; std::endl;\n  a += b;\n  std::cout &lt;&lt; \"Now a =\\n\" &lt;&lt; a &lt;&lt; std::endl;\n\n  // Matrix do not support adding/subtracting scalar !!!\n  //a += 1; // CompileError, use Array for element-wise add.\n\n  Vector3d v(1,2,3);\n  Vector3d w(1,0,0);\n  std::cout &lt;&lt; \"-v + w - v =\\n\" &lt;&lt; -v + w - v &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"vision/eigen/#scalar-muldiv","title":"Scalar Mul/Div:","text":"<pre><code>int main()\n{\n  Matrix2d a;\n  a &lt;&lt; 1, 2,\n       3, 4;\n  Vector3d v(1,2,3);\n\n  std::cout &lt;&lt; \"a * 2.5 =\\n\" &lt;&lt; a * 2.5 &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"0.1 * v =\\n\" &lt;&lt; 0.1 * v &lt;&lt; std::endl;\n\n  std::cout &lt;&lt; \"Doing v *= 2;\" &lt;&lt; std::endl;\n  v *= 2;\n  std::cout &lt;&lt; \"Now v =\\n\" &lt;&lt; v &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"vision/eigen/#transposeconjugate","title":"Transpose/Conjugate:","text":"<pre><code>MatrixXcf a = MatrixXcf::Random(2,2);\ncout &lt;&lt; \"Here is the matrix a\\n\" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"Here is the matrix a^T\\n\" &lt;&lt; a.transpose() &lt;&lt; endl;\ncout &lt;&lt; \"Here is the conjugate of a\\n\" &lt;&lt; a.conjugate() &lt;&lt; endl;\ncout &lt;&lt; \"Here is the matrix a^*\\n\" &lt;&lt; a.adjoint() &lt;&lt; endl;\n</code></pre> <p>Note: <code>a.transpose()</code> will not copy the matrix, and just creates a proxy.</p> <p><code>b = a.transpose()</code> copy <code>a.transpose()</code> to <code>b</code>, and is safe.</p> <p>However, <code>a = a.tranpose()</code> is WRONG and never use it. (e.g., it will cause<code>[[12][34]] --&gt; [[12][24]]</code>)</p> <p>Instead, if must, use <code>a = a.transposeInPlace()</code>.</p>"},{"location":"vision/eigen/#matrix-mul","title":"Matrix Mul:","text":"<pre><code>int main()\n{\n  Matrix2d mat;\n  mat &lt;&lt; 1, 2,\n         3, 4;\n  Vector2d u(-1,1), v(2,0);\n  std::cout &lt;&lt; \"Here is mat*mat:\\n\" &lt;&lt; mat*mat &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"Here is mat*u:\\n\" &lt;&lt; mat*u &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"Here is u^T*mat:\\n\" &lt;&lt; u.transpose()*mat &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"Here is u^T*v:\\n\" &lt;&lt; u.transpose()*v &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"Here is u*v^T:\\n\" &lt;&lt; u*v.transpose() &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"Let's multiply mat by itself\" &lt;&lt; std::endl;\n  mat = mat*mat;\n  std::cout &lt;&lt; \"Now mat is mat:\\n\" &lt;&lt; mat &lt;&lt; std::endl;\n}\n</code></pre> <p>Note: <code>m = m*m</code> is safe as a special case. It equals: <code>tmp = m*m; m = tmp;</code> </p> <p>We can avoid this default copy if we are sure there is no aliasing problem by: <code>a.noalias() += b * c;</code></p>"},{"location":"vision/eigen/#dotcross-product-of-vectors","title":"Dot/Cross product of vectors","text":"<pre><code>int main()\n{\n  Vector3d v(1,2,3);\n  Vector3d w(0,1,2);\n\n  cout &lt;&lt; \"Dot product: \" &lt;&lt; v.dot(w) &lt;&lt; endl; // 8\n\n  double dp = v.transpose()*w; // automatic conversion of the inner product to a scalar\n  cout &lt;&lt; \"Dot product via a matrix product: \" &lt;&lt; dp &lt;&lt; endl;\n\n  cout &lt;&lt; \"Cross product:\\n\" &lt;&lt; v.cross(w) &lt;&lt; endl; // [1, -2, 1]\n}\n</code></pre>"},{"location":"vision/eigen/#norm-and-normalization-of-vectors","title":"norm and normalization of vectors","text":"<pre><code>int main() {\n    Vector3f v(1,2,3);\n    v.normalize(); // inplace\n    auto v2 = v.normalized();\n\n    float n = v.norm();\n    float n2 = v.squaredNorm(); // n^2\n}\n</code></pre>"},{"location":"vision/eigen/#basic-reductions","title":"Basic reductions","text":"<pre><code>int main()\n{\n  Eigen::Matrix2d mat;\n  mat &lt;&lt; 1, 2,\n         3, 4;\n  cout &lt;&lt; \"Here is mat.sum():       \" &lt;&lt; mat.sum()       &lt;&lt; endl;\n  cout &lt;&lt; \"Here is mat.prod():      \" &lt;&lt; mat.prod()      &lt;&lt; endl;\n  cout &lt;&lt; \"Here is mat.mean():      \" &lt;&lt; mat.mean()      &lt;&lt; endl;\n  cout &lt;&lt; \"Here is mat.minCoeff():  \" &lt;&lt; mat.minCoeff()  &lt;&lt; endl; // max element\n  cout &lt;&lt; \"Here is mat.maxCoeff():  \" &lt;&lt; mat.maxCoeff()  &lt;&lt; endl;\n  cout &lt;&lt; \"Here is mat.trace():     \" &lt;&lt; mat.trace()     &lt;&lt; endl;\n\n  // to return index of min/max element:\n  Matrix3f m = Matrix3f::Random();\n  std::ptrdiff_t i, j;\n  float minOfM = m.minCoeff(&amp;i,&amp;j);\n  cout &lt;&lt; \"Here is the matrix m:\\n\" &lt;&lt; m &lt;&lt; endl;\n  cout &lt;&lt; \"Its minimum coefficient (\" &lt;&lt; minOfM \n       &lt;&lt; \") is at position (\" &lt;&lt; i &lt;&lt; \",\" &lt;&lt; j &lt;&lt; \")\\n\\n\";\n\n  RowVector4i v = RowVector4i::Random();\n  int maxOfV = v.maxCoeff(&amp;i);\n  cout &lt;&lt; \"Here is the vector v: \" &lt;&lt; v &lt;&lt; endl;\n  cout &lt;&lt; \"Its maximum coefficient (\" &lt;&lt; maxOfV \n       &lt;&lt; \") is at position \" &lt;&lt; i &lt;&lt; endl;\n}\n</code></pre>"},{"location":"vision/eigen/#element-wise-mat-mul","title":"Element-wise Mat Mul:","text":"<p>Since <code>*</code> is overload by Mat Mul, we have to use <code>cwiseProduct</code> for coefficient-wise (element-wise) product,</p> <pre><code>Matrix3f a;\nMatrix3f b;\na.cwiseProduct(b);\n</code></pre>"},{"location":"vision/eigen/#array","title":"Array","text":"<p><code>Array</code> provides general-purposed arrays, while <code>Matrix</code> provides linear-algebra purposed arrays.</p> <p>The interface of <code>Array</code> are almost the same with <code>Matrix</code>, but all the operations are by default element-wise!</p> <p>Also, <code>Array</code> supports adding scalars, e.g., <code>a + 4</code>, while <code>Matrix</code> doesn't support.</p> <pre><code>int main()\n{\n  // element-wise mul\n  ArrayXXf a(2,2);\n  ArrayXXf b(2,2);\n  a &lt;&lt; 1,2,\n       3,4;\n  b &lt;&lt; 5,6,\n       7,8;\n  cout &lt;&lt; \"a * b = \" &lt;&lt; endl &lt;&lt; a * b &lt;&lt; endl;\n\n  // element-wise operations\n  ArrayXf a = ArrayXf::Random(5);\n  a += 2;\n  cout &lt;&lt; \"a =\" &lt;&lt; endl \n       &lt;&lt; a &lt;&lt; endl;\n  cout &lt;&lt; \"a.abs() =\" &lt;&lt; endl \n       &lt;&lt; a.abs() &lt;&lt; endl;\n  cout &lt;&lt; \"a.abs().sqrt() =\" &lt;&lt; endl \n       &lt;&lt; a.abs().sqrt() &lt;&lt; endl;\n  cout &lt;&lt; \"a.min(a.abs().sqrt()) =\" &lt;&lt; endl \n       &lt;&lt; a.min(a.abs().sqrt()) &lt;&lt; endl;\n}\n</code></pre> <p>Since array expressed both <code>Vector</code> and <code>Matrix</code>, the name convention is slightly different:</p> <ul> <li>for vector: <code>ArrayNt</code> == <code>Array&lt;type, N, 1&gt;</code></li> <li>for matrix: <code>ArrayNNt</code> == <code>Array&lt;type, N, N&gt;</code></li> </ul>"},{"location":"vision/eigen/#conversion-between-matrix-and-array","title":"Conversion between Matrix and Array","text":"<p>use <code>.array()</code> and <code>.matrix()</code>. </p> <p>Conversions will not copy! just proxies!</p> <pre><code>int main()\n{\n  MatrixXf m(2,2);\n  MatrixXf n(2,2);\n  MatrixXf result(2,2);\n\n  m &lt;&lt; 1,2,\n       3,4;\n  n &lt;&lt; 5,6,\n       7,8;\n\n  result = m * n;\n  cout &lt;&lt; \"-- Matrix m*n: --\" &lt;&lt; endl &lt;&lt; result &lt;&lt; endl &lt;&lt; endl;\n\n  result = m.array() * n.array();\n  cout &lt;&lt; \"-- Array m*n: --\" &lt;&lt; endl &lt;&lt; result &lt;&lt; endl &lt;&lt; endl;\n\n  result = m.cwiseProduct(n); // same as m.array() * n.array()\n  cout &lt;&lt; \"-- With cwiseProduct: --\" &lt;&lt; endl &lt;&lt; result &lt;&lt; endl &lt;&lt; endl;\n\n  result = (m.array() + 4).matrix() * m;\n  cout &lt;&lt; \"-- Combination 1: --\" &lt;&lt; endl &lt;&lt; result &lt;&lt; endl &lt;&lt; endl;\n\n  result = (m.array() * n.array()).matrix() * m;\n  cout &lt;&lt; \"-- Combination 2: --\" &lt;&lt; endl &lt;&lt; result &lt;&lt; endl &lt;&lt; endl;\n}\n</code></pre> <pre><code>int main() \n{\n  Matrix2f m;\n  m &lt;&lt; 0,0,0,0;\n  cout &lt;&lt; m &lt;&lt; endl; // 0,0,0,0\n  m.array() += 3;\n  cout &lt;&lt; m &lt;&lt; endl; // 3,3,3,3\n}\n</code></pre>"},{"location":"vision/eigen/#block-operations","title":"Block Operations","text":"<p>use <code>.block(i,j,p,q)</code> for dynamic-size block or <code>.block&lt;p,q&gt;(i,j)</code> for a fixed-size block, starting at <code>(i,j)</code> with size <code>(p,q)</code>.</p> <p>This block can be used for both l-value and r-value. </p> <pre><code>int main()\n{\n  Array22f m;\n  m &lt;&lt; 1,2,\n       3,4;\n  Array44f a = Array44f::Constant(0.6);\n  cout &lt;&lt; \"Here is the array a:\" &lt;&lt; endl &lt;&lt; a &lt;&lt; endl &lt;&lt; endl;\n  a.block&lt;2,2&gt;(1,1) = m;\n  cout &lt;&lt; \"Here is now a with m copied into its central 2x2 block:\" &lt;&lt; endl &lt;&lt; a &lt;&lt; endl &lt;&lt; endl;\n  a.block(0,0,2,3) = a.block(2,1,2,3);\n  cout &lt;&lt; \"Here is now a with bottom-right 2x3 block copied into top-left 2x3 block:\" &lt;&lt; endl &lt;&lt; a &lt;&lt; endl &lt;&lt; endl;\n}\n</code></pre>"},{"location":"vision/eigen/#special-case-only-one-row-or-col","title":"special case: only one row or col","text":"<p>Use <code>.row()</code> and <code>.col()</code> for optimized performance.</p> <pre><code>int main()\n{\n  Eigen::MatrixXf m(3,3);\n  m &lt;&lt; 1,2,3,\n       4,5,6,\n       7,8,9;\n  cout &lt;&lt; \"Here is the matrix m:\" &lt;&lt; endl &lt;&lt; m &lt;&lt; endl;\n  cout &lt;&lt; \"2nd Row: \" &lt;&lt; m.row(1) &lt;&lt; endl;\n  m.col(2) += 3 * m.col(0);\n  cout &lt;&lt; \"After adding 3 times the first column into the third column, the matrix m is:\\n\";\n  cout &lt;&lt; m &lt;&lt; endl;\n}\n</code></pre>"},{"location":"vision/eigen/#special-case-corner-centered-blocks","title":"special case: corner-centered blocks","text":"<p>Some short names. For example:</p> <pre><code>m.topLeftCorner(p, q) == m.block(0, 0, p, q)\nm.topLeftCorner&lt;p, q&gt;() == m.block&lt;p, q&gt;(0, 0)\n</code></pre> <p>Also have <code>bottemLeftCorner, topRightCorner, bottomRightCorner, topRows, bottomRows, leftCols, rightCols</code>.</p>"},{"location":"vision/eigen/#special-case-block-for-vectors","title":"special case: block for vectors","text":"<pre><code>v.head(n) == v.head&lt;n&gt;()\nv.tail(n) == v.tail&lt;n&gt;()\nv.segment(i, n) == v.segment&lt;n&gt;(i)\n</code></pre>"},{"location":"vision/eigen/#advanced-initializations","title":"Advanced Initializations","text":""},{"location":"vision/eigen/#joined-comma","title":"joined comma","text":"<pre><code>RowVectorXd vec1(3);\nvec1 &lt;&lt; 1, 2, 3;\n\nRowVectorXd vec2(4);\nvec2 &lt;&lt; 1, 4, 9, 16;\n\nRowVectorXd joined(7);\njoined &lt;&lt; vec1, vec2;\nstd::cout &lt;&lt; \"joined = \" &lt;&lt; joined &lt;&lt; std::endl;\n</code></pre>"},{"location":"vision/eigen/#special-matrices","title":"Special matrices","text":"<pre><code>// zero matrices\nMatrixXd::Zero(3, 3);\n\n// identity matrices\nMatrixXd::Identity(5, 5); \n\n// constant matrices\nMatrixXd::Constant(3, 4, 1.2);\n\n// linspace\nArrayXXf table(10, 4);\ntable.col(0) = ArrayXf::LinSpaced(10, 0, 90);\ntable.col(1) = M_PI / 180 * table.col(0);\ntable.col(2) = table.col(1).sin();\ntable.col(3) = table.col(1).cos();\nstd::cout &lt;&lt; \"  Degrees   Radians      Sine    Cosine\\n\";\nstd::cout &lt;&lt; table &lt;&lt; std::endl;\n\n// identity matrices\nconst int size = 6;\nMatrixXd mat1(size, size);\nmat1.topLeftCorner(size/2, size/2)     = MatrixXd::Zero(size/2, size/2);\nmat1.topRightCorner(size/2, size/2)    = MatrixXd::Identity(size/2, size/2);\nmat1.bottomLeftCorner(size/2, size/2)  = MatrixXd::Identity(size/2, size/2);\nmat1.bottomRightCorner(size/2, size/2) = MatrixXd::Zero(size/2, size/2);\nstd::cout &lt;&lt; mat1 &lt;&lt; std::endl &lt;&lt; std::endl;\n\n// in-place version\nMatrixXd mat2(size, size);\nmat2.topLeftCorner(size/2, size/2).setZero();\nmat2.topRightCorner(size/2, size/2).setIdentity();\nmat2.bottomLeftCorner(size/2, size/2).setIdentity();\nmat2.bottomRightCorner(size/2, size/2).setZero();\nstd::cout &lt;&lt; mat2 &lt;&lt; std::endl &lt;&lt; std::endl;\n\n// comma version\nMatrixXd mat3(size, size);\nmat3 &lt;&lt; MatrixXd::Zero(size/2, size/2), MatrixXd::Identity(size/2, size/2),\n        MatrixXd::Identity(size/2, size/2), MatrixXd::Zero(size/2, size/2);\nstd::cout &lt;&lt; mat3 &lt;&lt; std::endl;\n\n// as a temporary objects\nMatrixXf mat = MatrixXf::Random(2, 3);\nmat = (MatrixXf(2,2) &lt;&lt; 0, 1, 1, 0).finished() * mat; // .finished() is a must!\n</code></pre>"},{"location":"vision/eigen/#reductions","title":"Reductions","text":""},{"location":"vision/eigen/#norm","title":"norm","text":"<pre><code>int main()\n{\n  VectorXf v(2);\n  MatrixXf m(2,2), n(2,2);\n  v &lt;&lt; -1,\n       2;\n  m &lt;&lt; 1,-2,\n       -3,4;\n\n  cout &lt;&lt; \"v.squaredNorm() = \" &lt;&lt; v.squaredNorm() &lt;&lt; endl;\n  cout &lt;&lt; \"v.norm() = \" &lt;&lt; v.norm() &lt;&lt; endl;\n  cout &lt;&lt; \"v.lpNorm&lt;1&gt;() = \" &lt;&lt; v.lpNorm&lt;1&gt;() &lt;&lt; endl;\n  cout &lt;&lt; \"v.lpNorm&lt;Infinity&gt;() = \" &lt;&lt; v.lpNorm&lt;Infinity&gt;() &lt;&lt; endl;\n\n  cout &lt;&lt; \"m.squaredNorm() = \" &lt;&lt; m.squaredNorm() &lt;&lt; endl;\n  cout &lt;&lt; \"m.norm() = \" &lt;&lt; m.norm() &lt;&lt; endl;\n  cout &lt;&lt; \"m.lpNorm&lt;1&gt;() = \" &lt;&lt; m.lpNorm&lt;1&gt;() &lt;&lt; endl;\n  cout &lt;&lt; \"m.lpNorm&lt;Infinity&gt;() = \" &lt;&lt; m.lpNorm&lt;Infinity&gt;() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"vision/eigen/#boolean","title":"boolean","text":"<pre><code>int main()\n{\n  ArrayXXf a(2,2);\n  a &lt;&lt; 1,2,\n       3,4;\n\n  cout &lt;&lt; \"(a &gt; 2).all()   = \" &lt;&lt; (a &gt; 2).all() &lt;&lt; endl;\n  cout &lt;&lt; \"(a &gt; 2).any()   = \" &lt;&lt; (a &gt; 2).any() &lt;&lt; endl;\n  cout &lt;&lt; \"(a &gt; 2).count() = \" &lt;&lt; (a &gt; 2).count() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"vision/eigen/#visitors","title":"visitors","text":"<p>to retrieve location of min/max reduction.</p> <pre><code>int main()\n{\n  Eigen::MatrixXf m(2,2);\n\n  m &lt;&lt; 1, 2,\n       3, 4;\n\n  //get location of maximum\n  MatrixXf::Index maxRow, maxCol;\n  float max = m.maxCoeff(&amp;maxRow, &amp;maxCol);\n\n  //get location of minimum\n  MatrixXf::Index minRow, minCol;\n  float min = m.minCoeff(&amp;minRow, &amp;minCol);\n\n  cout &lt;&lt; \"Max: \" &lt;&lt; max &lt;&lt;  \", at: \" &lt;&lt;\n     maxRow &lt;&lt; \",\" &lt;&lt; maxCol &lt;&lt; endl;\n  cout &lt;&lt; \"Min: \" &lt;&lt; min &lt;&lt; \", at: \" &lt;&lt;\n     minRow &lt;&lt; \",\" &lt;&lt; minCol &lt;&lt; endl;\n}\n</code></pre>"},{"location":"vision/eigen/#partial-reduction","title":"partial reduction","text":"<p>since we at most consider 2-dimensional arrays...</p> <pre><code>int main()\n{\n  Eigen::MatrixXf mat(2,4);\n  mat &lt;&lt; 1, 2, 6, 9,\n         3, 1, 7, 2;\n\n  std::cout &lt;&lt; \"Column's maximum: \" &lt;&lt; std::endl\n   &lt;&lt; mat.colwise().maxCoeff() &lt;&lt; std::endl; // a row vector\n\n  std::cout &lt;&lt; \"Row's maximum: \" &lt;&lt; std::endl\n   &lt;&lt; mat.rowwise().maxCoeff() &lt;&lt; std::endl; // a col vector   \n}\n</code></pre> <p>Also, <code>rowwise()</code> and <code>colwise()</code> support other reductions:</p> <pre><code>int main()\n{\n  MatrixXf mat(2,4);\n  mat &lt;&lt; 1, 2, 6, 9,\n         3, 1, 7, 2;\n\n  MatrixXf::Index   maxIndex;\n  float maxNorm = mat.colwise().sum().maxCoeff(&amp;maxIndex);\n\n  std::cout &lt;&lt; \"Maximum col-wise sum at position \" &lt;&lt; maxIndex &lt;&lt; std::endl;\n\n  std::cout &lt;&lt; \"The corresponding vector is: \" &lt;&lt; std::endl;\n  std::cout &lt;&lt; mat.col( maxIndex ) &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"And its sum is is: \" &lt;&lt; maxNorm &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"vision/eigen/#broadcast","title":"Broadcast","text":"<p>Element-wise broadcasts are achieved by <code>Array</code></p> <p>Col/Row-wise broadcasts are achieved by <code>colwise() / rowwise()</code>.</p> <pre><code>int main()\n{\n  Eigen::MatrixXf mat(2,4);\n  mat &lt;&lt; 1, 2, 6, 9,\n         3, 1, 7, 2;\n\n  Eigen::VectorXf v(2);         \n  v &lt;&lt; 0,\n       1;\n\n  //add v to each column of m\n  mat.colwise() += v;\n  std::cout &lt;&lt; mat &lt;&lt; std::endl;\n\n  Eigen::VectorXf v2(4);       \n  v2 &lt;&lt; 0,1,2,3;\n\n  //add v2 to each row of m\n  mat.rowwise() += v2.transpose();\n  std::cout &lt;&lt; mat &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"vision/eigen/#map-from-raw-data-to-eigen","title":"Map: from raw data to eigen","text":"<pre><code>float* data;\nMap&lt;const Vector3f&gt; pos(data, 3); // (pointer, size)\n</code></pre>"},{"location":"vision/eigen/#ref-generic-type-without-template","title":"Ref: generic type without template","text":"<pre><code>void fn(const Ref&lt;const MatrixXf&gt;&amp; a) {\n    // a can be MatrixXf or block of MatrixXf\n    // a is read only\n}\n\nvoid fn(Ref&lt;MatrixXf&gt; a) {\n    // a is writable\n}\n</code></pre>"},{"location":"vision/image_interpolation/","title":"Image Interpolation","text":""},{"location":"vision/image_interpolation/#interpolation-method","title":"Interpolation Method","text":""},{"location":"vision/image_interpolation/#align-corners","title":"Align Corners","text":"<p>https://zhuanlan.zhihu.com/p/87572724</p>"},{"location":"vision/image_interpolation/#up-sampling","title":"Up-sampling","text":""},{"location":"vision/image_interpolation/#down-sampling","title":"Down-sampling","text":"<pre><code>----- x -----\n[[ 0.  1.  2.  3.]\n [ 4.  5.  6.  7.]\n [ 8.  9. 10. 11.]\n [12. 13. 14. 15.]]\n----- cv2.resize(..., cv2.INTER_NEAREST) -----\n[[ 0.  2.]\n [ 8. 10.]]\n----- skimage.transform.resize(..., order=0, anti_aliasing=False) -----\n[[ 5.  7.]\n [13. 15.]]\n----- Image.resize(..., Image.NEAREST) -----\n[[ 5.  7.]\n [13. 15.]]\n----- F.interpolate(..., mode=\"nearest\") -----\n[[ 0.  2.]\n [ 8. 10.]]\n\n----- cv2.resize(..., cv2.INTER_LINEAR) -----\n[[ 2.5  4.5]\n [10.5 12.5]]\n----- skimage.transform.resize(..., order=1, anti_aliasing=False) -----\n[[ 2.5  4.5]\n [10.5 12.5]]\n----- Image.resize(..., Image.BILINEAR) -----\n[[ 3.5714288  5.142857 ]\n [ 9.857143  11.428572 ]]\n----- F.interpolate(..., mode=\"bilinear\", align_corners=False) -----\n[[ 2.5  4.5]\n [10.5 12.5]]\n----- F.interpolate(..., mode=\"bilinear\", align_corners=True) -----\n[[ 0.  3.]\n [12. 15.]]\n\n----- cv2.resize(..., cv2.INTER_CUBIC) -----\n[[ 2.03125  4.21875]\n [10.78125 12.96875]]\n----- skimage.transform.resize(..., order=3, anti_aliasing=False) -----\n[[ 1.875  4.125]\n [10.875 13.125]]\n----- Image.resize(..., Image.BICUBIC) -----\n[[ 2.9338841  4.7603307]\n [10.239669  12.066115 ]]\n----- F.interpolate(..., mode=\"bicubic\", align_corners=False) -----\n[[ 2.03125  4.21875]\n [10.78125 12.96875]]\n----- F.interpolate(..., mode=\"bicubic\", align_corners=True) -----\n[[ 0.  3.]\n [12. 15.]]\n</code></pre>"},{"location":"vision/image_interpolation/#pil-resize-problem","title":"PIL resize problem","text":"<p><code>PIL.resize</code> behaves differently compared to <code>cv2.resize</code>.</p> <p>https://github.com/python-pillow/Pillow/issues/2718</p>"},{"location":"vision/image_processing/","title":"Image Processing Basics","text":""},{"location":"vision/image_processing/#hsv","title":"HSV","text":"<p>Hue(360), Saturation(1), Value(1)</p> <pre><code> BGR -&gt; HSV\ndef BGR2HSV(_img):\n    img = _img.copy() / 255.\n\n    hsv = np.zeros_like(img, dtype=np.float32)\n\n    # get max and min\n    max_v = np.max(img, axis=2).copy()\n    min_v = np.min(img, axis=2).copy()\n    min_arg = np.argmin(img, axis=2)\n\n    # H\n    hsv[..., 0][np.where(max_v == min_v)]= 0\n    ## if min == B\n    ind = np.where(min_arg == 0)\n    hsv[..., 0][ind] = 60 * (img[..., 1][ind] - img[..., 2][ind]) / (max_v[ind] - min_v[ind]) + 60\n    ## if min == R\n    ind = np.where(min_arg == 2)\n    hsv[..., 0][ind] = 60 * (img[..., 0][ind] - img[..., 1][ind]) / (max_v[ind] - min_v[ind]) + 180\n    ## if min == G\n    ind = np.where(min_arg == 1)\n    hsv[..., 0][ind] = 60 * (img[..., 2][ind] - img[..., 0][ind]) / (max_v[ind] - min_v[ind]) + 300\n\n    # S\n    hsv[..., 1] = max_v.copy() - min_v.copy()\n\n    # V\n    hsv[..., 2] = max_v.copy()\n\n    return hsv\n\n\ndef HSV2BGR(_img, hsv):\n    img = _img.copy() / 255.\n\n    # get max and min\n    max_v = np.max(img, axis=2).copy()\n    min_v = np.min(img, axis=2).copy()\n\n    out = np.zeros_like(img)\n\n    H = hsv[..., 0]\n    S = hsv[..., 1]\n    V = hsv[..., 2]\n\n    C = S\n    H_ = H / 60.\n    X = C * (1 - np.abs( H_ % 2 - 1))\n    Z = np.zeros_like(H)\n\n    vals = [[Z,X,C], [Z,C,X], [X,C,Z], [C,X,Z], [C,Z,X], [X,Z,C]]\n\n    for i in range(6):\n        ind = np.where((i &lt;= H_) &amp; (H_ &lt; (i+1)))\n        out[..., 0][ind] = (V - C)[ind] + vals[i][0][ind]\n        out[..., 1][ind] = (V - C)[ind] + vals[i][1][ind]\n        out[..., 2][ind] = (V - C)[ind] + vals[i][2][ind]\n\n    out[np.where(max_v == min_v)] = 0\n    out = np.clip(out, 0, 1)\n    out = (out * 255).astype(np.uint8)\n\n    return out\n</code></pre>"},{"location":"vision/image_processing/#histogram","title":"Histogram","text":"<pre><code>plt.hist(img.ravel(), bins=255, rwidth=0.8, range=(0, 255))\n</code></pre>"},{"location":"vision/image_processing/#gamma-correction","title":"Gamma Correction","text":"\\[ \\displaylines{ I_{out} ={\\frac{1}{c}\\ I_{in}} ^ {\\frac{1}{g}} } \\] <p>\u6821\u6b63\u7167\u76f8\u673a\u7b49\u7535\u5b50\u8bbe\u5907\u4f20\u611f\u5668\u7684\u975e\u7ebf\u6027\u5149\u7535\u8f6c\u6362\u7279\u5f81\uff0c\u4e3b\u8981\u662f\u589e\u5927RGB\u503c\u3002</p> <pre><code>def gamma_correction(img, c=1, g=2.2):\n    out = img.copy()\n    out /= 255.\n    out = (1/c * out) ** (1/g)\n\n    out *= 255\n    out = out.astype(np.uint8)\n\n    return out\n</code></pre>"},{"location":"vision/image_processing/#interpolation","title":"Interpolation","text":"<ul> <li> <p>Nearest Neighbor</p> <pre><code>def nn_interpolate(img, ax=1, ay=1):\n    H, W, C = img.shape\n\n    aH = int(H*ay)\n    aW = int(W*ax)\n\n  y = np.arange(aH).repeat(aW).reshape(aW, -1)\n    x = np.tile(np.arange(aW), (aH, 1))\n\n    y = np.round(y / ay).astype(np.int32)\n    x = np.round(x / ax).astype(np.int32)\n\n    out = img[y, x].astype(np.uint8)\n\n    return out\n</code></pre> </li> </ul> <ul> <li> <p>Bilinear</p> <pre><code>def bl_interpolate(img, ax=1., ay=1.):\n  H, W, C = img.shape\n\n  aH = int(ay * H)\n  aW = int(ax * W)\n\n  # get position of resized image\n  y = np.arange(aH).repeat(aW).reshape(aW, -1)\n  x = np.tile(np.arange(aW), (aH, 1))\n\n  # get position of original position\n  y = (y / ay)\n  x = (x / ax)\n\n  ix = np.floor(x).astype(np.int)\n  iy = np.floor(y).astype(np.int)\n\n  ix = np.minimum(ix, W-2)\n  iy = np.minimum(iy, H-2)\n\n  # get distance \n  dx = x - ix\n  dy = y - iy\n\n  dx = np.repeat(np.expand_dims(dx, axis=-1), 3, axis=-1)\n  dy = np.repeat(np.expand_dims(dy, axis=-1), 3, axis=-1)\n\n  # interpolation\n  out = (1-dx) * (1-dy) * img[iy, ix] + \n        dx * (1 - dy) * img[iy, ix+1] + \n          (1 - dx) * dy * img[iy+1, ix] + \n          dx * dy * img[iy+1, ix+1]\n\n  out = np.clip(out, 0, 255)\n  out = out.astype(np.uint8)\n\n  return out\n</code></pre> </li> </ul> <ul> <li> <p>Bicubic</p> <pre><code>def bc_interpolate(img, ax=1., ay=1.):\n  H, W, C = img.shape\n\n  aH = int(ay * H)\n  aW = int(ax * W)\n\n  # get positions of resized image\n  y = np.arange(aH).repeat(aW).reshape(aW, -1)\n  x = np.tile(np.arange(aW), (aH, 1))\n  y = (y / ay)\n  x = (x / ax)\n\n  # get positions of original image\n  ix = np.floor(x).astype(np.int)\n  iy = np.floor(y).astype(np.int)\n\n  ix = np.minimum(ix, W-1)\n  iy = np.minimum(iy, H-1)\n\n  # get distance of each position of original image\n  dx2 = x - ix\n  dy2 = y - iy\n  dx1 = dx2 + 1\n  dy1 = dy2 + 1\n  dx3 = 1 - dx2\n  dy3 = 1 - dy2\n  dx4 = 1 + dx3\n  dy4 = 1 + dy3\n\n  dxs = [dx1, dx2, dx3, dx4]\n  dys = [dy1, dy2, dy3, dy4]\n\n  # bi-cubic weight\n  def weight(t):\n      a = -1.\n      at = np.abs(t)\n      w = np.zeros_like(t)\n      ind = np.where(at &lt;= 1)\n      w[ind] = ((a+2) * np.power(at, 3) - (a+3) * np.power(at, 2) + 1)[ind]\n      ind = np.where((at &gt; 1) &amp; (at &lt;= 2))\n      w[ind] = (a*np.power(at, 3) - 5*a*np.power(at, 2) + 8*a*at - 4*a)[ind]\n      return w\n\n  w_sum = np.zeros((aH, aW, C), dtype=np.float32)\n  out = np.zeros((aH, aW, C), dtype=np.float32)\n\n  # interpolate\n  for j in range(-1, 3):\n      for i in range(-1, 3):\n          ind_x = np.minimum(np.maximum(ix + i, 0), W-1)\n          ind_y = np.minimum(np.maximum(iy + j, 0), H-1)\n\n          wx = weight(dxs[i+1])\n          wy = weight(dys[j+1])\n          wx = np.repeat(np.expand_dims(wx, axis=-1), 3, axis=-1)\n          wy = np.repeat(np.expand_dims(wy, axis=-1), 3, axis=-1)\n\n          w_sum += wx * wy\n          out += wx * wy * img[ind_y, ind_x]\n\n  out /= w_sum\n  out = np.clip(out, 0, 255)\n  out = out.astype(np.uint8)\n\n  return out\n</code></pre> </li> </ul>"},{"location":"vision/image_processing/#affine-transform","title":"Affine Transform","text":"\\[ \\displaylines{ \\left( \\begin{matrix} x'\\\\ y'\\\\ 1 \\end{matrix} \\right)= \\left( \\begin{matrix} a&amp;b&amp;t_x\\\\ c&amp;d&amp;t_y\\\\ 0&amp;0&amp;1 \\end{matrix} \\right)\\  \\left( \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right) \\\\ \\left( \\begin{matrix} x\\\\ y \\end{matrix} \\right)= \\frac{1}{a\\  d-b\\  c}\\  \\left( \\begin{matrix} d&amp;-b\\\\ -c&amp;a \\end{matrix} \\right)\\   \\left( \\begin{matrix} x'\\\\ y' \\end{matrix} \\right)- \\left( \\begin{matrix} t_x\\\\ t_y \\end{matrix} \\right) } \\] <pre><code>def affine(img, a, b, c, d, tx, ty):\n    H, W, C = img.shape\n\n    # temporary image\n    img = np.zeros((H+2, W+2, C), dtype=np.float32)\n    img[1:H+1, 1:W+1] = _img\n\n    # get new image shape\n    H_new = np.round(H * d).astype(np.int)\n    W_new = np.round(W * a).astype(np.int)\n    out = np.zeros((H_new+1, W_new+1, C), dtype=np.float32)\n\n    # get position of new image\n    x_new = np.tile(np.arange(W_new), (H_new, 1))\n    y_new = np.arange(H_new).repeat(W_new).reshape(H_new, -1)\n\n    # get position of original image by reverse-affine\n    adbc = a * d - b * c\n    x = np.round((d * x_new  - b * y_new) / adbc).astype(np.int) - tx + 1\n    y = np.round((-c * x_new + a * y_new) / adbc).astype(np.int) - ty + 1\n\n    x = np.minimum(np.maximum(x, 0), W+1).astype(np.int)\n    y = np.minimum(np.maximum(y, 0), H+1).astype(np.int)\n\n    # assgin pixel to new image\n    out[y_new, x_new] = img[y, x]\n\n    out = out[:H_new, :W_new]\n    out = out.astype(np.uint8)\n\n    return out\n</code></pre> <ul> <li>Shift</li> </ul> \\[ \\displaylines{   \\left(   \\begin{matrix}   x'\\\\   y'\\\\   1   \\end{matrix}   \\right)=   \\left(   \\begin{matrix}   1&amp;0&amp;t_x\\\\   0&amp;1&amp;t_y\\\\   0&amp;0&amp;1   \\end{matrix}   \\right)\\     \\left(   \\begin{matrix}   x\\\\   y\\\\   1   \\end{matrix}   \\right) } \\] <ul> <li>Resize</li> </ul> \\[ \\displaylines{   \\left(   \\begin{matrix}   x'\\\\   y'\\\\   1   \\end{matrix}   \\right)=   \\left(   \\begin{matrix}   ax&amp;0&amp;t_x\\\\   0&amp;ay&amp;t_y\\\\   0&amp;0&amp;1   \\end{matrix}   \\right)\\     \\left(   \\begin{matrix}   x\\\\   y\\\\   1   \\end{matrix}   \\right) } \\] <ul> <li>Rotate</li> </ul> \\[ \\displaylines{   \\left(   \\begin{matrix}   x'\\\\   y'\\\\   1   \\end{matrix}   \\right)=   \\left(   \\begin{matrix}   \\cos(A)&amp;-\\sin(A)&amp;t_x\\\\   \\sin(A)&amp;\\cos(A)&amp;t_y\\\\   0&amp;0&amp;1   \\end{matrix}   \\right)\\    \\left(   \\begin{matrix}   x\\\\   y\\\\   1   \\end{matrix}   \\right) } \\] <ul> <li>Sharing</li> </ul> \\[ \\displaylines{   a=\\frac{t_x}{h}\\\\     \\left[     \\begin{matrix}     x'\\\\     y'\\\\     1     \\end{matrix}     \\right]=\\left[     \\begin{matrix}     1&amp;a&amp;t_x\\\\     0&amp;1&amp;t_y\\\\     0&amp;0&amp;1     \\end{matrix}     \\right]\\      \\left[     \\begin{matrix}     x\\\\     y\\\\     1     \\end{matrix}     \\right]   \\\\     a=\\frac{t_y}{w}\\\\     \\left[     \\begin{matrix}     x'\\\\     y'\\\\     1     \\end{matrix}     \\right]=\\left[     \\begin{matrix}     1&amp;0&amp;t_x\\\\     a&amp;1&amp;t_y\\\\     0&amp;0&amp;1     \\end{matrix}     \\right]\\      \\left[     \\begin{matrix}     x\\\\     y\\\\     1     \\end{matrix}     \\right] } \\]"},{"location":"vision/image_processing/#fourier-transform","title":"Fourier Transform","text":"\\[ \\displaylines{ G(k,l)=\\frac{1}{H\\  W}\\ \\sum\\limits_{y=0}^{H-1}\\ \\sum\\limits_{x=0}^{W-1}\\ I(x,y)\\ e^{-2\\  \\pi\\  j\\ (\\frac{k\\  x}{W}+\\frac{l\\  y}{H})} \\\\ I(x,y)=\\frac{1}{H\\  W}\\ \\sum\\limits_{l=0}^{H-1}\\ \\sum\\limits_{k=0}^{W-1}\\ G(l,k)\\ e^{2\\  \\pi\\  j\\ (\\frac{k\\  x}{W}+\\frac{l\\  y}{H})} } \\] <pre><code># DFT hyper-parameters\nK, L = 128, 128\nchannel = 3\n\n# DFT\ndef dft(img):\n    H, W, _ = img.shape\n\n    # Prepare DFT coefficient\n    G = np.zeros((L, K, channel), dtype=np.complex)\n\n    # prepare processed index corresponding to original image positions\n    x = np.tile(np.arange(W), (H, 1))\n    y = np.arange(H).repeat(W).reshape(H, -1)\n\n    # dft\n    for c in range(channel):\n        for l in range(L):\n            for k in range(K):\n                G[l, k, c] = np.sum(img[..., c] * np.exp(-2j * np.pi * (x * k / K + y * l / L))) / np.sqrt(K * L)\n\n    return G\n\n# IDFT\ndef idft(G):\n    # prepare out image\n    H, W, _ = G.shape\n    out = np.zeros((H, W, channel), dtype=np.float32)\n\n    # prepare processed index corresponding to original image positions\n    x = np.tile(np.arange(W), (H, 1))\n    y = np.arange(H).repeat(W).reshape(H, -1)\n\n    # idft\n    for c in range(channel):\n        for l in range(H):\n            for k in range(W):\n                out[l, k, c] = np.abs(np.sum(G[..., c] * np.exp(2j * np.pi * (x * k / W + y * l / H)))) / np.sqrt(W * H)\n\n    # clipping\n    out = np.clip(out, 0, 255)\n    out = out.astype(np.uint8)\n\n    return out\n</code></pre> <p>\u5728\u56fe\u50cf\u4e2d\uff0c\u9ad8\u9891\u6210\u5206\u6307\u7684\u662f\u989c\u8272\u6539\u53d8\u7684\u5730\u65b9\uff08\u566a\u58f0\u6216\u8005\u8f6e\u5ed3\u7b49\uff09\uff0c\u4f4e\u9891\u6210\u5206\u6307\u7684\u662f\u989c\u8272\u4e0d\u600e\u4e48\u6539\u53d8\u7684\u90e8 \u5206\uff08\u6bd4\u5982\u843d\u65e5\u7684\u6e10\u53d8\uff09\u3002</p> <ul> <li> <p>Low-pass</p> <pre><code># LPF\ndef lpf(G, ratio=0.5):\n  H, W, _ = G.shape   \n\n  # transfer positions\n  _G = np.zeros_like(G)\n  _G[:H//2, :W//2] = G[H//2:, W//2:]\n  _G[:H//2, W//2:] = G[H//2:, :W//2]\n  _G[H//2:, :W//2] = G[:H//2, W//2:]\n  _G[H//2:, W//2:] = G[:H//2, :W//2]\n\n  # get distance from center (H / 2, W / 2)\n  x = np.tile(np.arange(W), (H, 1))\n  y = np.arange(H).repeat(W).reshape(H, -1)\n\n  # make filter\n  _x = x - W // 2\n  _y = y - H // 2\n  r = np.sqrt(_x ** 2 + _y ** 2)\n  mask = np.ones((H, W), dtype=np.float32)\n  mask[r &gt; (W // 2 * ratio)] = 0\n\n  mask = np.repeat(mask, channel).reshape(H, W, channel)\n\n  # filtering\n  _G *= mask\n\n  # reverse original positions\n  G[:H//2, :W//2] = _G[H//2:, W//2:]\n  G[:H//2, W//2:] = _G[H//2:, :W//2]\n  G[H//2:, :W//2] = _G[:H//2, W//2:]\n  G[H//2:, W//2:] = _G[:H//2, :W//2]\n\n  return G\n</code></pre> </li> </ul> <ul> <li> <p>High-pass</p> <pre><code># HPF\ndef hpf(G, ratio=0.1):\n  H, W, _ = G.shape   \n\n  # transfer positions\n  _G = np.zeros_like(G)\n  _G[:H//2, :W//2] = G[H//2:, W//2:]\n  _G[:H//2, W//2:] = G[H//2:, :W//2]\n  _G[H//2:, :W//2] = G[:H//2, W//2:]\n  _G[H//2:, W//2:] = G[:H//2, :W//2]\n\n  # get distance from center (H / 2, W / 2)\n  x = np.tile(np.arange(W), (H, 1))\n  y = np.arange(H).repeat(W).reshape(H, -1)\n\n  # make filter\n  _x = x - W // 2\n  _y = y - H // 2\n  r = np.sqrt(_x ** 2 + _y ** 2)\n  mask = np.ones((H, W), dtype=np.float32)\n  mask[r &lt; (W // 2 * ratio)] = 0\n\n  mask = np.repeat(mask, channel).reshape(H, W, channel)\n\n  # filtering\n  _G *= mask\n\n  # reverse original positions\n  G[:H//2, :W//2] = _G[H//2:, W//2:]\n  G[:H//2, W//2:] = _G[H//2:, :W//2]\n  G[H//2:, :W//2] = _G[:H//2, W//2:]\n  G[H//2:, W//2:] = _G[:H//2, :W//2]\n\n  return G\n</code></pre> </li> </ul> <ul> <li> <p>Band-pass</p> <pre><code># BPF\ndef bpf(G, ratio1=0.1, ratio2=0.5):\n  H, W, _ = G.shape   \n\n  # transfer positions\n  _G = np.zeros_like(G)\n  _G[:H//2, :W//2] = G[H//2:, W//2:]\n  _G[:H//2, W//2:] = G[H//2:, :W//2]\n  _G[H//2:, :W//2] = G[:H//2, W//2:]\n  _G[H//2:, W//2:] = G[:H//2, :W//2]\n\n  # get distance from center (H / 2, W / 2)\n  x = np.tile(np.arange(W), (H, 1))\n  y = np.arange(H).repeat(W).reshape(H, -1)\n\n  # make filter\n  _x = x - W // 2\n  _y = y - H // 2\n  r = np.sqrt(_x ** 2 + _y ** 2)\n  mask = np.ones((H, W), dtype=np.float32)\n  mask[(r &lt; (W // 2 * ratio1)) | (r &gt; (W // 2 * ratio2))] = 0\n\n  mask = np.repeat(mask, channel).reshape(H, W, channel)\n\n  # filtering\n  _G *= mask\n\n  # reverse original positions\n  G[:H//2, :W//2] = _G[H//2:, W//2:]\n  G[:H//2, W//2:] = _G[H//2:, :W//2]\n  G[H//2:, :W//2] = _G[:H//2, W//2:]\n  G[H//2:, W//2:] = _G[:H//2, :W//2]\n\n  return G\n</code></pre> </li> </ul>"},{"location":"vision/image_processing/#jpeg-compression","title":"JPEG Compression","text":"<ol> <li>\u5c06\u56fe\u50cf\u4eceRGB\u8272\u5f69\u7a7a\u95f4\u53d8\u6362\u5230YCbCr\u8272\u5f69\u7a7a\u95f4\uff1b</li> <li>\u5bf9YCbCr\u505aDCT\uff1b</li> <li>DCT\u4e4b\u540e\u505a\u91cf\u5316\uff1b</li> <li>\u91cf\u5316\u4e4b\u540e\u5e94\u7528IDCT\uff1b</li> <li>IDCT\u4e4b\u540e\u4eceYCbCr\u8272\u5f69\u7a7a\u95f4\u53d8\u6362\u5230RGB\u8272\u5f69\u7a7a\u95f4\u3002</li> </ol> <pre><code>T = 8\nK = 8\nchannel = 3\n\n\n# BGR -&gt; Y Cb Cr\ndef BGR2YCbCr(img):\n  H, W, _ = img.shape\n\n  ycbcr = np.zeros([H, W, 3], dtype=np.float32)\n\n  ycbcr[..., 0] = 0.2990 * img[..., 2] + 0.5870 * img[..., 1] + 0.1140 * img[..., 0]\n  ycbcr[..., 1] = -0.1687 * img[..., 2] - 0.3313 * img[..., 1] + 0.5 * img[..., 0] + 128.\n  ycbcr[..., 2] = 0.5 * img[..., 2] - 0.4187 * img[..., 1] - 0.0813 * img[..., 0] + 128.\n\n  return ycbcr\n\n# Y Cb Cr -&gt; BGR\ndef YCbCr2BGR(ycbcr):\n  H, W, _ = ycbcr.shape\n\n  out = np.zeros([H, W, channel], dtype=np.float32)\n  out[..., 2] = ycbcr[..., 0] + (ycbcr[..., 2] - 128.) * 1.4020\n  out[..., 1] = ycbcr[..., 0] - (ycbcr[..., 1] - 128.) * 0.3441 - (ycbcr[..., 2] - 128.) * 0.7139\n  out[..., 0] = ycbcr[..., 0] + (ycbcr[..., 1] - 128.) * 1.7718\n\n  out = np.clip(out, 0, 255)\n  out = out.astype(np.uint8)\n\n  return out\n\n\n# DCT weight\ndef DCT_w(x, y, u, v):\n    cu = 1.\n    cv = 1.\n    if u == 0:\n        cu /= np.sqrt(2)\n    if v == 0:\n        cv /= np.sqrt(2)\n    theta = np.pi / (2 * T)\n    return (( 2 * cu * cv / T) * np.cos((2*x+1)*u*theta) * np.cos((2*y+1)*v*theta))\n\n# DCT\ndef dct(img):\n    H, W, _ = img.shape\n\n    F = np.zeros((H, W, channel), dtype=np.float32)\n\n    for c in range(channel):\n        for yi in range(0, H, T):\n            for xi in range(0, W, T):\n                for v in range(T):\n                    for u in range(T):\n                        for y in range(T):\n                            for x in range(T):\n                                F[v+yi, u+xi, c] += img[y+yi, x+xi, c] * DCT_w(x,y,u,v)\n\n    return F\n\n\n# IDCT\ndef idct(F):\n    H, W, _ = F.shape\n\n    out = np.zeros((H, W, channel), dtype=np.float32)\n\n    for c in range(channel):\n        for yi in range(0, H, T):\n            for xi in range(0, W, T):\n                for y in range(T):\n                    for x in range(T):\n                        for v in range(K):\n                            for u in range(K):\n                                out[y+yi, x+xi, c] += F[v+yi, u+xi, c] * DCT_w(x,y,u,v)\n\n    out = np.clip(out, 0, 255)\n    out = np.round(out).astype(np.uint8)\n\n    return out\n\n# Quantization\ndef quantization(F):\n    H, W, _ = F.shape\n\n    Q = np.array(((16, 11, 10, 16, 24, 40, 51, 61),\n                (12, 12, 14, 19, 26, 58, 60, 55),\n                (14, 13, 16, 24, 40, 57, 69, 56),\n                (14, 17, 22, 29, 51, 87, 80, 62),\n                (18, 22, 37, 56, 68, 109, 103, 77),\n                (24, 35, 55, 64, 81, 104, 113, 92),\n                (49, 64, 78, 87, 103, 121, 120, 101),\n                (72, 92, 95, 98, 112, 100, 103, 99)), dtype=np.float32)\n\n    for ys in range(0, H, T):\n        for xs in range(0, W, T):\n            for c in range(channel):\n                F[ys: ys + T, xs: xs + T, c] =  np.round(F[ys: ys + T, xs: xs + T, c] / Q) * Q\n\n    return F\n\n\n# JPEG without Hufman coding\ndef JPEG(img):\n    ycbcr = BGR2YCbCr(img) # BGR -&gt; Y Cb Cr\n    F = dct(ycbcr) # DCT\n    F = quantization(F) # quantization\n    ycbcr = idct(F) # IDCT\n    out = YCbCr2BGR(ycbcr) # Y Cb Cr -&gt; BGR\n\n    return out\n</code></pre>"},{"location":"vision/image_processing/#canny-edge-detector","title":"Canny Edge Detector","text":"<pre><code>def Canny(img):\n\n    # Gray scale\n    def BGR2GRAY(img):\n        b = img[:, :, 0].copy()\n        g = img[:, :, 1].copy()\n        r = img[:, :, 2].copy()\n\n        # Gray scale\n        out = 0.2126 * r + 0.7152 * g + 0.0722 * b\n        out = out.astype(np.uint8)\n\n        return out\n\n\n    # Gaussian filter for grayscale\n    def gaussian_filter(img, K_size=3, sigma=1.3):\n\n        if len(img.shape) == 3:\n            H, W, C = img.shape\n            gray = False\n        else:\n            img = np.expand_dims(img, axis=-1)\n            H, W, C = img.shape\n            gray = True\n\n        ## Zero padding\n        pad = K_size // 2\n        out = np.zeros([H + pad * 2, W + pad * 2, C], dtype=np.float)\n        out[pad : pad + H, pad : pad + W] = img.copy().astype(np.float)\n\n        ## prepare Kernel\n        K = np.zeros((K_size, K_size), dtype=np.float)\n        for x in range(-pad, -pad + K_size):\n            for y in range(-pad, -pad + K_size):\n                K[y + pad, x + pad] = np.exp( - (x ** 2 + y ** 2) / (2 * sigma * sigma))\n        #K /= (sigma * np.sqrt(2 * np.pi))\n        K /= (2 * np.pi * sigma * sigma)\n        K /= K.sum()\n\n        tmp = out.copy()\n\n        # filtering\n        for y in range(H):\n            for x in range(W):\n                for c in range(C):\n                    out[pad + y, pad + x, c] = np.sum(K * tmp[y : y + K_size, x : x + K_size, c])\n\n        out = np.clip(out, 0, 255)\n        out = out[pad : pad + H, pad : pad + W]\n        out = out.astype(np.uint8)\n\n        if gray:\n            out = out[..., 0]\n\n        return out\n\n\n    # sobel filter\n    def sobel_filter(img, K_size=3):\n        if len(img.shape) == 3:\n            H, W, C = img.shape\n        else:\n            H, W = img.shape\n\n        # Zero padding\n        pad = K_size // 2\n        out = np.zeros((H + pad * 2, W + pad * 2), dtype=np.float)\n        out[pad : pad + H, pad : pad + W] = img.copy().astype(np.float)\n        tmp = out.copy()\n\n        out_v = out.copy()\n        out_h = out.copy()\n\n        ## Sobel vertical\n        Kv = [[1., 2., 1.],[0., 0., 0.], [-1., -2., -1.]]\n        ## Sobel horizontal\n        Kh = [[1., 0., -1.],[2., 0., -2.],[1., 0., -1.]]\n\n        # filtering\n        for y in range(H):\n            for x in range(W):\n                out_v[pad + y, pad + x] = np.sum(Kv * (tmp[y : y + K_size, x : x + K_size]))\n                out_h[pad + y, pad + x] = np.sum(Kh * (tmp[y : y + K_size, x : x + K_size]))\n\n        out_v = np.clip(out_v, 0, 255)\n        out_h = np.clip(out_h, 0, 255)\n\n        out_v = out_v[pad : pad + H, pad : pad + W]\n        out_v = out_v.astype(np.uint8)\n        out_h = out_h[pad : pad + H, pad : pad + W]\n        out_h = out_h.astype(np.uint8)\n\n        return out_v, out_h\n\n\n    def get_edge_angle(fx, fy):\n        # get edge strength\n        edge = np.sqrt(np.power(fx.astype(np.float32), 2) + np.power(fy.astype(np.float32), 2))\n        edge = np.clip(edge, 0, 255)\n\n        fx = np.maximum(fx, 1e-10)\n        #fx[np.abs(fx) &lt;= 1e-5] = 1e-5\n\n        # get edge angle\n        angle = np.arctan(fy / fx)\n\n        return edge, angle\n\n\n    def angle_quantization(angle):\n        angle = angle / np.pi * 180\n        angle[angle &lt; -22.5] = 180 + angle[angle &lt; -22.5]\n        _angle = np.zeros_like(angle, dtype=np.uint8)\n        _angle[np.where(angle &lt;= 22.5)] = 0\n        _angle[np.where((angle &gt; 22.5) &amp; (angle &lt;= 67.5))] = 45\n        _angle[np.where((angle &gt; 67.5) &amp; (angle &lt;= 112.5))] = 90\n        _angle[np.where((angle &gt; 112.5) &amp; (angle &lt;= 157.5))] = 135\n\n        return _angle\n\n\n    def non_maximum_suppression(angle, edge):\n        H, W = angle.shape\n        _edge = edge.copy()\n\n        for y in range(H):\n            for x in range(W):\n                    if angle[y, x] == 0:\n                            dx1, dy1, dx2, dy2 = -1, 0, 1, 0\n                    elif angle[y, x] == 45:\n                            dx1, dy1, dx2, dy2 = -1, 1, 1, -1\n                    elif angle[y, x] == 90:\n                            dx1, dy1, dx2, dy2 = 0, -1, 0, 1\n                    elif angle[y, x] == 135:\n                            dx1, dy1, dx2, dy2 = -1, -1, 1, 1\n                    if x == 0:\n                            dx1 = max(dx1, 0)\n                            dx2 = max(dx2, 0)\n                    if x == W-1:\n                            dx1 = min(dx1, 0)\n                            dx2 = min(dx2, 0)\n                    if y == 0:\n                            dy1 = max(dy1, 0)\n                            dy2 = max(dy2, 0)\n                    if y == H-1:\n                            dy1 = min(dy1, 0)\n                            dy2 = min(dy2, 0)\n                    if max(max(edge[y, x], edge[y + dy1, x + dx1]), edge[y + dy2, x + dx2]) != edge[y, x]:\n                            _edge[y, x] = 0\n\n        return _edge\n\n    def hysterisis(edge, HT=100, LT=30):\n        H, W = edge.shape\n\n        # Histeresis threshold\n        edge[edge &gt;= HT] = 255\n        edge[edge &lt;= LT] = 0\n\n        _edge = np.zeros((H + 2, W + 2), dtype=np.float32)\n        _edge[1 : H + 1, 1 : W + 1] = edge\n\n        ## 8 - Nearest neighbor\n        nn = np.array(((1., 1., 1.), (1., 0., 1.), (1., 1., 1.)), dtype=np.float32)\n\n        for y in range(1, H+2):\n                for x in range(1, W+2):\n                        if _edge[y, x] &lt; LT or _edge[y, x] &gt; HT:\n                                continue\n                        if np.max(_edge[y-1:y+2, x-1:x+2] * nn) &gt;= HT:\n                                _edge[y, x] = 255\n                        else:\n                                _edge[y, x] = 0\n\n        edge = _edge[1:H+1, 1:W+1]\n\n        return edge\n\n    # grayscale\n    gray = BGR2GRAY(img)\n    # gaussian filtering\n    gaussian = gaussian_filter(gray, K_size=5, sigma=1.4)\n    # sobel filtering\n    fy, fx = sobel_filter(gaussian, K_size=3)\n    # get edge strength, angle\n    edge, angle = get_edge_angle(fx, fy)\n    # angle quantization\n    angle = angle_quantization(angle)\n    # non maximum suppression\n    edge = non_maximum_suppression(angle, edge)\n    # hysterisis threshold\n    out = hysterisis(edge, 50, 20)\n\n    return out\n</code></pre>"},{"location":"vision/image_processing/#hough-transform-line-detection","title":"Hough Transform (Line detection)","text":"<pre><code>def Hough_Line(edge, img):\n    ## Voting\n    def voting(edge):\n        H, W = edge.shape\n\n        drho = 1\n        dtheta = 1\n\n        # get rho max length\n        rho_max = np.ceil(np.sqrt(H ** 2 + W ** 2)).astype(np.int)\n\n        # hough table\n        hough = np.zeros((rho_max * 2, 180), dtype=np.int)\n\n        # get index of edge\n        ind = np.where(edge == 255)\n\n        ## hough transformation\n        for y, x in zip(ind[0], ind[1]):\n                for theta in range(0, 180, dtheta):\n                        # get polar coordinat4s\n                        t = np.pi / 180 * theta\n                        rho = int(x * np.cos(t) + y * np.sin(t))\n\n                        # vote\n                        hough[rho + rho_max, theta] += 1\n\n        out = hough.astype(np.uint8)\n\n        return out\n\n    # non maximum suppression\n    def non_maximum_suppression(hough):\n        rho_max, _ = hough.shape\n\n        ## non maximum suppression\n        for y in range(rho_max):\n            for x in range(180):\n                # get 8 nearest neighbor\n                x1 = max(x-1, 0)\n                x2 = min(x+2, 180)\n                y1 = max(y-1, 0)\n                y2 = min(y+2, rho_max-1)\n                if np.max(hough[y1:y2, x1:x2]) == hough[y,x] and hough[y, x] != 0:\n                    pass\n                    #hough[y,x] = 255\n                else:\n                    hough[y,x] = 0\n\n        return hough\n\n    def inverse_hough(hough, img):\n        H, W, _ = img.shape\n        rho_max, _ = hough.shape\n\n        out = img.copy()\n\n        # get x, y index of hough table\n        ind_x = np.argsort(hough.ravel())[::-1][:20]\n        ind_y = ind_x.copy()\n        thetas = ind_x % 180\n        rhos = ind_y // 180 - rho_max / 2\n\n        # each theta and rho\n        for theta, rho in zip(thetas, rhos):\n            # theta[radian] -&gt; angle[degree]\n            t = np.pi / 180. * theta\n\n            # hough -&gt; (x,y)\n            for x in range(W):\n                if np.sin(t) != 0:\n                    y = - (np.cos(t) / np.sin(t)) * x + (rho) / np.sin(t)\n                    y = int(y)\n                    if y &gt;= H or y &lt; 0:\n                        continue\n                    out[y, x] = [0, 0, 255]\n            for y in range(H):\n                if np.cos(t) != 0:\n                    x = - (np.sin(t) / np.cos(t)) * y + (rho) / np.cos(t)\n                    x = int(x)\n                    if x &gt;= W or x &lt; 0:\n                        continue\n                    out[y, x] = [0, 0, 255]\n\n        out = out.astype(np.uint8)\n\n        return out\n\n\n    # voting\n    hough = voting(edge)\n    # non maximum suppression\n    hough = non_maximum_suppression(hough)\n    # inverse hough\n    out = inverse_hough(hough, img)\n\n    return out\n</code></pre>"},{"location":"vision/image_processing/#dilate","title":"Dilate","text":"<pre><code># Morphology Dilate\ndef Morphology_Dilate(img, Erode_time=1):\n    H, W = img.shape\n    out = img.copy()\n\n    # kernel\n    MF = np.array(((0, 1, 0),\n                (1, 0, 1),\n                (0, 1, 0)), dtype=np.int)\n\n    # each erode\n    for i in range(Erode_time):\n        tmp = np.pad(out, (1, 1), 'edge')\n        # erode\n        for y in range(1, H+1):\n            for x in range(1, W+1):\n                if np.sum(MF * tmp[y-1:y+2, x-1:x+2]) &lt; 255*4:\n                    out[y-1, x-1] = 0\n\n    return out\n</code></pre>"},{"location":"vision/image_processing/#erode","title":"Erode","text":"<pre><code># Morphology Erode\ndef Morphology_Erode(img, Dil_time=1):\n    H, W = img.shape\n\n    # kernel\n    MF = np.array(((0, 1, 0),\n                (1, 0, 1),\n                (0, 1, 0)), dtype=np.int)\n\n    # each dilate time\n    out = img.copy()\n    for i in range(Dil_time):\n        tmp = np.pad(out, (1, 1), 'edge')\n        for y in range(1, H+1):\n            for x in range(1, W+1):\n                if np.sum(MF * tmp[y-1:y+2, x-1:x+2]) &gt;= 255:\n                    out[y-1, x-1] = 255\n\n    return out\n</code></pre>"},{"location":"vision/image_processing/#opening-operation","title":"Opening Operation","text":"<p>Dilate N times, Erode N times. ==&gt; Remove isolated pixels.</p>"},{"location":"vision/image_processing/#closing-operation","title":"Closing Operation","text":"<p>Erode N times, Dilate N times. ==&gt; Connect discrete pixels.</p>"},{"location":"vision/opencv/","title":"openc","text":""},{"location":"vision/opencv/#check-version","title":"check version","text":"<pre><code>pkg-config --modversion opencv\n# to locate it\npkg-config --cflags opencv\npkg-config --libs opencv\n</code></pre>"},{"location":"vision/opencv/#install-opencv2","title":"install opencv2","text":"<p>Although opencv2 has been outdated, lots of packages still use it...</p> <p>However, do not compile with CUDA &gt;=10.0. It has severe bugs.</p> <pre><code>### Download opencv-2.4.13.5\nwget https://github.com/opencv/opencv/archive/2.4.13.5.zip -O opencv-2.4.13.5.zip\nunzip opencv-2.4.13.5.zip\ncd opencv-2.4.13.5\nmkdir release\ncd release\n\n### Compile and install\ncmake -D WITH_CUDA=OFF .. # better turn off for cuda &gt; 10.0\nmake all -j$(nproc) # Uses all machine cores\nsudo make install\n\n### Echoes OpenCV installed version if installation process was successful\necho -e \"OpenCV version:\"\npkg-config --modversion opencv\n</code></pre>"},{"location":"vision/transformation/","title":"Transformation","text":""},{"location":"vision/transformation/#transformation","title":"Transformation","text":""},{"location":"vision/transformation/#2d","title":"2D","text":"<p>The transformation matrix is Rotate THEN Translate (and scale)</p> \\[ \\displaylines{ \\begin{bmatrix} \\cos\\theta &amp; -\\sin\\theta &amp; t_x \\\\ \\sin\\theta &amp;  \\cos\\theta &amp; t_y \\\\ 0&amp;0&amp;1 \\\\ \\end{bmatrix} = \\begin{bmatrix} 1 &amp; 0 &amp; t_x \\\\ 0 &amp; 1 &amp; t_y \\\\ 0&amp;0&amp;1 \\\\ \\end{bmatrix} \\begin{bmatrix} \\cos\\theta &amp; -\\sin\\theta &amp; 0 \\\\ \\sin\\theta &amp;  \\cos\\theta &amp; 0 \\\\ 0&amp;0&amp;1 \\\\ \\end{bmatrix} } \\] <p>Note: We always use \\(\\mathbf T \\mathbf R\\) because in this form the translation is applied later and is explicit.</p> \\[ \\displaylines{ \\mathbf T \\mathbf R = \\begin{bmatrix}1 &amp; \\mathbf t \\\\ 0 &amp; 1\\end{bmatrix} \\begin{bmatrix}\\mathbf r &amp; 0 \\\\ 0 &amp; 1\\end{bmatrix} = \\begin{bmatrix}\\mathbf r &amp; \\mathbf t \\\\ 0 &amp; 1\\end{bmatrix} \\ne \\begin{bmatrix}\\mathbf r &amp; \\mathbf {rt} \\\\ 0 &amp; 1\\end{bmatrix} = \\begin{bmatrix}\\mathbf r &amp; 0 \\\\ 0 &amp; 1\\end{bmatrix}\\begin{bmatrix}1 &amp; \\mathbf t \\\\ 0 &amp; 1\\end{bmatrix}  = \\mathbf R \\mathbf T } \\]"},{"location":"vision/transformation/#3d","title":"3D","text":"<p>Main difference from 2D is the three rotation matrices along three axes:</p> \\[ \\displaylines{ \\mathbf R_x(\\alpha) =  \\begin{bmatrix} 1&amp;0&amp;0&amp;0\\\\ 0&amp;\\cos\\alpha &amp; -\\sin\\alpha &amp;0 \\\\ 0&amp;\\sin\\alpha &amp; \\cos\\alpha &amp;0 \\\\ 0&amp;0&amp;0 &amp;1 \\end{bmatrix} \\\\ \\mathbf R_y(\\alpha) =  \\begin{bmatrix} \\cos\\alpha &amp;0 &amp; -\\sin\\alpha &amp;0 \\\\ 0&amp;1&amp;0&amp;0\\\\ \\sin\\alpha &amp;0 &amp; \\cos\\alpha &amp;0 \\\\ 0&amp;0&amp;0 &amp;1 \\end{bmatrix} \\\\ \\mathbf R_z(\\alpha) =  \\begin{bmatrix} \\cos\\alpha &amp; -\\sin\\alpha &amp;0&amp;0 \\\\ \\sin\\alpha &amp; \\cos\\alpha &amp;0&amp;0 \\\\ 0&amp;0&amp;1&amp;0 \\\\ 0&amp;0&amp;0&amp;1\\\\ \\end{bmatrix} \\\\ } \\] <p>With the final form:</p> \\[ \\displaylines{ \\mathbf R_{xyz}(\\alpha) = \\mathbf R_x(\\alpha)\\mathbf R_y(\\alpha)\\mathbf R_z(\\alpha) } \\] <p>Rodrigues' Rotation Formula for rotation along any axis \\(\\mathbf n\\):</p> \\[ \\displaylines{ \\mathbf R(\\mathbf n, \\alpha) = \\cos\\alpha\\mathbf I + (1 - \\cos\\alpha)\\mathbf n\\mathbf n^T + \\sin\\alpha \\begin{bmatrix} 0 &amp; -n_x &amp;n_y \\\\ n_z &amp; 0 &amp; -n_x \\\\ -n_y &amp; n_x &amp; 0 \\end{bmatrix} } \\]"},{"location":"vision/transformation/#decompose-3d-transformation","title":"Decompose 3D transformation","text":"<p>ref: https://math.stackexchange.com/questions/237369/given-this-transformation-matrix-how-do-i-decompose-it-into-translation-rotati/417813</p> <p>ref: https://nghiaho.com/?page_id=846</p> <p>Code in python:</p> <pre><code>from scipy.spatial.transform import Rotation as sciRot\n\ndef decompose(M):\n    # M: [4, 4], assuming NO scaling.\n\n    # translation \n    T = np.eye(4)\n    T[:3, 3] = M[:3, 3]\n\n    # rotation at different axes\n    rx = np.arctan2(M[2, 1], M[2, 2])\n    ry = np.arctan2(-M[2, 0], np.sqrt(M[2, 1]**2 + M[2, 2]**2))\n    rz = np.arctan2(M[1, 0], M[0, 0])\n\n    R = np.eye(4)\n    R[:3, :3] = sciRot.from_euler('xyz', [rx, ry, rz], degrees=False).as_matrix()\n\n    M2 = T @ R\n    assert np.allclose(M, M2)\n</code></pre>"},{"location":"web/dns/","title":"\u57df\u540d\u89e3\u6790","text":""},{"location":"web/dns/#_2","title":"\u57df","text":"<ul> <li><code>com</code> \u9876\u7ea7\u57df\u540d</li> </ul> <ul> <li><code>hawspiral</code> \u4e8c\u7ea7\u57df\u540d</li> </ul> <ul> <li> <p>\u5728\u6b64\u4e4b\u4e0b\u53ef\u4ee5\u4efb\u610f\u6dfb\u52a0\u4e09\u7ea7\u57df\u540d\uff0c\u5f62\u5982<code>*.hawspiral.com</code></p> <ul> <li><code>www</code>\uff1a\u8457\u540d\u7684www\u5b50\u57df\u540d</li> </ul> </li> </ul>"},{"location":"web/dns/#_3","title":"\u57df\u540d\u89e3\u6790\u670d\u52a1","text":"<p>DNS\u670d\u52a1\u5546\u63d0\u4f9b\u57df\u540d\u89e3\u6790\u670d\u52a1\u3002</p> <p>\u6bcf\u6761\u8bb0\u5f55\u5305\u62ec\u8bb0\u5f55\u7c7b\u578b\uff0c\u4e3b\u673a\u8bb0\u5f55\uff0c\u89e3\u6790\u7ebf\u8defISP\uff0c\u8bb0\u5f55\u503c\uff0cTTL\uff0cMX\u4f18\u5148\u7ea7\u3002</p> <ul> <li> <p>A\u8bb0\u5f55\uff1aIP\u6307\u5411\uff08Alias\uff09\uff0c\u5373\u628a\u57df\u540d\u6307\u5411IP\u5730\u5740\u3002</p> <p>\u628a\u6574\u4e2a\u4e8c\u7ea7\u57df\u540d\u6307\u5411\u670d\u52a1\u5668IP</p> <p>\u540c\u4e00\u4e2a\u57df\u540d\u53ef\u4ee5\u6307\u5411\u591a\u4e2aIP\u5730\u5740\uff0c\u4f18\u5148\u4f7f\u7528\u4e0a\u9762\u7684\u3002</p> <ul> <li> <p>\u4e3b\u673a\u8bb0\u5f55\uff08Host\uff09</p> <p>(wildcard), *@(primary naked domain)** or subdomain name.</p> <pre><code>A   kiui.moe    xxx.xxx.xxx.xxx ... (@, naked domain)\nA   trojan      xxx.xxx.xxx.xxx ... (subdomain)\n</code></pre> </li> </ul> <ul> <li> <p>\u8bb0\u5f55\u503c\uff08Value\uff09</p> <p>IPv4 Address.</p> </li> </ul> </li> </ul> <ul> <li> <p>CNAME\u8bb0\u5f55\uff1a\u522b\u540d\u6307\u5411\uff08Canonical name\uff09</p> <p>A\u8bb0\u5f55\u4f18\u5148\u4e8eCNAME\u8bb0\u5f55\u3002</p> <p>\u4f8b\u5982\u628a<code>www</code>\u5b50\u57df\u540d\u6307\u5411\u81ea\u8eab<code>hawia.xyz</code></p> <ul> <li>\u4e3b\u673a\u8bb0\u5f55\uff08Host\uff09: <code>www</code></li> </ul> <ul> <li>\u8bb0\u5f55\u503c\uff08Point to\uff09: <code>hawia.xyz</code></li> </ul> </li> </ul> <ul> <li>MX\u8bb0\u5f55\uff1a\u90ae\u4ef6\u4ea4\u6362(Mail Exchanger)</li> </ul> <ul> <li>NS\u8bb0\u5f55\uff1a\u89e3\u6790\u670d\u52a1\u5668</li> </ul> <ul> <li> <p>TXT\u8bb0\u5f55\uff1a\u5bf9\u57df\u540d\u7684\u8bf4\u660e</p> <p>\u5e38\u7528\u4e8eSPF\u53cd\u5783\u573e\u90ae\u4ef6\u3002m</p> </li> </ul>"},{"location":"web/ip/","title":"IP address","text":""},{"location":"web/ip/#ipv4","title":"IPv4","text":"<p>Special IPs:</p> <ul> <li> <p><code>0.0.0.0</code></p> <p>Non-routable meta address. </p> <p>Used to designate Invalid, unknown targets.</p> <p>Also used as host to listen up to all public IPs. (<code>flask run -h 0.0.0.0</code>)</p> </li> </ul> <ul> <li> <p><code>127.0.0.1</code></p> <p>one of loopback address (starting from <code>127</code>) used to establish connection with the same machine.</p> </li> </ul> <ul> <li> <p><code>localhost</code></p> <p>Usually point to <code>127.0.0.1</code></p> <p>Defined in <code>/etc/hosts</code>:</p> <pre><code>127.0.0.1 localhost\n::1 localhost // ipv6\n</code></pre> </li> </ul>"},{"location":"web/ip/#ipv6","title":"IPv6","text":"<p>128bit</p>"},{"location":"web/ip/#nat-network-address-translation","title":"NAT (Network Address Translation)","text":"<p>\u7528\u4e8e\u7f13\u89e3IPv4\u4e0d\u8db3\uff0c\u6307\u7684\u662f\u8def\u7531\u5668\u81ea\u52a8\u4fee\u6539IP\u62a5\u6587\u5b9e\u73b0LAN/WAN\u4e4b\u95f4\u8f6c\u6362\u7684\u8fc7\u7a0b\u3002</p>"},{"location":"web/web_overview/","title":"Websites","text":""},{"location":"web/web_overview/#static-websites","title":"Static Websites","text":"<p>HTML + CSS + JavaScript</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;\u6d4b\u8bd5\u9875\u9762&lt;/title&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+SC\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"styles/style.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"scripts/main.js\" defer&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Mozilla \u9177\u6bd9\u4e86\uff01&lt;/h1&gt;\n    &lt;img src=\"images/firefox-icon.png\" alt=\"Firefox \u6807\u5fd7\uff1a\u4e00\u53ea\u76d8\u65cb\u5728\u5730\u7403\u4e0a\u7684\u706b\u72d0\"&gt;\n\n    &lt;p&gt;Mozilla \u662f\u4e00\u4e2a\u5168\u7403\u793e\u533a\uff0c\u8fd9\u91cc\u805a\u96c6\u7740\u6765\u81ea\u4e94\u6e56\u56db\u6d77\u7684&lt;/p&gt;\n\n    &lt;ul&gt;\n      &lt;li&gt;\u6280\u672f\u4eba\u5458&lt;/li&gt;\n      &lt;li&gt;\u601d\u8003\u8005&lt;/li&gt;\n      &lt;li&gt;\u5efa\u9020\u8005&lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;p&gt;\u6211\u4eec\u81f4\u529b\u4e8e\u8ba9 Internet \u4fdd\u6301\u6d3b\u529b\uff0c\u4fdd\u6301\u7545\u901a\uff0c\u4eba\u4eba\u7686\u53ef\u8d21\u732e\uff0c\u4eba\u4eba\u7686\u53ef\u521b\u9020\u3002\u6211\u4eec\u575a\u4fe1\uff1a\u5f00\u653e\u5e73\u53f0\u7684\u534f\u4f5c\u5bf9\u4e8e\u4eba\u7684\u53d1\u5c55\u81f3\u5173\u91cd\u8981\uff0c\u4e5f\u51b3\u5b9a\u7740\u6211\u4eec\u5171\u540c\u7684\u672a\u6765\u3002&lt;/p&gt;\n\n    &lt;p&gt;\u4e3a\u4e86\u8fbe\u6210\u6211\u4eec\u5171\u540c\u7684\u7406\u60f3\uff0c\u6211\u4eec\u9075\u5faa\u4e00\u7cfb\u5217\u7684\u4ef7\u503c\u89c2\u548c\u7406\u5ff5\uff0c\u8bf7\u53c2\u9605 &lt;a href=\"https://www.mozilla.org/zh-CN/about/manifesto/\"&gt;Mozilla \u5ba3\u8a00&lt;/a&gt;\u3002&lt;/p&gt;\n\n    &lt;button&gt;\u5207\u6362\u7528\u6237&lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>How to build a static website efficiently? I don't really need to code HTML files, right?</p> <p>Should I write all JavaScript?</p>"},{"location":"web/web_overview/#dynamic-websites-server-side-programming","title":"Dynamic Websites (Server-side programming)","text":"<p>Application Server + Database</p>"},{"location":"web/web_overview/#django-python","title":"Django (Python)","text":""},{"location":"web/web_overview/#expressnodejs-javascript","title":"Express/Node.js (JavaScript)","text":"<ul> <li><code>Express</code>\uff1a\u57fa\u4e8e Node.js \u5e73\u53f0\uff0c\u5feb\u901f\u3001\u5f00\u653e\u3001\u6781\u7b80\u7684 Web \u5f00\u53d1\u6846\u67b6\u3002</li> <li><code>Vue</code>\uff1a\u6784\u5efa\u6570\u636e\u9a71\u52a8\u7684Web\u754c\u9762\u7684\u6e10\u8fdb\u5f0f\u6846\u67b6</li> <li><code>React</code>\uff1a\u4e00\u4e2a\u7528\u4e8e\u52a8\u6001\u6784\u5efa\u7528\u6237\u754c\u9762\u7684JS\u5e93\u3002</li> </ul>"},{"location":"web/web_overview/#deploy","title":"Deploy","text":""},{"location":"web/backend/golang_basics/","title":"Golang","text":""},{"location":"web/backend/golang_basics/#cli","title":"CLI","text":"<pre><code>go build test.go # generate binary at ./\ngo install test.go # generate binary at $GOBIN/bin &amp; cache dependencies.\ngo run test.go # build and run\n</code></pre>"},{"location":"web/backend/golang_basics/#go-proxy","title":"Go Proxy","text":"<p>Correct way to download modules.</p> <pre><code># powershell\n$env:GOPROXY = \"https://goproxy.io\"\n$env:GO111MODULE = \"on\"\n\ngo get &lt;pkg&gt;\n</code></pre>"},{"location":"web/backend/golang_basics/#go-modules","title":"Go Modules","text":"<pre><code># install packages\ngo get &lt;pkg&gt; # to $GOPATH\n\n# start a project\ngo mod init &lt;name&gt; # create go.mod, necessary for using installed modules !!!\nvim main.go # edit your code, import installed modules\n\n# run\ngo run main.go # run, create go.sum (validation purpose)\n</code></pre> <p>Example: <code>go.mod</code></p> <pre><code>module test\n\ngo 1.14\n\nrequire github.com/gin-gonic/gin v1.6.3\n</code></pre>"},{"location":"web/backend/golang_basics/#defer","title":"Defer","text":"<pre><code>func a() {\n    defer b() // called after function returns\n    return 0\n}\n\n// use:\nf, err = os.Open(filename)\ndefer f.close() // don't need to put it in the last\n\n// LIFO order\ndefer func() { fmt.Println(\"1\") }()\ndefer func() { fmt.Println(\"2\") }()\ndefer func() { fmt.Println(\"3\") }()\n// =&gt; 321\n</code></pre>"},{"location":"web/backend/golang_basics/#the-empty-interface","title":"The empty Interface","text":"<p><code>interface{}</code> can hold values of any type. </p> <p>It is used as a dynamic type in golang.</p> <pre><code>// this func accepts any param.\nfunc describe(i interface{}) {\n    fmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n\nfunc main() {\n    var i interface{} // this is a nil object.\n    describe(i) // (&lt;nil&gt;, &lt;nil&gt;)\n\n    i = 42\n    describe(i) // (42, int)\n\n    i = \"hello\"\n    describe(i) // (hello, string)\n}\n</code></pre>"},{"location":"web/backend/golang_basics/#overview","title":"Overview","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    /* comment */\n    // also comment\n    fmt.Println(\"hello, world\")\n}\n</code></pre> <pre><code>go run test.go\n</code></pre>"},{"location":"web/backend/golang_basics/#types","title":"Types","text":"<ul> <li> <p>Pass-by-Value</p> <pre><code>bool int float32 float64 string\n</code></pre> </li> </ul> <ul> <li> <p>Pass-by-Reference</p> <pre><code>Pointer struct Channel interface\n</code></pre> </li> </ul>"},{"location":"web/backend/golang_basics/#variables","title":"Variables","text":"<pre><code>var name type // default value is 0/nil\nvar name [type] = value // auto\nname := value // auto, usually used inside function!\n\nvar a b type\nvar a,b = value1, value2\nvar (a type1 b type2)\n\nconst name [type] = value\n\n// itoa: a counter\nconst (\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = iota\u00a0\u00a0 //0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d = \"ha\"\u00a0\u00a0 //iota += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\"ha\"\u00a0\u00a0 iota += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = 100\u00a0\u00a0\u00a0\u00a0//iota +=1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0g\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//100\u00a0\u00a0iota +=1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0h = iota\u00a0\u00a0 //7\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//8\n\u00a0\u00a0\u00a0\u00a0)\n</code></pre> <ul> <li>Local variable must be used in the same block (Declared but not used Error)</li> <li>Global variable may not be used.</li> </ul>"},{"location":"web/backend/golang_basics/#control","title":"Control","text":"<ul> <li><code>select</code></li> </ul> <ul> <li><code>goto</code></li> </ul> <ul> <li> <p><code>for...range</code></p> <pre><code>// array\nnums := []int{2, 3, 4}\nfor idx, num := range nums {\n    fmt.Println(\"index:\", idx, \" value:\", num)\n}\n\n// map\nkvs := map[string]string{\"a\": \"apple\", \"b\": \"banana\"}\nfor k, v := range kvs {\n    fmt.Printf(\"%s -&gt; %s\\n\", k, v)\n}\n</code></pre> </li> </ul>"},{"location":"web/backend/golang_basics/#function","title":"Function","text":"<pre><code>func name([param [type1], param2 [type2]]) [return type] {}\n</code></pre>"},{"location":"web/backend/golang_basics/#array","title":"Array","text":"<pre><code>var name [size]type\nvar name [size]type{a, b ,c}\nvar name [...]type{a, b ,c} // auto\n\n// pass to function\nfunc foo(arr [] int, size int) int {}\n</code></pre>"},{"location":"web/backend/golang_basics/#pointer","title":"Pointer","text":"<pre><code>var ptr *type // nil\nvar ptr = &amp;a\nvar ptr [size]*type\n\n// pass to function\nfunc swap (x* int, y* int) {\n    var temp int\n    temp = *x\n    *x = *y\n    *y = temp\n}\n</code></pre>"},{"location":"web/backend/golang_basics/#oop","title":"OOP","text":"<ul> <li> <p><code>struct</code></p> <pre><code>type name struct {\n    member type\n    ...\n}\n\nvar tmp = name{val, ...}\nvar tmp = new(name)\n\ntmp.member\n\nvar ptr *name = &amp;tmp\nptr.member // no -&gt;\n</code></pre> </li> </ul> <ul> <li> <p><code>interface</code></p> <p><pre><code>type name interface {\n    method [return_type]\n    ...\n}\n</code></pre> <pre><code>* define method\n\n  ```go\n  type Circle struct {\n  \u00a0\u00a0radius float64\n  }\n\n  func main() {\n  \u00a0\u00a0var c1 Circle\n  \u00a0\u00a0c1.radius = 10.00\n  \u00a0\u00a0fmt.Println(\"Area of Circle(c1) = \", c1.getArea())\n  }\n\n  func (c Circle) getArea() float64 {\n  \u00a0\u00a0return 3.14 * c.radius * c.radius\n  }\n\n  // c is a tmp instance \n</code></pre></p> </li> </ul>"},{"location":"web/backend/golang_basics/#slice-dynamic-array","title":"Slice (dynamic array)","text":"<pre><code>var slc []type\nvar slc []type = make([]type, len)\nvar slc []type{a,b,c}\n\nslc = append(slc, d, e)\n</code></pre>"},{"location":"web/backend/golang_basics/#map","title":"Map","text":"<pre><code>// declare\nvar m map [key_type] val_type\nm := make(map [key_type] val_type)\n\n// assign\nm[key] = val\n\n// access\nval, ok = m[key]\n\n// del\ndelete(m, key)\n</code></pre>"},{"location":"web/backend/golang_basics/#go-routine","title":"Go Routine","text":"<p>In-born multi-threading support.</p> <ul> <li> <p><code>go</code></p> <pre><code>func loop() {\n    for i:=0; i&lt;10; i++ {\n        fmt.Printf(\"%d \", i)\n    }\n}\n\nfunc main() {\n    go loop()\n    go loop()\n    time.Sleep(time.Second)\n}\n</code></pre> </li> </ul> <ul> <li> <p><code>chan</code></p> <p>channels are like pipes for message passing.</p> <pre><code>ch := make(chan int)\nvar ch chan int = make(chan int)\n\nch &lt;- message\nout, ok = &lt;- ch\n\n// example\nvar complete chan int = make(chan int)\n\nfunc loop() {\n    for i := 0; i &lt; 10; i++ {\n        fmt.Printf(\"%d \", i)\n    }\n    complete &lt;- 0\n}\n\nfunc main() {\n    go loop()\n    &lt;- complete // \u76f4\u5230\u7ebf\u7a0b\u8dd1\u5b8c, \u53d6\u5230\u6d88\u606f. main\u5728\u6b64\u963b\u585e\u4f4f\n}\n</code></pre> </li> </ul> <ul> <li><code>select</code></li> </ul>"},{"location":"web/backend/golang_gin/","title":"Gin","text":"<p>A Web Framework in Go. (https://godoc.org/github.com/gin-gonic/gin)</p>"},{"location":"web/backend/golang_gin/#overview","title":"Overview","text":"<pre><code>package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc pong(c *gin.Context) {\n    // JSON(): serialize and send return code and object to JSON.\n    // H: short for map[string]interface{}\n    c.JSON(200, gin.H{\n        \"message\": \"pong\",\n    })\n}\n\nfunc main() {\n    r := gin.Default()\n    r.GET(\"/ping\", pong) // \"/ping\" is routed to pong()\n    r.Run() // listen and serve on 0.0.0.0:8080\n}\n</code></pre>"},{"location":"web/backend/golang_gin/#route","title":"Route","text":"<ul> <li> <p>GET</p> <pre><code>// with URL parameters\nfetch('/api?action=getcomment'+'&amp;pid='+pid).then(...)\n</code></pre> <pre><code>r.GET(\"/api\", apiGet)\n\nfunc apiGet(c *gin.Context) {\n  action := c.Query(\"action\")\n  switch action {\n  case \"getcomment\":\n      getOne(c)\n      return\n  case \"search\":\n      searchPost(c)\n      return\n  default:\n      c.AbortWithStatus(403)\n  }\n}\n\nfunc searchPost(c *gin.Context) {\n  page, err := strconv.Atoi(c.Query(\"page\"))\n  pageSize, err := strconv.Atoi(c.Query(\"pagesize\"))\n  keywords := c.Query(\"keywords\")\n\n  data, err2 := dbSearchSavedPosts(strings.ReplaceAll(keywords, \" \", \" +\"), (page-1)*pageSize, pageSize)\n  if err2 != nil {\n      log.Printf(\"dbSearchSavedPosts failed while searchList: %s\\n\", err2)\n      httpReturnWithCodeOne(c, \"\u6570\u636e\u5e93\u8bfb\u53d6\u5931\u8d25\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\")\n      return\n  } else {\n      c.JSON(http.StatusOK, gin.H{\n          \"code\":      0,\n          \"data\":      IfThenElse(data != nil, data, []string{}),\n          \"timestamp\": getTimeStamp(),\n          \"count\":     IfThenElse(data != nil, len(data), 0),\n      })\n      return\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>POST</p> <ul> <li> <p>URL parameters</p> <pre><code>fetch(\n    'api/login'\n    +'?user='+encodeURIComponent(this.username_ref.current.value)\n    +'&amp;valid_code='+encodeURIComponent(this.password_ref.current.value), \n    {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            excluded_scopes: this.state.excluded_scopes||[],\n        }),\n    }\n).then(...)\n</code></pre> <p>Use <code>c.Query</code>.</p> <pre><code>r.POST('/api/login', login)\n\nfunc login(c *gin.Context) {\n    user := c.Query(\"user\")\n    code := c.Query(\"valid_code\")\n\n    hashedUser := hashEmail(user)\n    token := genToken()\n\n    err = dbSaveToken(token, hashedUser)\n    if err != nil {\n        c.JSON(http.StatusOK, gin.H{\n            \"code\": 1,\n            \"msg\": \"\u6570\u636e\u5e93\u5199\u5165\u5931\u8d25\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\",\n        })\n        return\n    } else {\n        c.JSON(http.StatusOK, gin.H{\n            \"code\": 0,\n            \"msg\": \"\u767b\u5f55\u6210\u529f\uff01\",\n            \"user_token\": token,\n        })\n        return\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Form</p> <p>Use <code>c.PostForm</code>.</p> <pre><code>r := gin.Default()\nr.POST(\"/\", func(c *gin.Context) {\n    wechat := c.PostForm(\"wechat\")\n    c.String(200, wechat)\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"web/backend/golang_gin/#cors","title":"CORS","text":"<pre><code>package main\n\nimport (\n    \"time\"\n\n    \"github.com/gin-contrib/cors\"\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n    router := gin.Default()\n    // CORS for https://foo.com and https://github.com origins, allowing:\n    // - PUT and PATCH methods\n    // - Origin header\n    // - Credentials share\n    // - Preflight requests cached for 12 hours\n    router.Use(cors.New(cors.Config{\n        AllowOrigins:     []string{\"https://foo.com\"},\n        AllowMethods:     []string{\"PUT\", \"PATCH\"},\n        AllowHeaders:     []string{\"Origin\"},\n        ExposeHeaders:    []string{\"Content-Length\"},\n        AllowCredentials: true,\n        AllowOriginFunc: func(origin string) bool {\n            return origin == \"https://github.com\"\n        },\n        MaxAge: 12 * time.Hour,\n    }))\n    router.Run()\n}\n</code></pre>"},{"location":"web/backend/python_fastapi/","title":"fastapi","text":""},{"location":"web/backend/python_fastapi/#install","title":"install","text":"<pre><code># install fastapi and uvicorn\npip install fastapi[all]\n</code></pre>"},{"location":"web/backend/python_fastapi/#basic-usage","title":"basic usage","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n### GET method for /\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World!\"}\n\n# also for POST, PUT, DELETE, ...\n@app.post(\"/\")\ndef rootpost():\n    pass\n\n# parameters\n@app.get(\"/items/{id}\")\ndef readitem(id: int):\n    return {\"item_id\": id}\n\n# order matters\n# /who/me will invoke getme() since it is defined prior to getuser().\n@app.get(\"/who/me\")\ndef getme():\n    pass\n\n@app.get(\"/who/{user}\")\ndef getuser(user):\n    pass\n\n### path parameters (e.g., pass in \"/path/to/sth\")\n# /files//path/to/sth will get /path/to/sth\n@app.get(\"/files/{file_path:path}\")\ndef getfile(file_path):\n    pass\n\n### lookup parameters (e.g., ?key=val&amp;key2=val2)\n# /items/?index=10 will get index = 10\n# /items/ will get index = 0, since we provide a default value, it is not a required parameter.\n@app.get(\"/items/\")\ndef getitem(index: int=0):\n    return items[index]\n\n# /items/ will throw an error now, since we provide no default, it is a required parameter.\n@app.get(\"/items/\")\ndef getitem(index: int):\n    return items[index]\n\n### post by pydantic\nfrom typing import Optional\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n\n@app.post(\"/post_item/\")\ndef postitem(item: Item): # will decode the post body into a Item instance.\n    item_dict = item.dict()\n    return item_dict\n\n# also support all the parameters\n@app.post(\"/post_item/{id}\")\ndef postitem(item: Item, id: int, q: int=0):\n    item_dict = item.dict()\n    item_dict['id'] = id\n    item_dict['q'] = q\n    return item_dict\n\n### restricted parameters\n# the passed in parameter must follow the defined rules.\nfrom fastapi import Query, Path\n\n# path (id, always required) + optional query (key1) + required query (key2)\n@app.get(\"/items/{id}\")\ndef getitem(\n    id: int = Path(..., title=\"item id\", gt=0, le=100),\n    key1: str = Query(\"default\", min_length=1, max_length=50, regex=\"^pattern$\"),\n    key2: str = Query(..., min_length=1, max_length=50, regex=\"^pattern$\")\n):\n    pass\n\n\n### error handling\nfrom fastapi import HTTPException\n\n@app.get(\"/items/{id}\")\ndef getitem(id: int):\n    if id not in ITEMS:\n        raise HTTPException(status_code=404, detail=\"item not found\")\n    return {\"item\": ITEMS[id]}\n</code></pre>"},{"location":"web/backend/python_fastapi/#debug","title":"debug","text":"<p>the <code>main.py</code>:</p> <pre><code>import uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World!\"}\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>Then run with:</p> <pre><code>python main.py\n</code></pre>"},{"location":"web/backend/python_fastapi/#deploy","title":"deploy","text":"<p>assume the APIs are in <code>main.py</code>, and the backend is called <code>app</code>:</p> <pre><code># dev example, will run at localhost:8000, and reload once source file changes.\nuvicorn main:app --reload\n</code></pre> <p>It will serves:</p> <ul> <li><code>localhost:8000/</code>: the api root.</li> </ul> <ul> <li><code>localhost:8000/docs</code>: the api documentation.</li> <li><code>localhost:8000/redoc</code>: another api documentation, better use with typing.</li> <li><code>localhost:8000/openapi.json</code>: OpenAPI description.</li> </ul> <p>More options:</p> <pre><code>uvicorn main:app --host 0.0.0.0 --port 8000\n</code></pre> <p>(However, logging with uvicorn seems to be painful.)</p>"},{"location":"web/backend/python_flask/","title":"Flask (Pallets Project)","text":""},{"location":"web/backend/python_flask/#cli","title":"CLI","text":"<pre><code>## Set\nexport FLASK_APP=hello.py\n# $env.FLASK_APP=hello.py\n\n## Debug mode\nexport FLASK_ENV=development\n\n## Run\nflask run # python -m flask run\n</code></pre>"},{"location":"web/backend/python_flask/#views","title":"Views","text":"<p>A function to respond to requests.</p> <pre><code>@app.route(\"/hello\")\ndef hello():\n    return \"Hello!\"\n</code></pre> <p>Valid response:</p> <ul> <li><code>string</code></li> </ul> <ul> <li> <p><code>json</code></p> <pre><code>from flask import jsonify\ndef hello():\n  return jsonify({\"time\": time.time()})\n</code></pre> </li> </ul> <ul> <li> <p><code>render_template()</code></p> <pre><code>def hello():\n    return render_template(\"hello.html\")\n</code></pre> </li> </ul>"},{"location":"web/backend/python_flask/#blueprint","title":"Blueprint","text":"<p>A way to organize a group of views. (Modularization)</p> <pre><code>from flask import Blueprint, request, redirect, url_for\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n# register: app.register_blueprint(bp)\n\n# add views\n@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    # request is imported\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        ...\n        return redirect(...)\n    #elif request.method == 'GET':\n    return render_template(...)\n\n@bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    pass\n\n# other utils\ndef login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n\n        return view(**kwargs)\n\n    return wrapped_view\n</code></pre>"},{"location":"web/backend/python_flask/#context","title":"Context","text":"<p>**How flask handle request: **</p> <ul> <li>Create APP Context </li> <li>Create Request Context </li> <li>Do some Logic </li> <li>Destroy Request Context </li> <li>Destroy APP Context</li> </ul> <p>Difference:</p> <p>APP context is cheap, and can be created without a request, for accessing <code>current_app</code> and <code>g</code>.</p> <p>Request context is expensive.</p>"},{"location":"web/backend/python_flask/#url-arguments","title":"URL arguments","text":"<ul> <li> <p>simple arguments</p> <pre><code>fetch(\"api/a/1\");\n</code></pre> <pre><code>@app.route(\"api/&lt;arg1&gt;/&lt;arg2&gt;\")\ndef func(arg1, args):\n    return jsonify({\n        'arg1': arg1,\n        'arg2': arg2,\n    })\n</code></pre> </li> </ul> <ul> <li> <p>form</p> <pre><code>let formData = new FormData();\nformData.append('username', 'John');\nformData.append('password', '123');\n\nfetch(\"api/form\",\n    {\n        method: \"POST\",\n      body: formData,\n    });\n</code></pre> <pre><code>@app.route(\"api/form\", methods=('GET','POST'))\ndef login():\n    if request.method == 'POST':\n      username = request.form.get('username')\n      password = request.form.get('password')\n</code></pre> </li> </ul> <ul> <li> <p>URL parameters</p> <pre><code>fetch(\"login?username=alex&amp;password=pw1\")\n</code></pre> <pre><code>@app.route(\"login\", methods=(\"GET\",))\ndef login():\n    username = request.args.get('username')\n    password = request.args.get('password')\n</code></pre> </li> </ul> <ul> <li> <p><code>JSON</code></p> <pre><code>fetch(\"test\", {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({name:\"Alex\"})\n})\n</code></pre> <pre><code>@app.route(\"test\", methods=('GET','POST'))\ndef login():\n    if request.method == 'POST':\n      username = request.json.get('username')\n      password = request.json.get('password')\n</code></pre> </li> </ul> <ul> <li> <p><code>files</code></p> <pre><code>request.files\n</code></pre> </li> </ul>"},{"location":"web/backend/python_flask/#flasksession","title":"flask.session","text":"<p>Store data in different requests from the same client. (signed cookies)</p> <p>It is like a <code>dict</code>.</p> <pre><code>session['user_id'] = user['id']\n\nsession.clear()\n</code></pre>"},{"location":"web/backend/python_flask/#flaskg","title":"flask.g","text":"<p>Store data in the same request.</p> <p>It works like a <code>dict</code>.</p> <pre><code>g.user = user\n\nif g.user is not None:\n    pass\n</code></pre> <p>Usual way to manage resource:</p> <pre><code>def get_db():\n    if 'db' not in g:\n        g.db = connect_to_database()\n\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db():\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n</code></pre>"},{"location":"web/backend/python_flask/#jinja","title":"Jinja","text":"<p>A template library.</p> <ul> <li><code>{% ... %}</code> for Statements</li> <li><code>{{ ... }}</code> for Expressions to print to the template output</li> <li><code>{# ... #}</code> for Comments not included in the template output</li> <li><code># ... ##</code> for Line Statements</li> </ul>"},{"location":"web/backend/sql_mysql/","title":"MySQL","text":""},{"location":"web/backend/sql_mysql/#install","title":"Install","text":"<pre><code>apt install mysql-server\n\nsystemctl start mysql\nsystemctl status mysql\n\n# config:\nvim /etc/mysql/mysql.conf.d/mysqld.cnf\n</code></pre>"},{"location":"web/backend/sql_mysql/#cli","title":"CLI","text":"<pre><code># login\nmysql -u root -p\n# show databases\nshow databases; # = show schemas;\n# select database\nuse &lt;db&gt;;\n# show tables\nshow tables; # from the current db\nshow tables from &lt;db&gt;; # from &lt;db&gt;\n# describe table\ndescribe &lt;tb&gt;; # = desc &lt;tb&gt;; = explain &lt;tb&gt;; = show columns from &lt;tb&gt;;\n# display first &lt;num&gt; rows\nselect * from &lt;tb&gt; order by &lt;col&gt; [asc | desc] limit &lt;num&gt;;\n\n# show mysql databases location\nselect @@datadir; # default: /var/lib/mysql\n\n# show size of all dbs\nSELECT table_schema AS \"Database\", SUM(data_length + index_length) / 1024 / 1024 AS \"Size (MB)\" FROM information_schema.TABLES GROUP BY table_schema\n\n# show full columns desp of table\nshow full columns from &lt;tb&gt;;\n</code></pre>"},{"location":"web/backend/sql_mysql/#backup-recovery","title":"backup &amp; recovery","text":"<pre><code># backup\n# ref: https://dev.mysql.com/doc/mysql-backup-excerpt/5.7/en/mysqldump-sql-format.html\nmysqldump --all-databases &gt; backup.sql\nmysqldump -databases &lt;db1&gt; [db2 db3 ...] &gt; backup.sql\nmysqldump &lt;db&gt; [table1 table2 ...] &gt; backup.sql\n\n# load\nshell $ mysql &lt; backup.sql\nmysql $ source backup.sql;\n</code></pre>"},{"location":"web/backend/sql_mysql/#char-set","title":"Char set","text":"<p>ref: https://mathiasbynens.be/notes/mysql-utf8mb4#character-sets</p> <p>To enable full support for <code>utf</code> charset, we need to change the default settings from <code>utf8</code> to <code>utf8mb4</code>.</p> <ul> <li><code>utf8</code>: short for <code>utf8mb3</code>, which means <code>max bytes 3</code>, so it can use at most 3 bytes to store chars.</li> <li><code>utf8mb4</code>: max bytes 4, this supports all the strange chars, such as :flags:.</li> </ul> <p>MySQL\u2019s <code>utf8</code> encoding is awkwardly named, as it\u2019s different from proper UTF-8 encoding. It doesn\u2019t offer full Unicode support, which can lead to data loss or security vulnerabilities.</p> <p>To set the default charset to <code>utf8mb4</code>:</p> <ul> <li> <p>Alter the databases have created:</p> <pre><code># For each database:\nALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;\n\n# For each table:\nALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n# For each column (example):\nALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre> </li> </ul> <ul> <li> <p>modify default configs at <code>/etc/mysql/my.cfg</code></p> <pre><code>[client]\ndefault-character-set = utf8mb4\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld]\ncharacter-set-client-handshake = FALSE\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\n</code></pre> <p>And restart <code>mysql</code> service.</p> <p>Check by:</p> <pre><code>mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE 'character\\_set\\_%' OR Variable_name LIKE 'collation%';\n+--------------------------+--------------------+\n| Variable_name            | Value              |\n+--------------------------+--------------------+\n| character_set_client     | utf8mb4            |\n| character_set_connection | utf8mb4            |\n| character_set_database   | utf8mb4            |\n| character_set_filesystem | binary             |\n| character_set_results    | utf8mb4            |\n| character_set_server     | utf8mb4            |\n| character_set_system     | utf8               |\n| collation_connection     | utf8mb4_unicode_ci |\n| collation_database       | utf8mb4_unicode_ci |\n| collation_server         | utf8mb4_unicode_ci |\n+--------------------------+--------------------+\n</code></pre> <p>Finally, you should repair and optimize current tables:</p> <pre><code># one line for all dbs\nmysqlcheck -u root -p --auto-repair --optimize --all-databases\n</code></pre> <p>(or in a per-table form)</p> <pre><code># For each table\nREPAIR TABLE table_name;\nOPTIMIZE TABLE table_name;\n</code></pre> </li> </ul>"},{"location":"web/backend/sql_mysql/#set-password","title":"Set password","text":"<pre><code>USE mysql;\nUPDATE user SET plugin='mysql_native_password' WHERE User='root';\nFLUSH PRIVILEGES;\nexit;\n</code></pre> <p>the default password is ''.</p>"},{"location":"web/backend/sql_mysql/#data-types","title":"Data types","text":"<ul> <li>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT</li> <li>DEMICAL, FLOAT, DOUBLE, BIT</li> </ul> <ul> <li> <p>CHAR(len)</p> <p>fixed-length string</p> </li> </ul> <ul> <li> <p>VARCHAR(max-len)</p> <p>variable-length string (&lt;=65535)</p> </li> </ul> <ul> <li>BINARY, VARBINARY</li> </ul> <ul> <li>TINYBLOB, BLOB, MEDIUMBLOB, LONGBLOB</li> </ul> <ul> <li> <p>TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT</p> <p>variable-length string. (at most 255, 65535, 16777215, 4294967295 characters)</p> </li> </ul> <ul> <li>DATE, TIME, DATETIME, TIMESTAMP</li> </ul>"},{"location":"web/backend/sql_mysql/#create-database","title":"Create database","text":"<p>You must create database first, then select database, then create table.</p> <pre><code>CREATE DATABASE [IF NOT EXISTS] database_name;\n[CHARACTER SET charset_name]\n[COLLATE collation_name]\n\nUSE database_name;\n</code></pre>"},{"location":"web/backend/sql_mysql/#create-table","title":"Create table","text":"<pre><code>CREATE TABLE [IF NOT EXISTS] table_name(\n   column_1_definition,\n   column_2_definition,\n   ...,\n   table_constraints\n) ENGINE=storage_engine;\n\n-- column definition\ncolumn_name data_type(length) [NOT NULL] [DEFAULT value] [AUTO_INCREMENT] column_constraint;\n</code></pre>"},{"location":"web/backend/sql_mysql/#operations","title":"Operations","text":"<p>Nearly the same as SQLite.</p>"},{"location":"web/backend/sql_mysql/#full-text-search","title":"Full text search","text":"<ul> <li> <p>Create index by <code>FULLTEXT (columns) WITH PARSER ngram</code></p> <pre><code>CREATE TABLE articles (\n    id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,\n    title VARCHAR (200),\n    body TEXT,\n    FULLTEXT (title, body) WITH PARSER ngram\n) ENGINE = INNODB;\n</code></pre> </li> </ul> <ul> <li> <p>Search <code>WHERE MATCH (columns) AGAINST (pattern)</code></p> <ul> <li>Default: <code>IN NATURAL LANGUAGE MODE</code></li> <li>Bool operation: <code>IN BOOLEAN MODE</code></li> </ul> <pre><code>SELECT * FROM articles\nWHERE MATCH (title,body) -- must be same as FULLTEXT\nAGAINST ('\u4e00\u8def \u4e00\u5e26' IN NATURAL LANGUAGE MODE);\n\n// \u4e0d\u6307\u5b9a\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6a21\u5f0f\nSELECT * FROM articles\nWHERE MATCH (title,body)\nAGAINST ('\u4e00\u8def \u4e00\u5e26');\n\n// \u5fc5\u987b\u5305\u542b\"\u817e\u8baf\"\uff0c\u4f46\u662f\u4e0d\u80fd\u5305\u542b\"\u901a\u8baf\u5de5\u5177\"\nSELECT * FROM articles\nWHERE MATCH (title,body)\nAGAINST ('+\u817e\u8baf -\u901a\u8baf\u5de5\u5177' IN BOOLEAN MODE);\n</code></pre> </li> </ul>"},{"location":"web/backend/sql_mysql/#python-api","title":"Python API","text":"<pre><code>import mysql.connector\n\n# the same as sqlite3\n\nconn = mysql.connector.connect(user='root', password='password', database='test')\ncursor = conn.cursor()\ncursor.execute().fetchone() # fetchall()\ncursor.close()\nconn.commit()\nconn.close()\n</code></pre> <p>Flask-MySQL:</p> <pre><code>from flaskext.mysql import MySQL\n\nmysql = MySQL()\nmysql.init_app(app)\n\ncursor = mysql.get_db().cursor()\n\n# insert\nstmt = \"insert into table(columns) values(%s, %s)\"\ncursor.execute(stmt, (val1, val2))\n\n# select\nstmt = \"select * from table\"\ncursor.execute(stmt)\nres = cursor.fetchall() # list of list\n</code></pre>"},{"location":"web/backend/sql_sqlite/","title":"Sqlite3","text":"<p>SQL: Structured Query Language</p>"},{"location":"web/backend/sql_sqlite/#basics","title":"Basics","text":"<ul> <li> <p><code>.sql</code> file</p> <p>contains a series of <code>sql</code> script.</p> </li> </ul>"},{"location":"web/backend/sql_sqlite/#data-types","title":"Data Types","text":"<ul> <li>NULL</li> <li>INTEGER</li> <li>REAL</li> <li>TEXT: character data, unlimited size.</li> <li>BLOB: binary large object, can store any time of data. unlimited size.</li> </ul>"},{"location":"web/backend/sql_sqlite/#create-table","title":"Create Table","text":"<pre><code>CREATE TABLE [IF NOT EXISTS] [schema_name].table_name (\n    column_1 data_type PRIMARY KEY,\n    column_2 data_type NOT NULL,\n    column_3 data_type DEFAULT 0,\n    table_constraints\n) [WITHOUT ROWID];\n</code></pre> <ul> <li><code>primary key</code>: must be unique.</li> </ul> <ul> <li> <p><code>rowid</code>: by default, SQLite adds an implicit column <code>rowid interger</code> . </p> <p>It is used to organize data as a B-tree.</p> </li> </ul> <ul> <li> <p><code>foreign key</code>:</p> <pre><code>-- parent table\nCREATE TABLE supplier_groups (\n  group_id integer PRIMARY KEY,\n  group_name text NOT NULL\n);\n\n-- child table\nCREATE TABLE suppliers (\n    supplier_id   INTEGER PRIMARY KEY,\n    supplier_name TEXT    NOT NULL,\n    group_id      INTEGER NOT NULL, -- define foreign key first\n    FOREIGN KEY (group_id) REFERENCES supplier_groups (group_id)\n);\n</code></pre> <p>this makes it impossible to insert <code>supplier</code> with non-existing <code>group_id</code> in <code>supplier_groups</code>.</p> <p>when deleting &amp; updating in <code>supplier_groups</code>:</p> <pre><code>FOREIGN KEY (foreign_key_columns)\n   REFERENCES parent_table(parent_key_columns)\n      ON UPDATE action \n      ON DELETE action;\n</code></pre> <p>Actions:</p> <ul> <li>no action [Default !]</li> </ul> <ul> <li>set null</li> <li>set default</li> <li>restrict (Cannot delete <code>supplier_groups</code> key unless all <code>supplier</code> with this key has been deleted.)</li> <li>cascade (Delete all <code>supplier</code> with this key too)</li> </ul> </li> </ul>"},{"location":"web/backend/sql_sqlite/#operations","title":"Operations","text":"<ul> <li> <p>INSERT</p> <pre><code>INSERT INTO table (column1,column2 ,..)\nVALUES(value1,    value2 ,...);\nVALUES(value1,    value2 ,...); -- second line\n...\n</code></pre> </li> </ul> <ul> <li> <p>DELETE</p> <pre><code>DELETE FROM table\nWHERE search_condition;\n</code></pre> </li> </ul> <ul> <li> <p>SELECT</p> <pre><code>SELECT    1 + 1;\n\nSELECT column1, column2 FROM table;\nSELECT * FROM table;\n\n-- full syntax\nSELECT DISTINCT column_list\nFROM table_list\n  JOIN table ON join_condition\nWHERE row_filter\nORDER BY column\nLIMIT count OFFSET offset\nGROUP BY column\nHAVING group_filter;\n</code></pre> <ul> <li> <p>DISTINCT</p> <p>remove duplicated results.</p> <pre><code>SELECT DISTINCT city FROM customers ORDER BY city;\n</code></pre> </li> </ul> <ul> <li> <p>WHERE</p> <pre><code>WHERE column_1 = 100;\nWHERE column_2 IN (1,2,3);\nWHERE column_3 LIKE '%pattern%';\nWHERE column_4 BETWEEN 10 AND 20;\n\nWHERE albumid = 1 AND milliseconds &gt; 250000; -- logical operation\n</code></pre> <p>LIKE pattern</p> <p>%: * (any length wildcard)</p> <p>_: . (single char wildcard)</p> </li> </ul> <ul> <li> <p>ORDER BY</p> <p>order by which column</p> </li> </ul> <ul> <li> <p>LIMIT row_count OFFSET offset</p> <p>constrain the max number of rows returned.</p> <p>count starting from OFFSET.</p> </li> </ul> </li> </ul> <ul> <li> <p>UPDATE</p> <p>used to change value of inserted row.</p> <pre><code>UPDATE table\nSET column_1 = new_value_1,\n    column_2 = new_value_2\nWHERE\n    search_condition \nORDER column_or_expression\nLIMIT row_count OFFSET offset;\n</code></pre> </li> </ul>"},{"location":"web/backend/sql_sqlite/#pragma","title":"PRAGMA","text":"<p>Set default behavior.</p> <pre><code>PRAGMA case_sensitive_like = true;\n</code></pre>"},{"location":"web/backend/sql_sqlite/#full-text-search","title":"Full text search","text":"<p>We must use FTS5 virtual table to achieve full text search in SQLite.</p> <p>\u4e0d\u652f\u6301\u4e2d\u6587\u641c\u7d22\uff0c\u9700\u8981\u53e6\u5916\u7684\u7a0b\u5e8f\u5207\u8bcd\uff01</p> <pre><code>create virtual table posts using fts5(title, ctime, mtime, body);\n\nSELECT * \nFROM posts \nWHERE posts MATCH 'fts5'; /* By default, search is case-independent. */\n\n-- equals\n\nSELECT * \nFROM posts \nWHERE posts = 'fts5';\n\n-- equals\n\nSELECT * \nFROM posts('fts5');\n</code></pre> <p>Highlight Aux:</p> <pre><code>SELECT highlight(posts,0, '&lt;b&gt;', '&lt;/b&gt;') title, \n       highlight(posts,1, '&lt;b&gt;', '&lt;/b&gt;') body\nFROM posts \nWHERE posts MATCH 'SQLite'\nORDER BY rank;\n</code></pre>"},{"location":"web/backend/sql_sqlite/#python-api","title":"Python API","text":"<pre><code>import sqlite3\n\n# connect\nconn = sqlite3.connect('example.db')\nc = conn.cursor()\n\n# operations\n# This is the qmark style:\nc.execute(\"insert into people values (?, ?)\", (who, age))\n# And this is the named style:\nc.execute(\"select * from people where name_last=:who and age=:age\", {\"who\": who, \"age\": age})\nprint(c.fetchone())\n\n# save &amp; close\nconn.commit()\nconn.close()\n</code></pre> <ul> <li> <p>Operations:</p> <pre><code># executemany\npurchases = [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),\n             ('2006-04-05', 'BUY', 'MSFT', 1000, 72.00),\n             ('2006-04-06', 'SELL', 'IBM', 500, 53.00),\n            ]\nc.executemany('INSERT INTO stocks VALUES (?,?,?,?,?)', purchases)\n\n# executscript\nc.executescript(\"\"\"\n    create table book(\n        title,\n        author,\n        published\n    );\n\n    insert into book(title, author, published)\n    values (\n        'Dirk Gently''s Holistic Detective Agency',\n        'Douglas Adams',\n        1987\n    );\n    \"\"\")\n\nc.fetchone()\n# Fetches the next row of a query result set, returning a single sequence, or None when no more data is available.\n\nc.fetchall()\n# Fetches all (remaining) rows of a query result, returning a list. Note that the cursor\u2019s arraysize attribute can affect the performance of this operation. An empty list is returned when no rows are available.\n</code></pre> </li> </ul> <ul> <li> <p><code>conn.row_factory</code></p> <p>By default, <code>cur.fetchone()</code> returns a <code>tuple</code>.</p> <p>This is in fact defined by the <code>row_factory</code> attribute.</p> <pre><code>def dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n\ncon = sqlite3.connect(\":memory:\")\ncon.row_factory = dict_factory\ncur = con.cursor()\ncur.execute(\"select 1 as a\")\ncur.fetchone() # a dict now !\n</code></pre> </li> </ul> <ul> <li> <p><code>Row</code></p> <p>A highly optimized <code>row_factory</code>.</p> <pre><code>conn.row_factory = sqlite3.Row\nc = conn.cursor()\nc = execute('select * from stocks')\nr = c.fetchone()\n\ntuple(r) # default tuple\nr.keys() # keys\nlen(r) # length\nr[key] # value\n</code></pre> </li> </ul>"},{"location":"web/deploy/change_server_name/","title":"todo lists when changing domain name","text":"<ul> <li><code>nginx</code> config</li> <li><code>acme.sh</code> SSL certificate</li> <li>all downstream applications.<ul> <li>trojan proxy</li> <li>backend API call</li> </ul> </li> </ul>"},{"location":"web/deploy/gh-pages/","title":"gh-pages","text":""},{"location":"web/deploy/gh-pages/#packagejson","title":"<code>package.json</code>","text":"<pre><code>{\n    ...\n    \"homepage\": \"https://ashawkey.github.io/nonsense\",\n    ...\n    \"scripts\": {\n        ...\n        \"deploy\": \"gh-pages -d build\",\n        ...\n  },\n    ...\n}\n</code></pre>"},{"location":"web/deploy/gh-pages/#command","title":"Command","text":"<pre><code>npm install -D gh-pages\nnpm run build\nnpm run deploy\n</code></pre>"},{"location":"web/deploy/manifest/","title":"Manifest","text":"<p>Assume file directory as:</p> <pre><code># develop\n- public\n    - static\n        - manifest.json\n    - index.html\n- src\n\n\n# after build\n- static\n    - manifest.json\n- index.html\n</code></pre> <pre><code>\n</code></pre> <p>This file determines a web app 's outlook.</p> <pre><code>{\n  \"short_name\": \"nonsense\", // name of app\n  \"name\": \"nonsense frontend\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\", // icon of app\n      \"sizes\": \"512x512\",\n      \"type\": \"image/x-icon\"\n    }\n  ],\n  \"start_url\": \"../index.html\", // start url (relative to manifest.json)\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n</code></pre>"},{"location":"web/deploy/nginx/","title":"Nginx","text":""},{"location":"web/deploy/nginx/#concepts","title":"Concepts","text":"<ul> <li>Proxy (Server): An intermediary for requests from clients.</li> <li>Reverse Proxy (Server): An intermediary for responses from servers.</li> </ul>"},{"location":"web/deploy/nginx/#systemd","title":"Systemd","text":"<p><code>Systemd</code> is a series of commands, it replaces <code>initd</code>  and has <code>pid=1</code>.</p> <pre><code>systemctl reboot \nsystemctl poweroff # halt, suspend, hibernate\n\n# Unit\nsystemctl list-units\n\nsystemctl status\nsystemctl status bluetooth.service\n\nsystemctl is-active application.service\nsystemctl is-failed application.service\nsystemctl is-enabled application.service\n\nsystemctl start apache.service\nsystemctl stop apache.service\nsystemctl restart apache.service\nsystemctl kill apache.service\nsystemctl reload apache.service\n\nsystemctl enable apache.service # sudo ln -s '/usr/lib/systemd/system/apache.service' '/etc/systemd/system/multi-user.target.wants/apache.service'\nsystemctl disable apache.service # remove link\n\nsystemctl cat apache.service # cat config file\n</code></pre>"},{"location":"web/deploy/nginx/#cli","title":"CLI","text":"<pre><code>systemctl start nginx.service\n\nnginx -s reload\nnginx -s stop\nnginx -s quit\n\nnginx -t # test, check config files.\n</code></pre>"},{"location":"web/deploy/nginx/#logs","title":"Logs","text":"<p>default:</p> <pre><code>/var/log/nginx/access.log\n/var/log/nginx/error.log\n</code></pre>"},{"location":"web/deploy/nginx/#configs","title":"Configs","text":"<p>Location: <code>/etc/nginx/nginx.conf</code></p> <ul> <li> <p>Static Website</p> <pre><code># basic\nhttp {\n    server {\n      listen 80;\n        location / {\n            root /data; # root directory\n            index index.html; # http://mysite.com/index.html --&gt; /data/index.html\n        }\n    }\n}\n\n# root vs alias\nhttp {\n    server {\n      listen 80;\n        location /static/ {\n          # location is appended to root\n            root /data; # http://mysite.com/static/ --&gt; /data/static/\n        }\n    }\n    server {\n      listen 80;\n        location /static/ {\n          # location is dropped, and instead use the alias (the trailing `/` is nececssary here!)\n            alias /data/; # http://mysite.com/static --&gt; /data/ \n        }\n    }\n}\n\n\n# auto serve static files\nhttp {\n    server {\n      listen 80;\n      # http://mysite.com/files --&gt; /data/files\n        location /files {\n            root /data; # serve /data/files\n          autoindex on; # automatically show the directory tree (if off, will show 403 Forbidden, but can still access the file using fullname.)\n        }\n    }\n}\n\n# more detailed example of the trailing `/`\n# access: http://localhost/app/path/file\n# server: /root/app/path/file\nlocation /app/ {\n  root /root/; # --&gt; /root/app/path/file\n} \nlocation /app/ {\n  root /root; # --&gt; /root/app/path/file\n} \nlocation /app {\n  root /root/; # --&gt; /root/app/path/file\n} \nlocation /app {\n  root /root; # --&gt; /root/app/path/file\n} \nlocation /app {\n  alias /root/; # --&gt; /root/path/file\n} \nlocation /app {\n  alias /root; # --&gt; (wrong) TODO\n} \n</code></pre> </li> </ul> <ul> <li> <p>Dynamic Website (need backend)</p> <pre><code>http {\n    server {\n      listen 127.0.0.1:8080;\n\n      # / will redirect to uwsgi port\n      location / {\n            include uwsgi_params;\n            uwsgi_pass 127.0.0.1:8000;\n      }\n\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>redirect</p> <pre><code>http {\n    server {\n      ...\n\n        # make a shortname for your github repo:\n        # kiui.moe/g&lt;else&gt; --&gt; github.com/ashawkey&lt;else&gt;\n        location /g {\n            rewrite ^/g(.*)$ https://github.com/ashawkey$1 redirect;\n        }\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Reverse Proxy</p> <p>Proxy to local port:</p> <pre><code>http {\n    server {\n        # access at domain.com/app/&lt;params&gt; \n        location /app {\n          proxy_pass http://127.0.0.1:5000/; # the trailing `/` means relative --&gt; --&gt; localhost:5000/&lt;params&gt;\n            # proxy_pass http://127.0.0.1:5000; # w/o the `/`, it means --&gt; localhost:5000/app/&lt;params&gt;\n\n            # to correctly pass everything:\n            proxy_set_header  X-Real-IP $remote_addr;\n            proxy_set_header  X-Forwarded-For $remote_addr;\n            proxy_set_header  X-Forwarded-Proto $scheme;\n            proxy_set_header  X-Forwarded-Host $http_host;\n            proxy_set_header  Host $host;            \n\n        }\n    }\n}\n\n# more detailed example of the trailing `/`\n# access http://localhost/app/api/abc\nlocation /app/ {\n    proxy_pass http://localhost:1234/; # --&gt; http://localhost:1234/api/abc (relative)\n}\nlocation /app {\n    proxy_pass http://localhost:1234/; # --&gt; http://localhost:1234//api/abc (relative, better not use)\n}\nlocation /app/ {\n    proxy_pass http://localhost:1234; # --&gt; http://localhost:1234/app/api/abc (absolute)\n}\nlocation /app {\n    proxy_pass http://localhost:1234; # --&gt; http://localhost:1234/app/api/abc (absolute)\n}\n</code></pre> </li> </ul> <ul> <li> <p>HTTPS</p> <pre><code>http {\n    server {\n      listen 443 ssl; # https usually use 443\n\n      server_name www.hawia.xyz;\n\n      # \u8d2d\u4e70\u7684\u8bc1\u4e66\u4f4d\u7f6e\n      ssl_certificate cert.pem;\n      ssl_certificate_key cert.key;\n\n      ssl_session_timeout 5m;\n      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #\u4f7f\u7528\u8be5\u534f\u8bae\u8fdb\u884c\u914d\u7f6e\u3002\n      ssl_prefer_server_ciphers on;  \n\n        location / {\n          proxy_pass http://www.example.com/link/;\n        }\n    }\n}\n\n# http auto redirect to https\nserver {\n    listen 80;\n\n    server_name localhost;   #\u5c06localhost\u4fee\u6539\u4e3a\u60a8\u8bc1\u4e66\u7ed1\u5b9a\u7684\u57df\u540d\uff0c\u4f8b\u5982\uff1awww.example.com\u3002\n    rewrite ^(.*)$ https://$host$1 permanent;   #\u5c06\u6240\u6709http\u8bf7\u6c42\u901a\u8fc7rewrite\u91cd\u5b9a\u5411\u5230https\u3002\n\n    location / {\n      index index.html index.htm;\n  }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Load Balance</p> <pre><code>http {\n  upstream load_balance_server {\n      server 192.168.1.11:80   weight=5;\n      server 192.168.1.12:80   weight=1;\n      server 192.168.1.13:80   weight=6;\n  }    \n    server {\n      ...\n    }\n}\n</code></pre> </li> </ul>"},{"location":"web/deploy/pm2/","title":"pm2","text":"<p>A daemon manager for <code>node.js</code> backend servers.</p>"},{"location":"web/deploy/pm2/#install","title":"install","text":"<pre><code>npm install -g pm2\n</code></pre>"},{"location":"web/deploy/pm2/#usage","title":"usage","text":"<pre><code># start a server in background\npm2 start [--name &lt;name&gt;] [--log &lt;path&gt;] app.js\n\n# start using bash\npm2 start run.sh\n\n# with env variables\nPORT=8088 pm2 start app.js\n\n# list\npm2 l|ls|list|status\n\n# attach to output logs\npm2 logs # all\npm2 logs &lt;name/id&gt;\n\n# manage log in a dashboard\npm2 monit\n\n# manage\npm2 restart &lt;name/id&gt; # use `all` to act on all apps.\npm2 stop &lt;name/id&gt;\npm2 delete &lt;name/id&gt;\n</code></pre>"},{"location":"web/deploy/ssl_acmesh/","title":"SSL","text":""},{"location":"web/deploy/ssl_acmesh/#ssl-secure-sockets-layer","title":"SSL: secure sockets layer","text":"<p>Protocols for establishing authenticated and encrypted links between networked computers.</p> <p>The protocol is deprecated in 1999 with TLS release, but still used to refer to this technique.</p>"},{"location":"web/deploy/ssl_acmesh/#tls-transport-layer-security","title":"TLS: transport layer security","text":"<p>Successor of SSL.</p>"},{"location":"web/deploy/ssl_acmesh/#https","title":"HTTPS","text":"<p>Tunnel HTTP over TSL/SSL which encrypts the HTTP payload.</p> <p>You need to buy certificates.</p> <p>Or use free license by <code>acme.sh</code>  !</p>"},{"location":"web/deploy/ssl_acmesh/#acmesh","title":"acme.sh","text":"<p>https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</p> <pre><code>curl  https://get.acme.sh | sh\nalias acme.sh=~/.acme.sh/acme.sh\n\n# setup auto upgrade\nacme.sh --upgrade --auto-upgrade\n\n# setup http for nginx (i.e, the website can be accessed by http), so acme.sh can verify your identity.\n# server {listen 80; ...} \n\n# issue a license for nginx\n# -d must be in nginx config (`server_name www.kiui.moe;`)\n# Some times it reports `can't get nonce` or looping `sleep 10 and retry`, just re-run the code several times :)\n# Other times it reports processing --&gt; timeout, just try later.\nacme.sh --issue -d www.kiui.moe --nginx # --debug 2\n\n# install cert\nacme.sh --install-cert \\\n        -d www.kiui.moe \\\n        --key-file /etc/nginx/key.pem  \\\n        --fullchain-file /etc/nginx/cert.pem \\\n        --reloadcmd \"systemctl restart nginx\"\n\n# setup https for nginx. (in manual)\n# server {listen 443 ssl; ...}\n\n# manual renew all certs\nacme.sh --cron --force # --debug 2\n</code></pre>"},{"location":"web/deploy/uwsgi/","title":"uWSGI","text":""},{"location":"web/deploy/uwsgi/#install","title":"Install","text":"<pre><code># error link: gcc version\nupdate-alternatives --remove-all gcc\nupdate-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 10\nupdate-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10\nupdate-alternatives --config gcc # choose version&lt;5\n\n# install\npip install uwsgi\n\n# error: libpcre\nln -s /root/anaconda3/lib/libpcre.so.1 /lib\n</code></pre>"},{"location":"web/deploy/uwsgi/#config","title":"Config","text":"<p>uwsgi.ini</p> <pre><code>[uwsgi]\n#\u914d\u5408nginx\u4f7f\u7528\nsocket = 127.0.0.1:8000\n#\u9879\u76ee\u8def\u5f84 /Users/xiaoyuan/Desktop/flask_test\nchdir = \u81ea\u5df1\u9879\u76ee\u8def\u5f84\n#wsgi\u6587\u4ef6 run\u5c31\u662fflask\u542f\u52a8\u6587\u4ef6\u53bb\u6389\u540e\u7f00\u540d app\u662frun.py\u91cc\u9762\u7684Flask\u5bf9\u8c61 \nmodule = run:app\n#\u6307\u5b9a\u5de5\u4f5c\u8fdb\u7a0b\nprocesses = 4\n#\u4e3b\u8fdb\u7a0b\nmaster = true\n#\u6bcf\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u67092\u4e2a\u7ebf\u7a0b\nthreads = 2\n#\u6307\u7684\u540e\u53f0\u542f\u52a8 \u65e5\u5fd7\u8f93\u51fa\u7684\u5730\u65b9\ndaemonize = uwsgi.log\n#\u4fdd\u5b58\u4e3b\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53f7\npidfile = uwsgi.pid\n</code></pre>"},{"location":"web/deploy/uwsgi/#setup-nginx","title":"Setup  Nginx","text":"<pre><code>server {\n    # \u76d1\u542c\u7aef\u53e3\n    listen 80;\n\n    # \u76d1\u542cip \u6362\u6210\u670d\u52a1\u5668\u516c\u7f51IP\n    server_name 127.0.0.1;\n\n    #\u52a8\u6001\u8bf7\u6c42\n    location / {\n      include uwsgi_params;\n      uwsgi_pass 127.0.0.1:8000;\n    }\n\n    #\u9759\u6001\u8bf7\u6c42\n    location /static {\n        alias /Users/xiaoyuan/Desktop/flask_test/static;\n    }\n}\n</code></pre>"},{"location":"web/deploy/uwsgi/#cli","title":"CLI","text":"<pre><code># run\nuwsgi --ini uwsgi.ini \n\n# reload\nuwsgi --reload uwsgi.pid\n\n# stop\nuwsgi --stop uwsgi.pid\n\n# find pid if deleted uwsgi.pid\nps aux | grep uwsgi\n</code></pre>"},{"location":"web/frontend/chrome_debugger/","title":"chrome F12 debugger","text":""},{"location":"web/frontend/chrome_debugger/#inspect","title":"Inspect","text":"<p><code>Ctrl+Shift+C</code> then click the element. Or right click the element and <code>inspect</code>.</p>"},{"location":"web/frontend/chrome_debugger/#_1","title":"chrome F12 debugger","text":""},{"location":"web/frontend/chrome_debugger/#css-editor","title":"CSS editor","text":"<p>In the bottom of <code>elements</code> tab, it has a <code>style</code> tab that shows the CSS rules applied.</p> <p>It is just so helpful QwQ.</p> <p></p>"},{"location":"web/frontend/chrome_debugger/#pitfalls","title":"Pitfalls","text":"<ul> <li>JS caching: chrome will cache the <code>javascript</code> code by default, use <code>Ctrl + F5</code> FULL refresh to make sure the code is up to date.</li> </ul>"},{"location":"web/frontend/i18n/","title":"i18n","text":"<p>stands for Internationalization, <code>i-18 letters-n</code>.</p>"},{"location":"web/frontend/i18n/#i18next","title":"i18next","text":"<p>Install:</p> <pre><code>npm install react-i18next i18next --save\n\n# if you'd like to detect user language and load translation\nnpm install i18next-http-backend i18next-browser-languagedetector --save\n</code></pre> <p><code>i18n.js</code>: settings.</p> <pre><code>import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n.use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n      fallbackLng: 'en',\n      debug: true,\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      }\n    });\n\n\nexport default i18n;\n</code></pre> <p><code>index.js</code> need to load it.</p> <pre><code>import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './App';\n\n// import i18n (needs to be bundled ;)) \nimport './i18n';\n\nReactDOM.render(\n  &lt;App /&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre> <p><code>App.js</code> use case:</p> <pre><code>import React, { Component, Suspense } from 'react';\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport logo from './logo.svg';\nimport './App.css';\n\n// use hoc for class based components\nclass LegacyWelcomeClass extends Component {\n  render() {\n    const { t } = this.props;\n    return &lt;h2&gt;{t('title')}&lt;/h2&gt;;\n  }\n}\nconst Welcome = withTranslation()(LegacyWelcomeClass);\n\n// Component using the Trans component\nfunction MyComponent() {\n  return (\n    &lt;Trans i18nKey=\"description.part1\"&gt;\n      To get started, edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.\n    &lt;/Trans&gt;\n  );\n}\n\n// page uses the hook\nfunction Page() {\n  const { t, i18n } = useTranslation();\n\n  const changeLanguage = (lng) =&gt; {\n    i18n.changeLanguage(lng);\n  };\n\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;div className=\"App-header\"&gt;\n        &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt;\n        &lt;Welcome /&gt;\n        &lt;button type=\"button\" onClick={() =&gt; changeLanguage('de')}&gt;\n          de\n        &lt;/button&gt;\n        &lt;button type=\"button\" onClick={() =&gt; changeLanguage('en')}&gt;\n          en\n        &lt;/button&gt;\n      &lt;/div&gt;\n      &lt;div className=\"App-intro\"&gt;\n        &lt;MyComponent /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;{t('description.part2')}&lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\n// loading component for suspense fallback\nconst Loader = () =&gt; (\n  &lt;div className=\"App\"&gt;\n    &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt;\n    &lt;div&gt;loading...&lt;/div&gt;\n  &lt;/div&gt;\n);\n\n// here app catches the suspense from page in case translations are not yet loaded\nexport default function App() {\n  return (\n    &lt;Suspense fallback={&lt;Loader /&gt;}&gt;\n      &lt;Page /&gt;\n    &lt;/Suspense&gt;\n  );\n}\n</code></pre> <pre><code>// useTranslation hook can also accept a namespace\nconst { t, i18n } = useTranslation(['translation', 'common']);\nt('common:a.b');\n</code></pre> <p>translation files:</p> <p><code>public/locales/&lt;lng&gt;/translation.json</code></p> <pre><code>{\n  \"title\": \"Welcome to react using react-i18next\",\n  \"description\": {\n    \"part1\": \"To get started, edit &lt;1&gt;src/App.js&lt;/1&gt; and save to reload.\",\n    \"part2\": \"Switch language between english and german using buttons above.\"\n  }\n}\n</code></pre>"},{"location":"web/frontend/javascript_advanced/","title":"JavaScript Advanced","text":""},{"location":"web/frontend/javascript_advanced/#strict-mode","title":"Strict mode","text":"<pre><code>\"use strict\";\n\nfunction foo(){\n    \"use strict\";\n}\n</code></pre>"},{"location":"web/frontend/javascript_advanced/#globalthis","title":"<code>globalThis</code>","text":"<p>A standard way to access the global environment in different js environments. </p> <p>e.g., It equals to <code>window, self, frames</code> in browser, and <code>global</code> in nodejs.</p> <pre><code>// it works like this:\nvar getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nvar globals = getGlobal();\n</code></pre>"},{"location":"web/frontend/javascript_advanced/#prototype-chain","title":"Prototype Chain","text":"<ul> <li>All the reference types are Objects.</li> <li>All the reference types have <code>_proto_</code> attribute.</li> <li>Function has <code>prototype</code> attribute.</li> <li>All the reference types' <code>_proto_</code> points to its constructor's <code>prototype</code></li> <li>If an attribute cannot be found in an object, then find it in the object's <code>_proto_</code>.</li> </ul>"},{"location":"web/frontend/javascript_advanced/#hoisting","title":"Hoisting (\u58f0\u660e\u63d0\u524d)","text":"<p>Function and Variable declarations will be hoisted at runtime (in their domains, i.e., global or local function). </p> <p>However, it only hoists Declarations, not Initializations.</p> <pre><code>var a = 99;            // \u5168\u5c40\u53d8\u91cfa\nf();                   // f\u662f\u51fd\u6570\uff0c\u867d\u7136\u5b9a\u4e49\u5728\u8c03\u7528\u7684\u540e\u9762\uff0c\u4f46\u662f\u51fd\u6570\u58f0\u660e\u4f1a\u63d0\u5347\u5230\u4f5c\u7528\u57df\u7684\u9876\u90e8\u3002 \nconsole.log(a);        // a=&gt;99,  \u6b64\u65f6\u662f\u5168\u5c40\u53d8\u91cf\u7684a\nfunction f() {\n  console.log(a);      // \u5f53\u524d\u7684a\u53d8\u91cf\u662f\u4e0b\u9762\u53d8\u91cfa\u58f0\u660e\u63d0\u5347\u540e\uff0c\u9ed8\u8ba4\u503cundefined\n  var a = 10;\n  console.log(a);      // a =&gt; 10\n}\n\n// \u5b9e\u9645\u8fd0\u884c\u987a\u5e8f\nvar a = 99;\nfunction f() {\n  var a;\n  console.log(a);     \n  a = 10;\n  console.log(a);\n}\nf();\nconsole.log(a);\n\n// \u8f93\u51fa\u7ed3\u679c\uff1a\nundefined\n10\n99\n</code></pre>"},{"location":"web/frontend/javascript_advanced/#class-es6","title":"Class (ES6)","text":""},{"location":"web/frontend/javascript_advanced/#basics","title":"basics","text":"<ul> <li> <p>Classes are \"special functions\".</p> <pre><code>// function syntax\nfunction Person(name, age){\n    return {\n        name: name,\n        age: age,\n        get_name: function() {return this.name;},\n        get_age: function() {return this.age;},\n    };\n}\n\nvar p = Person('Tom', 23);\np.get_name();\n\n// class syntax\nclass Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    get_name() {return this.name;}\n    get_age() {return this.age;}\n}\n\nvar p = new Person('Tom', 23); // create a new empty object.\np.get_name();\n</code></pre> </li> </ul> <ul> <li> <p><code>new</code>:</p> <p>It creates a new empty object, then call the function specified, with <code>this</code> set to that new object.</p> <p>The function returns <code>undefined</code>, it's <code>new</code> that returns <code>this</code> object to the variable.</p> </li> </ul> <ul> <li> <p><code>prototype</code>:</p> <p><code>X.prototype</code> is an object shared by all instances of <code>X</code>.</p> <pre><code>// prototype way to define a class\nfunction Person(name, age) {\n  this.name = name;\n    this.age = age;\n}\n\nPerson.prototype.get_name = function() { return this.name; }\nPerson.prototype.get_age = function() { return this.age; }\n</code></pre> <p>Use it to add flexibility to any class:</p> <pre><code>var s = 'Simon';\ns.reversed(); // TypeError on line 1: s.reversed is not a function\n\nString.prototype.reversed = function() {\n  var r = '';\n  for (var i = this.length - 1; i &gt;= 0; i--) {\n    r += this[i];\n  }\n  return r;\n};\n\ns.reversed(); // nomiS\n</code></pre> </li> </ul> <ul> <li> <p><code>this</code>:</p> <p>it can refers to different things under different contexts:</p> <ul> <li>Function: current object.</li> <li>Dot/Bracket notation: the leading object.</li> <li>Else: the global object.</li> </ul> <p>A <code>this</code> way to build a class:</p> <pre><code>function Person(name, age) {\n  this.name = name;\n    this.age = age;\n    this.get_name = function() { return this.name; }\n    this.get_age = function() { return this.age; }\n} // remember function is an object too.\n\nvar p = new Person('Tom', 23)\n</code></pre> <p>We can use <code>Function.prototype.bind()</code> to change <code>this</code>:</p> <pre><code>var p = makePerson('Tom', 23);\n\nvar get_name = p.get_name;\nget_name(); // undefined, this = the global object\n\nvar get_name_p = get_name.bind(p); // set this = p\nget_name_p(); // 'Tom'\n</code></pre> </li> </ul> <ul> <li>Class definitions are not hoisted. You must declare it first, then use it.</li> <li>Other examples:</li> </ul> <pre><code>//// defeine a class\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\nlet Rectangle = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n// tricky, the class name is in fact Rectangle2. use `Rectangle.name` to see it.\nlet Rectangle = class Rectangle2 {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n//// class body\n// member variables and methods\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get area() {\n    return this.calcArea();\n  }\n  // Method\n  calcArea() {\n    return this.height * this.width;\n  }\n}\n\nconst square = new Rectangle(10, 10);\nconsole.log(square.area); // 100\n\n// static variables &amp; methods (Acess by class name!)\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static displayName = \"Point\";\n  static distance(a, b) {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n\n    return Math.hypot(dx, dy);\n  }\n}\n\nconst p1 = new Point(5, 5);\nconst p2 = new Point(10, 10);\np1.displayName; // undefined\np1.distance;    // undefined\n\nconsole.log(Point.displayName);      // \"Point\"\nconsole.log(Point.distance(p1, p2)); // 7.0710678118654755\n\n//// public class fields (experimental)\nclass Rectangle {\n  height = 0; // support default value\n  width;\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n//// private class fields\nclass Rectangle {\n  #height = 0; // can only be accessed inside class body\n  #width;\n  constructor(height, width) {\n    this.#height = height;\n    this.#width = width;\n  }\n}\n\n//// inheritance by `extends`\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name); // call the super class constructor and pass in the name parameter\n  }\n\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nlet d = new Dog('Mitzie');\nd.speak(); // Mitzie barks.\n\n//// inheritance by prototype\nfunction Teacher(name, age, subject) {\n    Person.call(this, name, age);\n    this.subject = subject;\n}\n\nTeacher.prototype = Object.create(Person.prototype)\n\n//// instance of\nconsole.log(d instanceof Dog); // true\n\n//// super\nclass Cat {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Lion extends Cat {\n  speak() {\n    super.speak();\n    console.log(`${this.name} roars.`);\n  }\n}\n\nlet l = new Lion('Fuzzy');\nl.speak();\n// Fuzzy makes a noise.\n// Fuzzy roars.\n</code></pre>"},{"location":"web/frontend/javascript_advanced/#tips","title":"Tips","text":"<ul> <li><code>var</code> is deprecated. Use <code>const</code> and <code>let</code>.</li> <li>use <code>for (elem of collection)</code>, not <code>for (elem in collection)</code></li> </ul>"},{"location":"web/frontend/javascript_async/","title":"asynchronous programming","text":""},{"location":"web/frontend/javascript_async/#promise","title":"Promise","text":"<p>A <code>Promise</code>  is an object representing the eventual completion or failure of an asynchronous operation.</p> <p>e.g., <code>fetch()</code> returns a <code>Promise</code>.</p> <p>It is always in one of these states: <code>pending, fufilled, rejected.</code></p> <p>Use <code>then()</code> to add callbacks to <code>fufilled</code> promises, and <code>catch()</code> for <code>rejected</code> promises.</p> <p>Some guarantees:</p> <ul> <li>Callbacks added with <code>then()/catch()</code> will never be invoked before the completion of the current run of the JavaScript event loop</li> <li>These callbacks will be invoked even if they were added after the success or failure of the asynchronous operation that the promise represents.</li> <li>(Chaining) Multiple callbacks may be added by calling <code>then()</code> several times. They will be invoked one after another, in the order in which they were inserted.</li> </ul> <p>Chaining:</p> <pre><code>doSomething()\n.then(result =&gt; doSomethingElse(result))\n.then(newResult =&gt; doThirdThing(newResult))\n.then(finalResult =&gt; {console.log(`Got the final result: ${finalResult}`);})\n.catch(failureCallback);\n\ndoAnotherthing(); // this will not wait until doSomething() finish !\n</code></pre> <p>Catching errors:</p> <pre><code>new Promise((resolve, reject) =&gt; {\n    console.log('Initial');\n    resolve();\n})\n.then(() =&gt; {\n    throw new Error('Something failed');\n    console.log('Do this');\n})\n.catch(() =&gt; {\n    console.error('Do that');\n})\n.then(() =&gt; {\n    console.log('Do this, no matter what happened before');\n});\n</code></pre>"},{"location":"web/frontend/javascript_async/#create-promises-manually","title":"Create promises manually","text":"<pre><code>let p = new Promise((resolveFunc[, rejectFunc]) =&gt; {\n    // do something\n    // if you returned something, it will be passed to `then`.\n});\n\np.then(handleResolveFunc[, handleRejectFunc]);\n\nPromise.resolve([value]) // returns a dummy resolved Promise with value.\n</code></pre> <p>examples:</p> <pre><code>const wait = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms));\n\nwait(10*1000).then(() =&gt; console.log(\"10 seconds later\"));\n</code></pre> <pre><code>const wait = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms));\n\nwait(0).then(() =&gt; console.log(4)); // need to resolve (even 0 ms), second in task queue.\nPromise.resolve().then(() =&gt; console.log(2)).then(() =&gt; console.log(3)); // already resolved promise, first in task queue\nconsole.log(1); // not in task queue\n\n// 1, 2, 3, 4\n</code></pre>"},{"location":"web/frontend/javascript_async/#async-await","title":"async / await","text":"<p><code>async</code> can be put in front of a function to make it async, i.e., return a Promise.</p> <pre><code>async function hello() { return \"Hello\" };\nhello(); // return a Promise\nhello().then((value) =&gt; console.log(value)); // output Hello.\nhello().then(console.log) // shorter ver.\n</code></pre> <p><code>await</code> can be put in front of a <code>Promise</code> to pause program until it fulfills.</p> <pre><code>async function hello() {\n  return greeting = await Promise.resolve(\"Hello\");\n};\n\nhello().then(alert);\n</code></pre> <p>They can be used to replace <code>then()</code> chains:</p> <pre><code>// then ver.\nfetch('coffee.jpg')\n.then(response =&gt; {\n  if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`);}\n  return response.blob();\n})\n.then(myBlob =&gt; {\n  let objectURL = URL.createObjectURL(myBlob);\n  let image = document.createElement('img');\n  image.src = objectURL;\n  document.body.appendChild(image);\n})\n.catch(e =&gt; {\n  console.log('There has been a problem with your fetch operation: ' + e.message);\n});\n\n// async ver.\nasync function myFetch() {\n  let response = await fetch('coffee.jpg');\n  if (!response.ok) {throw new Error(`HTTP error! status: ${response.status}`);}\n  let myBlob = await response.blob();\n  let objectURL = URL.createObjectURL(myBlob);\n  let image = document.createElement('img');\n  image.src = objectURL;\n  document.body.appendChild(image);\n}\n\nmyFetch()\n.catch(e =&gt; {\n  console.log('There has been a problem with your fetch operation: ' + e.message);\n});\n</code></pre>"},{"location":"web/frontend/javascript_basics/","title":"JavaScript Basics","text":""},{"location":"web/frontend/javascript_basics/#commons","title":"Commons","text":"<pre><code>var a = 1; // use ;\n/* this is a comment */\n{} // this is an object. (it works like python dict)\n</code></pre>"},{"location":"web/frontend/javascript_basics/#types","title":"Types","text":"<ul> <li> <p><code>Number</code></p> <ul> <li>Double-precision 64-bit. Only Float, No Integer.</li> </ul> <ul> <li> <p>Convert</p> <pre><code>100.toString()\n\nparseInt('100', 10); // =100\nparseInt('11', 2); // =3\n\n+'42'; // unary operator, =42\nparseInt('Hello', 10); // =NaN, isNaN()\n1/0; // =Infinity, isFinite()\n</code></pre> </li> </ul> <p><code>BigInt</code>: </p> <pre><code>const a = 99999999999999999999999999n\nconst b = BigInt(123456789123456789)\n</code></pre> </li> </ul> <ul> <li> <p><code>String</code></p> <ul> <li><code>utf-16</code></li> </ul> <ul> <li> <p>Methods</p> <pre><code>'hello'.length; // 5\n'hello'.charAt(0); // 'h'\n'hello, world'.replace('world', 'mars'); // \"hello, mars\"\n</code></pre> </li> </ul> <ul> <li> <p>template strings</p> <pre><code>\"\" // normal strings 1\n'' // normal strings 2\n`` // template strings\n\n`\\`` === '`' // --&gt; true\n`string text ${expression} string text` // support variables!\n`line1\n line2` // support multi-line\n\n// tagged templates. An advanced string manipulation way.\nlet person = 'Mike';\nlet age = 28;\n\nfunction myTag(strings, personExp, ageExp) {\n  let str0 = strings[0]; // \"That \"\n  let str1 = strings[1]; // \" is a \"\n  let str2 = strings[2]; // \".\"\n\n  let ageStr;\n  if (ageExp &gt; 99){\n    ageStr = 'centenarian';\n  } else {\n    ageStr = 'youngster';\n  }\n\n  // We can even return a string built using a template literal\n  return `${str0}${personExp}${str1}${ageStr}${str2}`;\n}\n\nlet output = myTag`That ${ person } is a ${ age }.`;\n\nconsole.log(output);\n// That Mike is a youngster.\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p><code>Boolean</code></p> <ul> <li><code>true</code></li> <li><code>false</code>: <code>0, '', \"\", NaN, null, undefined</code></li> </ul> </li> </ul> <ul> <li><code>Object</code>    Function, Array, Date, RegExp</li> </ul> <ul> <li><code>Symbol</code></li> </ul> <ul> <li><code>null</code>: non-value</li> </ul> <ul> <li><code>undefined</code>: uninitialized variable</li> </ul>"},{"location":"web/frontend/javascript_basics/#variables","title":"Variables","text":"<p>Pass by value.</p> <ul> <li> <p><code>var</code> </p> <p>variables. most common. (however deprecated.)</p> <p>Maybe Global or Local, depending on where we declare it.</p> </li> </ul> <ul> <li> <p><code>let</code></p> <p>block-level variables. </p> <p>Visible in the block it is enclosed in.</p> <p>No hoisting. </p> <p>Can be declared only once.</p> <pre><code>let a; // undefined\nlet b = 1;\nfor (let i=0; i&lt;5; i++) {}\n\n{var i = 9;} \nconsole.log(i);  // 9\n\n{let j = 9;} \nconsole.log(j);  // Uncaught ReferenceError: j is not defined\n</code></pre> </li> </ul> <ul> <li> <p><code>const</code></p> <p>constants.</p> <p>Maybe Global or Local, depending on where we declare it.</p> </li> </ul>"},{"location":"web/frontend/javascript_basics/#operators","title":"Operators","text":"<pre><code>'3' + 4 + 5;  // \"345\"\n 3 + 4 + '5'; // \"75\"\n\n// ==, != do type conversion\n123 == '123'; // true\n1 == true; // true\n\n// ===, !== avoid type conversion\n123 === '123'; // false\n1 === true;    // false\n</code></pre>"},{"location":"web/frontend/javascript_basics/#controls","title":"Controls","text":"<pre><code>for (let value of array) {}\nfor (let prop in object) {} // depracated\n\nswitch (action) {\n  case 'draw':\n    drawIt();\n    break;\n  case 'eat':\n    eatIt();\n    break;\n  default:\n    doNothing();\n}\n</code></pre>"},{"location":"web/frontend/javascript_basics/#objects","title":"Objects","text":"<p>Objects in JavaScript are like Dictionaries in Python.</p> <p>Pass by Reference.</p> <ul> <li> <p>Create</p> <pre><code>var obj = new Object();\nvar obj = {}; // object literal syntax\nvar obj = {\n  name: 'Carrot',\n  details: {\n    color: 'orange',\n    size: 12\n  }\n};\n</code></pre> </li> </ul> <ul> <li> <p>Attribute Access</p> <pre><code>obj.details.color;\nobj['details']['color'];\n</code></pre> </li> </ul>"},{"location":"web/frontend/javascript_basics/#arrays","title":"Arrays","text":"<p>A special type of Object. (Not a list, still a dictionary!)</p> <pre><code>var a = new Array();\na[0] = 0;\na.length; // 1\n\nvar a = ['dog', 'cat', 'hen'];\na[100] = 'fox';\na.length; // 101\ntypeof a[90]; // undefined\n\na.push('fox');\na.push('a', 'b', 'c');\na.pop();\na.slice(start[, end]);\na.sort([cmpfn])\n\n// splice(start, delete_num, append)\na.splice(5, 1) // delete index=5 element\na.splice(0, 0, 'x') // insert 'x' at index=0\na.splice(a.indexOf('x'), 1) // delete 'x'\n</code></pre>"},{"location":"web/frontend/javascript_basics/#functions","title":"Functions","text":"<ul> <li>If no <code>return</code>, return <code>undefined</code>.</li> </ul> <ul> <li> <p>Parameters</p> <pre><code>function add(x, y){\n    var total = x + y;\n    return total;\n}\n\nadd(); // NaN\nadd(1,2,4); // 3 (4 is ignored.)\n</code></pre> </li> </ul> <ul> <li> <p>Arguments</p> <pre><code>function add() {\n  var sum = 0;\n  for (var i = 0, j = arguments.length; i &lt; j; i++) {\n    sum += arguments[i];\n  }\n  return sum;\n}\nadd(2, 3, 4, 5); // 14\n\nfunction avg(...args) {\n  var sum = 0;\n  for (let value of args) {\n    sum += value;\n  }\n  return sum / args.length;\n}\navg(2, 3, 4, 5); // 3.5\n\nvar avg = function() {\n  var sum = 0;\n  for (var i = 0, j = arguments.length; i &lt; j; i++) {\n    sum += arguments[i];\n  }\n  return sum / arguments.length;\n};\n</code></pre> </li> </ul> <ul> <li> <p>Lambda function</p> <pre><code>var a = 1;\nvar b = 2;\n\n(function() {\n  var b = 3;\n  a += b;\n})();\n\na; // 4\nb; // 2\n</code></pre> </li> </ul> <ul> <li> <p>IIFE (Immediately Invoked Function Expressions)</p> <pre><code>var charsInBody = (function counter(elm) {\n  var count = 0;\n  for (var i = 0, child; child = elm.childNodes[i]; i++) {\n    count += counter(child); // recursion\n  }\n  return count;\n})(document.body);\n</code></pre> </li> </ul>"},{"location":"web/frontend/javascript_basics/#exports-imports","title":"Exports &amp; Imports","text":"<p>Export by:</p> <pre><code>// App.js\nexport default App;\nexport {function1, variable1};\nexport function function2() {}\n</code></pre> <p>Import by:</p> <pre><code>// default\nimport App from \"./App\"\n\n// interfaces\nimport {function1, variable1} from \"./App\"\n\n// mixed\nimport App, {function1 as foo, function2, variable1 as bar} from \"./App\"\n\n// all\nimport * as myModule from \"./App\"\nmyModule.App\n\n// only run global code, without importing anything.\nimport '/modules/my-module.js';\n\n// dynamic\nimport(\".App.js\").then(\n    (module) =&gt; {\n        ...    \n    }\n);\n</code></pre>"},{"location":"web/frontend/javascript_basics/#closures","title":"Closures","text":"<pre><code>function makeAdder(a) {\n  return function(b) {\n    return a + b;\n  };\n}\nvar add5 = makeAdder(5);\nvar add20 = makeAdder(20);\nadd5(6); // 11\nadd20(7); // 27\n</code></pre>"},{"location":"web/frontend/lodash/","title":"lodash","text":"<p>A JS utility library imported as <code>_</code>.</p> <p>Mainly for arrays, numbers, objects, strings.</p>"},{"location":"web/frontend/lodash/#install","title":"install","text":"<pre><code>npm install -S lodash\n</code></pre>"},{"location":"web/frontend/lodash/#usage","title":"usage","text":"<pre><code>import _ f\n\n_.defaults({ 'a': 1 }, { 'a': 3, 'b': 2 });\n// \u2192 { 'a': 1, 'b': 2 }\n_.partition([1, 2, 3, 4], n =&gt; n % 2);\n// \u2192 [[1, 3], [2, 4]]\n</code></pre>"},{"location":"web/frontend/nodejs_basics/","title":"Node.js","text":""},{"location":"web/frontend/nodejs_basics/#install-update-in-ubuntu","title":"install &amp; update in ubuntu","text":"<p>ubuntu default install is low-version:</p> <pre><code>sudo apt install nodejs npm\n</code></pre> <p>Update to stable:</p> <pre><code>sudo npm install -g n\nsudo n stable\nsudo npm install -g npm\n</code></pre> <p>need to restart shell to use new version!</p>"},{"location":"web/frontend/nodejs_basics/#node","title":"<code>node</code>","text":"<p>Node.js is a JavaScript run-time environment.</p> <p>It allows developers to write JavaScript outside of a browser.</p> Difference Node.js no DOM require Browser DOM import <p>(DOM = Document Object Model)</p> <ul> <li> <p>CMD</p> <pre><code>node app.js\nnode app.js 1 2 3\n</code></pre> <pre><code>// retrieve arguments\nprocess.argv.forEach((val, index) =&gt; {console.log(`${index}: ${val}`)})\n</code></pre> </li> </ul> <ul> <li> <p>REPL</p> <pre><code>node\n</code></pre> <p>Special Commands:</p> <ul> <li><code>.help</code></li> <li><code>.clear</code></li> <li><code>.load &lt;file&gt;</code> </li> <li><code>.save &lt;file&gt;</code></li> <li><code>.exit</code> the REPL.</li> </ul> </li> </ul> <ul> <li> <p>Core Module: <code>process</code></p> <pre><code>process.exit()\nprocess.env.ENV_VAR\n</code></pre> </li> </ul> <ul> <li> <p>Input from CMD</p> <pre><code>const readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n})\n\nreadline.question(`What's your name?`, \n  name =&gt; {\n    console.log(`Hi ${name}!`);\n    readline.close();\n  }\n)\n</code></pre> </li> </ul> <ul> <li> <p>Expose</p> <pre><code>// car.js\nconst car = {}\nmodule.exports = car\n// in other files:\nconst car = require('./car.js')\n</code></pre> <pre><code>// car.js\nexports.car = {}\n// in other files:\nconst items = require('./car.js')\nitems.car\n</code></pre> </li> </ul>"},{"location":"web/frontend/nodejs_basics/#npm-node-package-manager","title":"<code>npm</code>: Node Package Manager","text":"<pre><code>npm install # based on package.json, install in local node_modules folder.\nnpm install &lt;pkg&gt; # specific, install in local folder, and add it to package.json.\nnpm install &lt;pkg&gt;@version # install old versions\n\nnpm install -g &lt;pkg&gt; # install in global folder.\nnpm install -S &lt;pkg&gt; # --save, also add ref in package.json\nnpm install -D &lt;pkg&gt; # --save-dev, also add dev-dependencies in package.json\nnpm root -g # the global folder. (/usr/local/lib/node_modules)\n\nnpm uninstall &lt;pkg&gt; \nnpm uninstall -S &lt;pkg&gt;  # --save, also remove ref in package.json\nnpm uninstall -D &lt;pkg&gt;  # --save-dev, also remove dev-dependencies in package.json\nnpm uninstall -g &lt;pkg&gt;  # global\n\n# check package installed versions\nnpm list # list all installed packages with version. (recursive! maybe very long)\nnpm list --depth 0 # use this instead.\n\n# check package installed/wanted/latest versions\nnpm outdated\n\n# update packages only to the wanted version!!! \nnpm update # all\nnpm update &lt;pkg&gt; # a specific\n\n# update to the latest versions\nnpm install &lt;pkg&gt;@latest\n\n# force update all package to latest versions\nnpx npm-check-updates -u \nnpm install\n</code></pre>"},{"location":"web/frontend/nodejs_basics/#init-a-project","title":"init a project","text":"<pre><code>npm init -y # --yes\n</code></pre> <p>this will create a <code>package.json</code>.</p> <pre><code>// package.json\n{\n  \"name\": \"nerf\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"source.js\",\n  \"dependencies\": {\n    \"three\": \"^0.129.0\"\n  },\n  \"devDependencies\": {},\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre> <p>React provides a better init setup by:</p> <p><code>npx create-react-app &lt;name&gt;</code></p> <p>It installs lots of default packages.</p>"},{"location":"web/frontend/nodejs_basics/#npx-node-package-runner","title":"<code>npx</code>: Node Package Runner","text":"<pre><code>npm install cowsay # executables in .bin\n# how to run\n./node_modules/.bin/cowsay\n# a better solution\nnpx cowsay\n</code></pre> <pre><code>npx node@10 # run specific version of node\nnpx https://xxx # run code from web\n</code></pre>"},{"location":"web/frontend/nodejs_basics/#packagejson","title":"<code>package.json</code>","text":"<pre><code>{\n  \"name\": \"test-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Vue.js project\",\n  \"main\": \"src/main.js\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n    \"start\": \"npm run dev\",\n    \"unit\": \"jest --config test/unit/jest.conf.js --coverage\",\n    \"test\": \"npm run unit\",\n    \"lint\": \"eslint --ext .js,.vue src test/unit\",\n    \"build\": \"node build/build.js\"\n  },\n  // Production\n  \"dependencies\": {\n    \"vue\": \"^2.5.2\"\n  },\n  // Development\n  \"devDependencies\": {\n    \"autoprefixer\": \"^7.1.2\",\n    \"babel-core\": \"^6.22.1\",\n  },\n  \"engines\": {\n    \"node\": \"&gt;= 6.0.0\",\n    \"npm\": \"&gt;= 3.0.0\"\n  },\n  \"browserslist\": [\"&gt; 1%\", \"last 2 versions\", \"not ie &lt;= 8\"]\n}\n</code></pre> <p><code>package-lock.json</code>: the exact environment to reproduce the code.</p>"},{"location":"web/frontend/pyodide/","title":"pyodide","text":"<p>run python in javascript!</p> <ul> <li>Python runtime built into WebAssembly.</li> <li>Includes <code>NumPy, Pandas, Matplotlib, Scipy, scikit-learn</code>.</li> <li>transparent access between python and js.</li> </ul>"},{"location":"web/frontend/pyodide/#example-in-web-browsers","title":"example in web browsers","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n      &lt;script src=\"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    Pyodide test page &lt;br&gt;\n    Open your browser console to see Pyodide output\n    &lt;script type=\"text/javascript\"&gt;\n      async function main(){\n        let pyodide = await loadPyodide({\n          indexURL : \"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/\"\n        });\n        console.log(pyodide.runPython(`\n            import sys\n            sys.version\n        `));\n        console.log(pyodide.runPython(\"print(1 + 2)\"));\n      }\n      main();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"web/frontend/pyodide/#example-in-nodejs","title":"example in nodejs","text":"<p>Install:</p> <pre><code>npm install pyodide\n</code></pre> <p>use:</p> <pre><code>let pyodide_pkg = await import(\"pyodide/pyodide.js\");\n\nlet pyodide = await pyodide_pkg.loadPyodide({\n  indexURL: \"&lt;pyodide artifacts folder&gt;\",\n});\n\nawait pyodide.runPythonAsync(\"1+1\");\n</code></pre>"},{"location":"web/frontend/pyodide/#js-api-namedlikethis","title":"JS API (<code>namedLikeThis</code>)","text":"<ul> <li> <p><code>globals</code>: <code>PyProxy</code>, alias to the global python environment.</p> <pre><code>pyodide.globals.get(\"foo\")\n</code></pre> </li> </ul> <ul> <li><code>runPython(code, globals=pyodide.globals)</code>: run python code string.</li> </ul> <ul> <li><code>runPythonAsync(code)</code>: async version, returns a Promise.</li> </ul> <ul> <li><code>loadPackage(names)</code>: manually load python packages.</li> </ul> <ul> <li><code>loadPackagesFromImports(code)</code>: automatically inspect the code string and load all packages needed.</li> </ul> <ul> <li> <p><code>toPy(obj, options)</code>: convert to <code>PyProxy</code>, but used in js.</p> <p>Most time we just use <code>JsProxy.to_py()</code> in python.</p> </li> </ul> <ul> <li> <p><code>PyProxy</code>: A python object proxied to js.</p> <ul> <li><code>toJs(options)</code>: convert to a native js object.</li> </ul> </li> </ul>"},{"location":"web/frontend/pyodide/#python-api-named_like_this","title":"Python API (<code>named_like_this</code>)","text":"<ul> <li><code>js</code>: alias to the global js environment (<code>window</code>).</li> <li><code>JsProxy</code>: A js object proxied to python.<ul> <li><code>to_py(depth=-1)</code>: convert to a native python object. (deep conversion by default)</li> </ul> </li> </ul> <ul> <li> <p><code>pyodide.to_js(obj, depth=-1)</code>: convert to <code>JsProxy</code>, but used in python.</p> <p>Most time we just use <code>PyProxy.toJs()</code> in js.</p> </li> </ul>"},{"location":"web/frontend/pyodide/#micropip-api","title":"Micropip API","text":"<ul> <li><code>install(requirements)</code>: install given packages and dependencies.</li> </ul>"},{"location":"web/frontend/pyodide/#access-python-from-js","title":"access python from js","text":"<pre><code>pyodide.runPython(`\n  import numpy\n  x=numpy.ones((3, 4))\n`);\npyodide.globals.get('x').toJs();\n// &gt;&gt;&gt; [ Float64Array(4), Float64Array(4), Float64Array(4) ]\n\n// create the same 3x4 ndarray from js\nx = pyodide.globals.get('numpy').ones(new Int32Array([3, 4])).toJs();\n// x &gt;&gt;&gt; [ Float64Array(4), Float64Array(4), Float64Array(4) ]\n\n// re-assign a new value to an existing variable\npyodide.globals.set(\"x\", 'x will be now string');\n\n// create a new js function that will be available from Python\n// this will show a browser alert if the function is called from Python\npyodide.globals.set(\"alert\", alert);\n\n// this new function will also be available in Python and will return the squared value.\npyodide.globals.set(\"square\", x =&gt; x*x);\n\n// You can test your new Python function in the console by running\npyodide.runPython(\"square(3)\");\n\n// avoid memory leak: always delete toJS objects:\nlet pyproxies = [];\nproxy.toJs({pyproxies});\n// Do stuff\nfor(let px of pyproxies){\n    px.destory();\n}\nproxy.destroy();\n</code></pre> <p>np array to js:</p> <pre><code>let proxy = pyodide.globals.get(\"some_numpy_ndarray\");\nlet buffer = proxy.getBuffer();\nproxy.destroy();\ntry {\n  if (buffer.readonly) {\n    // We can't stop you from changing a readonly buffer, but it can cause undefined behavior.\n    throw new Error(\"Uh-oh, we were planning to change the buffer\");\n  }\n  let array = new ndarray(\n    buffer.data,\n    buffer.shape,\n    buffer.strides,\n    buffer.offset\n  );\n  // manipulate array here\n  // changes will be reflected in the Python ndarray!\n} finally {\n  buffer.release(); // Release the memory when we're done\n}\n</code></pre> <p>python objects to js:</p> <pre><code>let sys = pyodide.globals.get(\"sys\");\n</code></pre>"},{"location":"web/frontend/pyodide/#access-js-from-python","title":"access js from python","text":"<pre><code>import js # js is `window` in browser\n\n# directly modify web\ndiv = js.document.createElement(\"div\")\ndiv.innerHTML = \"&lt;h1&gt;This element was created from Python&lt;/h1&gt;\"\njs.document.body.prepend(div)\n\n# fetch in python\nfrom js import fetch\nresp = await fetch('example.com/some_api',\n    method= \"POST\",\n    body= '{ \"some\" : \"json\" }',\n    credentials= \"same-origin\",\n)\n\n# some proxy methods\nx = div\nstr(x) # x.toString()\nlen(x) # x.length or x.size\nx.typeof # typeof x\nawait x # await x\n</code></pre> <p>js arrays:</p> <pre><code>self.jsarray = new Float32Array([1,2,3, 4, 5, 6]);\npyodide.runPython(`\n    from js import jsarray\n    array = jsarray.to_py()\n    import numpy as np\n    numpy_array = np.asarray(array).reshape((2,3))\n    print(numpy_array)\n`);\n</code></pre> <p>js object to python:</p> <pre><code>import js\njs.document.title = 'New window title'\nfrom js.document.location import reload as reload_page\nreload_page()\n</code></pre>"},{"location":"web/frontend/pyodide/#load-python-packages","title":"load python packages","text":"<pre><code>// load official supported packages\nawait pyodide.loadPackage(\"numpy\");\nawait pyodide.loadPackage([\"cycler\", \"pytz\"]); // multiple at one time\n\n\n// install from pypi through micropip\nawait pyodide.runPythonAsync(`\n  import micropip\n  await micropip.install('snowballstemmer')\n  import snowballstemmer\n  stemmer = snowballstemmer.stemmer('english')\n  print(stemmer.stemWords('go goes going gone'.split()))\n`);\n\n// install wheels from url\nawait pyodide.runPythonAsync(`\n  import micropip\n  micropip.install('https://example.com/files/snowballstemmer-2.0.0-py2.py3-none-any.whl')\n`);\n</code></pre>"},{"location":"web/frontend/react-formik/","title":"Form","text":""},{"location":"web/frontend/react-formik/#controlled-form","title":"Controlled Form","text":"<pre><code>function NameForm() {\n  // hook\n  const [name, setName] = useState('');\n  // event handler\n  function handleSubmit(event) {\n    alert('Submitted Name: ' + name);\n    event.preventDefault();\n  }\n  function handleChange(event) {\n    setName(event.target.value); // here event.target is &lt;input&gt;\n  }\n  // Controlled form, onSubmit will call handleSubmit(event)\n  return (\n    &lt;form onSubmit={handleSubmit}&gt; \n      // input, onChange will call handleChange(event)\n      &lt;label&gt; Name: &lt;input type=\"text\" value={name} onChange={handleChange}/&gt; &lt;/label&gt;\n      &lt;input type=\"submit\" value=\"\u63d0\u4ea4\" /&gt;\n    &lt;/form&gt;\n  );\n}\n\nfunction SelectForm() {\n  const [value, setValue] = useState('coconut');\n  ...\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;\n        \u9009\u62e9\u4f60\u559c\u6b22\u7684\u98ce\u5473:\n          &lt;select value={value} onChange={handleChange}&gt;\n            &lt;option value=\"grapefruit\"&gt; \u8461\u8404\u67da &lt;/option&gt;\n            &lt;option value=\"lime\"&gt;       \u9178\u6a59   &lt;/option&gt;\n            &lt;option value=\"coconut\"&gt;    \u6930\u5b50   &lt;/option&gt;\n            &lt;option value=\"mango\"&gt;      \u8292\u679c   &lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/label&gt;\n        &lt;input type=\"submit\" value=\"\u63d0\u4ea4\" /&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"web/frontend/react-formik/#uncontrolled-form-file-input","title":"Uncontrolled Form: File Input","text":"<pre><code>class FileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fileInput = React.createRef();\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    alert(\n      `Selected file - ${this.fileInput.current.files[0].name}`\n    );\n  }\n\n  render() {\n    return (\n      &lt;form onSubmit={this.handleSubmit}&gt;\n        &lt;label&gt;\n          Upload file:\n          &lt;input type=\"file\" ref={this.fileInput} /&gt;\n        &lt;/label&gt;\n        &lt;br /&gt;\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n      &lt;/form&gt;\n    );\n  }\n}\n\nReactDOM.render(\n  &lt;FileInput /&gt;,\n  document.getElementById('root')\n);\n</code></pre>"},{"location":"web/frontend/react-formik/#formik-yup","title":"Formik &amp; Yup","text":"<pre><code>import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst SignupForm = () =&gt; {\n  return (\n    &lt;Formik\n      initialValues={{ firstName: '', lastName: '', email: '' }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(15, 'Must be 15 characters or less')\n          .required('Required'),\n        lastName: Yup.string()\n          .max(20, 'Must be 20 characters or less')\n          .required('Required'),\n        email: Yup.string()\n          .email('Invalid email address')\n          .required('Required'),\n      })}\n      onSubmit={(values, { setSubmitting }) =&gt; {\n        // run the function after 400 ms\n        setTimeout(() =&gt; {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    &gt;\n      &lt;Form&gt;\n        &lt;label htmlFor=\"firstName\"&gt;First Name&lt;/label&gt;\n        &lt;Field name=\"firstName\" type=\"text\" /&gt;\n        &lt;ErrorMessage name=\"firstName\" /&gt;\n        &lt;label htmlFor=\"lastName\"&gt;Last Name&lt;/label&gt;\n        &lt;Field name=\"lastName\" type=\"text\" /&gt;\n        &lt;ErrorMessage name=\"lastName\" /&gt;\n        &lt;label htmlFor=\"email\"&gt;Email Address&lt;/label&gt;\n        &lt;Field name=\"email\" type=\"email\" /&gt;\n        &lt;ErrorMessage name=\"email\" /&gt;\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n      &lt;/Form&gt;\n    &lt;/Formik&gt;\n  );\n};\n</code></pre>"},{"location":"web/frontend/react-formik/#dynamic-form","title":"Dynamic Form","text":""},{"location":"web/frontend/webpack/","title":"webpack","text":"<p>Another solution except for <code>react</code>.</p>"},{"location":"web/frontend/webpack/#init-project","title":"init project","text":"<pre><code>npm init -y\nnpm install --save-dev webpack webpack-cli\n</code></pre> <p>this creates <code>package.json</code></p> <pre><code> {\n   \"name\": \"webpack-demo\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n   \"private\": true, # avoid wrong publishing\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n   },\n   \"keywords\": [],\n   \"author\": \"\",\n   \"license\": \"ISC\",\n   \"devDependencies\": {\n     \"webpack\": \"^5.4.0\",\n     \"webpack-cli\": \"^4.2.0\"\n   }\n }\n</code></pre>"},{"location":"web/frontend/webpack/#files-organization","title":"files organization","text":"<p>we can install any package by <code>npm</code>:</p> <pre><code>npm install -S lodash\n</code></pre> <p><code>webpack.config.js</code></p> <pre><code>const path = require('path');\n\nmodule.exports = {\n  // this generates main.js from index.js\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n};\n</code></pre> <p><code>dist/index.html</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Getting Started&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- include generated scripts manually --&gt;\n    &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>src/index.js</code></p> <pre><code>// we can directly import it, instead of './node_modules/lodash'\nimport _ from 'lodash';\n\nfunction component() {\n  const element = document.createElement('div');\n\n  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n  return element;\n}\n\ndocument.body.appendChild(component());\n</code></pre>"},{"location":"web/frontend/webpack/#build","title":"build","text":"<ul> <li> <p>directly use <code>npx</code></p> <pre><code>npx webpack # --config webpack.config.js\n</code></pre> </li> </ul> <ul> <li> <p>Or write a snippet in <code>package.json</code></p> <pre><code>{\n    ...\n    \"scripts\": {\n        \"build\": \"webpack\"\n    }\n    ...\n}\n</code></pre> <p>then</p> <pre><code>npm run build\n</code></pre> </li> </ul>"},{"location":"web/frontend/html/css/","title":"CSS","text":"<p>To make your website beautiful, we still need to write it.</p> <pre><code>/* comment */\np {\n    color: orange;\n}\n</code></pre>"},{"location":"web/frontend/html/css/#usage","title":"Usage","text":"<ul> <li> <p>External</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n</code></pre> </li> </ul> <ul> <li> <p>Internal</p> <pre><code>&lt;style&gt;\n    p { color: orange; }\n&lt;/style&gt;\n</code></pre> </li> </ul>"},{"location":"web/frontend/html/css/#selector","title":"Selector","text":"<pre><code>p {} /* &lt;p&gt; */\np, li {}  /*&lt;p&gt; and &lt;li&gt; */\nli em {} /* all &lt;em&gt; inside &lt;li&gt; */\nli &gt; em {} /* direct &lt;em&gt; son of &lt;li&gt; */\nh1 + p {} /* the first {p} after &lt;h1&gt; */\n\n /* class='special' */\n.special {}\nli.special {} /* &lt;li class='special'&gt; */\n\n/* id='index' */\n#index {}\n\n/* pseudo-class (state) */\na:link {color: pink;}\na:visited {color: green;}\na:hover {text-decoration: none;}\n\n/* pseudo-element */\np::first_line {}\n\n/* attribute */\na[attr] {} /* a with attr */\na[attr=value] {} /* a with attr = value */\na[attr^=value] {} /* a with attr starts with value */\na[attr$=value] {} /* a with attr ends with value */\na[attr*=value] {} /* a with value in attr */\n\n/* all */\n* {}\n</code></pre>"},{"location":"web/frontend/html/css/#function","title":"Function","text":"<pre><code>.box {\n  padding: 10px;\n  width: calc(90% - 30px);\n  background-color: rebeccapurple;\n  color: white;\n  transform: rotate(0.8turn)\n}\n</code></pre>"},{"location":"web/frontend/html/css/#rules","title":"@ Rules","text":"<pre><code>/* import from another file */\n@import 'styles2.css'; \n</code></pre>"},{"location":"web/frontend/html/css/#cascading-and-inheriting","title":"Cascading and Inheriting","text":"<ul> <li> <p>Cascading</p> <pre><code>p {color: blue;}\np {color: red;}\n\n/* then &lt;p&gt; is red */\n</code></pre> </li> </ul> <ul> <li> <p>Priority</p> <pre><code>&lt;h1 class=\"main-heading\"&gt;This is my heading.&lt;/h1&gt;\n</code></pre> <p>More specific, higher priority.</p> <pre><code>.main-heading { \n    color: red; \n}\n\nh1 { \n    color: blue; \n}\n\n/* &lt;h1&gt; is red */\n</code></pre> </li> </ul> <ul> <li> <p>Inherit</p> <pre><code>&lt;p&gt;We can change the color by targetting the element with a selector, such as this &lt;span&gt;span&lt;/span&gt;.&lt;/p&gt;\n</code></pre> <pre><code>body {\n    color: blue;\n}\n\n/* span is also blue. */\n</code></pre> <pre><code>&lt;ul&gt;\n    &lt;li&gt;Default &lt;a href=\"#\"&gt;link&lt;/a&gt; color&lt;/li&gt;                             // blue\n    &lt;li class=\"my-class-1\"&gt;Inherit the &lt;a href=\"#\"&gt;link&lt;/a&gt; color&lt;/li&gt;      // green\n    &lt;li class=\"my-class-2\"&gt;Reset the &lt;a href=\"#\"&gt;link&lt;/a&gt; color&lt;/li&gt;        // black\n    &lt;li class=\"my-class-3\"&gt;Unset the &lt;a href=\"#\"&gt;link&lt;/a&gt; color&lt;/li&gt;        // green\n&lt;/ul&gt;\n</code></pre> <pre><code>body {\n    color: green;\n}\n\n.my-class-1 a {\n    color: inherit; /* inherit body */\n}\n\n.my-class-2 a {\n    color: initial; /* the same with default */\n}\n\n.my-class-3 a {\n    color: unset; /* return to default */\n}\n</code></pre> </li> </ul> <ul> <li> <p>override</p> <p>sometimes it is just useful.</p> <pre><code>code {\n    background-color: #ffffff !important;\n}\n</code></pre> </li> </ul>"},{"location":"web/frontend/html/css/#references","title":"References","text":"<ul> <li> <p><code>background</code></p> <pre><code>background: red url(bg-graphic.png) 10px 10px repeat-x fixed;\n/* equals to */ \nbackground-color: red;\nbackground-image: url(bg-graphic.png);\nbackground-position: 10px 10px;\nbackground-repeat: repeat-x;\nbackground-scroll: fixed;\n</code></pre> </li> </ul>"},{"location":"web/frontend/html/html/","title":"HTML","text":"<p>We prefer not to write HTML directly. Instead, use code to generate HTML automatically.</p>"},{"location":"web/frontend/html/html/#elements","title":"Elements","text":"<ul> <li><code>&lt;a href='https://example.com'&gt; Website &lt;/a&gt;</code></li> <li><code>&lt;b&gt; Bold &lt;/b&gt;</code>: bold</li> <li><code>&lt;i&gt; Italic &lt;/i&gt;</code>: Italic</li> <li><code>&lt;em&gt; Emphasize &lt;/em&gt;</code>: Usually Italic.</li> <li><code>&lt;br&gt;</code>: line break</li> </ul> <ul> <li><code>&lt;link href='style.css' rel='stylesheet'&gt;</code>: link a external resource.<ul> <li><code>href</code>: URL of the resource.</li> <li><code>rel</code>: relationship to the resource. </li> </ul> </li> </ul> <ul> <li><code>&lt;canvas&gt;</code></li> <li><code>&lt;span&gt;</code> inline element</li> <li><code>&lt;div&gt;</code> block element</li> </ul> <ul> <li> <p><code>&lt;input&gt;</code></p> <p>https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input</p> <pre><code>&lt;input type=\"text\" /&gt;\n</code></pre> </li> </ul> <ul> <li><code>&lt;label&gt;</code></li> <li><code>&lt;form&gt;</code></li> </ul> <ul> <li><code>&lt;header&gt;</code> declare header, no factual effect.</li> </ul>"},{"location":"web/frontend/html/html/#example","title":"Example","text":"<ul> <li> <p>Simple Document</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1 style=\"text-align:center;\"&gt;Centered Heading&lt;/h1&gt;\n&lt;p style=\"text-align:center;\"&gt;Author&lt;/p&gt;\n&lt;hr/&gt;\n&lt;p&gt; A long long story.&lt;/p&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ul>"},{"location":"web/frontend/html/html/#script","title":"Script","text":"<p>basics:</p> <pre><code>&lt;!-- include a source file --&gt;\n&lt;script src=\"file.js\"&gt;&lt;/script&gt;\n\n&lt;!-- directly write in html --&gt;\n&lt;script&gt;\n    console.log('Hello');\n&lt;/script&gt;\n\n&lt;!-- type=\"module\" allow us to use \"import\" --&gt;\n&lt;script type=\"module\"&gt;\n    import * as THREE form 'three'\n&lt;/script&gt;\n</code></pre>"},{"location":"web/frontend/html/html_js_interaction/","title":"Html js interaction","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt; example html file &lt;/title&gt;\n\n        &lt;!-- import the src as plain text --&gt;\n        &lt;script type=\"text/javascript\" src=\"...\"&gt; &lt;/script&gt;\n\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;button onclick=\"custom_func()\" id=\"button\"&gt; Button &lt;/button&gt;\n        &lt;!-- import the src as a module --&gt;\n        &lt;script type=\"module\" src=\"...\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>function custom_func () {\n    // use global object `document` to access the DOM\n    let button = document.getElementById('button');\n    button.disabled = true;\n}\n\n// to use it in html, bind it to global object `window`.\nwindow.custom_func = custom_func;\n</code></pre>"},{"location":"web/frontend/html/http/","title":"HTTP","text":""},{"location":"web/frontend/html/http/#overview","title":"Overview","text":"<p>HTTP is an Application-layer protocol to transmit hypermedia documents.</p> <ul> <li> <p>Client-Server model.</p> <p></p> </li> </ul> <ul> <li>Stateless, but not sessionless (use cookies).</li> </ul> <ul> <li> <p>HTTP Messages</p> <ul> <li> <p>Requests</p> <pre><code># Method Path Version\nGET / HTTP/1.1\n# Headers\nHost: developer.mozilla.org\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\nAccept-Language: fr\n</code></pre> <pre><code>POST /contact_form.php HTTP/1.1\nHost: developer.mozilla.org\nContent-Length: 64\nContent-Type: application/x-www-form-urlencoded\n\nname=Joe%20User&amp;request=Send%20me%20one%20of%20your%20catalogue\n</code></pre> </li> </ul> <ul> <li> <p>Responses</p> <pre><code># Version Status_Code Statue_Message\nHTTP/1.1 200 OK\n# Headers\nDate: Sat, 09 Oct 2010 14:28:02 GMT\nServer: Apache\nLast-Modified: Tue, 01 Dec 2009 20:18:22 GMT\nETag: \"51142bc1-7449-479b075b2891b\"\nAccept-Ranges: bytes\nContent-Length: 29769\nContent-Type: text/html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n\n&lt;!DOCTYPE html... (here comes the 29769 bytes of the requested web page)\n</code></pre> </li> </ul> </li> </ul>"},{"location":"web/frontend/html/http/#cache","title":"Cache","text":"<p>A technique that stores a copy of a given resource, and serves it back when requested.</p> <p>It eases the load of server, and improves performance.</p>"},{"location":"web/frontend/html/http/#cookies","title":"Cookies","text":"<p>A small piece of data that a server sends to the user's web browser.</p> <p>The browser may store it, and send it back with later requests to the server.</p> <p>Usually used to tell if two requests came from the same browser. (keeping logged-in)</p> <ul> <li> <p>Expires</p> <pre><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;\n</code></pre> </li> </ul> <ul> <li> <p>Secure</p> <pre><code>Set-Cookie: id=a3fwa; Secure; HttpOnly\n</code></pre> <p><code>HttpOnly</code> makes <code>Document.cookie</code> API cannot access this cookie.</p> </li> </ul> <ul> <li> <p>JavaScript API</p> <pre><code>// show cookies\nconsole.log(document.cookie); \n\n// create new cookie\ndocument.cookie = \"yummy_cookie=choco\"; \ndocument.cookie = \"tasty_cookie=strawberry\"; \n\n// change cookie\ndocument.cookie = \"tasty_cookie=mellon\";   // overwrite\n\n// delete cookie\ndocument.cookie = \"tasty_cookie=mellon; expires=Thu, 01 Jan 1970 00:00:00 UTC;\"; // set expires to old time\n</code></pre> </li> </ul>"},{"location":"web/frontend/html/http/#cors-cross-origin-resource-sharing","title":"CORS: Cross-Origin Resource Sharing","text":"<p>A Mechanism that uses additional HTTP Headers, to tell browsers to give a web App access to resources from a different origin.</p> <p></p> <p>CORS use headers to work.</p> <p>Simple Example:</p> <pre><code># request\nGET /resources/public-data/ HTTP/1.1\nHost: bar.other\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nConnection: keep-alive\nOrigin: https://foo.example # Origin header\n\n# response\nHTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 00:23:53 GMT\nServer: Apache/2\nAccess-Control-Allow-Origin: * # requests from where are allowed\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nTransfer-Encoding: chunked\nContent-Type: application/xml\n\n[\u2026XML Data\u2026]\n</code></pre> <p>Preflight Example:</p> <p>(When request contains non-standard headers &amp; data)</p> <pre><code>## Preflight\n# request\nOPTIONS /doc HTTP/1.1\nHost: bar.other\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nConnection: keep-alive\nOrigin: http://foo.example\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type\n# response\nHTTP/1.1 204 No Content\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2\nAccess-Control-Allow-Origin: https://foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\nVary: Accept-Encoding, Origin\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\n\n## Real\n# request\nPOST /doc HTTP/1.1\nHost: bar.other\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nConnection: keep-alive\nX-PINGOTHER: pingpong\nContent-Type: text/xml; charset=UTF-8\nReferer: https://foo.example/examples/preflightInvocation.html\nContent-Length: 55\nOrigin: https://foo.example\nPragma: no-cache\nCache-Control: no-cache\n\n&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;\n# response\nHTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:40 GMT\nServer: Apache/2\nAccess-Control-Allow-Origin: https://foo.example\nVary: Accept-Encoding, Origin\nContent-Encoding: gzip\nContent-Length: 235\nKeep-Alive: timeout=2, max=99\nConnection: Keep-Alive\nContent-Type: text/plain\n\n[Some XML payload]\n</code></pre>"},{"location":"web/frontend/html/web_api/","title":"Web APIs","text":""},{"location":"web/frontend/html/web_api/#dom-document-object-model","title":"DOM (Document Object Model)","text":"<p>DOM connects Web pages to scripts by representing the structure of a document.</p> <pre><code>// Window \nwindow.document\nwindow.onload\n\n// Document \ndocument.getElementById(id)\ndocument.getElementByTagName(name)\ndocument.createElement(name)\n\n// Element\nelement.getAttribute()\nelement.setAttribute()\n</code></pre>"},{"location":"web/frontend/html/web_api/#storage","title":"Storage","text":"<p><code>localStorage</code> maintains a separate storage space for each given origin.</p> <p>It persists even when browser is closed and reopened. (better than cookies)</p> <pre><code>localStorage.colorSetting = '#a4509b';\nlocalStorage.setItem('colorSetting', '#a4509b');\nlet cat = localStorage.getItem('myCat');\n\nfunction storageAvailable(type) {\n    var storage;\n    try {\n        storage = window[type];\n        var x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    }\n    catch(e) {\n        return e instanceof DOMException &amp;&amp; (\n            // everything except Firefox\n            e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === 'QuotaExceededError' ||\n            // Firefox\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &amp;&amp;\n            // acknowledge QuotaExceededError only if there's something already stored\n            (storage &amp;&amp; storage.length !== 0);\n    }\n}\n\nif (storageAvailable('localStorage')) {\n  // Yippee! We can use localStorage awesomeness\n}\nelse {\n  // Too bad, no localStorage for us\n}\n</code></pre>"},{"location":"web/frontend/html/web_api/#url-parameters","title":"URL Parameters","text":"<p><code>https://example.com/?product=shirt&amp;color=blue&amp;newuser&amp;size=m</code></p> <p>Here the URL parameters are:</p> <pre><code>product=shirt\ncolor=blue\nnewuser\nsize=m\n</code></pre> <p>This allows to pass simple data to the server in <code>GET</code> and <code>POST</code>.</p>"},{"location":"web/frontend/html/web_api/#fetch","title":"Fetch","text":"<pre><code>// Promise&lt;Response&gt; fetch(input[, init]);\n\n// get\nfetch('http://example.com/movies.json')\n.then(res =&gt; res.json()) // necessary, Promise -&gt; json\n.then(response =&gt; console.log(response));\n\n// post\nvar url = 'https://example.com/profile';\nvar data = {username: 'example'};\n\nfetch(url, {\n  method: 'POST',\n  body: JSON.stringify(data), // data can be `string` or {object}!\n  headers: new Headers({\n    'Content-Type': 'application/json' // data type\n  })\n}).then(res =&gt; res.json())\n.catch(error =&gt; console.error('Error:', error))\n.then(response =&gt; console.log('Success:', response));\n</code></pre> <p>Fetch with URL query parameters (https://github.com/github/fetch/issues/256):</p> <pre><code>var params = {\n    parameter1: 'value_1',\n    parameter2: 'value 2',\n    parameter3: 'value&amp;3' \n};\n\nvar query = Object.keys(params)\n    .map(k =&gt; encodeURIComponent(k)+'='+encodeURIComponent(params[k]))\n    .join('&amp;');\n\nfetch(url+\"?\"+query).then(...)\n</code></pre>"},{"location":"web/frontend/three/basic/","title":"three.js","text":"<p>A cross-browser JS library and API to create and display 3D graphics using WebGL.</p>"},{"location":"web/frontend/three/basic/#basic-usage","title":"basic usage","text":"<p><code>index.html</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;My first three.js app&lt;/title&gt;\n        &lt;style&gt;\n            body { margin: 0; }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- use a CDN --&gt;\n        &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/three.js/r128/three.js\"&gt;&lt;/script&gt; \n        &lt;script src=\"source.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>source.js</code></p> <pre><code>// create renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );\n\n// create camera\nconst camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );\ncamera.position.set( 0, 0, 100 );\ncamera.lookAt( 0, 0, 0 );\n\n// create scene\nconst scene = new THREE.Scene();\n\n// draw some lines\nconst material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\nconst points = [];\npoints.push( new THREE.Vector3( - 10, 0, 0 ) );\npoints.push( new THREE.Vector3( 0, 10, 0 ) );\npoints.push( new THREE.Vector3( 10, 0, 0 ) );\nconst geometry = new THREE.BufferGeometry().setFromPoints( points );\nconst line = new THREE.Line( geometry, material );\n\n// add to scene\nscene.add( line );\n// render the scene from camera\nrenderer.render( scene, camera );\n</code></pre> <pre><code>// another example\n//import * as THREE from 'js/three.module.js';\n\nvar camera, scene, renderer;\nvar geometry, material, mesh;\n\ninit();\nanimate();\n\nfunction init() {\n\n    camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );\n    camera.position.z = 1;\n\n    scene = new THREE.Scene();\n\n    geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );\n    material = new THREE.MeshNormalMaterial();\n\n    mesh = new THREE.Mesh( geometry, material );\n    scene.add( mesh );\n\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( renderer.domElement );\n\n}\n\nfunction animate() {\n\n    requestAnimationFrame( animate );\n\n    mesh.rotation.x += 0.01;\n    mesh.rotation.y += 0.02;\n\n    renderer.render( scene, camera );\n\n}\n\n// we can also get time for animation\nfunction animate2(time) {\n\n    requestAnimationFrame( animate );\n\n    time *= 0.001 // milisecond --&gt; second\n    mesh.rotation.x = time;\n    mesh.rotation.y = time;\n\n    renderer.render( scene, camera );\n\n}\n</code></pre>"},{"location":"web/frontend/three/basic/#app-structure","title":"app structure","text":""},{"location":"web/frontend/three/plyloader/","title":"Plyloader","text":""},{"location":"web/frontend/three/plyloader/#ply-loader-example","title":"PLY loader example","text":"<p><code>index.html</code></p> <pre><code>...\n\n&lt;body&gt;\n    &lt;div di=\"hook\"&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;!-- always load the jsm at last (after the used element is created!) --&gt;\n&lt;script type=\"module\" src=\"static/js/renderer.js\"&gt; &lt;/script&gt;\n\n...\n</code></pre> <p><code>renderer.js</code></p> <pre><code>import * as THREE from 'https://cdn.skypack.dev/three@0.132.0';\nimport { PLYLoader } from 'https://cdn.skypack.dev/three@0.132.0/examples/jsm/loaders/PLYLoader.js';\nimport { OrbitControls } from 'https://cdn.skypack.dev/three@0.132.0/examples/jsm/controls/OrbitControls.js';\nimport Stats from 'https://cdn.skypack.dev/three@0.132.0/examples/jsm/libs/stats.module.js';\n\n\nlet container, plyloader;\n\nlet camera, scene, renderer, controls;\n\ninit();\n\nfunction init() {\n    // append the canvas under the #hook element in html.\n    container =  document.getElementById('hook');\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xffffff );\n\n    // camera\n    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    camera.position.set( 0, 0, 10 );\n    camera.up.set( 0, 0, 1 ); // important! we want to rotate around z axis.\n\n    // renderer\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( 0.8 * window.innerWidth, 0.8 * window.innerHeight );\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.shadowMap.enabled = true;\n\n    container.appendChild( renderer.domElement );\n\n    // controls\n    controls = new OrbitControls( camera, renderer.domElement );\n    controls.listenToKeyEvents( window ); // optional\n    controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    // controls.minDistance = 100;\n    // controls.maxDistance = 500;\n    // controls.maxPolarAngle = Math.PI / 2;\n\n    // PLY file Loader\n    plyloader = new PLYLoader();\n\n    // Lights\n    scene.add( new THREE.HemisphereLight( 0xbdbdbd, 0x111122 ) );\n    addShadowedLight( 10, 10, 10, 0x888888, 1.35 );\n\n    // resize\n    window.addEventListener( 'resize', onWindowResize );\n\n}\n\nfunction post_load_ply (type) {\n    if (type === \"points_colored\") {\n        return (geometry) =&gt; {\n            const material = new THREE.PointsMaterial( { vertexColors: true, size: 0.01 } ); // enable vertex color from ply.\n            const points = new THREE.Points( geometry, material );\n            scene.add( points );\n            // add fake ground\n            geometry.computeBoundingBox();\n            let bbox = geometry.boundingBox;\n            add_plane(bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y, bbox.min.z);\n        }\n    } else if (type === \"points\") {\n        return (geometry) =&gt; {\n            const material = new THREE.PointsMaterial( { color: 0x000000, size: 0.02 } ); // disable color from ply\n            const points = new THREE.Points( geometry, material );\n            scene.add( points );\n        }\n    } else if (type === \"pred\") {\n        return (geometry) =&gt; {\n            const material = new THREE.MeshPhongMaterial( { color: 0x888888, flatShading: true, side: THREE.DoubleSide } );\n            //const material = new THREE.MeshStandardMaterial( { color: 0x888888, flatShading: true } );\n            //const material = new THREE.MeshBasicMaterial( { color: 0x0000ff } );\n            const mesh = new THREE.Mesh( geometry, material );\n            scene.add( mesh );\n        }\n    }\n}\n\nfunction addShadowedLight( x, y, z, color, intensity ) {\n\n    const directionalLight = new THREE.DirectionalLight( color, intensity );\n    directionalLight.position.set( x, y, z );\n    scene.add( directionalLight );\n\n    directionalLight.castShadow = true;\n\n    const d = 1;\n    directionalLight.shadow.camera.left = - d;\n    directionalLight.shadow.camera.right = d;\n    directionalLight.shadow.camera.top = d;\n    directionalLight.shadow.camera.bottom = - d;\n\n    directionalLight.shadow.camera.near = 1;\n    directionalLight.shadow.camera.far = 4;\n\n    directionalLight.shadow.mapSize.width = 1024;\n    directionalLight.shadow.mapSize.height = 1024;\n\n    directionalLight.shadow.bias = - 0.001;\n\n}\n\nfunction onWindowResize() {\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize( window.innerWidth, window.innerHeight );\n\n}\n\nfunction animate() {\n\n    requestAnimationFrame( animate );\n\n    controls.update();\n    renderer.render( scene, camera );\n\n}\n\nfunction load_input () {\n    let scene_name = document.getElementById('scene_name').value;\n    console.log(\"[INFO] load input for \", scene_name);\n    // clear scene\n    clear_scene()\n    // load new input\n    plyloader.load('static/RFS/input/' + scene_name + '_semantic_pred.ply', post_load_ply(\"points\") );\n}\n\nfunction change_k () {\n    let K = document.getElementById('select_k').value;\n    console.log(\"[INFO] change K_projection \", K);\n}\n\nfunction run () {\n    // disable run button first\n    let button = document.getElementById(\"run\");\n    button.disabled = true;\n    button.value = \"\u8fd0\u884c\u4e2d\";\n\n    let scene_name = document.getElementById('scene_name').value;\n    let K_projection = document.getElementById('select_k').value;\n\n    // call backend (fetch)\n    fetch('/rfs/run/' + scene_name + '/' + K_projection).then((resp) =&gt; {\n        return resp.json();\n    }).then((res) =&gt; {\n        // check error\n        if (res['success']) {\n            // load_pred\n            clear_scene()\n            plyloader.load('static/RFS/output/' + scene_name + '_semantic_pred.ply', post_load_ply(\"points_colored\") );\n            res['preds'].forEach((pred, idx) =&gt; {plyloader.load(pred, post_load_ply(\"pred\") );});\n\n            // reset button\n            button.disabled = false;\n            button.value = \"\u8fd0\u884c\";\n        }\n    });\n}\n\nfunction clear_scene () {\n    for (let i = scene.children.length - 1; i &gt;= 0; i--) {\n        if(scene.children[i].type === \"Mesh\" || scene.children[i].type === \"Points\")\n            scene.remove(scene.children[i]);\n    }\n}\n\nfunction add_plane(h, w, z) {\n    // Ground\n    const plane = new THREE.Mesh(\n        new THREE.PlaneGeometry( h, w ),\n        new THREE.MeshPhongMaterial( { color: 0xaaaaaa, specular: 0x101010, side: THREE.DoubleSide } )\n    );\n    plane.position.z = z;\n    plane.receiveShadow = true;\n    scene.add( plane );\n}\n\n\n// bind to window\nwindow.load_input = load_input;\nwindow.change_k = change_k;\nwindow.run = run;\n\nload_input();\nchange_k();\n\nanimate();\n</code></pre>"},{"location":"web/proxy/concepts/","title":"Concepts","text":""},{"location":"web/proxy/concepts/#proxy-protocols","title":"Proxy protocols","text":"<p>Protocol that exchanges packets through a proxy server.</p> <ul> <li>http: </li> <li>socks5:</li> </ul>"},{"location":"web/proxy/concepts/#shadowsocks","title":"ShadowSocks","text":"<p>A client software that connects to a third-party socks5 proxy server, similar to an SSH tunnel.</p> <p>First written in python.</p> <p>ShadowSocksR: a fork of the original project in C#, but close-sourced.</p> <p>Most usual client in Windows.</p>"},{"location":"web/proxy/concepts/#trojan","title":"trojan","text":"<p>A lightweight idea that imitating HTTPS to bypass GFW.</p> <p>We are the GreatER Fire; we ship Trojan Horses.</p> <p>in C++.</p> <p>Easy to use, best client to use in Linux.</p>"},{"location":"web/proxy/concepts/#v2ray-project-v","title":"v2ray (Project V)","text":"<p>A network toolset to build own computer network.</p> <p>in Golang.</p> <p>Support nearly all platforms.</p>"},{"location":"web/proxy/concepts/#proxychains","title":"proxychains","text":"<p>A Linux command line tool to use proxy in the followed command.</p>"},{"location":"web/proxy/frp_reverse_proxy/","title":"reverse proxy with <code>frp</code>","text":""},{"location":"web/proxy/frp_reverse_proxy/#install","title":"install","text":"<p>download from releases.</p> <ul> <li><code>frps</code>: server</li> <li><code>frpc</code>: client</li> </ul>"},{"location":"web/proxy/frp_reverse_proxy/#deploy","title":"deploy","text":"<ul> <li> <p><code>frps</code>:</p> <pre><code>[common]\nbind_port = 7000 # frps will listen this port for tcp\nvhost_http_port = 8080 # virtual host for forwarded http\n</code></pre> <p>Run:</p> <pre><code>frps -c frps.ini\n</code></pre> <p>Don't forget to allow in these ports in firewall !!!</p> <pre><code>ufw allow 7000 # accept frpc communications\n# ufw allow 5000 # do not need since we will use nginx\nufw allow 2222 # we use this port to forward ssh\n</code></pre> <p>combine with <code>nginx</code> rewrite so we can avoid accessing with port:</p> <pre><code>location /nas {\n  proxy_pass http://127.0.0.1:5000/; # note the backslash! it means relative pass.\n\n    # to correctly pass everything: \n    proxy_set_header  X-Real-IP $remote_addr;\n    proxy_set_header  X-Forwarded-For $remote_addr;\n    proxy_set_header  X-Forwarded-Proto $scheme;\n    proxy_set_header  X-Forwarded-Host $http_host;\n    proxy_set_header  Host $host;\n    proxy_http_version  1.1;\n    proxy_set_header    Upgrade $http_upgrade;\n    proxy_set_header    Connection $connection_upgrade;\n\n}\n\n# maybe need to add this to http {}\nhttp {\n    ...\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        '' close;\n    }\n    ...\n}\n</code></pre> </li> </ul> <ul> <li> <p><code>frpc</code>:</p> <pre><code>[common]\nserver_addr = x.x.x.x\nserver_port = 7000 # same as frps\n\n# forward ssh (22)\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000 # ssh user@x.x.x.x -port 6000 \n\n# forward web service\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = yourdomain.com # parse yourdomain.com to x.x.x.x, then access by http://yourdomain.com:8080 \n\n# another web service\n[web2]\ntype = http\nlocal_port = 8080 # another web hosted at localhost:8080\ncustom_domains = yourdomain2.com # access by http://yourdomain2.com:8080\n\n# forward as https\n[test_htts2http]\ntype = https\ncustom_domains = yourdomain3.com # access by https://yourdomain3.com\n\nplugin = https2http\nplugin_local_addr = 127.0.0.1:80\n\n# HTTPS \u8bc1\u4e66\u76f8\u5173\u7684\u914d\u7f6e\nplugin_crt_path = ./server.crt\nplugin_key_path = ./server.key\nplugin_host_header_rewrite = 127.0.0.1\nplugin_header_X-From-Where = frp\n</code></pre> <p>Run:</p> <pre><code>frpc -c frpc.ini\n</code></pre> </li> </ul>"},{"location":"web/proxy/set_usual_apps_proxy/","title":"use proxy","text":"<p>Prefer setting globally (bash, powershell) rather than setting each individual program...</p>"},{"location":"web/proxy/set_usual_apps_proxy/#find-the-right-port","title":"find the right port !!!","text":"<p>clash defaults to <code>http://127.0.0.1:7890</code> and <code>socks5://127.0.0.1:7890</code></p> <p>trojan-qt5 local client's socks port is in \"\u5165\u7ad9\u8bbe\u7f6e\", not \"\u51fa\u7ad9\u8bbe\u7f6e\".  the default is <code>socks5://127.0.0.1:51837</code>.</p>"},{"location":"web/proxy/set_usual_apps_proxy/#powershell","title":"powershell","text":"<pre><code># set\n$Env:http_proxy=\"http://127.0.0.1:7890\"\n$Env:https_proxy=\"http://127.0.0.1:7890\"\n\n# unset\n$Env:http_proxy=\"\"\n$Env:https_proxy=\"\"\n\n# show\necho $Env:http_proxy\necho $Env:https_proxy\n</code></pre>"},{"location":"web/proxy/set_usual_apps_proxy/#bash","title":"bash","text":"<pre><code># set\nexport http_proxy=socks5://127.0.0.1:1080\nexport https_proxy=socks5://127.0.0.1:1080\n\nexport http_proxy=http://127.0.0.1:1081\nexport https_proxy=http://127.0.0.1:1081\n\n# unset\nexport http_proxy=\nexport https_proxy=\n\n# show\necho $http_proxy\necho $https_proxy\n</code></pre>"},{"location":"web/proxy/set_usual_apps_proxy/#wget","title":"wget","text":"<pre><code># use .wgetrc\ncat &gt; ~/.wgetrc &lt;&lt;EOF\nhttp_proxy=http://127.0.0.1:1081\nhttps_proxy=http://127.0.0.1:1081\nHTTP_PROXY=http://127.0.0.1:1081\nHTTPS_PROXY=http://127.0.0.1:1081\nuse_proxy=on\nEOF\n</code></pre>"},{"location":"web/proxy/set_usual_apps_proxy/#jupyter-notebook","title":"jupyter notebook","text":"<p>It should use the system proxy, if not working, add this code block and run it:</p> <pre><code>import os\nos.environ['http_proxy'] = \"http://127.0.0.1:1081\" \nos.environ['https_proxy'] = \"http://127.0.0.1:1081\" \n</code></pre>"},{"location":"web/proxy/set_usual_apps_proxy/#git","title":"git","text":"<pre><code># set (do not need to set https.proxy!)\ngit config --global http.proxy socks5://127.0.0.1:51837 \n\n# unset\ngit config --global --unset http.proxy\n\n# show \ngit config --global http.proxy \n</code></pre>"},{"location":"web/proxy/set_usual_apps_proxy/#pip","title":"pip","text":"<p>by default, it will use http_proxy and https_proxy, so you can just set these env variables.</p> <pre><code># explitly set\npip install -U --proxy=socks5://127.0.0.1:51837 ddddsr\n\n# note: to use socks proxy, you have to install pysocks first\npip install pysocks\n</code></pre>"},{"location":"web/proxy/set_usual_apps_proxy/#docker","title":"docker","text":"<ul> <li> <p><code>docker build</code></p> <ul> <li> <p>Use <code>ENV</code> at Dockerfile (not recommended, since it makes the Dockerfile not portable)</p> <p>add in <code>Dockerfile</code>:</p> <pre><code># socks5\nENV http_proxy \"socks5h://localhost:1080\"\nENV https_proxy \"socks5h://localhost:1080\"\n\n# http (recommended)\nENV http_proxy \"http://localhost:1081\"\nENV https_proxy \"http://localhost:1081\"\n</code></pre> <p>and call with <code>docker build --network=host -t tag ...</code></p> </li> </ul> </li> </ul> <ul> <li><code>docker run</code></li> </ul>"},{"location":"web/proxy/set_usual_apps_proxy/#authorization","title":"Authorization","text":"<pre><code># for authorization, use proxy like:\nhttp://&lt;user&gt;:&lt;pwd&gt;@&lt;ip&gt;:&lt;port&gt;\n\n# note that special characters in user/pwd should be replaced:\n@          %40\n:          %3A\n!          %21\n#          %23\n$          %24\n%          %25\n&amp;          %26\n+          %2B\n/          %2F\n\\          %5C\n=          %3D\n?          %3F\nspacebar   %20\n.          %2E\n</code></pre>"},{"location":"web/proxy/ss/","title":"Shadowsocks Configuration","text":"<p>Server is CentOS 7 (Digital Oceans)..</p>"},{"location":"web/proxy/ss/#shadowsocks","title":"Shadowsocks","text":"<p>edit <code>/etc/shadowsocks.json</code></p> <pre><code>{\n    \"server\": \"0.0.0.0\",\n    \"server_port\": 8388,\n    \"local_port\": 1080,\n    \"password\": \"yourpasswd\",\n    \"timeout\": 600,\n    \"method\": \"chacha20-ietf-poly1305\"\n}\n</code></pre> <pre><code>{\n    \"server\": \"0.0.0.0\",\n    \"local_port\": 1080,\n    \"port_password\":{\n        \"8389\": \"password1\",\n        \"8390\": \"password2\"\n    },\n    \"timeout\": 600,\n    \"method\": \"chacha20-ietf-poly1305\"\n}\n</code></pre> <p>edit <code>/etc/systemd/system/shadowsocks.service</code></p> <pre><code>[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>(note the <code>ssserver</code>'s location may be different)</p> <p>run <code>systemctl</code> to enable shadowsocks daemon.</p> <pre><code>systemctl enable shadowsocks\n# systemctl daemon-reload\n\nsystemctl start shadowsocks\n\nsystemctl status shadowsocks \nsystemctl status shadowsocks -l # list all\n</code></pre> <p>Always remember to check the <code>logs</code> if something is wrong!</p> <pre><code>/var/log/messages\n/var/log/secure\n</code></pre>"},{"location":"web/proxy/ss/#fail2ban","title":"Fail2ban","text":"<p>fail2ban is used to secure the server from brute-force ssh attack.</p> <pre><code>last # successed logins\nlastb -20 # check last 20 failed logins\n</code></pre> <pre><code>#! /bin/bash\nset -euxo pipefail\n\n# a simple fail2ban sshd jail\ncat &gt; /etc/fail2ban/jail.local &lt;&lt; EOF\n[DEFAULT]\nignoreip = 127.0.0.1\nbantime = 3600 # 60*60\nfindtime = 600\nmaxretry = 5\n[sshd]\nenabled = true\nEOF\n\nsystemctl restart fail2ban\nsystemctl status fail2ban -l\n</code></pre> <p>sshd</p> <p>sshd is the daemon of ssh.</p> <p>remember to check the <code>log</code>.</p> <pre><code>/var/log/fail2ban.log\n</code></pre> <p>check banned IPs &amp; unban IP.</p> <pre><code>fail2ban-client status sshd # list banned ips\nfail2ban-client set sshd unbanip xxx.xxx.xxx.xxx # unban\n</code></pre>"},{"location":"web/proxy/ss/#set-up-firewalld","title":"set up FirewallD","text":"<pre><code>systemctl enable firewalld\n# shadowsocks \nfirewall-cmd --add-port=8838/tcp --permanent\nfirewall-cmd --add-port=8838/udp --permanent # not necessary\nfirewall-cmd --reload\n</code></pre>"},{"location":"web/proxy/ss/#change-ssh-default-port","title":"change SSH default port","text":"<p>first add a new port, and test on it (make sure you can log in on that port).</p> <p>then comment port 22 to disable it.</p> <p><code>/etc/ssh/sshd_config</code></p> <pre><code>Port 6666\n</code></pre> <pre><code>systemctl restart sshd\nsystemctl status sshd\n\nfirewall-cmd --add-port=6666/tcp --permanent\nfirewall-cmd --add-port=6666/udp --permanent # not necessary\nfirewall-cmd --reload\n</code></pre>"},{"location":"web/proxy/ss/#else","title":"Else","text":"<ul> <li> <p>add user</p> <pre><code>adduser hawkey\npasswd hawkey\n</code></pre> </li> </ul> <ul> <li> <p>misc</p> <pre><code>touch file # create new empty file, or change last modified time of the file.\niptables # basic of firewall\n/etc/shadow # passwd\n</code></pre> </li> </ul> <ul> <li> <p>timezone</p> <pre><code>tzselect\n# then edit .profile\n</code></pre> </li> </ul>"},{"location":"web/proxy/trojan-go/","title":"Trojan go","text":""},{"location":"web/proxy/trojan-go/#trojan-go","title":"trojan-go","text":"<p>Support CDN like Cloudflare to hide your server's IP, or use it even if it's blocked.</p>"},{"location":"web/proxy/trojan-go/#download","title":"download","text":"<p>https://github.com/p4gefau1t/trojan-go/releases</p> <pre><code>mkdir trojan-go &amp;&amp; cd trojan-go\nwget https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip\nunzip trojan-go-linux-amd64.zip\n</code></pre>"},{"location":"web/proxy/trojan-go/#cloudflare-settings","title":"Cloudflare settings","text":"<p>Go to <code>SSL/TLS</code>:</p> <ul> <li>set <code>Overview --&gt; Encryption mode</code>  to <code>Full</code>.</li> </ul> <ul> <li> <p><code>Origin server --&gt; Origin Certificates --&gt; Create Certificate</code>. </p> <p>Copy and paste your <code>cert.pem &amp; private.key</code>! Put them on your server, like under <code>/root/cert/</code>.</p> </li> </ul> <p>Go to <code>DNS</code>:</p> <ul> <li>add a new A record that parse your domain name to your server IP.</li> <li>make sure to use <code>Proxied</code>.</li> </ul>"},{"location":"web/proxy/trojan-go/#server","title":"server","text":"<p>A config example:</p> <pre><code>{\n  \"run_type\": \"server\",\n  \"local_addr\": \"0.0.0.0\", \n  \"local_port\": 443,\n  \"remote_addr\": \"127.0.0.1\",\n  \"remote_port\": 80,\n  \"log_level\": 2,\n  \"log_file\": \"\",\n  \"password\": [\n    \"your_password\" // NEED MODIFICATION\n  ],\n  \"disable_http_check\": false,\n  \"udp_timeout\": 60,\n  \"ssl\": {\n    \"verify\": true,\n    \"verify_hostname\": true,\n    \"cert\": \"/root/cert/cert.pem\", // NEED MODIFICATION\n    \"key\": \"/root/cert/private.key\", // NEED MODIFICATION\n    \"key_password\": \"\",\n    \"cipher\": \"\",\n    \"curves\": \"\",\n    \"prefer_server_cipher\": false,\n    \"sni\": \"your_domain_name\", // NEED MODIFICATION\n    \"alpn\": [\n      \"h2\"\n    ],\n    \"session_ticket\": true,\n    \"reuse_session\": true,\n    \"plain_http_response\": \"\",\n    \"fallback_addr\": \"\",\n    \"fallback_port\": 0,\n    \"fingerprint\": \"firefox\"\n  },\n  \"tcp\": {\n    \"no_delay\": true,\n    \"keep_alive\": true,\n    \"prefer_ipv4\": true\n  },\n  \"mux\": {\n    \"enabled\": true,\n    \"concurrency\": 64,\n    \"idle_timeout\": 60\n  },\n  \"websocket\": {\n    \"enabled\": true, // true if you want to use it behind CDN\n    \"path\": \"/websocket\", // should be the same as client\n    \"host\": \"your_domain_name\" // should be the same to SNI\n  },\n  \"shadowsocks\": {\n    \"enabled\": false,\n    \"method\": \"AES-128-GCM\",\n    \"password\": \"\"\n  }\n}\n</code></pre> <p>Enable as a system service:</p> <pre><code># edit it to make sure the path to trojan-go and config exists.\n# change User to root if permission denied.\nvim trojan-go/examples/trojan-go.service\n\n# enable systemd service\ncp trojan-go/examples/trojan-go.service /etc/systemd/system/\nsystemctl enable trojan-go\nsystemctl start trojan-go\nsystemctl statue trojan-go\n</code></pre> <p>This will make trojan handle 443 port, but you still need to host NGINX at 80 to accept non-trojan requests with a simple config like:</p> <pre><code>server {\n    listen 80 http2; # must enable http/2\n    server_name _; # match all\n\n    location / {\n        proxy_pass https://bilibili.com;\n    }\n}\n</code></pre> <p>To reuse 443 via NGINX streaming, first change trojan config:</p> <pre><code>{\n  \"local_addr\": \"127.0.0.1\", \n  \"local_port\": 10241,\n  \"remote_addr\": \"127.0.0.1\",\n  \"remote_port\": 10242,\n}\n</code></pre> <p>then host NGINX yourself with config like:</p> <pre><code>user root;\nworker_processes auto;\npid /run/nginx.pid;\n# include /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\n### reuse 443 port\nstream {\n    map $ssl_preread_server_name $backend_name {\n        kiui.moe web;\n        www.kiui.moe web;\n        trojan.kiui.moe trojan;\n        default web;\n    }\n\n    upstream web {\n        server 127.0.0.1:10240;\n    }\n\n    upstream trojan {\n        server 127.0.0.1:10241; ### trojan local_port\n    }\n\n    server {\n        listen 443 reuseport;\n        listen [::]:443 reuseport;\n        proxy_pass $backend_name;\n        ssl_preread on;\n    }\n}\n\nhttp {\n    ### for websocket\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        '' close;\n    }\n\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n    gzip on;\n\n    ### trojan http --&gt; https\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name trojan.kiui.moe;\n        return 301 https://trojan.kiui.moe$request_uri;\n    }\n\n\n    ### trojan remote_port\n    server {\n        listen 10242 http2; # must enable http/2\n        server_name _; # match all\n\n        location / {\n            #proxy_pass https://bilibili.com;\n            proxy_pass http://kiui.moe; # redirect to web https\n        }\n    }\n\n    ### web http &amp; https\n    server {\n\n        listen 80;\n        listen [::]:80;\n        listen 10240 ssl; # enable ssl\n        listen [::]:10240 ssl;\n\n        server_name kiui.moe;\n\n        ssl_certificate /root/cert/cert.pem; # path to your ssl cert\n        ssl_certificate_key /root/cert/private.key;\n\n        ssl_session_timeout 5m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n\n        location / {\n            root /root/home;\n        }\n    }\n\n}\n</code></pre> <p>restart NGINX:</p> <pre><code>systemctl restart nginx\nsystemctl status nginx\n</code></pre>"},{"location":"web/proxy/trojan-go/#client","title":"Client","text":""},{"location":"web/proxy/trojan-go/#trojan-go-client","title":"trojan-go client","text":"<p>a config:</p> <pre><code>{\n  \"run_type\": \"client\",\n  \"local_addr\": \"0.0.0.0\", \n  \"local_port\": 1080,\n  \"remote_addr\": \"your_domain_name\", // NEED MODIFICATION\n  \"remote_port\": 443,\n  \"log_level\": 2,\n  \"log_file\": \"\",\n  \"password\": [\n    \"your_password\" // NEED MODIFICATION\n  ],\n  \"disable_http_check\": false,\n  \"udp_timeout\": 60,\n  \"ssl\": {\n    \"verify\": true,\n    \"verify_hostname\": true,\n    \"cert\": \"\", // NEED MODIFICATION\n    \"key\": \"\", // NEED MODIFICATION\n    \"key_password\": \"\",\n    \"cipher\": \"\",\n    \"curves\": \"\",\n    \"prefer_server_cipher\": false,\n    \"sni\": \"your_domain_name\", // NEED MODIFICATION\n    \"alpn\": [\n      \"h2\"\n    ],\n    \"session_ticket\": true,\n    \"reuse_session\": true,\n    \"plain_http_response\": \"\",\n    \"fallback_addr\": \"\",\n    \"fallback_port\": 0,\n    \"fingerprint\": \"firefox\"\n  },\n  \"tcp\": {\n    \"no_delay\": true,\n    \"keep_alive\": true,\n    \"prefer_ipv4\": true\n  },\n  \"mux\": {\n    \"enabled\": true,\n    \"concurrency\": 64,\n    \"idle_timeout\": 60\n  },\n  \"websocket\": {\n    \"enabled\": true, // true if you want to use it behind CDN\n    \"path\": \"/websocket\", // should be the same as server\n    \"host\": \"your_domain_name\" // should be the same to SNI\n  },\n  \"shadowsocks\": {\n    \"enabled\": false,\n    \"method\": \"AES-128-GCM\",\n    \"password\": \"\"\n  }\n}\n</code></pre> <p>also start it via <code>systemd</code>:</p> <pre><code># edit it to make sure the path to trojan-go and config exists.\n# change User to root if permission denied.\nvim trojan-go/examples/trojan-go.service\n\n# enable systemd service\ncp trojan-go/examples/trojan-go.service /etc/systemd/system/\nsystemctl enable trojan-go\nsystemctl start trojan-go\nsystemctl statue trojan-go\n</code></pre>"},{"location":"web/proxy/trojan-go/#clash-client-recommended","title":"Clash client (recommended)","text":"<p>get clash:</p> <pre><code>wget https://github.com/Dreamacro/clash/releases/download/v1.16.0/clash-linux-amd64-v1.16.0.gz\ngz -d clash-linux-amd64-v1.16.0.gz\nmv clash-linux-amd64-v1.16.0 clash\nchmod 777 clash\n\n# manually get Country.mmdb if automatical download failed\nwget https://github.com/Dreamacro/maxmind-geoip/releases/download/20230512/Country.mmdb\n</code></pre> <p>config like:</p> <pre><code>proxies:\n  - name: your_trojan_proxy\n    type: trojan\n    server: trojan.kiui.moe\n    port: 443\n    password: your_password\n    network: ws\n    sni: trojan.kiui.moe\n    # udp: true\n    # skip-cert-verify: true\n    ws-opts:\n      path: /websocket\n      headers:\n        Host: trojan.kiui.moe\n</code></pre> <p>make it a service under <code>/etc/systemd/system/clash.service</code>: (MODIFY the paths!)</p> <pre><code>[Unit]\nDescription=Clash daemon, A rule-based proxy in Go.\nAfter=network-online.target\n\n[Service]\nType=simple\nRestart=always\nExecStart=/path/to/clash -d /path/to/workspace -f /path/to/config\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>enable it:</p> <pre><code>systemctl enable clash\nsystemctl start clash\n</code></pre> <p>finally, set up system proxy to manual and enter your http/socks5 port.</p>"},{"location":"web/proxy/trojan/","title":"Trojan with Nginx","text":""},{"location":"web/proxy/trojan/#server","title":"Server","text":"<ul> <li> <p>Get trojan </p> <pre><code>wget https://github.com/trojan-gfw/trojan/releases/download/v1.16.0/trojan-1.16.0-linux-amd64.tar.xz\ntar xf trojan-1.16.0-linux-amd64.tar.xz\nrm trojan-1.16.0-linux-amd64.tar.xz\ncd trojan\n</code></pre> </li> </ul> <ul> <li> <p>Edit <code>config.json</code>, set port, password, and cert/key.</p> <pre><code>vi config.json\n</code></pre> </li> </ul> <ul> <li> <p>register as a service for auto-start when reboot</p> <pre><code>sudo vi /etc/systemd/system/trojan.service\n</code></pre> <pre><code>[Unit]\nDescription=trojan\nAfter=network.target network-online.target nss-lookup.target mysql.service mariadb.service mysqld.service\n\n[Service]\nType=simple\nStandardError=journal\nExecStart=/home/ubuntu/trojan/trojan /home/ubuntu/trojan/config.json # CHANGE to your path!\nExecReload=/bin/kill -HUP \\$MAINPID\nLimitNOFILE=51200\nRestart=on-failure\nRestartSec=1s\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <pre><code>sudo systemctl start trojan\nsudo systemctl enable trojan\nsudo systemctl status trojan\nsudo netstat -antp # you can find 80 and 443 are in LISTEN status\n</code></pre> </li> </ul> <ul> <li> <p>config DNS</p> <p>Using Cloudflare, create a new A-record: <code>your.domain.name</code> to <code>your server IP</code>, and set the mode to <code>DNS only</code>.</p> </li> </ul> <ul> <li> <p>start Nginx</p> <pre><code>sudo apt install nginx\nsudo vi /etc/nginx/sites-enabled/default\n</code></pre> <pre><code># add a server for fake 80\nserver {\n    listen 80 default_server;\n    server_name &lt;your.domain.name&gt;;\n\n    # the camouflage website to redirect\n    location / {\n        proxy_pass https://bilibili.com;\n    }\n\n}\n\n# change the original server to redirect http --&gt; https\nserver {\n    listen 80; # REMOVE default_server!\n    listen [::]:80;\n\n    server_name _; # catch-all, any other server_name will use this.\n\n    location / {\n        return 301 https://$host$request_uri;\n    }\n}\n</code></pre> <pre><code>sudo systemctl restart nginx\nsudo systemctl status nginx\n</code></pre> </li> </ul> <ul> <li> <p>And now everything is set:</p> <ul> <li>access <code>your.domain.name</code>, you'll jump to the camouflage site.</li> </ul> <ul> <li>using a trojan/clash/... client to connect! </li> </ul> </li> </ul>"},{"location":"web/proxy/trojan/#nginx-reuse-443","title":"Nginx reuse 443","text":"<p>this happens if we also use Nginx to host other websites.</p> <p>Nginx listens to 443 and stream the requests according to server names.</p> <pre><code>...\n\n# add this\nstream {\n    map $ssl_preread_server_name $backend_name {\n        hawia.xyz web;\n        trojan.hawia.xyz trojan; # map trojan.hawia.xyz to upstream trojan\n        default web;\n    }\n\n    upstream web {\n        server 127.0.0.1:10240; # web should listen to this\n    }\n\n    upstream trojan {\n        server 127.0.0.1:10241; # trojan should listen to this\n    }\n\n    # stream server\n    server {\n        listen 443 reuseport;\n        listen [::]:443 reuseport;\n        proxy_pass $backend_name;\n        ssl_preread on;\n    }\n}\n\nhttp {\n    ...\n}\n</code></pre> <p>change web servers to the new port:</p> <pre><code># trojan http --&gt; https\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name x.kiui.moe;\n    return 301 https://x.kiui.moe$request_uri;\n}\n\n# trojan remote_port (fake web)\nserver {\n    listen 10242;\n    server_name x.kiui.moe;\n\n    location / {\n        proxy_pass https://bilibili.com;\n    }\n}\n\n# web http --&gt; https\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name kiui.moe;\n    return 301 https://kiui.moe$request_uri;\n}\n\n# web https\nserver {\n\n    listen 10240 ssl; # modified from 443\n    listen [::]:10240 ssl; # modified from 443\n\n    server_name hawia.xyz;\n\n    ssl_certificate www.hawia.xyz.pem;\n    ssl_certificate_key www.hawia.xyz.key;\n\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        root /root/home;\n    }\n\n    location /blogs {\n        root /root;\n    }\n\n    location /nonsense {\n        root /root;\n    location /umbra {\n        root /root;\n    }\n\n    location /api/ {\n        include uwsgi_params;\n        uwsgi_pass 127.0.0.1:8000;\n    }\n\n    location /api/nonsense/ {\n        include uwsgi_params;\n        uwsgi_pass 127.0.0.1:8001;\n    }\n\n    location /api/umbra/ {\n        include uwsgi_params;\n        uwsgi_pass 127.0.0.1:8002;\n    }\n}\n</code></pre> <ul> <li> <p>Start it!</p> <pre><code>#systemctl start nginx\nnginx -s reload\nsystemctl start trojan\nsystemctl status trojan\n</code></pre> </li> </ul> <ul> <li> <p>If use Cloudflare CDN:</p> <p>change the trojan record to <code>DNS Only</code> status. (do not proxy)</p> <p></p> </li> </ul>"},{"location":"web/proxy/trojan/#client","title":"Client","text":"<ul> <li> <p>Get trojan</p> <pre><code>wget https://github.com/trojan-gfw/trojan/releases/download/v1.15.1/trojan-1.15.1-linux-amd64.tar.xz\ntar -xvf trojan-1.15.1-linux-amd64.tar.xz\n</code></pre> </li> </ul> <ul> <li> <p>Config</p> <pre><code>vi trojan/config.json\n</code></pre> <pre><code>{\n    \"run_type\": \"client\", # modified\n    \"local_addr\": \"0.0.0.0\",\n    \"local_port\": 1080,\n    \"remote_addr\": \"trojan.hawia.xyz\", # modified\n    \"remote_port\": 443, # may need to modify\n    \"password\": [\n        \"password\" # modified!\n    ],\n    \"log_level\": 1,\n    \"ssl\": {\n        \"verify\": false, # modified\n        \"verify_hostname\": false, # modified\n        \"cert\": \"\", # modified\n        \"key\": \"\", # modified\n        \"key_password\": \"\",\n        \"cipher\": \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-A\n        \"cipher_tls13\": \"TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384\",\n        \"prefer_server_cipher\": true,\n        \"alpn\": [\n            \"http/1.1\"\n        ],\n        \"alpn_port_override\": {\n            \"h2\": 81\n        },\n        \"reuse_session\": true,\n        \"session_ticket\": false,\n        \"session_timeout\": 600,\n        \"plain_http_response\": \"\",\n        \"curves\": \"\",\n        \"dhparam\": \"\"\n    },\n    \"tcp\": {\n        \"prefer_ipv4\": false,\n        \"no_delay\": true,\n        \"keep_alive\": true,\n        \"reuse_port\": false,\n        \"fast_open\": false,\n        \"fast_open_qlen\": 20\n    },\n    \"mysql\": {\n        \"enabled\": false,\n        \"server_addr\": \"127.0.0.1\",\n        \"server_port\": 3306,\n        \"database\": \"trojan\",\n        \"username\": \"trojan\",\n        \"password\": \"\",\n        \"cafile\": \"\"\n    }\n}\n</code></pre> </li> </ul> <ul> <li> <p>Run trojan service!</p> <pre><code>trojan -c config.json -l trojan.log\n</code></pre> <p>Or make a system unit. (MODIFY the trojan path!)</p> <pre><code>cat &gt; /etc/systemd/system/trojan.service &lt;&lt;-EOF\n[Unit]\nDescription=trojan\nAfter=network.target\n\n[Service]\nType=simple\nPIDFile=/home/kiui/trojan/trojan.pid\nExecStart=/home/kiui/trojan/trojan -c /home/kiui/trojan/config.json -l /home/kiui/trojan/trojan.log\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=1s\n\n[Install]\nWantedBy=multi-user.target\n\nEOF\n</code></pre> <pre><code>systemctl start trojan\nsystemctl status trojan\nsystemctl enable trojan\n</code></pre> </li> </ul> <ul> <li> <p>Proxychains</p> <pre><code>apt install proxychains\n</code></pre> <p>Config:</p> <pre><code>vi /etc/proxychains.conf\n</code></pre> <pre><code>...\n# socks4 ...\nsocks5 127.0.0.1 1080\n</code></pre> </li> </ul> <ul> <li> <p>test</p> <pre><code>curl -4 ip.sb\nproxychains curl -4 ip.sb\n</code></pre> </li> </ul> <ul> <li> <p>Privoxy for http proxy</p> <p>since trojan only supports socks5 proxy, you should use <code>privoxy</code> to forward it to <code>http</code> proxy:</p> <pre><code>sudo apt install privoxy\n</code></pre> <p>edit config <code>/etc/privoxy/config</code>, add the following lines:</p> <pre><code>listen-address 0.0.0.0:1081 # http proxy port\ntoggle  1\nenable-remote-toggle 1\nenable-remote-http-toggle 1\nenable-edit-actions 0\nenforce-blocks 0\nbuffer-limit 4096\nforwarded-connect-retries  0\naccept-intercepted-requests 0\nallow-cgi-request-crunching 0\nsplit-large-forms 0\nkeep-alive-timeout 5\nsocket-timeout 60\n\nforward-socks5 / 0.0.0.0:1080 . # trojan's socks5 proxy port\n</code></pre> <p>restart the service:</p> <pre><code>sudo systemctl restart privoxy\n</code></pre> <p>Now you can check the proxy via:</p> <pre><code>sudo netstat -antp\n</code></pre> </li> </ul>"},{"location":"web/rss/rsshub/","title":"RSSHub service","text":"<p>We use the manual install to gain full control.</p> <pre><code># install &amp; update nodejs &amp; npm\nsudo apt install nodejs npm\nsudo npm install -g n\nsudo n stable\nsudo npm install -g npm\n\n# install RSSHub\ngit clone https://github.com/DIYgod/RSSHub.git\ncd RSSHub\nnpm ci --production\n\n# start \nnpm start\n</code></pre>"},{"location":"web/rss/rsshub/#configs","title":"configs","text":"<p>create <code>.env</code> file to write configs.</p> <pre><code># port, default is 1200\nPORT=1888\n\n# access control\n</code></pre>"},{"location":"web/rss/rsshub/#nginx-forward","title":"Nginx forward","text":"<pre><code>server {\n    # ...\n\n    # serve at kiui.moe/rss\n    location /rss {\n        # kiui.moe/rss/... --&gt; localhost:1888/...\n        rewrite ^/rss/(.*)$ /$1 break;\n        proxy_pass http://127.0.0.1:1888;\n    }\n}\n</code></pre>"},{"location":"web/rss/ttrss/","title":"TTRSS","text":""},{"location":"web/rss/ttrss/#install","title":"install","text":"<pre><code># install docker\n# https://docs.docker.com/engine/install/\n\n# install docker-compose\n# https://docs.docker.com/compose/install/\n\n# install ttrss\n# http://ttrss.henry.wang/zh/#%E5%85%B3%E4%BA%8E\nmkdir ttrss &amp;&amp; cd ttrss\nwget https://github.com/HenryQW/Awesome-TTRSS/blob/main/docker-compose.yml\n\n# modify following the yml\n# hint1: SELF_URL_PATH: only the domain name! and use https.\n\n# run at foreground\ndocker-compose up\n</code></pre>"},{"location":"web/rss/ttrss/#nginx","title":"Nginx","text":"<p>As sub-domain mode: </p> <ul> <li>recommend, because ttrss will also create other sub-directories... so you don't want to pollute your sub-dir, right?</li> <li>however, you need to issue a new ssl certicifate for the sub-domain. :-(</li> </ul> <pre><code># upstream redirected to share 443\n# access at ttrss.kiui.moe\nserver {\n    listen 10243 ssl;\n    listen [::]:10243 ssl;\n\n    gzip on;\n    server_name  ttrss.kiui.moe;\n\n    ssl_certificate ttrss.fullchain.pem;\n    ssl_certificate_key ttrss.privkey.pem;\n\n    location / {\n        proxy_redirect off;\n        proxy_pass http://127.0.0.1:181;\n\n        proxy_set_header  Host                $http_host;\n        proxy_set_header  X-Real-IP           $remote_addr;\n        proxy_set_header  X-Forwarded-Ssl     on;\n        proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;\n        proxy_set_header  X-Forwarded-Proto   $scheme;\n        proxy_set_header  X-Frame-Options     SAMEORIGIN;\n\n        client_max_body_size        100m;\n        client_body_buffer_size     128k;\n\n        proxy_buffer_size           4k;\n        proxy_buffers               4 32k;\n        proxy_busy_buffers_size     64k;\n        proxy_temp_file_write_size  64k;\n    }\n}\n</code></pre> <p>As sub-directory mode: [DO NOT RECOMMEND!]</p> <ul> <li>If use this mode, all the APIs in the web frontend needs to be modified. e.g., the fever API should be <code>https://kiui.moe/ttrss/plugins/fever</code>, but the web frontend shows <code>https://kiui.moe/plugins/fever/</code>. This will also lead to several bugs.</li> </ul> <pre><code>server {\n    # ...\n\n    # access at kiui.moe/ttrss/\n    # SELF_URL_PATH = https://kiui.moe/\n    location /ttrss/ {\n        rewrite ^/ttrss/(.*)$ /$1 break;\n        proxy_redirect https://$http_host https://$http_host/ttrss;\n        proxy_pass http://127.0.0.1:181; # local service at 181\n\n        proxy_set_header  Host                $http_host;\n        proxy_set_header  X-Real-IP           $remote_addr;\n        proxy_set_header  X-Forwarded-Ssl     on;\n        proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;\n        proxy_set_header  X-Forwarded-Proto   $scheme;\n        proxy_set_header  X-Frame-Options     SAMEORIGIN;\n\n        client_max_body_size        100m;\n        client_body_buffer_size     128k;\n\n        proxy_buffer_size           4k;\n        proxy_buffers               4 32k;\n        proxy_busy_buffers_size     64k;\n        proxy_temp_file_write_size  64k;\n    }\n}\n</code></pre>"},{"location":"web/rss/ttrss/#access-web-frontend","title":"access web frontend","text":"<p>At <code>kiui.moe/ttrss/</code> or <code>ttrss.kiui.moe</code>. </p> <p>Default account is <code>admin</code>. Remember to change password at once.</p>"},{"location":"web/rss/ttrss/#fever-api-for-3rd-applications","title":"fever api for 3rd applications","text":"<ul> <li>activate in prefs.</li> <li>set a new password.</li> </ul>"},{"location":"web/scrape/grab/","title":"Grab","text":""},{"location":"web/scrape/grab/#simple-api","title":"Simple API","text":""},{"location":"web/scrape/grab/#get","title":"Get","text":"<pre><code>from grab import Grab\n\ng = Grab()\nresp = g.go('https://openaccess.thecvf.com/CVPR2020?day=2020-06-16')\n# g.doc == resp -&gt; True\n</code></pre>"},{"location":"web/scrape/grab/#post","title":"Post","text":"<pre><code>from grab import Grab\n\ng = Grab()\n\ng.go('https://github.com/login')\ng.doc.set_input('login', '****')\ng.doc.set_input('password', '****')\ng.doc.submit()\n\ng.doc.save('/tmp/x.html')\nhome_url = g.doc('//a[contains(@class, \"header-nav-link name\")]/@href').text()\n</code></pre>"},{"location":"web/scrape/grab/#handle-response","title":"Handle Response","text":"<pre><code>resp.url\nresp.code\n\nresp.body\nresp.unicode_body()\n\nresp.cookies\n</code></pre>"},{"location":"web/scrape/grab/#selector","title":"Selector","text":"<pre><code>selectorList = g.doc('/xpath') # g.doc.select('/xpath')\nselector = selectorList[0]\n\nselector.html()\nselector.text()\n</code></pre>"},{"location":"web/scrape/grab/#example","title":"Example","text":"<p>crawl videos in <code>yhdm.so</code> .</p> <pre><code>def crawl(keyword):\n    urls = []\n    g = Grab()\n    g.go(f'http://www.yhdm.so/search/{keyword}/')\n    candidate_selectors = g.doc(f'//div[@class=\"lpic\"]/ul/li/a/@href')\n    for candidate in candidate_selectors:\n        g.go(f'http://www.yhdm.so{candidate.text()}')\n        episode_selectors = g.doc('//div[@class=\"movurl\"]/ul/li/a/@href')\n        for episode in episode_selectors:\n            g.go(f'http://www.yhdm.so{episode.text()}')\n            title_selectors = g.doc('//div[@class=\"gohome l\"]/h1')\n            title = title_selectors[0].text()\n            data_selectors = g.doc('//div[@id=\"playbox\"]/@data-vid')\n            url = data_selectors[0].text()\n            if url[-4:] == \"$mp4\":\n                url = url[:-4]\n                print(f'[INFO] crawled {title} {url}')\n                urls.append({\n                    'formattedUrl': url,\n                    'title': title,\n                    'snipped': '',\n                })\n    return urls\n</code></pre>"},{"location":"web/scrape/grab/#spider-api","title":"Spider API","text":"<pre><code>from grab.spider import Spider, Task\n\nclass ExampleSpider(Spider):\n    def task_generator(self):\n        for lang in 'python', 'ruby', 'perl':\n            url = 'https://www.google.com/search?q=%s' % lang\n            yield Task('search', url=url, lang=lang)\n\n    def task_search(self, grab, task):\n        print('%s: %s' % (task.lang,\n                          grab.doc('//div[@class=\"s\"]//cite').text()))\n\n\nbot = ExampleSpider(thread_number=2)\nbot.run()\n</code></pre>"},{"location":"web/scrape/xpath/","title":"XPath","text":"<p>Cheat sheet: https://devhints.io/xpath</p>"},{"location":"web/scrape/xpath/#examples","title":"Examples","text":"<pre><code># target                x\ndiv p                   //div//p\nul &gt; li                 //ul/li\na:first-child           //a[1]\nul &gt; li:last-child      //ul/li[last()]\n\n#id                     //*[@id=\"id\"]   \n.class                  //*[@class=\"class\"]\ninput[type=\"submit\"]    //input[@type=\"submit\"]  \na#abc[for=\"xyz\"]        //a[@id=\"abc\"][@for=\"xyz\"]  \na[rel]                  //a[@rel]    \na[href^='/']            //a[starts-with(@href, '/')]    \na[href*='://']          //a[contains(@href, '://')]  \n\nhref value              //a/@href\n\nText match              //button[text()=\"Submit\"]\nHas children            //ul[*]\nHas children (specific) //ul[li]\n\nlogical                 //div[@id=\"head\" and position()=2]\ncount                   //ul[count(li) &gt; 2]\n</code></pre>"},{"location":"web/scrape/xpath/#selectors","title":"Selectors","text":"<pre><code>name\n/div\ndiv/p\n//div\n.\n..\n@property\nA | B\n</code></pre> <pre><code>/div[1]\n/div[last()]\n/div[position()&lt;3]\n//title[@lang='eng']\n</code></pre> <pre><code>*\n@*\nnode()\n</code></pre>"},{"location":"web/scrape/xpath/#built-in-functions","title":"Built-in functions","text":"<pre><code>name() # h1, h2, div, ...\ntext() # plain text\ncount(div), count(//*) \nposition()\nnot(expr)\ncontains(@class, 'head')\nstarts-with(@class, 'head')\nends-with(@class, 'head')\nconcat(a, b)\nsubstring(str, start, end)\n</code></pre>"},{"location":"web/scrape/xpath/#operators","title":"Operators","text":"<pre><code>|\n+ - * div \n= !=\n&lt; &lt;= &gt; &gt;=\nor and\nmod\n</code></pre>"},{"location":"web/scrape/xpath/#axis","title":"Axis","text":"<pre><code>[default] = child::\n@ = attribute::\n// = /descendant-or-self::\n. = self::node()\n.. = parent::node()\n</code></pre>"},{"location":"windows/cuda/","title":"Cuda","text":""},{"location":"windows/cuda/#cuda-on-windows","title":"CUDA on Windows","text":""},{"location":"windows/cuda/#install","title":"install","text":"<p>Very easy, just follow the link and get a installer.</p> <p>After the installation, you can find it at:</p> <pre><code>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.3\n</code></pre> <p>Check installation by</p> <pre><code>nvcc --version\n</code></pre>"},{"location":"windows/cuda/#cuda_visible_devices","title":"CUDA_VISIBLE_DEVICES","text":"<pre><code>set CUDA_VISIBLE_DEVICES=2,3 &amp; python my_script.py\n</code></pre>"},{"location":"windows/cuda/#where-is-the-damn-clexe","title":"Where is the damn <code>cl.exe</code> ?","text":"<p>For the error <code>Command '['where', 'cl']' returned non-zero exit status 1</code>.</p> <p>* open start menu, search <code>developer command prompt for VS xxxx</code> and start it (check the official vs code setup for screenshots)</p> <p>* call <code>where cl</code>, you should get something like:</p> <pre><code>```\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.28.29333\\bin\\Hostx86\\x86\\cl.exe\n```\n</code></pre> <p>* Add that directory to your PATH, and restart powershell.</p> <p>also mentioned a script to do this  at <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat</code>, but I didn't find it useful...</p> <p>Another brilliant solution is from <code>tiny-cuda-nn</code>, auto-find <code>cl</code> in <code>setup.py/backend.py</code>:</p> <pre><code>if os.name == \"posix\":\n    c_flags = ['-O3', '-std=c++14']\nelif os.name == \"nt\":\n    c_flags = ['/O2', '/std:c++14']\n\n    # find cl.exe\n    def find_cl_path():\n        import glob\n        for edition in [\"Enterprise\", \"Professional\", \"BuildTools\", \"Community\"]:\n            paths = sorted(glob.glob(r\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\*\\\\%s\\\\VC\\\\Tools\\\\MSVC\\\\*\\\\bin\\\\Hostx64\\\\x64\" % edition), reverse=True)\n            if paths:\n                return paths[0]\n\n    # If cl.exe is not on path, try to find it.\n    if os.system(\"where cl.exe &gt;nul 2&gt;nul\") != 0:\n        cl_path = find_cl_path()\n        if cl_path is None:\n            raise RuntimeError(\"Could not locate a supported Microsoft Visual C++ installation\")\n        os.environ[\"PATH\"] += \";\" + cl_path\n</code></pre>"},{"location":"windows/powershell/","title":"Powershell","text":""},{"location":"windows/powershell/#powershell","title":"powershell","text":""},{"location":"windows/powershell/#set-execution-policy","title":"set execution policy","text":"<p>The default is <code>restricted</code>, which disables executing custom ps scripts (ps1 files). Run powershell in administrator mode (ctrl + click new terminal), then: <pre><code>set-executionpolicy remotesigned\n\n# check\nget-executionpolicy # show remotesigned\n</code></pre></p>"},{"location":"windows/powershell/#profile-bashrc","title":"profile (bashrc)","text":"<pre><code># location\n$profile\n# C:\\Users\\haw\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\n# if it doesn't exist, you need to create it manually...\n\n# edit it\nnotepad $profile\n</code></pre> <p>an example:</p> <pre><code>set-alias l ls\nset-alias npp notepad\nset-alias grep select-string\n\nfunction lN\n{\n    ls -Name\n}\nfunction la\n{\n    ls -hidden\n}\n\nfunction ..\n{\n    cd ..\n}\n\nfunction W\n{\n    set-location E:\\aa\n}\n\n# recursively find files, mimicking find.\nfunction find([string] $glob)\n{\n    ls -recurse -include $glob\n}\n\n# path\n#$env:Path += \";C:\\Program Files\\Racket\"\n</code></pre> <p>reload:</p> <pre><code>. $profile\n</code></pre>"},{"location":"windows/powershell/#set-proxy-via-profile","title":"set proxy via profile","text":"<p>Add in your <code>$profile</code>: <pre><code># example for clash default port\n$Env:http_proxy=\"http://127.0.0.1:7890\"\n$Env:https_proxy=\"http://127.0.0.1:7890\"\n</code></pre></p>"},{"location":"windows/powershell/#path","title":"path","text":""},{"location":"windows/powertoys/","title":"Powertoys","text":""},{"location":"windows/powertoys/#power-toys","title":"Power Toys","text":"<p>Install from: https://github.com/microsoft/PowerToys/releases</p>"},{"location":"windows/powertoys/#power-rename","title":"Power Rename","text":"<p>https://learn.microsoft.com/zh-cn/windows/powertoys/powerrename</p> <p>Examples:</p> <pre><code># using regex\n(.*).mp4 --&gt; $1_backup.mp4\n</code></pre> <p>MS use <code>$1</code> for group reference in regex, instead of <code>\\1</code>!</p>"},{"location":"windows/win_install_list/","title":"Win install list","text":""},{"location":"windows/win_install_list/#install-list-for-new-windows-machine","title":"Install List for New Windows Machine","text":"<ul> <li>clash-win &amp; pkuwalless: https://189854.xyz/</li> <li>chrome: https://www.google.com/intl/en_sg/chrome/</li> <li>bandizip: https://en.bandisoft.com/bandizip/</li> <li>mobaxterm: https://mobaxterm.mobatek.net/download-home-edition.html</li> <li>code: https://code.visualstudio.com/download</li> <li>nomachine: https://www.nomachine.com/</li> <li>wechat: https://pc.weixin.qq.com/</li> <li>steam: https://store.steampowered.com/about/</li> <li>zotero: https://www.zotero.org/download/</li> <li>visual studio: https://visualstudio.microsoft.com/zh-hans/</li> <li>CUDA: https://developer.nvidia.com/cuda-downloads</li> <li>screen2gif: https://www.screentogif.com/</li> <li>snipaste: https://zh.snipaste.com/download.html</li> </ul> <ul> <li>typora: https://typora.io/#feature</li> </ul>"},{"location":"writings/examples/","title":"Examples","text":""},{"location":"writings/examples/#misc","title":"Misc","text":"<ul> <li>w.l.o.g. = without loss of generality.</li> <li>... be prohibitive of ...</li> <li>... be prohibitively computational expensive ...</li> </ul>"},{"location":"writings/examples/#abstract","title":"Abstract","text":"<ul> <li>It is of increasing importance for ...  and draws increasing attention.</li> <li>Further ablation study and analysis gives more insights into the proposed method and demonstrate the generalization capability and stability of our model.</li> <li>Experiments on the ... dataset show that xxx outperforms the state-of-the-arts in xxx, especially for ...</li> </ul>"},{"location":"writings/examples/#intro","title":"Intro","text":"<ul> <li>... remains an important open challenge in ...</li> <li>Recently, there has been progress in ...</li> <li>Due to the difficulty of the task, these methods still have significant limitations. In particular, early efforts focused on ...</li> <li>We are motivated by these observations to ...</li> <li>Along the line of research that , ... <li>Could ... ? Prior work is encouraging. [OpenAI CLIP]</li> <li>... is one of the central tasks in 3D computer vision with many applications. For example, ...</li> <li>... is a fundamental problem in computer vision and computer graphics.</li> <li>... has recently become a highly promising alternative to classical xxx approaches due to its ...</li> <li>The ability to ... is a long-standing goal of computer vision and graphics.</li> <li>... is a core element in diverse fields of research, including ....</li> <li>We study alternative ways for ... to improve ... beyond ...</li> <li>The benefits from the ... scheme lie in two-fold. On the one hand, ... On the other hand, ....</li> <li>by ..., we make it possible to ..., and thus have the best of both worlds, i.e., ... and ....</li> <li>whereas previous works reach high performance on standard ... benchmarks, in challenging real-world conditions, it is desirable to involve ...</li> <li>for ..., there are two dominant paradigms. The first one focuses on ..., Another mainstream solution ...</li> <li>while state-of-the-art A methods handle xxx well, B methods either ignore these cases altogether or only deliver a weak performance.</li> <ul> <li>These methods fall short of generating novel samples of a subject while preserving fidelity.</li> <li>We do not impose any restrictions on input image capture settings.</li> </ul> <ul> <li>In addition, language drift is a common problem in language models, and manifests itself in text-to-image diffusion models as well.</li> <li>In contrast, ...</li> </ul>"},{"location":"writings/examples/#contributions","title":"Contributions","text":"<ul> <li>We present a new approach capable of ... from ...</li> <li>We propose XXX, a novel ..., which ...</li> <li>We demonstrate significant performance improvements of our approach compared to prior work.</li> </ul>"},{"location":"writings/examples/#related-work","title":"Related work","text":"<ul> <li>We briefly describe related work in  major lines of research: ... <li>We are motivated to extend this line of research to a ... setting.</li> <li>This severely curtails their flexibility and limits their ... capabilities.</li> <li>The most related line of research is ...</li> <li>Before the age of deep learning, ...</li> <li>... have been shown to allow for ...</li> <li>.... has gained popularity in ... To overcome ..., several works ...</li> <li>Several works investigate how ... While many approaches use ..., we focus on ...</li> <li>Compared to the xxx approaches, wherein the ... is often suboptimal, yyy approaches are more straightforward and have achieved promising performance.</li>"},{"location":"writings/examples/#methods","title":"Methods","text":"<ul> <li>(directly describe methods) In this section, we briefly summarize A, and then describe how we extend it to B.</li> <li>(first describe problems) Given , our goal is to ... <li>We emphasize that what is common across this line of work is not  but . [CLIP] <li>Our goal is .... In the following, we discuss the main components of our method. First, ... (See Sec~\\ref{}). Next, ... Finally, ....</li>"},{"location":"writings/examples/#experiments","title":"Experiments","text":"<ul> <li>The improvements potentially come from the design of ... in our method, which can act as a ...</li> <li></li> </ul>"},{"location":"writings/examples/#appendix","title":"Appendix","text":"<ul> <li>The proof is given in the Appendix.</li> </ul> <ul> <li>The detailed derivation of this formula is given in the Appendix.</li> </ul>"},{"location":"writings/examples/#junction","title":"junction","text":"<ul> <li>In this section we investigate the relationship between ...</li> <li>In this section, we first verify the efficacy of ..., and then show that ...</li> <li>In particular, we show that ..., thus motivating ...</li> <li>For the sake of simplicity and w.l.o.g, hereafter we ...</li> <li>Let us consider a ...</li> <li>Equivalently, ...</li> <li></li> </ul>"},{"location":"writings/pitfalls/","title":"Writing Issues","text":""},{"location":"writings/pitfalls/#avoid-ambiguity","title":"Avoid Ambiguity","text":"<ul> <li>since --&gt; because</li> <li>while --&gt; although, whereas</li> <li>method --&gt; technique, approach</li> <li>if --&gt; whether</li> </ul>"},{"location":"writings/pitfalls/#avoid-strong-words","title":"Avoid Strong Words","text":"<ul> <li>always --&gt; often</li> </ul> <ul> <li></li> </ul>"},{"location":"writings/pitfalls/#avoid-informal-words","title":"Avoid Informal Words","text":"<ul> <li>though --&gt; although</li> <li>above --&gt; preceding</li> <li>very well --&gt; satisfactorily, sufficiently</li> <li>enough --&gt; sufficient</li> <li>as far as we know --&gt; within our knowledge</li> <li>means --&gt; indicates, represents</li> </ul> <ul> <li> <p>will --&gt; plan to, shall, do</p> <p>Our future work plans to ...</p> <p>Section 5 describes the experiments...</p> </li> </ul> <ul> <li> <p>Firstly, Secondly, ..., Finally --&gt; First, Second, ..., Finally</p> <p>(Also okay for firstly, but may better stick on one form.)</p> </li> </ul> <ul> <li> <p>A, otherwise, B --&gt; A; otherwise, B / A. Otherwise, B</p> <p>same for however, therefore.</p> </li> </ul> <ul> <li>can not, can't --&gt; cannot</li> </ul> <ul> <li>don't --&gt; do not</li> </ul> <ul> <li>current --&gt; existing</li> <li>space limitation --&gt; space limit.</li> <li>more and more --&gt; increasingly</li> <li>note ... --&gt; note that ...</li> </ul>"},{"location":"writings/pitfalls/#avoid-complicated-words","title":"Avoid Complicated Words","text":"<ul> <li>utilize --&gt; use</li> </ul>"},{"location":"writings/pitfalls/#which-vs-that","title":"Which vs That","text":"<ul> <li> <p>restrictive clause: that (without preceding comma)</p> <p>\u9650\u5b9a\u6027\u5b9a\u8bed\u4ece\u53e5, \u5bf9\u4e8e\u53e5\u610f\u6709\u5173\u952e\u5f71\u54cd.</p> <p>\"My bike that is broken is in the garage.\" </p> <p>\u5f3a\u8c03\u6211\u574f\u4e86\u7684\u90a3\u8f86\u8f66\u5728\u8f66\u5e93\u91cc\uff0c\u6697\u793a\u6211\u53ef\u80fd\u6709\u4e0d\u53ea\u4e00\u8f86\u8f66\u3002</p> </li> </ul> <ul> <li> <p>non-restrictive clause: which (with preceding comma)</p> <p>\u975e\u9650\u5b9a\u6027\u5b9a\u8bed\u4ece\u53e5, \u8865\u5145\u4fe1\u606f, \u4e0d\u4f1a\u5bf9\u53e5\u610f\u4ea7\u751f\u5173\u952e\u5f71\u54cd.</p> <p>\"My bike, which is broken, is in the garage.\"</p> <p>\u8bf4\u660e\u6211\u7684\u8f66\u5728\u8f66\u5e93\u91cc\uff0c\u8865\u5145\u8bf4\u660e\u8fd9\u8f66\u574f\u4e86\u3002</p> </li> </ul> <p>ABC, which is the best method, ... [OK]</p> <p>ABC that is the best method ... [OK]</p> <p>ABC which is the best method ... [WRONG]</p> <p>ABC, that is the best method, ... [WRONG]</p>"},{"location":"writings/pitfalls/#misc","title":"Misc","text":"<ul> <li>No need to add \"the\" before Figure/Table 1.</li> </ul> <ul> <li>Do not put \"And\", \"Also\" in the beginning of the sentence.</li> </ul> <ul> <li>\",\" before \"respectively\"</li> </ul> <ul> <li>\",\" before \"e.g.\", \"i.e.\"</li> </ul> <ul> <li>\"A, B, and/or C\"</li> </ul> <ul> <li> <p>Do not use citation as a part of the sentence.</p> <p>e.g., \"Tools proposed in [2]\" --&gt; \"Tools proposed by AAA et al. [2]\"</p> </li> </ul>"},{"location":"writings/pitfalls/#uncountable","title":"Uncountable","text":"<ul> <li>work: use several pieces of work.</li> <li>research: use several research projects.</li> <li>software: use several software programs.</li> </ul>"},{"location":"writings/pitfalls/#abbreviation","title":"Abbreviation","text":"<ul> <li>ABC (Aaa Bbb Ccc) --&gt; Aaa Bbb Ccc (ABC)</li> </ul>"},{"location":"writings/pitfalls/#as-follows","title":"As follows","text":"<ul> <li>The paper makes the following contributions.</li> </ul> <ul> <li> <p>We list the contributions as follows / as below:</p> <p>we list the contributions below [WRONG]</p> </li> </ul>"},{"location":"writings/rebuttals/","title":"Rebuttals","text":""},{"location":"writings/rebuttals/#openreview-markdown","title":"Openreview markdown","text":"<p>Thank you for your valuable time and insightful comments! We have tried to address your concerns in the updated manuscript and our rebuttal text:</p> <p>Q1: questions</p> <p>replies.</p> <p>[1] references</p> <p>We hope our responses satisfactorily address your queries. Please let us know to address any further concerns impacting your review.</p>"},{"location":"writings/rebuttals/#cmt-pdf","title":"CMT pdf","text":"<pre><code>% helper script\n\\usepackage[dvipsnames]{xcolor}\n\\newcommand{\\rtext}[1]{\\noindent \\textcolor{brown}{\\textbf{\\underline{#1}}}}\n\\newcounter{qcounter}\n\\setcounter{qcounter}{1}\n\\newcommand{\\qtext}[1]{\\noindent \\textcolor{blue}{\\textbf{Q\\theqcounter\\stepcounter{qcounter}: #1}}}\n\n% in document\nWe thank all the reviewers for their efforts in reviewing this manuscript and their constructive comments.\n\n\\rtext{Response to Reviewer \\#1}\n\n\\qtext{questions}\nreplies\n</code></pre>"},{"location":"writings/review/","title":"Review","text":""},{"location":"writings/review/#strengths","title":"strengths","text":"<ul> <li>In general, the paper is well-written and easy to follow.</li> <li>The proposed method is intuitive and reasonable for practical application.</li> <li>The experimental results demonstrate significant improvement over existing methods.</li> <li>The paper addresses an important research topic on ...</li> </ul>"},{"location":"writings/review/#weaknesses","title":"weaknesses","text":"<ul> <li>Some parts of the paper are difficult to understand, ...</li> <li></li> </ul>"},{"location":"writings/review/#post-rebuttal","title":"post rebuttal","text":"<p>After reading the other reviews and the rebuttal, I still remain at a reject rating.</p> <p>Regarding the rebuttal, I appreciate the authors statement regarding additional experiments, evaluations on more scans in the ablation study, mentioning limitations/failure cases and the revision of the text quality. However, the respective revisions need to be checked again as detailed insights have not been provided.</p> <p>The statements of following \"single-view reconstruction\" remain misleading as the authors also mention that additional hardware (such as a LiDAR scanner) is required. While the major benefit of the presented technique seems a better usage of depth information in comparison to other approaches, the respective target scenario is not convincingly clarified.</p> <p>As a result, the current version of the manuscript still needs significant modifications and is not yet ready to publish in my opinion.</p>"},{"location":"writings/societal_impact/","title":"Societal impact","text":"<ul> <li>This project aims to provide users with an effective tool for synthesizing personal subjects (animals, objects) in different contexts. While general text-to-image models might be biased towards specific attributes when synthesizing images from text, our approach enables the user to get a better reconstruction of their desirable subjects. On contrary, malicious parties might try to use such images to mislead viewers. This is a common issue, existing in other generative models approaches or content manipulation techniques. Future research in generative modeling, and specifically of personalized generative priors, must continue investigating and revalidating these concerns.</li> </ul> <ul> <li>Our method has the potential for negative impact if used to create deepfakes. Using voice cloning, a malicious actor can create videos enabling identity theft or dissemination of fake news. However, in controlled settings, SPACEx can be used for positive creative purposes.</li> </ul>"},{"location":"writings/tables/","title":"Tables","text":"<ul> <li> <p>We highlight the top 3 results in each column are color coded as Top 1, Top 2 and Top 3.</p> </li> </ul>"}]}